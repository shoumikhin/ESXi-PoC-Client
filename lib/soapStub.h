/* soapStub.h
   Generated by gSOAP 2.8.2 from ../vim25/vim.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"urn:vim25"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns1__ObjectUpdateKind
#define SOAP_TYPE_ns1__ObjectUpdateKind (3239)
/* ns1:ObjectUpdateKind */
enum ns1__ObjectUpdateKind {ns1__ObjectUpdateKind__modify = 0, ns1__ObjectUpdateKind__enter = 1, ns1__ObjectUpdateKind__leave = 2};
#endif

#ifndef SOAP_TYPE_ns1__PropertyChangeOp
#define SOAP_TYPE_ns1__PropertyChangeOp (3241)
/* ns1:PropertyChangeOp */
enum ns1__PropertyChangeOp {ns1__PropertyChangeOp__add = 0, ns1__PropertyChangeOp__remove = 1, ns1__PropertyChangeOp__assign = 2, ns1__PropertyChangeOp__indirectRemove = 3};
#endif

#ifndef SOAP_TYPE_ns1__ConfigSpecOperation
#define SOAP_TYPE_ns1__ConfigSpecOperation (3243)
/* ns1:ConfigSpecOperation */
enum ns1__ConfigSpecOperation {ns1__ConfigSpecOperation__add = 0, ns1__ConfigSpecOperation__edit = 1, ns1__ConfigSpecOperation__remove = 2};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreAccessible
#define SOAP_TYPE_ns1__DatastoreAccessible (3245)
/* ns1:DatastoreAccessible */
enum ns1__DatastoreAccessible {ns1__DatastoreAccessible__True = 0, ns1__DatastoreAccessible__False = 1};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogCreator
#define SOAP_TYPE_ns1__DiagnosticManagerLogCreator (3247)
/* ns1:DiagnosticManagerLogCreator */
enum ns1__DiagnosticManagerLogCreator {ns1__DiagnosticManagerLogCreator__vpxd = 0, ns1__DiagnosticManagerLogCreator__vpxa = 1, ns1__DiagnosticManagerLogCreator__hostd = 2, ns1__DiagnosticManagerLogCreator__serverd = 3, ns1__DiagnosticManagerLogCreator__install = 4, ns1__DiagnosticManagerLogCreator__vpxClient = 5, ns1__DiagnosticManagerLogCreator__recordLog = 6};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogFormat
#define SOAP_TYPE_ns1__DiagnosticManagerLogFormat (3249)
/* ns1:DiagnosticManagerLogFormat */
enum ns1__DiagnosticManagerLogFormat {ns1__DiagnosticManagerLogFormat__plain = 0};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpecOperationType
#define SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpecOperationType (3251)
/* ns1:DistributedVirtualSwitchProductSpecOperationType */
enum ns1__DistributedVirtualSwitchProductSpecOperationType {ns1__DistributedVirtualSwitchProductSpecOperationType__preInstall = 0, ns1__DistributedVirtualSwitchProductSpecOperationType__upgrade = 1, ns1__DistributedVirtualSwitchProductSpecOperationType__notifyAvailableUpgrade = 2, ns1__DistributedVirtualSwitchProductSpecOperationType__proceedWithUpgrade = 3, ns1__DistributedVirtualSwitchProductSpecOperationType__updateBundleInfo = 4};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchNicTeamingPolicyMode
#define SOAP_TYPE_ns1__DistributedVirtualSwitchNicTeamingPolicyMode (3253)
/* ns1:DistributedVirtualSwitchNicTeamingPolicyMode */
enum ns1__DistributedVirtualSwitchNicTeamingPolicyMode {ns1__DistributedVirtualSwitchNicTeamingPolicyMode__loadbalance_USCOREip = 0, ns1__DistributedVirtualSwitchNicTeamingPolicyMode__loadbalance_USCOREsrcmac = 1, ns1__DistributedVirtualSwitchNicTeamingPolicyMode__loadbalance_USCOREsrcid = 2, ns1__DistributedVirtualSwitchNicTeamingPolicyMode__failover_USCOREexplicit = 3, ns1__DistributedVirtualSwitchNicTeamingPolicyMode__loadbalance_USCOREloadbased = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemConnectionState
#define SOAP_TYPE_ns1__HostSystemConnectionState (3255)
/* ns1:HostSystemConnectionState */
enum ns1__HostSystemConnectionState {ns1__HostSystemConnectionState__connected = 0, ns1__HostSystemConnectionState__notResponding = 1, ns1__HostSystemConnectionState__disconnected = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemPowerState
#define SOAP_TYPE_ns1__HostSystemPowerState (3257)
/* ns1:HostSystemPowerState */
enum ns1__HostSystemPowerState {ns1__HostSystemPowerState__poweredOn = 0, ns1__HostSystemPowerState__poweredOff = 1, ns1__HostSystemPowerState__standBy = 2, ns1__HostSystemPowerState__unknown = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostStandbyMode
#define SOAP_TYPE_ns1__HostStandbyMode (3259)
/* ns1:HostStandbyMode */
enum ns1__HostStandbyMode {ns1__HostStandbyMode__entering = 0, ns1__HostStandbyMode__exiting = 1, ns1__HostStandbyMode__in = 2, ns1__HostStandbyMode__none = 3};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseState
#define SOAP_TYPE_ns1__HttpNfcLeaseState (3261)
/* ns1:HttpNfcLeaseState */
enum ns1__HttpNfcLeaseState {ns1__HttpNfcLeaseState__initializing = 0, ns1__HttpNfcLeaseState__ready = 1, ns1__HttpNfcLeaseState__done = 2, ns1__HttpNfcLeaseState__error = 3};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerState
#define SOAP_TYPE_ns1__LicenseManagerState (3263)
/* ns1:LicenseManagerState */
enum ns1__LicenseManagerState {ns1__LicenseManagerState__initializing = 0, ns1__LicenseManagerState__normal = 1, ns1__LicenseManagerState__marginal = 2, ns1__LicenseManagerState__fault = 3};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerLicenseKey
#define SOAP_TYPE_ns1__LicenseManagerLicenseKey (3265)
/* ns1:LicenseManagerLicenseKey */
enum ns1__LicenseManagerLicenseKey {ns1__LicenseManagerLicenseKey__esxFull = 0, ns1__LicenseManagerLicenseKey__esxVmtn = 1, ns1__LicenseManagerLicenseKey__esxExpress = 2, ns1__LicenseManagerLicenseKey__san = 3, ns1__LicenseManagerLicenseKey__iscsi = 4, ns1__LicenseManagerLicenseKey__nas = 5, ns1__LicenseManagerLicenseKey__vsmp = 6, ns1__LicenseManagerLicenseKey__backup = 7, ns1__LicenseManagerLicenseKey__vc = 8, ns1__LicenseManagerLicenseKey__vcExpress = 9, ns1__LicenseManagerLicenseKey__esxHost = 10, ns1__LicenseManagerLicenseKey__gsxHost = 11, ns1__LicenseManagerLicenseKey__serverHost = 12, ns1__LicenseManagerLicenseKey__drsPower = 13, ns1__LicenseManagerLicenseKey__vmotion = 14, ns1__LicenseManagerLicenseKey__drs = 15, ns1__LicenseManagerLicenseKey__das = 16};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoUnit
#define SOAP_TYPE_ns1__LicenseFeatureInfoUnit (3267)
/* ns1:LicenseFeatureInfoUnit */
enum ns1__LicenseFeatureInfoUnit {ns1__LicenseFeatureInfoUnit__host = 0, ns1__LicenseFeatureInfoUnit__cpuCore = 1, ns1__LicenseFeatureInfoUnit__cpuPackage = 2, ns1__LicenseFeatureInfoUnit__server = 3, ns1__LicenseFeatureInfoUnit__vm = 4};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoState
#define SOAP_TYPE_ns1__LicenseFeatureInfoState (3269)
/* ns1:LicenseFeatureInfoState */
enum ns1__LicenseFeatureInfoState {ns1__LicenseFeatureInfoState__enabled = 0, ns1__LicenseFeatureInfoState__disabled = 1, ns1__LicenseFeatureInfoState__optional = 2};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoSourceRestriction
#define SOAP_TYPE_ns1__LicenseFeatureInfoSourceRestriction (3271)
/* ns1:LicenseFeatureInfoSourceRestriction */
enum ns1__LicenseFeatureInfoSourceRestriction {ns1__LicenseFeatureInfoSourceRestriction__unrestricted = 0, ns1__LicenseFeatureInfoSourceRestriction__served = 1, ns1__LicenseFeatureInfoSourceRestriction__file = 2};
#endif

#ifndef SOAP_TYPE_ns1__LicenseReservationInfoState
#define SOAP_TYPE_ns1__LicenseReservationInfoState (3273)
/* ns1:LicenseReservationInfoState */
enum ns1__LicenseReservationInfoState {ns1__LicenseReservationInfoState__notUsed = 0, ns1__LicenseReservationInfoState__noLicense = 1, ns1__LicenseReservationInfoState__unlicensedUse = 2, ns1__LicenseReservationInfoState__licensed = 3};
#endif

#ifndef SOAP_TYPE_ns1__ManagedEntityStatus
#define SOAP_TYPE_ns1__ManagedEntityStatus (3275)
/* ns1:ManagedEntityStatus */
enum ns1__ManagedEntityStatus {ns1__ManagedEntityStatus__gray = 0, ns1__ManagedEntityStatus__green = 1, ns1__ManagedEntityStatus__yellow = 2, ns1__ManagedEntityStatus__red = 3};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateImportSpecParamsDiskProvisioningType
#define SOAP_TYPE_ns1__OvfCreateImportSpecParamsDiskProvisioningType (3277)
/* ns1:OvfCreateImportSpecParamsDiskProvisioningType */
enum ns1__OvfCreateImportSpecParamsDiskProvisioningType {ns1__OvfCreateImportSpecParamsDiskProvisioningType__monolithicSparse = 0, ns1__OvfCreateImportSpecParamsDiskProvisioningType__monolithicFlat = 1, ns1__OvfCreateImportSpecParamsDiskProvisioningType__twoGbMaxExtentSparse = 2, ns1__OvfCreateImportSpecParamsDiskProvisioningType__twoGbMaxExtentFlat = 3, ns1__OvfCreateImportSpecParamsDiskProvisioningType__thin = 4, ns1__OvfCreateImportSpecParamsDiskProvisioningType__thick = 5, ns1__OvfCreateImportSpecParamsDiskProvisioningType__sparse = 6, ns1__OvfCreateImportSpecParamsDiskProvisioningType__flat = 7};
#endif

#ifndef SOAP_TYPE_ns1__PerfFormat
#define SOAP_TYPE_ns1__PerfFormat (3279)
/* ns1:PerfFormat */
enum ns1__PerfFormat {ns1__PerfFormat__normal = 0, ns1__PerfFormat__csv = 1};
#endif

#ifndef SOAP_TYPE_ns1__PerfSummaryType
#define SOAP_TYPE_ns1__PerfSummaryType (3281)
/* ns1:PerfSummaryType */
enum ns1__PerfSummaryType {ns1__PerfSummaryType__average = 0, ns1__PerfSummaryType__maximum = 1, ns1__PerfSummaryType__minimum = 2, ns1__PerfSummaryType__latest = 3, ns1__PerfSummaryType__summation = 4, ns1__PerfSummaryType__none = 5};
#endif

#ifndef SOAP_TYPE_ns1__PerfStatsType
#define SOAP_TYPE_ns1__PerfStatsType (3283)
/* ns1:PerfStatsType */
enum ns1__PerfStatsType {ns1__PerfStatsType__absolute = 0, ns1__PerfStatsType__delta = 1, ns1__PerfStatsType__rate = 2};
#endif

#ifndef SOAP_TYPE_ns1__PerformanceManagerUnit
#define SOAP_TYPE_ns1__PerformanceManagerUnit (3285)
/* ns1:PerformanceManagerUnit */
enum ns1__PerformanceManagerUnit {ns1__PerformanceManagerUnit__percent = 0, ns1__PerformanceManagerUnit__kiloBytes = 1, ns1__PerformanceManagerUnit__megaBytes = 2, ns1__PerformanceManagerUnit__megaHertz = 3, ns1__PerformanceManagerUnit__number = 4, ns1__PerformanceManagerUnit__microsecond = 5, ns1__PerformanceManagerUnit__millisecond = 6, ns1__PerformanceManagerUnit__second = 7, ns1__PerformanceManagerUnit__kiloBytesPerSecond = 8, ns1__PerformanceManagerUnit__megaBytesPerSecond = 9, ns1__PerformanceManagerUnit__watt = 10, ns1__PerformanceManagerUnit__joule = 11};
#endif

#ifndef SOAP_TYPE_ns1__ValidateMigrationTestType
#define SOAP_TYPE_ns1__ValidateMigrationTestType (3287)
/* ns1:ValidateMigrationTestType */
enum ns1__ValidateMigrationTestType {ns1__ValidateMigrationTestType__sourceTests = 0, ns1__ValidateMigrationTestType__compatibilityTests = 1, ns1__ValidateMigrationTestType__diskAccessibilityTests = 2, ns1__ValidateMigrationTestType__resourceTests = 3};
#endif

#ifndef SOAP_TYPE_ns1__VMotionCompatibilityType
#define SOAP_TYPE_ns1__VMotionCompatibilityType (3289)
/* ns1:VMotionCompatibilityType */
enum ns1__VMotionCompatibilityType {ns1__VMotionCompatibilityType__cpu = 0, ns1__VMotionCompatibilityType__software = 1};
#endif

#ifndef SOAP_TYPE_ns1__SharesLevel
#define SOAP_TYPE_ns1__SharesLevel (3291)
/* ns1:SharesLevel */
enum ns1__SharesLevel {ns1__SharesLevel__low = 0, ns1__SharesLevel__normal = 1, ns1__SharesLevel__high = 2, ns1__SharesLevel__custom = 3};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecRecursionOption
#define SOAP_TYPE_ns1__TaskFilterSpecRecursionOption (3293)
/* ns1:TaskFilterSpecRecursionOption */
enum ns1__TaskFilterSpecRecursionOption {ns1__TaskFilterSpecRecursionOption__self = 0, ns1__TaskFilterSpecRecursionOption__children = 1, ns1__TaskFilterSpecRecursionOption__all = 2};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecTimeOption
#define SOAP_TYPE_ns1__TaskFilterSpecTimeOption (3295)
/* ns1:TaskFilterSpecTimeOption */
enum ns1__TaskFilterSpecTimeOption {ns1__TaskFilterSpecTimeOption__queuedTime = 0, ns1__TaskFilterSpecTimeOption__startedTime = 1, ns1__TaskFilterSpecTimeOption__completedTime = 2};
#endif

#ifndef SOAP_TYPE_ns1__TaskInfoState
#define SOAP_TYPE_ns1__TaskInfoState (3297)
/* ns1:TaskInfoState */
enum ns1__TaskInfoState {ns1__TaskInfoState__queued = 0, ns1__TaskInfoState__running = 1, ns1__TaskInfoState__success = 2, ns1__TaskInfoState__error = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualAppVAppState
#define SOAP_TYPE_ns1__VirtualAppVAppState (3299)
/* ns1:VirtualAppVAppState */
enum ns1__VirtualAppVAppState {ns1__VirtualAppVAppState__started = 0, ns1__VirtualAppVAppState__stopped = 1, ns1__VirtualAppVAppState__starting = 2, ns1__VirtualAppVAppState__stopping = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskType
#define SOAP_TYPE_ns1__VirtualDiskType (3301)
/* ns1:VirtualDiskType */
enum ns1__VirtualDiskType {ns1__VirtualDiskType__preallocated = 0, ns1__VirtualDiskType__thin = 1, ns1__VirtualDiskType__rdm = 2, ns1__VirtualDiskType__rdmp = 3, ns1__VirtualDiskType__raw = 4, ns1__VirtualDiskType__sparse2Gb = 5, ns1__VirtualDiskType__thick2Gb = 6, ns1__VirtualDiskType__eagerZeroedThick = 7, ns1__VirtualDiskType__sparseMonolithic = 8, ns1__VirtualDiskType__flatMonolithic = 9, ns1__VirtualDiskType__thick = 10};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskAdapterType
#define SOAP_TYPE_ns1__VirtualDiskAdapterType (3303)
/* ns1:VirtualDiskAdapterType */
enum ns1__VirtualDiskAdapterType {ns1__VirtualDiskAdapterType__ide = 0, ns1__VirtualDiskAdapterType__busLogic = 1, ns1__VirtualDiskAdapterType__lsiLogic = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerState
#define SOAP_TYPE_ns1__VirtualMachinePowerState (3305)
/* ns1:VirtualMachinePowerState */
enum ns1__VirtualMachinePowerState {ns1__VirtualMachinePowerState__poweredOff = 0, ns1__VirtualMachinePowerState__poweredOn = 1, ns1__VirtualMachinePowerState__suspended = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineAppHeartbeatStatusType
#define SOAP_TYPE_ns1__VirtualMachineAppHeartbeatStatusType (3307)
/* ns1:VirtualMachineAppHeartbeatStatusType */
enum ns1__VirtualMachineAppHeartbeatStatusType {ns1__VirtualMachineAppHeartbeatStatusType__appStatusGray = 0, ns1__VirtualMachineAppHeartbeatStatusType__appStatusGreen = 1, ns1__VirtualMachineAppHeartbeatStatusType__appStatusRed = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConnectionState
#define SOAP_TYPE_ns1__VirtualMachineConnectionState (3309)
/* ns1:VirtualMachineConnectionState */
enum ns1__VirtualMachineConnectionState {ns1__VirtualMachineConnectionState__connected = 0, ns1__VirtualMachineConnectionState__disconnected = 1, ns1__VirtualMachineConnectionState__orphaned = 2, ns1__VirtualMachineConnectionState__inaccessible = 3, ns1__VirtualMachineConnectionState__invalid = 4};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMovePriority
#define SOAP_TYPE_ns1__VirtualMachineMovePriority (3311)
/* ns1:VirtualMachineMovePriority */
enum ns1__VirtualMachineMovePriority {ns1__VirtualMachineMovePriority__lowPriority = 0, ns1__VirtualMachineMovePriority__highPriority = 1, ns1__VirtualMachineMovePriority__defaultPriority = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFaultToleranceState
#define SOAP_TYPE_ns1__VirtualMachineFaultToleranceState (3313)
/* ns1:VirtualMachineFaultToleranceState */
enum ns1__VirtualMachineFaultToleranceState {ns1__VirtualMachineFaultToleranceState__notConfigured = 0, ns1__VirtualMachineFaultToleranceState__disabled = 1, ns1__VirtualMachineFaultToleranceState__enabled = 2, ns1__VirtualMachineFaultToleranceState__needSecondary = 3, ns1__VirtualMachineFaultToleranceState__starting = 4, ns1__VirtualMachineFaultToleranceState__running = 5};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRecordReplayState
#define SOAP_TYPE_ns1__VirtualMachineRecordReplayState (3315)
/* ns1:VirtualMachineRecordReplayState */
enum ns1__VirtualMachineRecordReplayState {ns1__VirtualMachineRecordReplayState__recording = 0, ns1__VirtualMachineRecordReplayState__replaying = 1, ns1__VirtualMachineRecordReplayState__inactive = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineNeedSecondaryReason
#define SOAP_TYPE_ns1__VirtualMachineNeedSecondaryReason (3317)
/* ns1:VirtualMachineNeedSecondaryReason */
enum ns1__VirtualMachineNeedSecondaryReason {ns1__VirtualMachineNeedSecondaryReason__initializing = 0, ns1__VirtualMachineNeedSecondaryReason__divergence = 1, ns1__VirtualMachineNeedSecondaryReason__lostConnection = 2, ns1__VirtualMachineNeedSecondaryReason__partialHardwareFailure = 3, ns1__VirtualMachineNeedSecondaryReason__userAction = 4, ns1__VirtualMachineNeedSecondaryReason__other = 5};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTicketType
#define SOAP_TYPE_ns1__VirtualMachineTicketType (3319)
/* ns1:VirtualMachineTicketType */
enum ns1__VirtualMachineTicketType {ns1__VirtualMachineTicketType__mks = 0, ns1__VirtualMachineTicketType__device = 1, ns1__VirtualMachineTicketType__guestControl = 2};
#endif

#ifndef SOAP_TYPE_ns1__ActionParameter
#define SOAP_TYPE_ns1__ActionParameter (3321)
/* ns1:ActionParameter */
enum ns1__ActionParameter {ns1__ActionParameter__targetName = 0, ns1__ActionParameter__alarmName = 1, ns1__ActionParameter__oldStatus = 2, ns1__ActionParameter__newStatus = 3, ns1__ActionParameter__triggeringSummary = 4, ns1__ActionParameter__declaringSummary = 5, ns1__ActionParameter__eventDescription = 6, ns1__ActionParameter__target = 7, ns1__ActionParameter__alarm = 8};
#endif

#ifndef SOAP_TYPE_ns1__StateAlarmOperator
#define SOAP_TYPE_ns1__StateAlarmOperator (3323)
/* ns1:StateAlarmOperator */
enum ns1__StateAlarmOperator {ns1__StateAlarmOperator__isEqual = 0, ns1__StateAlarmOperator__isUnequal = 1};
#endif

#ifndef SOAP_TYPE_ns1__EventAlarmExpressionComparisonOperator
#define SOAP_TYPE_ns1__EventAlarmExpressionComparisonOperator (3325)
/* ns1:EventAlarmExpressionComparisonOperator */
enum ns1__EventAlarmExpressionComparisonOperator {ns1__EventAlarmExpressionComparisonOperator__equals = 0, ns1__EventAlarmExpressionComparisonOperator__notEqualTo = 1, ns1__EventAlarmExpressionComparisonOperator__startsWith = 2, ns1__EventAlarmExpressionComparisonOperator__doesNotStartWith = 3, ns1__EventAlarmExpressionComparisonOperator__endsWith = 4, ns1__EventAlarmExpressionComparisonOperator__doesNotEndWith = 5};
#endif

#ifndef SOAP_TYPE_ns1__MetricAlarmOperator
#define SOAP_TYPE_ns1__MetricAlarmOperator (3327)
/* ns1:MetricAlarmOperator */
enum ns1__MetricAlarmOperator {ns1__MetricAlarmOperator__isAbove = 0, ns1__MetricAlarmOperator__isBelow = 1};
#endif

#ifndef SOAP_TYPE_ns1__ActionType
#define SOAP_TYPE_ns1__ActionType (3329)
/* ns1:ActionType */
enum ns1__ActionType {ns1__ActionType__MigrationV1 = 0, ns1__ActionType__VmPowerV1 = 1, ns1__ActionType__HostPowerV1 = 2};
#endif

#ifndef SOAP_TYPE_ns1__DrsBehavior
#define SOAP_TYPE_ns1__DrsBehavior (3331)
/* ns1:DrsBehavior */
enum ns1__DrsBehavior {ns1__DrsBehavior__manual = 0, ns1__DrsBehavior__partiallyAutomated = 1, ns1__DrsBehavior__fullyAutomated = 2};
#endif

#ifndef SOAP_TYPE_ns1__DpmBehavior
#define SOAP_TYPE_ns1__DpmBehavior (3333)
/* ns1:DpmBehavior */
enum ns1__DpmBehavior {ns1__DpmBehavior__manual = 0, ns1__DpmBehavior__automated = 1};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAamNodeStateDasState
#define SOAP_TYPE_ns1__ClusterDasAamNodeStateDasState (3335)
/* ns1:ClusterDasAamNodeStateDasState */
enum ns1__ClusterDasAamNodeStateDasState {ns1__ClusterDasAamNodeStateDasState__uninitialized = 0, ns1__ClusterDasAamNodeStateDasState__initialized = 1, ns1__ClusterDasAamNodeStateDasState__configuring = 2, ns1__ClusterDasAamNodeStateDasState__unconfiguring = 3, ns1__ClusterDasAamNodeStateDasState__running = 4, ns1__ClusterDasAamNodeStateDasState__error = 5, ns1__ClusterDasAamNodeStateDasState__agentShutdown = 6, ns1__ClusterDasAamNodeStateDasState__nodeFailed = 7};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasConfigInfoServiceState
#define SOAP_TYPE_ns1__ClusterDasConfigInfoServiceState (3337)
/* ns1:ClusterDasConfigInfoServiceState */
enum ns1__ClusterDasConfigInfoServiceState {ns1__ClusterDasConfigInfoServiceState__disabled = 0, ns1__ClusterDasConfigInfoServiceState__enabled = 1};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasConfigInfoVmMonitoringState
#define SOAP_TYPE_ns1__ClusterDasConfigInfoVmMonitoringState (3339)
/* ns1:ClusterDasConfigInfoVmMonitoringState */
enum ns1__ClusterDasConfigInfoVmMonitoringState {ns1__ClusterDasConfigInfoVmMonitoringState__vmMonitoringDisabled = 0, ns1__ClusterDasConfigInfoVmMonitoringState__vmMonitoringOnly = 1, ns1__ClusterDasConfigInfoVmMonitoringState__vmAndAppMonitoring = 2};
#endif

#ifndef SOAP_TYPE_ns1__DasVmPriority
#define SOAP_TYPE_ns1__DasVmPriority (3341)
/* ns1:DasVmPriority */
enum ns1__DasVmPriority {ns1__DasVmPriority__disabled = 0, ns1__DasVmPriority__low = 1, ns1__DasVmPriority__medium = 2, ns1__DasVmPriority__high = 3};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmSettingsRestartPriority
#define SOAP_TYPE_ns1__ClusterDasVmSettingsRestartPriority (3343)
/* ns1:ClusterDasVmSettingsRestartPriority */
enum ns1__ClusterDasVmSettingsRestartPriority {ns1__ClusterDasVmSettingsRestartPriority__disabled = 0, ns1__ClusterDasVmSettingsRestartPriority__low = 1, ns1__ClusterDasVmSettingsRestartPriority__medium = 2, ns1__ClusterDasVmSettingsRestartPriority__high = 3, ns1__ClusterDasVmSettingsRestartPriority__clusterRestartPriority = 4};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmSettingsIsolationResponse
#define SOAP_TYPE_ns1__ClusterDasVmSettingsIsolationResponse (3345)
/* ns1:ClusterDasVmSettingsIsolationResponse */
enum ns1__ClusterDasVmSettingsIsolationResponse {ns1__ClusterDasVmSettingsIsolationResponse__none = 0, ns1__ClusterDasVmSettingsIsolationResponse__powerOff = 1, ns1__ClusterDasVmSettingsIsolationResponse__shutdown = 2, ns1__ClusterDasVmSettingsIsolationResponse__clusterIsolationResponse = 3};
#endif

#ifndef SOAP_TYPE_ns1__DrsRecommendationReasonCode
#define SOAP_TYPE_ns1__DrsRecommendationReasonCode (3347)
/* ns1:DrsRecommendationReasonCode */
enum ns1__DrsRecommendationReasonCode {ns1__DrsRecommendationReasonCode__fairnessCpuAvg = 0, ns1__DrsRecommendationReasonCode__fairnessMemAvg = 1, ns1__DrsRecommendationReasonCode__jointAffin = 2, ns1__DrsRecommendationReasonCode__antiAffin = 3, ns1__DrsRecommendationReasonCode__hostMaint = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostPowerOperationType
#define SOAP_TYPE_ns1__HostPowerOperationType (3349)
/* ns1:HostPowerOperationType */
enum ns1__HostPowerOperationType {ns1__HostPowerOperationType__powerOn = 0, ns1__HostPowerOperationType__powerOff = 1};
#endif

#ifndef SOAP_TYPE_ns1__ClusterPowerOnVmOption
#define SOAP_TYPE_ns1__ClusterPowerOnVmOption (3351)
/* ns1:ClusterPowerOnVmOption */
enum ns1__ClusterPowerOnVmOption {ns1__ClusterPowerOnVmOption__OverrideAutomationLevel = 0, ns1__ClusterPowerOnVmOption__ReserveResources = 1};
#endif

#ifndef SOAP_TYPE_ns1__RecommendationType
#define SOAP_TYPE_ns1__RecommendationType (3353)
/* ns1:RecommendationType */
enum ns1__RecommendationType {ns1__RecommendationType__V1 = 0};
#endif

#ifndef SOAP_TYPE_ns1__RecommendationReasonCode
#define SOAP_TYPE_ns1__RecommendationReasonCode (3355)
/* ns1:RecommendationReasonCode */
enum ns1__RecommendationReasonCode {ns1__RecommendationReasonCode__fairnessCpuAvg = 0, ns1__RecommendationReasonCode__fairnessMemAvg = 1, ns1__RecommendationReasonCode__jointAffin = 2, ns1__RecommendationReasonCode__antiAffin = 3, ns1__RecommendationReasonCode__hostMaint = 4, ns1__RecommendationReasonCode__enterStandby = 5, ns1__RecommendationReasonCode__reservationCpu = 6, ns1__RecommendationReasonCode__reservationMem = 7, ns1__RecommendationReasonCode__powerOnVm = 8, ns1__RecommendationReasonCode__powerSaving = 9, ns1__RecommendationReasonCode__increaseCapacity = 10, ns1__RecommendationReasonCode__checkResource = 11, ns1__RecommendationReasonCode__unreservedCapacity = 12, ns1__RecommendationReasonCode__vmHostHardAffinity = 13, ns1__RecommendationReasonCode__vmHostSoftAffinity = 14};
#endif

#ifndef SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork
#define SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork (3357)
/* ns1:DVPortStatusVmDirectPathGen2InactiveReasonNetwork */
enum ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork {ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork__portNptIncompatibleDvs = 0, ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork__portNptNoCompatibleNics = 1, ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork__portNptNoVirtualFunctionsAvailable = 2, ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork__portNptDisabledForPort = 3};
#endif

#ifndef SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther
#define SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther (3359)
/* ns1:DVPortStatusVmDirectPathGen2InactiveReasonOther */
enum ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther {ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther__portNptIncompatibleHost = 0, ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther__portNptIncompatibleConnectee = 1};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPortgroupPortgroupType
#define SOAP_TYPE_ns1__DistributedVirtualPortgroupPortgroupType (3361)
/* ns1:DistributedVirtualPortgroupPortgroupType */
enum ns1__DistributedVirtualPortgroupPortgroupType {ns1__DistributedVirtualPortgroupPortgroupType__earlyBinding = 0, ns1__DistributedVirtualPortgroupPortgroupType__lateBinding = 1, ns1__DistributedVirtualPortgroupPortgroupType__ephemeral = 2};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPortgroupMetaTagName
#define SOAP_TYPE_ns1__DistributedVirtualPortgroupMetaTagName (3363)
/* ns1:DistributedVirtualPortgroupMetaTagName */
enum ns1__DistributedVirtualPortgroupMetaTagName {ns1__DistributedVirtualPortgroupMetaTagName__dvsName = 0, ns1__DistributedVirtualPortgroupMetaTagName__portgroupName = 1, ns1__DistributedVirtualPortgroupMetaTagName__portIndex = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey
#define SOAP_TYPE_ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey (3365)
/* ns1:HostDistributedVirtualSwitchManagerNetworkResourcePoolKey */
enum ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey {ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__management = 0, ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__faultTolerance = 1, ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__vmotion = 2, ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__iSCSI = 3, ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__nfs = 4, ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey__virtualMachine = 5};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberHostComponentState
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberHostComponentState (3367)
/* ns1:DistributedVirtualSwitchHostMemberHostComponentState */
enum ns1__DistributedVirtualSwitchHostMemberHostComponentState {ns1__DistributedVirtualSwitchHostMemberHostComponentState__up = 0, ns1__DistributedVirtualSwitchHostMemberHostComponentState__pending = 1, ns1__DistributedVirtualSwitchHostMemberHostComponentState__outOfSync = 2, ns1__DistributedVirtualSwitchHostMemberHostComponentState__warning = 3, ns1__DistributedVirtualSwitchHostMemberHostComponentState__disconnected = 4, ns1__DistributedVirtualSwitchHostMemberHostComponentState__down = 5};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnecteeConnecteeType
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnecteeConnecteeType (3369)
/* ns1:DistributedVirtualSwitchPortConnecteeConnecteeType */
enum ns1__DistributedVirtualSwitchPortConnecteeConnecteeType {ns1__DistributedVirtualSwitchPortConnecteeConnecteeType__pnic = 0, ns1__DistributedVirtualSwitchPortConnecteeConnecteeType__vmVnic = 1, ns1__DistributedVirtualSwitchPortConnecteeConnecteeType__hostConsoleVnic = 2, ns1__DistributedVirtualSwitchPortConnecteeConnecteeType__hostVmkVnic = 3};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanPortType
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanPortType (3371)
/* ns1:VmwareDistributedVirtualSwitchPvlanPortType */
enum ns1__VmwareDistributedVirtualSwitchPvlanPortType {ns1__VmwareDistributedVirtualSwitchPvlanPortType__promiscuous = 0, ns1__VmwareDistributedVirtualSwitchPvlanPortType__isolated = 1, ns1__VmwareDistributedVirtualSwitchPvlanPortType__community = 2};
#endif

#ifndef SOAP_TYPE_ns1__EventEventSeverity
#define SOAP_TYPE_ns1__EventEventSeverity (3373)
/* ns1:EventEventSeverity */
enum ns1__EventEventSeverity {ns1__EventEventSeverity__error = 0, ns1__EventEventSeverity__warning = 1, ns1__EventEventSeverity__info = 2, ns1__EventEventSeverity__user = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostDisconnectedEventReasonCode
#define SOAP_TYPE_ns1__HostDisconnectedEventReasonCode (3375)
/* ns1:HostDisconnectedEventReasonCode */
enum ns1__HostDisconnectedEventReasonCode {ns1__HostDisconnectedEventReasonCode__sslThumbprintVerifyFailed = 0, ns1__HostDisconnectedEventReasonCode__licenseExpired = 1, ns1__HostDisconnectedEventReasonCode__agentUpgrade = 2, ns1__HostDisconnectedEventReasonCode__userRequest = 3, ns1__HostDisconnectedEventReasonCode__insufficientLicenses = 4, ns1__HostDisconnectedEventReasonCode__agentOutOfDate = 5, ns1__HostDisconnectedEventReasonCode__passwordDecryptFailure = 6, ns1__HostDisconnectedEventReasonCode__unknown = 7};
#endif

#ifndef SOAP_TYPE_ns1__HostDasErrorEventHostDasErrorReason
#define SOAP_TYPE_ns1__HostDasErrorEventHostDasErrorReason (3377)
/* ns1:HostDasErrorEventHostDasErrorReason */
enum ns1__HostDasErrorEventHostDasErrorReason {ns1__HostDasErrorEventHostDasErrorReason__configFailed = 0, ns1__HostDasErrorEventHostDasErrorReason__timeout = 1, ns1__HostDasErrorEventHostDasErrorReason__communicationInitFailed = 2, ns1__HostDasErrorEventHostDasErrorReason__healthCheckScriptFailed = 3, ns1__HostDasErrorEventHostDasErrorReason__agentFailed = 4, ns1__HostDasErrorEventHostDasErrorReason__agentShutdown = 5, ns1__HostDasErrorEventHostDasErrorReason__isolationAddressUnpingable = 6, ns1__HostDasErrorEventHostDasErrorReason__other = 7};
#endif

#ifndef SOAP_TYPE_ns1__VmShutdownOnIsolationEventOperation
#define SOAP_TYPE_ns1__VmShutdownOnIsolationEventOperation (3379)
/* ns1:VmShutdownOnIsolationEventOperation */
enum ns1__VmShutdownOnIsolationEventOperation {ns1__VmShutdownOnIsolationEventOperation__shutdown = 0, ns1__VmShutdownOnIsolationEventOperation__poweredOff = 1};
#endif

#ifndef SOAP_TYPE_ns1__VmDasBeingResetEventReasonCode
#define SOAP_TYPE_ns1__VmDasBeingResetEventReasonCode (3381)
/* ns1:VmDasBeingResetEventReasonCode */
enum ns1__VmDasBeingResetEventReasonCode {ns1__VmDasBeingResetEventReasonCode__vmtoolsHeartbeatFailure = 0, ns1__VmDasBeingResetEventReasonCode__appHeartbeatFailure = 1};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedStartingSecondaryEventFailureReason
#define SOAP_TYPE_ns1__VmFailedStartingSecondaryEventFailureReason (3383)
/* ns1:VmFailedStartingSecondaryEventFailureReason */
enum ns1__VmFailedStartingSecondaryEventFailureReason {ns1__VmFailedStartingSecondaryEventFailureReason__incompatibleHost = 0, ns1__VmFailedStartingSecondaryEventFailureReason__loginFailed = 1, ns1__VmFailedStartingSecondaryEventFailureReason__registerVmFailed = 2, ns1__VmFailedStartingSecondaryEventFailureReason__migrateFailed = 3};
#endif

#ifndef SOAP_TYPE_ns1__EventCategory
#define SOAP_TYPE_ns1__EventCategory (3385)
/* ns1:EventCategory */
enum ns1__EventCategory {ns1__EventCategory__info = 0, ns1__EventCategory__warning = 1, ns1__EventCategory__error = 2, ns1__EventCategory__user = 3};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpecRecursionOption
#define SOAP_TYPE_ns1__EventFilterSpecRecursionOption (3387)
/* ns1:EventFilterSpecRecursionOption */
enum ns1__EventFilterSpecRecursionOption {ns1__EventFilterSpecRecursionOption__self = 0, ns1__EventFilterSpecRecursionOption__children = 1, ns1__EventFilterSpecRecursionOption__all = 2};
#endif

#ifndef SOAP_TYPE_ns1__AffinityType
#define SOAP_TYPE_ns1__AffinityType (3389)
/* ns1:AffinityType */
enum ns1__AffinityType {ns1__AffinityType__memory = 0, ns1__AffinityType__cpu = 1};
#endif

#ifndef SOAP_TYPE_ns1__AgentInstallFailedReason
#define SOAP_TYPE_ns1__AgentInstallFailedReason (3391)
/* ns1:AgentInstallFailedReason */
enum ns1__AgentInstallFailedReason {ns1__AgentInstallFailedReason__NotEnoughSpaceOnDevice = 0, ns1__AgentInstallFailedReason__PrepareToUpgradeFailed = 1, ns1__AgentInstallFailedReason__AgentNotRunning = 2, ns1__AgentInstallFailedReason__AgentNotReachable = 3, ns1__AgentInstallFailedReason__InstallTimedout = 4, ns1__AgentInstallFailedReason__SignatureVerificationFailed = 5, ns1__AgentInstallFailedReason__AgentUploadFailed = 6, ns1__AgentInstallFailedReason__AgentUploadTimedout = 7, ns1__AgentInstallFailedReason__UnknownInstallerError = 8};
#endif

#ifndef SOAP_TYPE_ns1__CannotMoveFaultToleranceVmMoveType
#define SOAP_TYPE_ns1__CannotMoveFaultToleranceVmMoveType (3393)
/* ns1:CannotMoveFaultToleranceVmMoveType */
enum ns1__CannotMoveFaultToleranceVmMoveType {ns1__CannotMoveFaultToleranceVmMoveType__resourcePool = 0, ns1__CannotMoveFaultToleranceVmMoveType__cluster = 1};
#endif

#ifndef SOAP_TYPE_ns1__DasConfigFaultDasConfigFaultReason
#define SOAP_TYPE_ns1__DasConfigFaultDasConfigFaultReason (3395)
/* ns1:DasConfigFaultDasConfigFaultReason */
enum ns1__DasConfigFaultDasConfigFaultReason {ns1__DasConfigFaultDasConfigFaultReason__HostNetworkMisconfiguration = 0, ns1__DasConfigFaultDasConfigFaultReason__HostMisconfiguration = 1, ns1__DasConfigFaultDasConfigFaultReason__InsufficientPrivileges = 2, ns1__DasConfigFaultDasConfigFaultReason__NoPrimaryAgentAvailable = 3, ns1__DasConfigFaultDasConfigFaultReason__Other = 4};
#endif

#ifndef SOAP_TYPE_ns1__DeviceNotSupportedReason
#define SOAP_TYPE_ns1__DeviceNotSupportedReason (3397)
/* ns1:DeviceNotSupportedReason */
enum ns1__DeviceNotSupportedReason {ns1__DeviceNotSupportedReason__host = 0, ns1__DeviceNotSupportedReason__guest = 1};
#endif

#ifndef SOAP_TYPE_ns1__FtIssuesOnHostHostSelectionType
#define SOAP_TYPE_ns1__FtIssuesOnHostHostSelectionType (3399)
/* ns1:FtIssuesOnHostHostSelectionType */
enum ns1__FtIssuesOnHostHostSelectionType {ns1__FtIssuesOnHostHostSelectionType__user = 0, ns1__FtIssuesOnHostHostSelectionType__vc = 1, ns1__FtIssuesOnHostHostSelectionType__drs = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForFaultToleranceReason
#define SOAP_TYPE_ns1__HostIncompatibleForFaultToleranceReason (3401)
/* ns1:HostIncompatibleForFaultToleranceReason */
enum ns1__HostIncompatibleForFaultToleranceReason {ns1__HostIncompatibleForFaultToleranceReason__product = 0, ns1__HostIncompatibleForFaultToleranceReason__processor = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForRecordReplayReason
#define SOAP_TYPE_ns1__HostIncompatibleForRecordReplayReason (3403)
/* ns1:HostIncompatibleForRecordReplayReason */
enum ns1__HostIncompatibleForRecordReplayReason {ns1__HostIncompatibleForRecordReplayReason__product = 0, ns1__HostIncompatibleForRecordReplayReason__processor = 1};
#endif

#ifndef SOAP_TYPE_ns1__LicenseAssignmentFailedReason
#define SOAP_TYPE_ns1__LicenseAssignmentFailedReason (3405)
/* ns1:LicenseAssignmentFailedReason */
enum ns1__LicenseAssignmentFailedReason {ns1__LicenseAssignmentFailedReason__keyEntityMismatch = 0, ns1__LicenseAssignmentFailedReason__downgradeDisallowed = 1, ns1__LicenseAssignmentFailedReason__inventoryNotManageableByVirtualCenter = 2, ns1__LicenseAssignmentFailedReason__hostsUnmanageableByVirtualCenterWithoutLicenseServer = 3};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedDeviceForFTDeviceType
#define SOAP_TYPE_ns1__NotSupportedDeviceForFTDeviceType (3407)
/* ns1:NotSupportedDeviceForFTDeviceType */
enum ns1__NotSupportedDeviceForFTDeviceType {ns1__NotSupportedDeviceForFTDeviceType__virtualVmxnet3 = 0, ns1__NotSupportedDeviceForFTDeviceType__paraVirtualSCSIController = 1};
#endif

#ifndef SOAP_TYPE_ns1__NumVirtualCpusIncompatibleReason
#define SOAP_TYPE_ns1__NumVirtualCpusIncompatibleReason (3409)
/* ns1:NumVirtualCpusIncompatibleReason */
enum ns1__NumVirtualCpusIncompatibleReason {ns1__NumVirtualCpusIncompatibleReason__recordReplay = 0, ns1__NumVirtualCpusIncompatibleReason__faultTolerance = 1};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceConfigIssueReasonForIssue
#define SOAP_TYPE_ns1__VmFaultToleranceConfigIssueReasonForIssue (3411)
/* ns1:VmFaultToleranceConfigIssueReasonForIssue */
enum ns1__VmFaultToleranceConfigIssueReasonForIssue {ns1__VmFaultToleranceConfigIssueReasonForIssue__haNotEnabled = 0, ns1__VmFaultToleranceConfigIssueReasonForIssue__moreThanOneSecondary = 1, ns1__VmFaultToleranceConfigIssueReasonForIssue__recordReplayNotSupported = 2, ns1__VmFaultToleranceConfigIssueReasonForIssue__replayNotSupported = 3, ns1__VmFaultToleranceConfigIssueReasonForIssue__templateVm = 4, ns1__VmFaultToleranceConfigIssueReasonForIssue__multipleVCPU = 5, ns1__VmFaultToleranceConfigIssueReasonForIssue__hostInactive = 6, ns1__VmFaultToleranceConfigIssueReasonForIssue__ftUnsupportedHardware = 7, ns1__VmFaultToleranceConfigIssueReasonForIssue__ftUnsupportedProduct = 8, ns1__VmFaultToleranceConfigIssueReasonForIssue__missingVMotionNic = 9, ns1__VmFaultToleranceConfigIssueReasonForIssue__missingFTLoggingNic = 10, ns1__VmFaultToleranceConfigIssueReasonForIssue__thinDisk = 11, ns1__VmFaultToleranceConfigIssueReasonForIssue__verifySSLCertificateFlagNotSet = 12, ns1__VmFaultToleranceConfigIssueReasonForIssue__hasSnapshots = 13, ns1__VmFaultToleranceConfigIssueReasonForIssue__noConfig = 14, ns1__VmFaultToleranceConfigIssueReasonForIssue__ftSecondaryVm = 15, ns1__VmFaultToleranceConfigIssueReasonForIssue__hasLocalDisk = 16};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBackingDeviceType
#define SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBackingDeviceType (3413)
/* ns1:VmFaultToleranceInvalidFileBackingDeviceType */
enum ns1__VmFaultToleranceInvalidFileBackingDeviceType {ns1__VmFaultToleranceInvalidFileBackingDeviceType__virtualFloppy = 0, ns1__VmFaultToleranceInvalidFileBackingDeviceType__virtualCdrom = 1, ns1__VmFaultToleranceInvalidFileBackingDeviceType__virtualSerialPort = 2, ns1__VmFaultToleranceInvalidFileBackingDeviceType__virtualParallelPort = 3, ns1__VmFaultToleranceInvalidFileBackingDeviceType__virtualDisk = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostActiveDirectoryInfoDomainMembershipStatus
#define SOAP_TYPE_ns1__HostActiveDirectoryInfoDomainMembershipStatus (3415)
/* ns1:HostActiveDirectoryInfoDomainMembershipStatus */
enum ns1__HostActiveDirectoryInfoDomainMembershipStatus {ns1__HostActiveDirectoryInfoDomainMembershipStatus__unknown = 0, ns1__HostActiveDirectoryInfoDomainMembershipStatus__ok = 1, ns1__HostActiveDirectoryInfoDomainMembershipStatus__noServers = 2, ns1__HostActiveDirectoryInfoDomainMembershipStatus__clientTrustBroken = 3, ns1__HostActiveDirectoryInfoDomainMembershipStatus__serverTrustBroken = 4, ns1__HostActiveDirectoryInfoDomainMembershipStatus__inconsistentTrust = 5, ns1__HostActiveDirectoryInfoDomainMembershipStatus__otherProblem = 6};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartAction
#define SOAP_TYPE_ns1__AutoStartAction (3417)
/* ns1:AutoStartAction */
enum ns1__AutoStartAction {ns1__AutoStartAction__none = 0, ns1__AutoStartAction__systemDefault = 1, ns1__AutoStartAction__powerOn = 2, ns1__AutoStartAction__powerOff = 3, ns1__AutoStartAction__guestShutdown = 4, ns1__AutoStartAction__suspend = 5};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartWaitHeartbeatSetting
#define SOAP_TYPE_ns1__AutoStartWaitHeartbeatSetting (3419)
/* ns1:AutoStartWaitHeartbeatSetting */
enum ns1__AutoStartWaitHeartbeatSetting {ns1__AutoStartWaitHeartbeatSetting__yes = 0, ns1__AutoStartWaitHeartbeatSetting__no = 1, ns1__AutoStartWaitHeartbeatSetting__systemDefault = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostReplayUnsupportedReason
#define SOAP_TYPE_ns1__HostReplayUnsupportedReason (3421)
/* ns1:HostReplayUnsupportedReason */
enum ns1__HostReplayUnsupportedReason {ns1__HostReplayUnsupportedReason__incompatibleProduct = 0, ns1__HostReplayUnsupportedReason__incompatibleCpu = 1, ns1__HostReplayUnsupportedReason__hvDisabled = 2, ns1__HostReplayUnsupportedReason__cpuidLimitSet = 3, ns1__HostReplayUnsupportedReason__oldBIOS = 4, ns1__HostReplayUnsupportedReason__unknown = 5};
#endif

#ifndef SOAP_TYPE_ns1__HostCapabilityFtUnsupportedReason
#define SOAP_TYPE_ns1__HostCapabilityFtUnsupportedReason (3423)
/* ns1:HostCapabilityFtUnsupportedReason */
enum ns1__HostCapabilityFtUnsupportedReason {ns1__HostCapabilityFtUnsupportedReason__vMotionNotLicensed = 0, ns1__HostCapabilityFtUnsupportedReason__missingVMotionNic = 1, ns1__HostCapabilityFtUnsupportedReason__missingFTLoggingNic = 2, ns1__HostCapabilityFtUnsupportedReason__ftNotLicensed = 3, ns1__HostCapabilityFtUnsupportedReason__haAgentIssue = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostCapabilityVmDirectPathGen2UnsupportedReason
#define SOAP_TYPE_ns1__HostCapabilityVmDirectPathGen2UnsupportedReason (3425)
/* ns1:HostCapabilityVmDirectPathGen2UnsupportedReason */
enum ns1__HostCapabilityVmDirectPathGen2UnsupportedReason {ns1__HostCapabilityVmDirectPathGen2UnsupportedReason__hostNptIncompatibleProduct = 0, ns1__HostCapabilityVmDirectPathGen2UnsupportedReason__hostNptIncompatibleHardware = 1, ns1__HostCapabilityVmDirectPathGen2UnsupportedReason__hostNptDisabled = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigChangeMode
#define SOAP_TYPE_ns1__HostConfigChangeMode (3427)
/* ns1:HostConfigChangeMode */
enum ns1__HostConfigChangeMode {ns1__HostConfigChangeMode__modify = 0, ns1__HostConfigChangeMode__replace = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigChangeOperation
#define SOAP_TYPE_ns1__HostConfigChangeOperation (3429)
/* ns1:HostConfigChangeOperation */
enum ns1__HostConfigChangeOperation {ns1__HostConfigChangeOperation__add = 0, ns1__HostConfigChangeOperation__remove = 1, ns1__HostConfigChangeOperation__edit = 2};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticPartitionStorageType
#define SOAP_TYPE_ns1__DiagnosticPartitionStorageType (3431)
/* ns1:DiagnosticPartitionStorageType */
enum ns1__DiagnosticPartitionStorageType {ns1__DiagnosticPartitionStorageType__directAttached = 0, ns1__DiagnosticPartitionStorageType__networkAttached = 1};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticPartitionType
#define SOAP_TYPE_ns1__DiagnosticPartitionType (3433)
/* ns1:DiagnosticPartitionType */
enum ns1__DiagnosticPartitionType {ns1__DiagnosticPartitionType__singleHost = 0, ns1__DiagnosticPartitionType__multiHost = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionInfoType
#define SOAP_TYPE_ns1__HostDiskPartitionInfoType (3435)
/* ns1:HostDiskPartitionInfoType */
enum ns1__HostDiskPartitionInfoType {ns1__HostDiskPartitionInfoType__none = 0, ns1__HostDiskPartitionInfoType__vmfs = 1, ns1__HostDiskPartitionInfoType__linuxNative = 2, ns1__HostDiskPartitionInfoType__linuxSwap = 3, ns1__HostDiskPartitionInfoType__extended = 4, ns1__HostDiskPartitionInfoType__ntfs = 5, ns1__HostDiskPartitionInfoType__vmkDiagnostic = 6};
#endif

#ifndef SOAP_TYPE_ns1__HostFeatureVersionKey
#define SOAP_TYPE_ns1__HostFeatureVersionKey (3437)
/* ns1:HostFeatureVersionKey */
enum ns1__HostFeatureVersionKey {ns1__HostFeatureVersionKey__faultTolerance = 0};
#endif

#ifndef SOAP_TYPE_ns1__FileSystemMountInfoVStorageSupportStatus
#define SOAP_TYPE_ns1__FileSystemMountInfoVStorageSupportStatus (3439)
/* ns1:FileSystemMountInfoVStorageSupportStatus */
enum ns1__FileSystemMountInfoVStorageSupportStatus {ns1__FileSystemMountInfoVStorageSupportStatus__vStorageSupported = 0, ns1__FileSystemMountInfoVStorageSupportStatus__vStorageUnsupported = 1, ns1__FileSystemMountInfoVStorageSupportStatus__vStorageUnknown = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPowerManagementInfoPolicyType
#define SOAP_TYPE_ns1__HostCpuPowerManagementInfoPolicyType (3441)
/* ns1:HostCpuPowerManagementInfoPolicyType */
enum ns1__HostCpuPowerManagementInfoPolicyType {ns1__HostCpuPowerManagementInfoPolicyType__off = 0, ns1__HostCpuPowerManagementInfoPolicyType__staticPolicy = 1, ns1__HostCpuPowerManagementInfoPolicyType__dynamicPolicy = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPackageVendor
#define SOAP_TYPE_ns1__HostCpuPackageVendor (3443)
/* ns1:HostCpuPackageVendor */
enum ns1__HostCpuPackageVendor {ns1__HostCpuPackageVendor__unknown = 0, ns1__HostCpuPackageVendor__intel = 1, ns1__HostCpuPackageVendor__amd = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareElementStatus
#define SOAP_TYPE_ns1__HostHardwareElementStatus (3445)
/* ns1:HostHardwareElementStatus */
enum ns1__HostHardwareElementStatus {ns1__HostHardwareElementStatus__Unknown = 0, ns1__HostHardwareElementStatus__Green = 1, ns1__HostHardwareElementStatus__Yellow = 2, ns1__HostHardwareElementStatus__Red = 3};
#endif

#ifndef SOAP_TYPE_ns1__FibreChannelPortType
#define SOAP_TYPE_ns1__FibreChannelPortType (3447)
/* ns1:FibreChannelPortType */
enum ns1__FibreChannelPortType {ns1__FibreChannelPortType__fabric = 0, ns1__FibreChannelPortType__loop = 1, ns1__FibreChannelPortType__pointToPoint = 2, ns1__FibreChannelPortType__unknown = 3};
#endif

#ifndef SOAP_TYPE_ns1__InternetScsiSnsDiscoveryMethod
#define SOAP_TYPE_ns1__InternetScsiSnsDiscoveryMethod (3449)
/* ns1:InternetScsiSnsDiscoveryMethod */
enum ns1__InternetScsiSnsDiscoveryMethod {ns1__InternetScsiSnsDiscoveryMethod__isnsStatic = 0, ns1__InternetScsiSnsDiscoveryMethod__isnsDhcp = 1, ns1__InternetScsiSnsDiscoveryMethod__isnsSlp = 2};
#endif

#ifndef SOAP_TYPE_ns1__SlpDiscoveryMethod
#define SOAP_TYPE_ns1__SlpDiscoveryMethod (3451)
/* ns1:SlpDiscoveryMethod */
enum ns1__SlpDiscoveryMethod {ns1__SlpDiscoveryMethod__slpDhcp = 0, ns1__SlpDiscoveryMethod__slpAutoUnicast = 1, ns1__SlpDiscoveryMethod__slpAutoMulticast = 2, ns1__SlpDiscoveryMethod__slpManual = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaChapAuthenticationType
#define SOAP_TYPE_ns1__HostInternetScsiHbaChapAuthenticationType (3453)
/* ns1:HostInternetScsiHbaChapAuthenticationType */
enum ns1__HostInternetScsiHbaChapAuthenticationType {ns1__HostInternetScsiHbaChapAuthenticationType__chapProhibited = 0, ns1__HostInternetScsiHbaChapAuthenticationType__chapDiscouraged = 1, ns1__HostInternetScsiHbaChapAuthenticationType__chapPreferred = 2, ns1__HostInternetScsiHbaChapAuthenticationType__chapRequired = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDigestType
#define SOAP_TYPE_ns1__HostInternetScsiHbaDigestType (3455)
/* ns1:HostInternetScsiHbaDigestType */
enum ns1__HostInternetScsiHbaDigestType {ns1__HostInternetScsiHbaDigestType__digestProhibited = 0, ns1__HostInternetScsiHbaDigestType__digestDiscouraged = 1, ns1__HostInternetScsiHbaDigestType__digestPreferred = 2, ns1__HostInternetScsiHbaDigestType__digestRequired = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfigType
#define SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfigType (3457)
/* ns1:HostIpConfigIpV6AddressConfigType */
enum ns1__HostIpConfigIpV6AddressConfigType {ns1__HostIpConfigIpV6AddressConfigType__other = 0, ns1__HostIpConfigIpV6AddressConfigType__manual = 1, ns1__HostIpConfigIpV6AddressConfigType__dhcp = 2, ns1__HostIpConfigIpV6AddressConfigType__linklayer = 3, ns1__HostIpConfigIpV6AddressConfigType__random = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6AddressStatus
#define SOAP_TYPE_ns1__HostIpConfigIpV6AddressStatus (3459)
/* ns1:HostIpConfigIpV6AddressStatus */
enum ns1__HostIpConfigIpV6AddressStatus {ns1__HostIpConfigIpV6AddressStatus__preferred = 0, ns1__HostIpConfigIpV6AddressStatus__deprecated = 1, ns1__HostIpConfigIpV6AddressStatus__invalid = 2, ns1__HostIpConfigIpV6AddressStatus__inaccessible = 3, ns1__HostIpConfigIpV6AddressStatus__unknown = 4, ns1__HostIpConfigIpV6AddressStatus__tentative = 5, ns1__HostIpConfigIpV6AddressStatus__duplicate = 6};
#endif

#ifndef SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigProtocolType
#define SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigProtocolType (3461)
/* ns1:LinkDiscoveryProtocolConfigProtocolType */
enum ns1__LinkDiscoveryProtocolConfigProtocolType {ns1__LinkDiscoveryProtocolConfigProtocolType__cdp = 0, ns1__LinkDiscoveryProtocolConfigProtocolType__lldp = 1};
#endif

#ifndef SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigOperationType
#define SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigOperationType (3463)
/* ns1:LinkDiscoveryProtocolConfigOperationType */
enum ns1__LinkDiscoveryProtocolConfigOperationType {ns1__LinkDiscoveryProtocolConfigOperationType__none = 0, ns1__LinkDiscoveryProtocolConfigOperationType__listen = 1, ns1__LinkDiscoveryProtocolConfigOperationType__advertise = 2, ns1__LinkDiscoveryProtocolConfigOperationType__both = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostLowLevelProvisioningManagerReloadTarget
#define SOAP_TYPE_ns1__HostLowLevelProvisioningManagerReloadTarget (3465)
/* ns1:HostLowLevelProvisioningManagerReloadTarget */
enum ns1__HostLowLevelProvisioningManagerReloadTarget {ns1__HostLowLevelProvisioningManagerReloadTarget__currentConfig = 0, ns1__HostLowLevelProvisioningManagerReloadTarget__snapshotConfig = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMemoryAllocationPolicy
#define SOAP_TYPE_ns1__VirtualMachineMemoryAllocationPolicy (3467)
/* ns1:VirtualMachineMemoryAllocationPolicy */
enum ns1__VirtualMachineMemoryAllocationPolicy {ns1__VirtualMachineMemoryAllocationPolicy__swapNone = 0, ns1__VirtualMachineMemoryAllocationPolicy__swapSome = 1, ns1__VirtualMachineMemoryAllocationPolicy__swapMost = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostMountMode
#define SOAP_TYPE_ns1__HostMountMode (3469)
/* ns1:HostMountMode */
enum ns1__HostMountMode {ns1__HostMountMode__readWrite = 0, ns1__HostMountMode__readOnly = 1};
#endif

#ifndef SOAP_TYPE_ns1__MultipathState
#define SOAP_TYPE_ns1__MultipathState (3471)
/* ns1:MultipathState */
enum ns1__MultipathState {ns1__MultipathState__standby = 0, ns1__MultipathState__active = 1, ns1__MultipathState__disabled = 2, ns1__MultipathState__dead = 3, ns1__MultipathState__unknown = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostNumericSensorHealthState
#define SOAP_TYPE_ns1__HostNumericSensorHealthState (3473)
/* ns1:HostNumericSensorHealthState */
enum ns1__HostNumericSensorHealthState {ns1__HostNumericSensorHealthState__unknown = 0, ns1__HostNumericSensorHealthState__green = 1, ns1__HostNumericSensorHealthState__yellow = 2, ns1__HostNumericSensorHealthState__red = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostNumericSensorType
#define SOAP_TYPE_ns1__HostNumericSensorType (3475)
/* ns1:HostNumericSensorType */
enum ns1__HostNumericSensorType {ns1__HostNumericSensorType__fan = 0, ns1__HostNumericSensorType__power = 1, ns1__HostNumericSensorType__temperature = 2, ns1__HostNumericSensorType__voltage = 3, ns1__HostNumericSensorType__other = 4};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerReason
#define SOAP_TYPE_ns1__HostPatchManagerReason (3477)
/* ns1:HostPatchManagerReason */
enum ns1__HostPatchManagerReason {ns1__HostPatchManagerReason__obsoleted = 0, ns1__HostPatchManagerReason__missingPatch = 1, ns1__HostPatchManagerReason__missingLib = 2, ns1__HostPatchManagerReason__hasDependentPatch = 3, ns1__HostPatchManagerReason__conflictPatch = 4, ns1__HostPatchManagerReason__conflictLib = 5};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerIntegrityStatus
#define SOAP_TYPE_ns1__HostPatchManagerIntegrityStatus (3479)
/* ns1:HostPatchManagerIntegrityStatus */
enum ns1__HostPatchManagerIntegrityStatus {ns1__HostPatchManagerIntegrityStatus__validated = 0, ns1__HostPatchManagerIntegrityStatus__keyNotFound = 1, ns1__HostPatchManagerIntegrityStatus__keyRevoked = 2, ns1__HostPatchManagerIntegrityStatus__keyExpired = 3, ns1__HostPatchManagerIntegrityStatus__digestMismatch = 4, ns1__HostPatchManagerIntegrityStatus__notEnoughSignatures = 5, ns1__HostPatchManagerIntegrityStatus__validationError = 6};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerInstallState
#define SOAP_TYPE_ns1__HostPatchManagerInstallState (3481)
/* ns1:HostPatchManagerInstallState */
enum ns1__HostPatchManagerInstallState {ns1__HostPatchManagerInstallState__hostRestarted = 0, ns1__HostPatchManagerInstallState__imageActive = 1};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicVmDirectPathGen2SupportedMode
#define SOAP_TYPE_ns1__PhysicalNicVmDirectPathGen2SupportedMode (3483)
/* ns1:PhysicalNicVmDirectPathGen2SupportedMode */
enum ns1__PhysicalNicVmDirectPathGen2SupportedMode {ns1__PhysicalNicVmDirectPathGen2SupportedMode__upt = 0};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicResourcePoolSchedulerDisallowedReason
#define SOAP_TYPE_ns1__PhysicalNicResourcePoolSchedulerDisallowedReason (3485)
/* ns1:PhysicalNicResourcePoolSchedulerDisallowedReason */
enum ns1__PhysicalNicResourcePoolSchedulerDisallowedReason {ns1__PhysicalNicResourcePoolSchedulerDisallowedReason__userOptOut = 0, ns1__PhysicalNicResourcePoolSchedulerDisallowedReason__hardwareUnsupported = 1};
#endif

#ifndef SOAP_TYPE_ns1__PortGroupConnecteeType
#define SOAP_TYPE_ns1__PortGroupConnecteeType (3487)
/* ns1:PortGroupConnecteeType */
enum ns1__PortGroupConnecteeType {ns1__PortGroupConnecteeType__virtualMachine = 0, ns1__PortGroupConnecteeType__systemManagement = 1, ns1__PortGroupConnecteeType__host = 2, ns1__PortGroupConnecteeType__unknown = 3};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRuleDirection
#define SOAP_TYPE_ns1__HostFirewallRuleDirection (3489)
/* ns1:HostFirewallRuleDirection */
enum ns1__HostFirewallRuleDirection {ns1__HostFirewallRuleDirection__inbound = 0, ns1__HostFirewallRuleDirection__outbound = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRuleProtocol
#define SOAP_TYPE_ns1__HostFirewallRuleProtocol (3491)
/* ns1:HostFirewallRuleProtocol */
enum ns1__HostFirewallRuleProtocol {ns1__HostFirewallRuleProtocol__tcp = 0, ns1__HostFirewallRuleProtocol__udp = 1};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunType
#define SOAP_TYPE_ns1__ScsiLunType (3493)
/* ns1:ScsiLunType */
enum ns1__ScsiLunType {ns1__ScsiLunType__disk = 0, ns1__ScsiLunType__tape = 1, ns1__ScsiLunType__printer = 2, ns1__ScsiLunType__processor = 3, ns1__ScsiLunType__worm = 4, ns1__ScsiLunType__cdrom = 5, ns1__ScsiLunType__scanner = 6, ns1__ScsiLunType__opticalDevice = 7, ns1__ScsiLunType__mediaChanger = 8, ns1__ScsiLunType__communications = 9, ns1__ScsiLunType__storageArrayController = 10, ns1__ScsiLunType__enclosure = 11, ns1__ScsiLunType__unknown = 12};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunState
#define SOAP_TYPE_ns1__ScsiLunState (3495)
/* ns1:ScsiLunState */
enum ns1__ScsiLunState {ns1__ScsiLunState__unknownState = 0, ns1__ScsiLunState__ok = 1, ns1__ScsiLunState__error = 2, ns1__ScsiLunState__off = 3, ns1__ScsiLunState__quiesced = 4, ns1__ScsiLunState__degraded = 5, ns1__ScsiLunState__lostCommunication = 6};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunDescriptorQuality
#define SOAP_TYPE_ns1__ScsiLunDescriptorQuality (3497)
/* ns1:ScsiLunDescriptorQuality */
enum ns1__ScsiLunDescriptorQuality {ns1__ScsiLunDescriptorQuality__highQuality = 0, ns1__ScsiLunDescriptorQuality__mediumQuality = 1, ns1__ScsiLunDescriptorQuality__lowQuality = 2, ns1__ScsiLunDescriptorQuality__unknownQuality = 3};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunVStorageSupportStatus
#define SOAP_TYPE_ns1__ScsiLunVStorageSupportStatus (3499)
/* ns1:ScsiLunVStorageSupportStatus */
enum ns1__ScsiLunVStorageSupportStatus {ns1__ScsiLunVStorageSupportStatus__vStorageSupported = 0, ns1__ScsiLunVStorageSupportStatus__vStorageUnsupported = 1, ns1__ScsiLunVStorageSupportStatus__vStorageUnknown = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostServicePolicy
#define SOAP_TYPE_ns1__HostServicePolicy (3501)
/* ns1:HostServicePolicy */
enum ns1__HostServicePolicy {ns1__HostServicePolicy__on = 0, ns1__HostServicePolicy__automatic = 1, ns1__HostServicePolicy__off = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostSnmpAgentCapability
#define SOAP_TYPE_ns1__HostSnmpAgentCapability (3503)
/* ns1:HostSnmpAgentCapability */
enum ns1__HostSnmpAgentCapability {ns1__HostSnmpAgentCapability__COMPLETE = 0, ns1__HostSnmpAgentCapability__DIAGNOSTICS = 1, ns1__HostSnmpAgentCapability__CONFIGURATION = 2};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemIdentificationInfoIdentifier
#define SOAP_TYPE_ns1__HostSystemIdentificationInfoIdentifier (3505)
/* ns1:HostSystemIdentificationInfoIdentifier */
enum ns1__HostSystemIdentificationInfoIdentifier {ns1__HostSystemIdentificationInfoIdentifier__AssetTag = 0, ns1__HostSystemIdentificationInfoIdentifier__ServiceTag = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostDigestInfoDigestMethodType
#define SOAP_TYPE_ns1__HostDigestInfoDigestMethodType (3507)
/* ns1:HostDigestInfoDigestMethodType */
enum ns1__HostDigestInfoDigestMethodType {ns1__HostDigestInfoDigestMethodType__SHA1 = 0, ns1__HostDigestInfoDigestMethodType__MD5 = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsExtentUnresolvedReason
#define SOAP_TYPE_ns1__HostUnresolvedVmfsExtentUnresolvedReason (3509)
/* ns1:HostUnresolvedVmfsExtentUnresolvedReason */
enum ns1__HostUnresolvedVmfsExtentUnresolvedReason {ns1__HostUnresolvedVmfsExtentUnresolvedReason__diskIdMismatch = 0, ns1__HostUnresolvedVmfsExtentUnresolvedReason__uuidConflict = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution
#define SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution (3511)
/* ns1:HostUnresolvedVmfsResolutionSpecVmfsUuidResolution */
enum ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution {ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution__resignature = 0, ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution__forceMount = 1};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicManagerNicType
#define SOAP_TYPE_ns1__HostVirtualNicManagerNicType (3513)
/* ns1:HostVirtualNicManagerNicType */
enum ns1__HostVirtualNicManagerNicType {ns1__HostVirtualNicManagerNicType__vmotion = 0, ns1__HostVirtualNicManagerNicType__faultToleranceLogging = 1, ns1__HostVirtualNicManagerNicType__management = 2};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfoIpAddressOrigin
#define SOAP_TYPE_ns1__NetIpConfigInfoIpAddressOrigin (3515)
/* ns1:NetIpConfigInfoIpAddressOrigin */
enum ns1__NetIpConfigInfoIpAddressOrigin {ns1__NetIpConfigInfoIpAddressOrigin__other = 0, ns1__NetIpConfigInfoIpAddressOrigin__manual = 1, ns1__NetIpConfigInfoIpAddressOrigin__dhcp = 2, ns1__NetIpConfigInfoIpAddressOrigin__linklayer = 3, ns1__NetIpConfigInfoIpAddressOrigin__random = 4};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfoIpAddressStatus
#define SOAP_TYPE_ns1__NetIpConfigInfoIpAddressStatus (3517)
/* ns1:NetIpConfigInfoIpAddressStatus */
enum ns1__NetIpConfigInfoIpAddressStatus {ns1__NetIpConfigInfoIpAddressStatus__preferred = 0, ns1__NetIpConfigInfoIpAddressStatus__deprecated = 1, ns1__NetIpConfigInfoIpAddressStatus__invalid = 2, ns1__NetIpConfigInfoIpAddressStatus__inaccessible = 3, ns1__NetIpConfigInfoIpAddressStatus__unknown = 4, ns1__NetIpConfigInfoIpAddressStatus__tentative = 5, ns1__NetIpConfigInfoIpAddressStatus__duplicate = 6};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoEntryType
#define SOAP_TYPE_ns1__NetIpStackInfoEntryType (3519)
/* ns1:NetIpStackInfoEntryType */
enum ns1__NetIpStackInfoEntryType {ns1__NetIpStackInfoEntryType__other = 0, ns1__NetIpStackInfoEntryType__invalid = 1, ns1__NetIpStackInfoEntryType__dynamic = 2, ns1__NetIpStackInfoEntryType__manual = 3};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoPreference
#define SOAP_TYPE_ns1__NetIpStackInfoPreference (3521)
/* ns1:NetIpStackInfoPreference */
enum ns1__NetIpStackInfoPreference {ns1__NetIpStackInfoPreference__reserved = 0, ns1__NetIpStackInfoPreference__low = 1, ns1__NetIpStackInfoPreference__medium = 2, ns1__NetIpStackInfoPreference__high = 3};
#endif

#ifndef SOAP_TYPE_ns1__NetBIOSConfigInfoMode
#define SOAP_TYPE_ns1__NetBIOSConfigInfoMode (3523)
/* ns1:NetBIOSConfigInfoMode */
enum ns1__NetBIOSConfigInfoMode {ns1__NetBIOSConfigInfoMode__unknown = 0, ns1__NetBIOSConfigInfoMode__enabled = 1, ns1__NetBIOSConfigInfoMode__disabled = 2, ns1__NetBIOSConfigInfoMode__enabledViaDHCP = 3};
#endif

#ifndef SOAP_TYPE_ns1__ArrayUpdateOperation
#define SOAP_TYPE_ns1__ArrayUpdateOperation (3525)
/* ns1:ArrayUpdateOperation */
enum ns1__ArrayUpdateOperation {ns1__ArrayUpdateOperation__add = 0, ns1__ArrayUpdateOperation__remove = 1, ns1__ArrayUpdateOperation__edit = 2};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceResultStatus
#define SOAP_TYPE_ns1__ComplianceResultStatus (3527)
/* ns1:ComplianceResultStatus */
enum ns1__ComplianceResultStatus {ns1__ComplianceResultStatus__compliant = 0, ns1__ComplianceResultStatus__nonCompliant = 1, ns1__ComplianceResultStatus__unknown = 2};
#endif

#ifndef SOAP_TYPE_ns1__ProfileNumericComparator
#define SOAP_TYPE_ns1__ProfileNumericComparator (3529)
/* ns1:ProfileNumericComparator */
enum ns1__ProfileNumericComparator {ns1__ProfileNumericComparator__lessThan = 0, ns1__ProfileNumericComparator__lessThanEqual = 1, ns1__ProfileNumericComparator__equal = 2, ns1__ProfileNumericComparator__notEqual = 3, ns1__ProfileNumericComparator__greaterThanEqual = 4, ns1__ProfileNumericComparator__greaterThan = 5};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileServiceType
#define SOAP_TYPE_ns1__ClusterProfileServiceType (3531)
/* ns1:ClusterProfileServiceType */
enum ns1__ClusterProfileServiceType {ns1__ClusterProfileServiceType__DRS = 0, ns1__ClusterProfileServiceType__HA = 1, ns1__ClusterProfileServiceType__DPM = 2, ns1__ClusterProfileServiceType__FT = 3};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExecuteResultStatus
#define SOAP_TYPE_ns1__ProfileExecuteResultStatus (3533)
/* ns1:ProfileExecuteResultStatus */
enum ns1__ProfileExecuteResultStatus {ns1__ProfileExecuteResultStatus__success = 0, ns1__ProfileExecuteResultStatus__needInput = 1, ns1__ProfileExecuteResultStatus__error = 2};
#endif

#ifndef SOAP_TYPE_ns1__DayOfWeek
#define SOAP_TYPE_ns1__DayOfWeek (3535)
/* ns1:DayOfWeek */
enum ns1__DayOfWeek {ns1__DayOfWeek__sunday = 0, ns1__DayOfWeek__monday = 1, ns1__DayOfWeek__tuesday = 2, ns1__DayOfWeek__wednesday = 3, ns1__DayOfWeek__thursday = 4, ns1__DayOfWeek__friday = 5, ns1__DayOfWeek__saturday = 6};
#endif

#ifndef SOAP_TYPE_ns1__WeekOfMonth
#define SOAP_TYPE_ns1__WeekOfMonth (3537)
/* ns1:WeekOfMonth */
enum ns1__WeekOfMonth {ns1__WeekOfMonth__first = 0, ns1__WeekOfMonth__second = 1, ns1__WeekOfMonth__third = 2, ns1__WeekOfMonth__fourth = 3, ns1__WeekOfMonth__last = 4};
#endif

#ifndef SOAP_TYPE_ns1__VAppCloneSpecProvisioningType
#define SOAP_TYPE_ns1__VAppCloneSpecProvisioningType (3539)
/* ns1:VAppCloneSpecProvisioningType */
enum ns1__VAppCloneSpecProvisioningType {ns1__VAppCloneSpecProvisioningType__sameAsSource = 0, ns1__VAppCloneSpecProvisioningType__thin = 1, ns1__VAppCloneSpecProvisioningType__thick = 2};
#endif

#ifndef SOAP_TYPE_ns1__VAppAutoStartAction
#define SOAP_TYPE_ns1__VAppAutoStartAction (3541)
/* ns1:VAppAutoStartAction */
enum ns1__VAppAutoStartAction {ns1__VAppAutoStartAction__none = 0, ns1__VAppAutoStartAction__powerOn = 1, ns1__VAppAutoStartAction__powerOff = 2, ns1__VAppAutoStartAction__guestShutdown = 3, ns1__VAppAutoStartAction__suspend = 4};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoIpAllocationPolicy
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoIpAllocationPolicy (3543)
/* ns1:VAppIPAssignmentInfoIpAllocationPolicy */
enum ns1__VAppIPAssignmentInfoIpAllocationPolicy {ns1__VAppIPAssignmentInfoIpAllocationPolicy__dhcpPolicy = 0, ns1__VAppIPAssignmentInfoIpAllocationPolicy__transientPolicy = 1, ns1__VAppIPAssignmentInfoIpAllocationPolicy__fixedPolicy = 2};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoAllocationSchemes
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoAllocationSchemes (3545)
/* ns1:VAppIPAssignmentInfoAllocationSchemes */
enum ns1__VAppIPAssignmentInfoAllocationSchemes {ns1__VAppIPAssignmentInfoAllocationSchemes__dhcp = 0, ns1__VAppIPAssignmentInfoAllocationSchemes__ovfenv = 1};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoProtocols
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoProtocols (3547)
/* ns1:VAppIPAssignmentInfoProtocols */
enum ns1__VAppIPAssignmentInfoProtocols {ns1__VAppIPAssignmentInfoProtocols__IPv4 = 0, ns1__VAppIPAssignmentInfoProtocols__IPv6 = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfoNpivWwnType
#define SOAP_TYPE_ns1__VirtualMachineConfigInfoNpivWwnType (3549)
/* ns1:VirtualMachineConfigInfoNpivWwnType */
enum ns1__VirtualMachineConfigInfoNpivWwnType {ns1__VirtualMachineConfigInfoNpivWwnType__vc = 0, ns1__VirtualMachineConfigInfoNpivWwnType__host = 1, ns1__VirtualMachineConfigInfoNpivWwnType__external = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfoSwapPlacementType
#define SOAP_TYPE_ns1__VirtualMachineConfigInfoSwapPlacementType (3551)
/* ns1:VirtualMachineConfigInfoSwapPlacementType */
enum ns1__VirtualMachineConfigInfoSwapPlacementType {ns1__VirtualMachineConfigInfoSwapPlacementType__inherit = 0, ns1__VirtualMachineConfigInfoSwapPlacementType__vmDirectory = 1, ns1__VirtualMachineConfigInfoSwapPlacementType__hostLocal = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigSpecNpivWwnOp
#define SOAP_TYPE_ns1__VirtualMachineConfigSpecNpivWwnOp (3553)
/* ns1:VirtualMachineConfigSpecNpivWwnOp */
enum ns1__VirtualMachineConfigSpecNpivWwnOp {ns1__VirtualMachineConfigSpecNpivWwnOp__generate = 0, ns1__VirtualMachineConfigSpecNpivWwnOp__set = 1, ns1__VirtualMachineConfigSpecNpivWwnOp__remove = 2, ns1__VirtualMachineConfigSpecNpivWwnOp__extend = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerOpType
#define SOAP_TYPE_ns1__VirtualMachinePowerOpType (3555)
/* ns1:VirtualMachinePowerOpType */
enum ns1__VirtualMachinePowerOpType {ns1__VirtualMachinePowerOpType__soft = 0, ns1__VirtualMachinePowerOpType__hard = 1, ns1__VirtualMachinePowerOpType__preset = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineStandbyActionType
#define SOAP_TYPE_ns1__VirtualMachineStandbyActionType (3557)
/* ns1:VirtualMachineStandbyActionType */
enum ns1__VirtualMachineStandbyActionType {ns1__VirtualMachineStandbyActionType__checkpoint = 0, ns1__VirtualMachineStandbyActionType__powerOnSuspend = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm (3559)
/* ns1:VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm */
enum ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm {ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptIncompatibleGuest = 0, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptIncompatibleGuestDriver = 1, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptIncompatibleAdapterType = 2, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptDisabledOrDisconnectedAdapter = 3, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptIncompatibleAdapterFeatures = 4, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptIncompatibleBackingType = 5, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptInsufficientMemoryReservation = 6, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptFaultToleranceOrRecordReplayConfigured = 7, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptConflictingIOChainConfigured = 8, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptMonitorBlocks = 9, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptConflictingOperationInProgress = 10, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm__vmNptRuntimeError = 11};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther (3561)
/* ns1:VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther */
enum ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther {ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther__vmNptIncompatibleHost = 0, ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther__vmNptIncompatibleNetwork = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileType
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileType (3563)
/* ns1:VirtualMachineFileLayoutExFileType */
enum ns1__VirtualMachineFileLayoutExFileType {ns1__VirtualMachineFileLayoutExFileType__config = 0, ns1__VirtualMachineFileLayoutExFileType__extendedConfig = 1, ns1__VirtualMachineFileLayoutExFileType__diskDescriptor = 2, ns1__VirtualMachineFileLayoutExFileType__diskExtent = 3, ns1__VirtualMachineFileLayoutExFileType__log = 4, ns1__VirtualMachineFileLayoutExFileType__stat = 5, ns1__VirtualMachineFileLayoutExFileType__nvram = 6, ns1__VirtualMachineFileLayoutExFileType__snapshotData = 7, ns1__VirtualMachineFileLayoutExFileType__snapshotList = 8, ns1__VirtualMachineFileLayoutExFileType__suspend = 9, ns1__VirtualMachineFileLayoutExFileType__swap = 10, ns1__VirtualMachineFileLayoutExFileType__core = 11, ns1__VirtualMachineFileLayoutExFileType__screenshot = 12};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineHtSharing
#define SOAP_TYPE_ns1__VirtualMachineHtSharing (3565)
/* ns1:VirtualMachineHtSharing */
enum ns1__VirtualMachineHtSharing {ns1__VirtualMachineHtSharing__any = 0, ns1__VirtualMachineHtSharing__none = 1, ns1__VirtualMachineHtSharing__internal = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerOffBehavior
#define SOAP_TYPE_ns1__VirtualMachinePowerOffBehavior (3567)
/* ns1:VirtualMachinePowerOffBehavior */
enum ns1__VirtualMachinePowerOffBehavior {ns1__VirtualMachinePowerOffBehavior__powerOff = 0, ns1__VirtualMachinePowerOffBehavior__revert = 1, ns1__VirtualMachinePowerOffBehavior__prompt = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoMonitorType
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoMonitorType (3569)
/* ns1:VirtualMachineFlagInfoMonitorType */
enum ns1__VirtualMachineFlagInfoMonitorType {ns1__VirtualMachineFlagInfoMonitorType__release = 0, ns1__VirtualMachineFlagInfoMonitorType__debug = 1, ns1__VirtualMachineFlagInfoMonitorType__stats = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualMmuUsage
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualMmuUsage (3571)
/* ns1:VirtualMachineFlagInfoVirtualMmuUsage */
enum ns1__VirtualMachineFlagInfoVirtualMmuUsage {ns1__VirtualMachineFlagInfoVirtualMmuUsage__automatic = 0, ns1__VirtualMachineFlagInfoVirtualMmuUsage__on = 1, ns1__VirtualMachineFlagInfoVirtualMmuUsage__off = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualExecUsage
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualExecUsage (3573)
/* ns1:VirtualMachineFlagInfoVirtualExecUsage */
enum ns1__VirtualMachineFlagInfoVirtualExecUsage {ns1__VirtualMachineFlagInfoVirtualExecUsage__hvAuto = 0, ns1__VirtualMachineFlagInfoVirtualExecUsage__hvOn = 1, ns1__VirtualMachineFlagInfoVirtualExecUsage__hvOff = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsStatus
#define SOAP_TYPE_ns1__VirtualMachineToolsStatus (3575)
/* ns1:VirtualMachineToolsStatus */
enum ns1__VirtualMachineToolsStatus {ns1__VirtualMachineToolsStatus__toolsNotInstalled = 0, ns1__VirtualMachineToolsStatus__toolsNotRunning = 1, ns1__VirtualMachineToolsStatus__toolsOld = 2, ns1__VirtualMachineToolsStatus__toolsOk = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsVersionStatus
#define SOAP_TYPE_ns1__VirtualMachineToolsVersionStatus (3577)
/* ns1:VirtualMachineToolsVersionStatus */
enum ns1__VirtualMachineToolsVersionStatus {ns1__VirtualMachineToolsVersionStatus__guestToolsNotInstalled = 0, ns1__VirtualMachineToolsVersionStatus__guestToolsNeedUpgrade = 1, ns1__VirtualMachineToolsVersionStatus__guestToolsCurrent = 2, ns1__VirtualMachineToolsVersionStatus__guestToolsUnmanaged = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsRunningStatus
#define SOAP_TYPE_ns1__VirtualMachineToolsRunningStatus (3579)
/* ns1:VirtualMachineToolsRunningStatus */
enum ns1__VirtualMachineToolsRunningStatus {ns1__VirtualMachineToolsRunningStatus__guestToolsNotRunning = 0, ns1__VirtualMachineToolsRunningStatus__guestToolsRunning = 1, ns1__VirtualMachineToolsRunningStatus__guestToolsExecutingScripts = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestState
#define SOAP_TYPE_ns1__VirtualMachineGuestState (3581)
/* ns1:VirtualMachineGuestState */
enum ns1__VirtualMachineGuestState {ns1__VirtualMachineGuestState__running = 0, ns1__VirtualMachineGuestState__shuttingDown = 1, ns1__VirtualMachineGuestState__resetting = 2, ns1__VirtualMachineGuestState__standby = 3, ns1__VirtualMachineGuestState__notRunning = 4, ns1__VirtualMachineGuestState__unknown = 5};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestOsFamily
#define SOAP_TYPE_ns1__VirtualMachineGuestOsFamily (3583)
/* ns1:VirtualMachineGuestOsFamily */
enum ns1__VirtualMachineGuestOsFamily {ns1__VirtualMachineGuestOsFamily__windowsGuest = 0, ns1__VirtualMachineGuestOsFamily__linuxGuest = 1, ns1__VirtualMachineGuestOsFamily__netwareGuest = 2, ns1__VirtualMachineGuestOsFamily__solarisGuest = 3, ns1__VirtualMachineGuestOsFamily__otherGuestFamily = 4};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestOsIdentifier
#define SOAP_TYPE_ns1__VirtualMachineGuestOsIdentifier (3585)
/* ns1:VirtualMachineGuestOsIdentifier */
enum ns1__VirtualMachineGuestOsIdentifier {ns1__VirtualMachineGuestOsIdentifier__dosGuest = 0, ns1__VirtualMachineGuestOsIdentifier__win31Guest = 1, ns1__VirtualMachineGuestOsIdentifier__win95Guest = 2, ns1__VirtualMachineGuestOsIdentifier__win98Guest = 3, ns1__VirtualMachineGuestOsIdentifier__winMeGuest = 4, ns1__VirtualMachineGuestOsIdentifier__winNTGuest = 5, ns1__VirtualMachineGuestOsIdentifier__win2000ProGuest = 6, ns1__VirtualMachineGuestOsIdentifier__win2000ServGuest = 7, ns1__VirtualMachineGuestOsIdentifier__win2000AdvServGuest = 8, ns1__VirtualMachineGuestOsIdentifier__winXPHomeGuest = 9, ns1__VirtualMachineGuestOsIdentifier__winXPProGuest = 10, ns1__VirtualMachineGuestOsIdentifier__winXPPro64Guest = 11, ns1__VirtualMachineGuestOsIdentifier__winNetWebGuest = 12, ns1__VirtualMachineGuestOsIdentifier__winNetStandardGuest = 13, ns1__VirtualMachineGuestOsIdentifier__winNetEnterpriseGuest = 14, ns1__VirtualMachineGuestOsIdentifier__winNetDatacenterGuest = 15, ns1__VirtualMachineGuestOsIdentifier__winNetBusinessGuest = 16, ns1__VirtualMachineGuestOsIdentifier__winNetStandard64Guest = 17, ns1__VirtualMachineGuestOsIdentifier__winNetEnterprise64Guest = 18, ns1__VirtualMachineGuestOsIdentifier__winLonghornGuest = 19, ns1__VirtualMachineGuestOsIdentifier__winLonghorn64Guest = 20, ns1__VirtualMachineGuestOsIdentifier__winNetDatacenter64Guest = 21, ns1__VirtualMachineGuestOsIdentifier__winVistaGuest = 22, ns1__VirtualMachineGuestOsIdentifier__winVista64Guest = 23, ns1__VirtualMachineGuestOsIdentifier__windows7Guest = 24, ns1__VirtualMachineGuestOsIdentifier__windows7_USCORE64Guest = 25, ns1__VirtualMachineGuestOsIdentifier__windows7Server64Guest = 26, ns1__VirtualMachineGuestOsIdentifier__freebsdGuest = 27, ns1__VirtualMachineGuestOsIdentifier__freebsd64Guest = 28, ns1__VirtualMachineGuestOsIdentifier__redhatGuest = 29, ns1__VirtualMachineGuestOsIdentifier__rhel2Guest = 30, ns1__VirtualMachineGuestOsIdentifier__rhel3Guest = 31, ns1__VirtualMachineGuestOsIdentifier__rhel3_USCORE64Guest = 32, ns1__VirtualMachineGuestOsIdentifier__rhel4Guest = 33, ns1__VirtualMachineGuestOsIdentifier__rhel4_USCORE64Guest = 34, ns1__VirtualMachineGuestOsIdentifier__rhel5Guest = 35, ns1__VirtualMachineGuestOsIdentifier__rhel5_USCORE64Guest = 36, ns1__VirtualMachineGuestOsIdentifier__rhel6Guest = 37, ns1__VirtualMachineGuestOsIdentifier__rhel6_USCORE64Guest = 38, ns1__VirtualMachineGuestOsIdentifier__centosGuest = 39, ns1__VirtualMachineGuestOsIdentifier__centos64Guest = 40, ns1__VirtualMachineGuestOsIdentifier__oracleLinuxGuest = 41, ns1__VirtualMachineGuestOsIdentifier__oracleLinux64Guest = 42, ns1__VirtualMachineGuestOsIdentifier__suseGuest = 43, ns1__VirtualMachineGuestOsIdentifier__suse64Guest = 44, ns1__VirtualMachineGuestOsIdentifier__slesGuest = 45, ns1__VirtualMachineGuestOsIdentifier__sles64Guest = 46, ns1__VirtualMachineGuestOsIdentifier__sles10Guest = 47, ns1__VirtualMachineGuestOsIdentifier__sles10_USCORE64Guest = 48, ns1__VirtualMachineGuestOsIdentifier__sles11Guest = 49, ns1__VirtualMachineGuestOsIdentifier__sles11_USCORE64Guest = 50, ns1__VirtualMachineGuestOsIdentifier__nld9Guest = 51, ns1__VirtualMachineGuestOsIdentifier__oesGuest = 52, ns1__VirtualMachineGuestOsIdentifier__sjdsGuest = 53, ns1__VirtualMachineGuestOsIdentifier__mandrivaGuest = 54, ns1__VirtualMachineGuestOsIdentifier__mandriva64Guest = 55, ns1__VirtualMachineGuestOsIdentifier__turboLinuxGuest = 56, ns1__VirtualMachineGuestOsIdentifier__turboLinux64Guest = 57, ns1__VirtualMachineGuestOsIdentifier__ubuntuGuest = 58, ns1__VirtualMachineGuestOsIdentifier__ubuntu64Guest = 59, ns1__VirtualMachineGuestOsIdentifier__debian4Guest = 60, ns1__VirtualMachineGuestOsIdentifier__debian4_USCORE64Guest = 61, ns1__VirtualMachineGuestOsIdentifier__debian5Guest = 62, ns1__VirtualMachineGuestOsIdentifier__debian5_USCORE64Guest = 63, ns1__VirtualMachineGuestOsIdentifier__asianux3Guest = 64, ns1__VirtualMachineGuestOsIdentifier__asianux3_USCORE64Guest = 65, ns1__VirtualMachineGuestOsIdentifier__asianux4Guest = 66, ns1__VirtualMachineGuestOsIdentifier__asianux4_USCORE64Guest = 67, ns1__VirtualMachineGuestOsIdentifier__other24xLinuxGuest = 68, ns1__VirtualMachineGuestOsIdentifier__other26xLinuxGuest = 69, ns1__VirtualMachineGuestOsIdentifier__otherLinuxGuest = 70, ns1__VirtualMachineGuestOsIdentifier__other24xLinux64Guest = 71, ns1__VirtualMachineGuestOsIdentifier__other26xLinux64Guest = 72, ns1__VirtualMachineGuestOsIdentifier__otherLinux64Guest = 73, ns1__VirtualMachineGuestOsIdentifier__solaris6Guest = 74, ns1__VirtualMachineGuestOsIdentifier__solaris7Guest = 75, ns1__VirtualMachineGuestOsIdentifier__solaris8Guest = 76, ns1__VirtualMachineGuestOsIdentifier__solaris9Guest = 77, ns1__VirtualMachineGuestOsIdentifier__solaris10Guest = 78, ns1__VirtualMachineGuestOsIdentifier__solaris10_USCORE64Guest = 79, ns1__VirtualMachineGuestOsIdentifier__os2Guest = 80, ns1__VirtualMachineGuestOsIdentifier__eComStationGuest = 81, ns1__VirtualMachineGuestOsIdentifier__netware4Guest = 82, ns1__VirtualMachineGuestOsIdentifier__netware5Guest = 83, ns1__VirtualMachineGuestOsIdentifier__netware6Guest = 84, ns1__VirtualMachineGuestOsIdentifier__openServer5Guest = 85, ns1__VirtualMachineGuestOsIdentifier__openServer6Guest = 86, ns1__VirtualMachineGuestOsIdentifier__unixWare7Guest = 87, ns1__VirtualMachineGuestOsIdentifier__darwinGuest = 88, ns1__VirtualMachineGuestOsIdentifier__darwin64Guest = 89, ns1__VirtualMachineGuestOsIdentifier__otherGuest = 90, ns1__VirtualMachineGuestOsIdentifier__otherGuest64 = 91};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateTransformation
#define SOAP_TYPE_ns1__VirtualMachineRelocateTransformation (3587)
/* ns1:VirtualMachineRelocateTransformation */
enum ns1__VirtualMachineRelocateTransformation {ns1__VirtualMachineRelocateTransformation__flat = 0, ns1__VirtualMachineRelocateTransformation__sparse = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateDiskMoveOptions
#define SOAP_TYPE_ns1__VirtualMachineRelocateDiskMoveOptions (3589)
/* ns1:VirtualMachineRelocateDiskMoveOptions */
enum ns1__VirtualMachineRelocateDiskMoveOptions {ns1__VirtualMachineRelocateDiskMoveOptions__moveAllDiskBackingsAndAllowSharing = 0, ns1__VirtualMachineRelocateDiskMoveOptions__moveAllDiskBackingsAndDisallowSharing = 1, ns1__VirtualMachineRelocateDiskMoveOptions__moveChildMostDiskBacking = 2, ns1__VirtualMachineRelocateDiskMoveOptions__createNewChildDiskBacking = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineScsiPassthroughType
#define SOAP_TYPE_ns1__VirtualMachineScsiPassthroughType (3591)
/* ns1:VirtualMachineScsiPassthroughType */
enum ns1__VirtualMachineScsiPassthroughType {ns1__VirtualMachineScsiPassthroughType__disk = 0, ns1__VirtualMachineScsiPassthroughType__tape = 1, ns1__VirtualMachineScsiPassthroughType__printer = 2, ns1__VirtualMachineScsiPassthroughType__processor = 3, ns1__VirtualMachineScsiPassthroughType__worm = 4, ns1__VirtualMachineScsiPassthroughType__cdrom = 5, ns1__VirtualMachineScsiPassthroughType__scanner = 6, ns1__VirtualMachineScsiPassthroughType__optical = 7, ns1__VirtualMachineScsiPassthroughType__media = 8, ns1__VirtualMachineScsiPassthroughType__com = 9, ns1__VirtualMachineScsiPassthroughType__raid = 10, ns1__VirtualMachineScsiPassthroughType__unknown = 11};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTargetInfoConfigurationTag
#define SOAP_TYPE_ns1__VirtualMachineTargetInfoConfigurationTag (3593)
/* ns1:VirtualMachineTargetInfoConfigurationTag */
enum ns1__VirtualMachineTargetInfoConfigurationTag {ns1__VirtualMachineTargetInfoConfigurationTag__compliant = 0, ns1__VirtualMachineTargetInfoConfigurationTag__clusterWide = 1};
#endif

#ifndef SOAP_TYPE_ns1__UpgradePolicy
#define SOAP_TYPE_ns1__UpgradePolicy (3595)
/* ns1:UpgradePolicy */
enum ns1__UpgradePolicy {ns1__UpgradePolicy__manual = 0, ns1__UpgradePolicy__upgradeAtPowerCycle = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsbInfoSpeed
#define SOAP_TYPE_ns1__VirtualMachineUsbInfoSpeed (3597)
/* ns1:VirtualMachineUsbInfoSpeed */
enum ns1__VirtualMachineUsbInfoSpeed {ns1__VirtualMachineUsbInfoSpeed__low = 0, ns1__VirtualMachineUsbInfoSpeed__full = 1, ns1__VirtualMachineUsbInfoSpeed__high = 2, ns1__VirtualMachineUsbInfoSpeed__unknownSpeed = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsbInfoFamily
#define SOAP_TYPE_ns1__VirtualMachineUsbInfoFamily (3599)
/* ns1:VirtualMachineUsbInfoFamily */
enum ns1__VirtualMachineUsbInfoFamily {ns1__VirtualMachineUsbInfoFamily__audio = 0, ns1__VirtualMachineUsbInfoFamily__hid = 1, ns1__VirtualMachineUsbInfoFamily__hid_USCOREbootable = 2, ns1__VirtualMachineUsbInfoFamily__physical = 3, ns1__VirtualMachineUsbInfoFamily__communication = 4, ns1__VirtualMachineUsbInfoFamily__imaging = 5, ns1__VirtualMachineUsbInfoFamily__printer = 6, ns1__VirtualMachineUsbInfoFamily__storage = 7, ns1__VirtualMachineUsbInfoFamily__hub = 8, ns1__VirtualMachineUsbInfoFamily__smart_USCOREcard = 9, ns1__VirtualMachineUsbInfoFamily__security = 10, ns1__VirtualMachineUsbInfoFamily__video = 11, ns1__VirtualMachineUsbInfoFamily__wireless = 12, ns1__VirtualMachineUsbInfoFamily__bluetooth = 13, ns1__VirtualMachineUsbInfoFamily__wusb = 14, ns1__VirtualMachineUsbInfoFamily__pda = 15, ns1__VirtualMachineUsbInfoFamily__vendor_USCOREspecific = 16, ns1__VirtualMachineUsbInfoFamily__other = 17, ns1__VirtualMachineUsbInfoFamily__unknownFamily = 18};
#endif

#ifndef SOAP_TYPE_ns1__CheckTestType
#define SOAP_TYPE_ns1__CheckTestType (3601)
/* ns1:CheckTestType */
enum ns1__CheckTestType {ns1__CheckTestType__sourceTests = 0, ns1__CheckTestType__hostTests = 1, ns1__CheckTestType__resourcePoolTests = 2, ns1__CheckTestType__datastoreTests = 3};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSysprepRebootOption
#define SOAP_TYPE_ns1__CustomizationSysprepRebootOption (3603)
/* ns1:CustomizationSysprepRebootOption */
enum ns1__CustomizationSysprepRebootOption {ns1__CustomizationSysprepRebootOption__reboot = 0, ns1__CustomizationSysprepRebootOption__noreboot = 1, ns1__CustomizationSysprepRebootOption__shutdown = 2};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLicenseDataMode
#define SOAP_TYPE_ns1__CustomizationLicenseDataMode (3605)
/* ns1:CustomizationLicenseDataMode */
enum ns1__CustomizationLicenseDataMode {ns1__CustomizationLicenseDataMode__perServer = 0, ns1__CustomizationLicenseDataMode__perSeat = 1};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationNetBIOSMode
#define SOAP_TYPE_ns1__CustomizationNetBIOSMode (3607)
/* ns1:CustomizationNetBIOSMode */
enum ns1__CustomizationNetBIOSMode {ns1__CustomizationNetBIOSMode__enableNetBIOSViaDhcp = 0, ns1__CustomizationNetBIOSMode__enableNetBIOS = 1, ns1__CustomizationNetBIOSMode__disableNetBIOS = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConnectInfoStatus
#define SOAP_TYPE_ns1__VirtualDeviceConnectInfoStatus (3609)
/* ns1:VirtualDeviceConnectInfoStatus */
enum ns1__VirtualDeviceConnectInfoStatus {ns1__VirtualDeviceConnectInfoStatus__ok = 0, ns1__VirtualDeviceConnectInfoStatus__recoverableError = 1, ns1__VirtualDeviceConnectInfoStatus__unrecoverableError = 2, ns1__VirtualDeviceConnectInfoStatus__untried = 3};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceFileExtension
#define SOAP_TYPE_ns1__VirtualDeviceFileExtension (3611)
/* ns1:VirtualDeviceFileExtension */
enum ns1__VirtualDeviceFileExtension {ns1__VirtualDeviceFileExtension__iso = 0, ns1__VirtualDeviceFileExtension__flp = 1, ns1__VirtualDeviceFileExtension__vmdk = 2, ns1__VirtualDeviceFileExtension__dsk = 3, ns1__VirtualDeviceFileExtension__rdm = 4};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceURIBackingOptionDirection
#define SOAP_TYPE_ns1__VirtualDeviceURIBackingOptionDirection (3613)
/* ns1:VirtualDeviceURIBackingOptionDirection */
enum ns1__VirtualDeviceURIBackingOptionDirection {ns1__VirtualDeviceURIBackingOptionDirection__server = 0, ns1__VirtualDeviceURIBackingOptionDirection__client = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConfigSpecOperation
#define SOAP_TYPE_ns1__VirtualDeviceConfigSpecOperation (3615)
/* ns1:VirtualDeviceConfigSpecOperation */
enum ns1__VirtualDeviceConfigSpecOperation {ns1__VirtualDeviceConfigSpecOperation__add = 0, ns1__VirtualDeviceConfigSpecOperation__remove = 1, ns1__VirtualDeviceConfigSpecOperation__edit = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConfigSpecFileOperation
#define SOAP_TYPE_ns1__VirtualDeviceConfigSpecFileOperation (3617)
/* ns1:VirtualDeviceConfigSpecFileOperation */
enum ns1__VirtualDeviceConfigSpecFileOperation {ns1__VirtualDeviceConfigSpecFileOperation__create = 0, ns1__VirtualDeviceConfigSpecFileOperation__destroy = 1, ns1__VirtualDeviceConfigSpecFileOperation__replace = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskMode
#define SOAP_TYPE_ns1__VirtualDiskMode (3619)
/* ns1:VirtualDiskMode */
enum ns1__VirtualDiskMode {ns1__VirtualDiskMode__persistent = 0, ns1__VirtualDiskMode__nonpersistent = 1, ns1__VirtualDiskMode__undoable = 2, ns1__VirtualDiskMode__independent_USCOREpersistent = 3, ns1__VirtualDiskMode__independent_USCOREnonpersistent = 4, ns1__VirtualDiskMode__append = 5};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskCompatibilityMode
#define SOAP_TYPE_ns1__VirtualDiskCompatibilityMode (3621)
/* ns1:VirtualDiskCompatibilityMode */
enum ns1__VirtualDiskCompatibilityMode {ns1__VirtualDiskCompatibilityMode__virtualMode = 0, ns1__VirtualDiskCompatibilityMode__physicalMode = 1};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkDeviceName
#define SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkDeviceName (3623)
/* ns1:VirtualEthernetCardLegacyNetworkDeviceName */
enum ns1__VirtualEthernetCardLegacyNetworkDeviceName {ns1__VirtualEthernetCardLegacyNetworkDeviceName__bridged = 0, ns1__VirtualEthernetCardLegacyNetworkDeviceName__nat = 1, ns1__VirtualEthernetCardLegacyNetworkDeviceName__hostonly = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardMacType
#define SOAP_TYPE_ns1__VirtualEthernetCardMacType (3625)
/* ns1:VirtualEthernetCardMacType */
enum ns1__VirtualEthernetCardMacType {ns1__VirtualEthernetCardMacType__manual = 0, ns1__VirtualEthernetCardMacType__generated = 1, ns1__VirtualEthernetCardMacType__assigned = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDeviceHostChoice
#define SOAP_TYPE_ns1__VirtualPointingDeviceHostChoice (3627)
/* ns1:VirtualPointingDeviceHostChoice */
enum ns1__VirtualPointingDeviceHostChoice {ns1__VirtualPointingDeviceHostChoice__autodetect = 0, ns1__VirtualPointingDeviceHostChoice__intellimouseExplorer = 1, ns1__VirtualPointingDeviceHostChoice__intellimousePs2 = 2, ns1__VirtualPointingDeviceHostChoice__logitechMouseman = 3, ns1__VirtualPointingDeviceHostChoice__microsoft_USCOREserial = 4, ns1__VirtualPointingDeviceHostChoice__mouseSystems = 5, ns1__VirtualPointingDeviceHostChoice__mousemanSerial = 6, ns1__VirtualPointingDeviceHostChoice__ps2 = 7};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSISharing
#define SOAP_TYPE_ns1__VirtualSCSISharing (3629)
/* ns1:VirtualSCSISharing */
enum ns1__VirtualSCSISharing {ns1__VirtualSCSISharing__noSharing = 0, ns1__VirtualSCSISharing__virtualSharing = 1, ns1__VirtualSCSISharing__physicalSharing = 2};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortEndPoint
#define SOAP_TYPE_ns1__VirtualSerialPortEndPoint (3631)
/* ns1:VirtualSerialPortEndPoint */
enum ns1__VirtualSerialPortEndPoint {ns1__VirtualSerialPortEndPoint__client = 0, ns1__VirtualSerialPortEndPoint__server = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (10)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (13)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (14)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (16)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (18)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (19)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (21)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (23)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ObjectUpdateKind_
#define SOAP_TYPE_ns1__ObjectUpdateKind_ (3240)
/* Primitive ns1:ObjectUpdateKind schema type: */
class SOAP_CMAC ns1__ObjectUpdateKind_ : public xsd__anyType
{
public:
	enum ns1__ObjectUpdateKind __item;
public:
	virtual int soap_type() const { return 3240; } /* = unique id SOAP_TYPE_ns1__ObjectUpdateKind_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ObjectUpdateKind_() { ns1__ObjectUpdateKind_::soap_default(NULL); }
	virtual ~ns1__ObjectUpdateKind_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PropertyChangeOp_
#define SOAP_TYPE_ns1__PropertyChangeOp_ (3242)
/* Primitive ns1:PropertyChangeOp schema type: */
class SOAP_CMAC ns1__PropertyChangeOp_ : public xsd__anyType
{
public:
	enum ns1__PropertyChangeOp __item;
public:
	virtual int soap_type() const { return 3242; } /* = unique id SOAP_TYPE_ns1__PropertyChangeOp_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PropertyChangeOp_() { ns1__PropertyChangeOp_::soap_default(NULL); }
	virtual ~ns1__PropertyChangeOp_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigSpecOperation_
#define SOAP_TYPE_ns1__ConfigSpecOperation_ (3244)
/* Primitive ns1:ConfigSpecOperation schema type: */
class SOAP_CMAC ns1__ConfigSpecOperation_ : public xsd__anyType
{
public:
	enum ns1__ConfigSpecOperation __item;
public:
	virtual int soap_type() const { return 3244; } /* = unique id SOAP_TYPE_ns1__ConfigSpecOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigSpecOperation_() { ns1__ConfigSpecOperation_::soap_default(NULL); }
	virtual ~ns1__ConfigSpecOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreAccessible_
#define SOAP_TYPE_ns1__DatastoreAccessible_ (3246)
/* Primitive ns1:DatastoreAccessible schema type: */
class SOAP_CMAC ns1__DatastoreAccessible_ : public xsd__anyType
{
public:
	enum ns1__DatastoreAccessible __item;
public:
	virtual int soap_type() const { return 3246; } /* = unique id SOAP_TYPE_ns1__DatastoreAccessible_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreAccessible_() { ns1__DatastoreAccessible_::soap_default(NULL); }
	virtual ~ns1__DatastoreAccessible_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogCreator_
#define SOAP_TYPE_ns1__DiagnosticManagerLogCreator_ (3248)
/* Primitive ns1:DiagnosticManagerLogCreator schema type: */
class SOAP_CMAC ns1__DiagnosticManagerLogCreator_ : public xsd__anyType
{
public:
	enum ns1__DiagnosticManagerLogCreator __item;
public:
	virtual int soap_type() const { return 3248; } /* = unique id SOAP_TYPE_ns1__DiagnosticManagerLogCreator_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticManagerLogCreator_() { ns1__DiagnosticManagerLogCreator_::soap_default(NULL); }
	virtual ~ns1__DiagnosticManagerLogCreator_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogFormat_
#define SOAP_TYPE_ns1__DiagnosticManagerLogFormat_ (3250)
/* Primitive ns1:DiagnosticManagerLogFormat schema type: */
class SOAP_CMAC ns1__DiagnosticManagerLogFormat_ : public xsd__anyType
{
public:
	enum ns1__DiagnosticManagerLogFormat __item;
public:
	virtual int soap_type() const { return 3250; } /* = unique id SOAP_TYPE_ns1__DiagnosticManagerLogFormat_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticManagerLogFormat_() { ns1__DiagnosticManagerLogFormat_::soap_default(NULL); }
	virtual ~ns1__DiagnosticManagerLogFormat_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpecOperationType_
#define SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpecOperationType_ (3252)
/* Primitive ns1:DistributedVirtualSwitchProductSpecOperationType schema type: */
class SOAP_CMAC ns1__DistributedVirtualSwitchProductSpecOperationType_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualSwitchProductSpecOperationType __item;
public:
	virtual int soap_type() const { return 3252; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpecOperationType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchProductSpecOperationType_() { ns1__DistributedVirtualSwitchProductSpecOperationType_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchProductSpecOperationType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchNicTeamingPolicyMode_
#define SOAP_TYPE_ns1__DistributedVirtualSwitchNicTeamingPolicyMode_ (3254)
/* Primitive ns1:DistributedVirtualSwitchNicTeamingPolicyMode schema type: */
class SOAP_CMAC ns1__DistributedVirtualSwitchNicTeamingPolicyMode_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualSwitchNicTeamingPolicyMode __item;
public:
	virtual int soap_type() const { return 3254; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchNicTeamingPolicyMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchNicTeamingPolicyMode_() { ns1__DistributedVirtualSwitchNicTeamingPolicyMode_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchNicTeamingPolicyMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemConnectionState_
#define SOAP_TYPE_ns1__HostSystemConnectionState_ (3256)
/* Primitive ns1:HostSystemConnectionState schema type: */
class SOAP_CMAC ns1__HostSystemConnectionState_ : public xsd__anyType
{
public:
	enum ns1__HostSystemConnectionState __item;
public:
	virtual int soap_type() const { return 3256; } /* = unique id SOAP_TYPE_ns1__HostSystemConnectionState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemConnectionState_() { ns1__HostSystemConnectionState_::soap_default(NULL); }
	virtual ~ns1__HostSystemConnectionState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemPowerState_
#define SOAP_TYPE_ns1__HostSystemPowerState_ (3258)
/* Primitive ns1:HostSystemPowerState schema type: */
class SOAP_CMAC ns1__HostSystemPowerState_ : public xsd__anyType
{
public:
	enum ns1__HostSystemPowerState __item;
public:
	virtual int soap_type() const { return 3258; } /* = unique id SOAP_TYPE_ns1__HostSystemPowerState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemPowerState_() { ns1__HostSystemPowerState_::soap_default(NULL); }
	virtual ~ns1__HostSystemPowerState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStandbyMode_
#define SOAP_TYPE_ns1__HostStandbyMode_ (3260)
/* Primitive ns1:HostStandbyMode schema type: */
class SOAP_CMAC ns1__HostStandbyMode_ : public xsd__anyType
{
public:
	enum ns1__HostStandbyMode __item;
public:
	virtual int soap_type() const { return 3260; } /* = unique id SOAP_TYPE_ns1__HostStandbyMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStandbyMode_() { ns1__HostStandbyMode_::soap_default(NULL); }
	virtual ~ns1__HostStandbyMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseState_
#define SOAP_TYPE_ns1__HttpNfcLeaseState_ (3262)
/* Primitive ns1:HttpNfcLeaseState schema type: */
class SOAP_CMAC ns1__HttpNfcLeaseState_ : public xsd__anyType
{
public:
	enum ns1__HttpNfcLeaseState __item;
public:
	virtual int soap_type() const { return 3262; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseState_() { ns1__HttpNfcLeaseState_::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerState_
#define SOAP_TYPE_ns1__LicenseManagerState_ (3264)
/* Primitive ns1:LicenseManagerState schema type: */
class SOAP_CMAC ns1__LicenseManagerState_ : public xsd__anyType
{
public:
	enum ns1__LicenseManagerState __item;
public:
	virtual int soap_type() const { return 3264; } /* = unique id SOAP_TYPE_ns1__LicenseManagerState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseManagerState_() { ns1__LicenseManagerState_::soap_default(NULL); }
	virtual ~ns1__LicenseManagerState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerLicenseKey_
#define SOAP_TYPE_ns1__LicenseManagerLicenseKey_ (3266)
/* Primitive ns1:LicenseManagerLicenseKey schema type: */
class SOAP_CMAC ns1__LicenseManagerLicenseKey_ : public xsd__anyType
{
public:
	enum ns1__LicenseManagerLicenseKey __item;
public:
	virtual int soap_type() const { return 3266; } /* = unique id SOAP_TYPE_ns1__LicenseManagerLicenseKey_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseManagerLicenseKey_() { ns1__LicenseManagerLicenseKey_::soap_default(NULL); }
	virtual ~ns1__LicenseManagerLicenseKey_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoUnit_
#define SOAP_TYPE_ns1__LicenseFeatureInfoUnit_ (3268)
/* Primitive ns1:LicenseFeatureInfoUnit schema type: */
class SOAP_CMAC ns1__LicenseFeatureInfoUnit_ : public xsd__anyType
{
public:
	enum ns1__LicenseFeatureInfoUnit __item;
public:
	virtual int soap_type() const { return 3268; } /* = unique id SOAP_TYPE_ns1__LicenseFeatureInfoUnit_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseFeatureInfoUnit_() { ns1__LicenseFeatureInfoUnit_::soap_default(NULL); }
	virtual ~ns1__LicenseFeatureInfoUnit_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoState_
#define SOAP_TYPE_ns1__LicenseFeatureInfoState_ (3270)
/* Primitive ns1:LicenseFeatureInfoState schema type: */
class SOAP_CMAC ns1__LicenseFeatureInfoState_ : public xsd__anyType
{
public:
	enum ns1__LicenseFeatureInfoState __item;
public:
	virtual int soap_type() const { return 3270; } /* = unique id SOAP_TYPE_ns1__LicenseFeatureInfoState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseFeatureInfoState_() { ns1__LicenseFeatureInfoState_::soap_default(NULL); }
	virtual ~ns1__LicenseFeatureInfoState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfoSourceRestriction_
#define SOAP_TYPE_ns1__LicenseFeatureInfoSourceRestriction_ (3272)
/* Primitive ns1:LicenseFeatureInfoSourceRestriction schema type: */
class SOAP_CMAC ns1__LicenseFeatureInfoSourceRestriction_ : public xsd__anyType
{
public:
	enum ns1__LicenseFeatureInfoSourceRestriction __item;
public:
	virtual int soap_type() const { return 3272; } /* = unique id SOAP_TYPE_ns1__LicenseFeatureInfoSourceRestriction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseFeatureInfoSourceRestriction_() { ns1__LicenseFeatureInfoSourceRestriction_::soap_default(NULL); }
	virtual ~ns1__LicenseFeatureInfoSourceRestriction_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseReservationInfoState_
#define SOAP_TYPE_ns1__LicenseReservationInfoState_ (3274)
/* Primitive ns1:LicenseReservationInfoState schema type: */
class SOAP_CMAC ns1__LicenseReservationInfoState_ : public xsd__anyType
{
public:
	enum ns1__LicenseReservationInfoState __item;
public:
	virtual int soap_type() const { return 3274; } /* = unique id SOAP_TYPE_ns1__LicenseReservationInfoState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseReservationInfoState_() { ns1__LicenseReservationInfoState_::soap_default(NULL); }
	virtual ~ns1__LicenseReservationInfoState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ManagedEntityStatus_
#define SOAP_TYPE_ns1__ManagedEntityStatus_ (3276)
/* Primitive ns1:ManagedEntityStatus schema type: */
class SOAP_CMAC ns1__ManagedEntityStatus_ : public xsd__anyType
{
public:
	enum ns1__ManagedEntityStatus __item;
public:
	virtual int soap_type() const { return 3276; } /* = unique id SOAP_TYPE_ns1__ManagedEntityStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ManagedEntityStatus_() { ns1__ManagedEntityStatus_::soap_default(NULL); }
	virtual ~ns1__ManagedEntityStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateImportSpecParamsDiskProvisioningType_
#define SOAP_TYPE_ns1__OvfCreateImportSpecParamsDiskProvisioningType_ (3278)
/* Primitive ns1:OvfCreateImportSpecParamsDiskProvisioningType schema type: */
class SOAP_CMAC ns1__OvfCreateImportSpecParamsDiskProvisioningType_ : public xsd__anyType
{
public:
	enum ns1__OvfCreateImportSpecParamsDiskProvisioningType __item;
public:
	virtual int soap_type() const { return 3278; } /* = unique id SOAP_TYPE_ns1__OvfCreateImportSpecParamsDiskProvisioningType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfCreateImportSpecParamsDiskProvisioningType_() { ns1__OvfCreateImportSpecParamsDiskProvisioningType_::soap_default(NULL); }
	virtual ~ns1__OvfCreateImportSpecParamsDiskProvisioningType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfFormat_
#define SOAP_TYPE_ns1__PerfFormat_ (3280)
/* Primitive ns1:PerfFormat schema type: */
class SOAP_CMAC ns1__PerfFormat_ : public xsd__anyType
{
public:
	enum ns1__PerfFormat __item;
public:
	virtual int soap_type() const { return 3280; } /* = unique id SOAP_TYPE_ns1__PerfFormat_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfFormat_() { ns1__PerfFormat_::soap_default(NULL); }
	virtual ~ns1__PerfFormat_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfSummaryType_
#define SOAP_TYPE_ns1__PerfSummaryType_ (3282)
/* Primitive ns1:PerfSummaryType schema type: */
class SOAP_CMAC ns1__PerfSummaryType_ : public xsd__anyType
{
public:
	enum ns1__PerfSummaryType __item;
public:
	virtual int soap_type() const { return 3282; } /* = unique id SOAP_TYPE_ns1__PerfSummaryType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfSummaryType_() { ns1__PerfSummaryType_::soap_default(NULL); }
	virtual ~ns1__PerfSummaryType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfStatsType_
#define SOAP_TYPE_ns1__PerfStatsType_ (3284)
/* Primitive ns1:PerfStatsType schema type: */
class SOAP_CMAC ns1__PerfStatsType_ : public xsd__anyType
{
public:
	enum ns1__PerfStatsType __item;
public:
	virtual int soap_type() const { return 3284; } /* = unique id SOAP_TYPE_ns1__PerfStatsType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfStatsType_() { ns1__PerfStatsType_::soap_default(NULL); }
	virtual ~ns1__PerfStatsType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerformanceManagerUnit_
#define SOAP_TYPE_ns1__PerformanceManagerUnit_ (3286)
/* Primitive ns1:PerformanceManagerUnit schema type: */
class SOAP_CMAC ns1__PerformanceManagerUnit_ : public xsd__anyType
{
public:
	enum ns1__PerformanceManagerUnit __item;
public:
	virtual int soap_type() const { return 3286; } /* = unique id SOAP_TYPE_ns1__PerformanceManagerUnit_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerformanceManagerUnit_() { ns1__PerformanceManagerUnit_::soap_default(NULL); }
	virtual ~ns1__PerformanceManagerUnit_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateMigrationTestType_
#define SOAP_TYPE_ns1__ValidateMigrationTestType_ (3288)
/* Primitive ns1:ValidateMigrationTestType schema type: */
class SOAP_CMAC ns1__ValidateMigrationTestType_ : public xsd__anyType
{
public:
	enum ns1__ValidateMigrationTestType __item;
public:
	virtual int soap_type() const { return 3288; } /* = unique id SOAP_TYPE_ns1__ValidateMigrationTestType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateMigrationTestType_() { ns1__ValidateMigrationTestType_::soap_default(NULL); }
	virtual ~ns1__ValidateMigrationTestType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionCompatibilityType_
#define SOAP_TYPE_ns1__VMotionCompatibilityType_ (3290)
/* Primitive ns1:VMotionCompatibilityType schema type: */
class SOAP_CMAC ns1__VMotionCompatibilityType_ : public xsd__anyType
{
public:
	enum ns1__VMotionCompatibilityType __item;
public:
	virtual int soap_type() const { return 3290; } /* = unique id SOAP_TYPE_ns1__VMotionCompatibilityType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionCompatibilityType_() { ns1__VMotionCompatibilityType_::soap_default(NULL); }
	virtual ~ns1__VMotionCompatibilityType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SharesLevel_
#define SOAP_TYPE_ns1__SharesLevel_ (3292)
/* Primitive ns1:SharesLevel schema type: */
class SOAP_CMAC ns1__SharesLevel_ : public xsd__anyType
{
public:
	enum ns1__SharesLevel __item;
public:
	virtual int soap_type() const { return 3292; } /* = unique id SOAP_TYPE_ns1__SharesLevel_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SharesLevel_() { ns1__SharesLevel_::soap_default(NULL); }
	virtual ~ns1__SharesLevel_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecRecursionOption_
#define SOAP_TYPE_ns1__TaskFilterSpecRecursionOption_ (3294)
/* Primitive ns1:TaskFilterSpecRecursionOption schema type: */
class SOAP_CMAC ns1__TaskFilterSpecRecursionOption_ : public xsd__anyType
{
public:
	enum ns1__TaskFilterSpecRecursionOption __item;
public:
	virtual int soap_type() const { return 3294; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpecRecursionOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpecRecursionOption_() { ns1__TaskFilterSpecRecursionOption_::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpecRecursionOption_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecTimeOption_
#define SOAP_TYPE_ns1__TaskFilterSpecTimeOption_ (3296)
/* Primitive ns1:TaskFilterSpecTimeOption schema type: */
class SOAP_CMAC ns1__TaskFilterSpecTimeOption_ : public xsd__anyType
{
public:
	enum ns1__TaskFilterSpecTimeOption __item;
public:
	virtual int soap_type() const { return 3296; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpecTimeOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpecTimeOption_() { ns1__TaskFilterSpecTimeOption_::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpecTimeOption_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskInfoState_
#define SOAP_TYPE_ns1__TaskInfoState_ (3298)
/* Primitive ns1:TaskInfoState schema type: */
class SOAP_CMAC ns1__TaskInfoState_ : public xsd__anyType
{
public:
	enum ns1__TaskInfoState __item;
public:
	virtual int soap_type() const { return 3298; } /* = unique id SOAP_TYPE_ns1__TaskInfoState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskInfoState_() { ns1__TaskInfoState_::soap_default(NULL); }
	virtual ~ns1__TaskInfoState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualAppVAppState_
#define SOAP_TYPE_ns1__VirtualAppVAppState_ (3300)
/* Primitive ns1:VirtualAppVAppState schema type: */
class SOAP_CMAC ns1__VirtualAppVAppState_ : public xsd__anyType
{
public:
	enum ns1__VirtualAppVAppState __item;
public:
	virtual int soap_type() const { return 3300; } /* = unique id SOAP_TYPE_ns1__VirtualAppVAppState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualAppVAppState_() { ns1__VirtualAppVAppState_::soap_default(NULL); }
	virtual ~ns1__VirtualAppVAppState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskType_
#define SOAP_TYPE_ns1__VirtualDiskType_ (3302)
/* Primitive ns1:VirtualDiskType schema type: */
class SOAP_CMAC ns1__VirtualDiskType_ : public xsd__anyType
{
public:
	enum ns1__VirtualDiskType __item;
public:
	virtual int soap_type() const { return 3302; } /* = unique id SOAP_TYPE_ns1__VirtualDiskType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskType_() { ns1__VirtualDiskType_::soap_default(NULL); }
	virtual ~ns1__VirtualDiskType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskAdapterType_
#define SOAP_TYPE_ns1__VirtualDiskAdapterType_ (3304)
/* Primitive ns1:VirtualDiskAdapterType schema type: */
class SOAP_CMAC ns1__VirtualDiskAdapterType_ : public xsd__anyType
{
public:
	enum ns1__VirtualDiskAdapterType __item;
public:
	virtual int soap_type() const { return 3304; } /* = unique id SOAP_TYPE_ns1__VirtualDiskAdapterType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskAdapterType_() { ns1__VirtualDiskAdapterType_::soap_default(NULL); }
	virtual ~ns1__VirtualDiskAdapterType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerState_
#define SOAP_TYPE_ns1__VirtualMachinePowerState_ (3306)
/* Primitive ns1:VirtualMachinePowerState schema type: */
class SOAP_CMAC ns1__VirtualMachinePowerState_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachinePowerState __item;
public:
	virtual int soap_type() const { return 3306; } /* = unique id SOAP_TYPE_ns1__VirtualMachinePowerState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachinePowerState_() { ns1__VirtualMachinePowerState_::soap_default(NULL); }
	virtual ~ns1__VirtualMachinePowerState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineAppHeartbeatStatusType_
#define SOAP_TYPE_ns1__VirtualMachineAppHeartbeatStatusType_ (3308)
/* Primitive ns1:VirtualMachineAppHeartbeatStatusType schema type: */
class SOAP_CMAC ns1__VirtualMachineAppHeartbeatStatusType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineAppHeartbeatStatusType __item;
public:
	virtual int soap_type() const { return 3308; } /* = unique id SOAP_TYPE_ns1__VirtualMachineAppHeartbeatStatusType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineAppHeartbeatStatusType_() { ns1__VirtualMachineAppHeartbeatStatusType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineAppHeartbeatStatusType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConnectionState_
#define SOAP_TYPE_ns1__VirtualMachineConnectionState_ (3310)
/* Primitive ns1:VirtualMachineConnectionState schema type: */
class SOAP_CMAC ns1__VirtualMachineConnectionState_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineConnectionState __item;
public:
	virtual int soap_type() const { return 3310; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConnectionState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConnectionState_() { ns1__VirtualMachineConnectionState_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConnectionState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMovePriority_
#define SOAP_TYPE_ns1__VirtualMachineMovePriority_ (3312)
/* Primitive ns1:VirtualMachineMovePriority schema type: */
class SOAP_CMAC ns1__VirtualMachineMovePriority_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineMovePriority __item;
public:
	virtual int soap_type() const { return 3312; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMovePriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMovePriority_() { ns1__VirtualMachineMovePriority_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMovePriority_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFaultToleranceState_
#define SOAP_TYPE_ns1__VirtualMachineFaultToleranceState_ (3314)
/* Primitive ns1:VirtualMachineFaultToleranceState schema type: */
class SOAP_CMAC ns1__VirtualMachineFaultToleranceState_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineFaultToleranceState __item;
public:
	virtual int soap_type() const { return 3314; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFaultToleranceState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFaultToleranceState_() { ns1__VirtualMachineFaultToleranceState_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFaultToleranceState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRecordReplayState_
#define SOAP_TYPE_ns1__VirtualMachineRecordReplayState_ (3316)
/* Primitive ns1:VirtualMachineRecordReplayState schema type: */
class SOAP_CMAC ns1__VirtualMachineRecordReplayState_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineRecordReplayState __item;
public:
	virtual int soap_type() const { return 3316; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRecordReplayState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRecordReplayState_() { ns1__VirtualMachineRecordReplayState_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRecordReplayState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineNeedSecondaryReason_
#define SOAP_TYPE_ns1__VirtualMachineNeedSecondaryReason_ (3318)
/* Primitive ns1:VirtualMachineNeedSecondaryReason schema type: */
class SOAP_CMAC ns1__VirtualMachineNeedSecondaryReason_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineNeedSecondaryReason __item;
public:
	virtual int soap_type() const { return 3318; } /* = unique id SOAP_TYPE_ns1__VirtualMachineNeedSecondaryReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineNeedSecondaryReason_() { ns1__VirtualMachineNeedSecondaryReason_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineNeedSecondaryReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTicketType_
#define SOAP_TYPE_ns1__VirtualMachineTicketType_ (3320)
/* Primitive ns1:VirtualMachineTicketType schema type: */
class SOAP_CMAC ns1__VirtualMachineTicketType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineTicketType __item;
public:
	virtual int soap_type() const { return 3320; } /* = unique id SOAP_TYPE_ns1__VirtualMachineTicketType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineTicketType_() { ns1__VirtualMachineTicketType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineTicketType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ActionParameter_
#define SOAP_TYPE_ns1__ActionParameter_ (3322)
/* Primitive ns1:ActionParameter schema type: */
class SOAP_CMAC ns1__ActionParameter_ : public xsd__anyType
{
public:
	enum ns1__ActionParameter __item;
public:
	virtual int soap_type() const { return 3322; } /* = unique id SOAP_TYPE_ns1__ActionParameter_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ActionParameter_() { ns1__ActionParameter_::soap_default(NULL); }
	virtual ~ns1__ActionParameter_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StateAlarmOperator_
#define SOAP_TYPE_ns1__StateAlarmOperator_ (3324)
/* Primitive ns1:StateAlarmOperator schema type: */
class SOAP_CMAC ns1__StateAlarmOperator_ : public xsd__anyType
{
public:
	enum ns1__StateAlarmOperator __item;
public:
	virtual int soap_type() const { return 3324; } /* = unique id SOAP_TYPE_ns1__StateAlarmOperator_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StateAlarmOperator_() { ns1__StateAlarmOperator_::soap_default(NULL); }
	virtual ~ns1__StateAlarmOperator_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventAlarmExpressionComparisonOperator_
#define SOAP_TYPE_ns1__EventAlarmExpressionComparisonOperator_ (3326)
/* Primitive ns1:EventAlarmExpressionComparisonOperator schema type: */
class SOAP_CMAC ns1__EventAlarmExpressionComparisonOperator_ : public xsd__anyType
{
public:
	enum ns1__EventAlarmExpressionComparisonOperator __item;
public:
	virtual int soap_type() const { return 3326; } /* = unique id SOAP_TYPE_ns1__EventAlarmExpressionComparisonOperator_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventAlarmExpressionComparisonOperator_() { ns1__EventAlarmExpressionComparisonOperator_::soap_default(NULL); }
	virtual ~ns1__EventAlarmExpressionComparisonOperator_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MetricAlarmOperator_
#define SOAP_TYPE_ns1__MetricAlarmOperator_ (3328)
/* Primitive ns1:MetricAlarmOperator schema type: */
class SOAP_CMAC ns1__MetricAlarmOperator_ : public xsd__anyType
{
public:
	enum ns1__MetricAlarmOperator __item;
public:
	virtual int soap_type() const { return 3328; } /* = unique id SOAP_TYPE_ns1__MetricAlarmOperator_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MetricAlarmOperator_() { ns1__MetricAlarmOperator_::soap_default(NULL); }
	virtual ~ns1__MetricAlarmOperator_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ActionType_
#define SOAP_TYPE_ns1__ActionType_ (3330)
/* Primitive ns1:ActionType schema type: */
class SOAP_CMAC ns1__ActionType_ : public xsd__anyType
{
public:
	enum ns1__ActionType __item;
public:
	virtual int soap_type() const { return 3330; } /* = unique id SOAP_TYPE_ns1__ActionType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ActionType_() { ns1__ActionType_::soap_default(NULL); }
	virtual ~ns1__ActionType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsBehavior_
#define SOAP_TYPE_ns1__DrsBehavior_ (3332)
/* Primitive ns1:DrsBehavior schema type: */
class SOAP_CMAC ns1__DrsBehavior_ : public xsd__anyType
{
public:
	enum ns1__DrsBehavior __item;
public:
	virtual int soap_type() const { return 3332; } /* = unique id SOAP_TYPE_ns1__DrsBehavior_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsBehavior_() { ns1__DrsBehavior_::soap_default(NULL); }
	virtual ~ns1__DrsBehavior_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DpmBehavior_
#define SOAP_TYPE_ns1__DpmBehavior_ (3334)
/* Primitive ns1:DpmBehavior schema type: */
class SOAP_CMAC ns1__DpmBehavior_ : public xsd__anyType
{
public:
	enum ns1__DpmBehavior __item;
public:
	virtual int soap_type() const { return 3334; } /* = unique id SOAP_TYPE_ns1__DpmBehavior_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DpmBehavior_() { ns1__DpmBehavior_::soap_default(NULL); }
	virtual ~ns1__DpmBehavior_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAamNodeStateDasState_
#define SOAP_TYPE_ns1__ClusterDasAamNodeStateDasState_ (3336)
/* Primitive ns1:ClusterDasAamNodeStateDasState schema type: */
class SOAP_CMAC ns1__ClusterDasAamNodeStateDasState_ : public xsd__anyType
{
public:
	enum ns1__ClusterDasAamNodeStateDasState __item;
public:
	virtual int soap_type() const { return 3336; } /* = unique id SOAP_TYPE_ns1__ClusterDasAamNodeStateDasState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAamNodeStateDasState_() { ns1__ClusterDasAamNodeStateDasState_::soap_default(NULL); }
	virtual ~ns1__ClusterDasAamNodeStateDasState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasConfigInfoServiceState_
#define SOAP_TYPE_ns1__ClusterDasConfigInfoServiceState_ (3338)
/* Primitive ns1:ClusterDasConfigInfoServiceState schema type: */
class SOAP_CMAC ns1__ClusterDasConfigInfoServiceState_ : public xsd__anyType
{
public:
	enum ns1__ClusterDasConfigInfoServiceState __item;
public:
	virtual int soap_type() const { return 3338; } /* = unique id SOAP_TYPE_ns1__ClusterDasConfigInfoServiceState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasConfigInfoServiceState_() { ns1__ClusterDasConfigInfoServiceState_::soap_default(NULL); }
	virtual ~ns1__ClusterDasConfigInfoServiceState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasConfigInfoVmMonitoringState_
#define SOAP_TYPE_ns1__ClusterDasConfigInfoVmMonitoringState_ (3340)
/* Primitive ns1:ClusterDasConfigInfoVmMonitoringState schema type: */
class SOAP_CMAC ns1__ClusterDasConfigInfoVmMonitoringState_ : public xsd__anyType
{
public:
	enum ns1__ClusterDasConfigInfoVmMonitoringState __item;
public:
	virtual int soap_type() const { return 3340; } /* = unique id SOAP_TYPE_ns1__ClusterDasConfigInfoVmMonitoringState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasConfigInfoVmMonitoringState_() { ns1__ClusterDasConfigInfoVmMonitoringState_::soap_default(NULL); }
	virtual ~ns1__ClusterDasConfigInfoVmMonitoringState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasVmPriority_
#define SOAP_TYPE_ns1__DasVmPriority_ (3342)
/* Primitive ns1:DasVmPriority schema type: */
class SOAP_CMAC ns1__DasVmPriority_ : public xsd__anyType
{
public:
	enum ns1__DasVmPriority __item;
public:
	virtual int soap_type() const { return 3342; } /* = unique id SOAP_TYPE_ns1__DasVmPriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasVmPriority_() { ns1__DasVmPriority_::soap_default(NULL); }
	virtual ~ns1__DasVmPriority_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmSettingsRestartPriority_
#define SOAP_TYPE_ns1__ClusterDasVmSettingsRestartPriority_ (3344)
/* Primitive ns1:ClusterDasVmSettingsRestartPriority schema type: */
class SOAP_CMAC ns1__ClusterDasVmSettingsRestartPriority_ : public xsd__anyType
{
public:
	enum ns1__ClusterDasVmSettingsRestartPriority __item;
public:
	virtual int soap_type() const { return 3344; } /* = unique id SOAP_TYPE_ns1__ClusterDasVmSettingsRestartPriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasVmSettingsRestartPriority_() { ns1__ClusterDasVmSettingsRestartPriority_::soap_default(NULL); }
	virtual ~ns1__ClusterDasVmSettingsRestartPriority_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmSettingsIsolationResponse_
#define SOAP_TYPE_ns1__ClusterDasVmSettingsIsolationResponse_ (3346)
/* Primitive ns1:ClusterDasVmSettingsIsolationResponse schema type: */
class SOAP_CMAC ns1__ClusterDasVmSettingsIsolationResponse_ : public xsd__anyType
{
public:
	enum ns1__ClusterDasVmSettingsIsolationResponse __item;
public:
	virtual int soap_type() const { return 3346; } /* = unique id SOAP_TYPE_ns1__ClusterDasVmSettingsIsolationResponse_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasVmSettingsIsolationResponse_() { ns1__ClusterDasVmSettingsIsolationResponse_::soap_default(NULL); }
	virtual ~ns1__ClusterDasVmSettingsIsolationResponse_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsRecommendationReasonCode_
#define SOAP_TYPE_ns1__DrsRecommendationReasonCode_ (3348)
/* Primitive ns1:DrsRecommendationReasonCode schema type: */
class SOAP_CMAC ns1__DrsRecommendationReasonCode_ : public xsd__anyType
{
public:
	enum ns1__DrsRecommendationReasonCode __item;
public:
	virtual int soap_type() const { return 3348; } /* = unique id SOAP_TYPE_ns1__DrsRecommendationReasonCode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsRecommendationReasonCode_() { ns1__DrsRecommendationReasonCode_::soap_default(NULL); }
	virtual ~ns1__DrsRecommendationReasonCode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPowerOperationType_
#define SOAP_TYPE_ns1__HostPowerOperationType_ (3350)
/* Primitive ns1:HostPowerOperationType schema type: */
class SOAP_CMAC ns1__HostPowerOperationType_ : public xsd__anyType
{
public:
	enum ns1__HostPowerOperationType __item;
public:
	virtual int soap_type() const { return 3350; } /* = unique id SOAP_TYPE_ns1__HostPowerOperationType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPowerOperationType_() { ns1__HostPowerOperationType_::soap_default(NULL); }
	virtual ~ns1__HostPowerOperationType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterPowerOnVmOption_
#define SOAP_TYPE_ns1__ClusterPowerOnVmOption_ (3352)
/* Primitive ns1:ClusterPowerOnVmOption schema type: */
class SOAP_CMAC ns1__ClusterPowerOnVmOption_ : public xsd__anyType
{
public:
	enum ns1__ClusterPowerOnVmOption __item;
public:
	virtual int soap_type() const { return 3352; } /* = unique id SOAP_TYPE_ns1__ClusterPowerOnVmOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterPowerOnVmOption_() { ns1__ClusterPowerOnVmOption_::soap_default(NULL); }
	virtual ~ns1__ClusterPowerOnVmOption_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RecommendationType_
#define SOAP_TYPE_ns1__RecommendationType_ (3354)
/* Primitive ns1:RecommendationType schema type: */
class SOAP_CMAC ns1__RecommendationType_ : public xsd__anyType
{
public:
	enum ns1__RecommendationType __item;
public:
	virtual int soap_type() const { return 3354; } /* = unique id SOAP_TYPE_ns1__RecommendationType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RecommendationType_() { ns1__RecommendationType_::soap_default(NULL); }
	virtual ~ns1__RecommendationType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RecommendationReasonCode_
#define SOAP_TYPE_ns1__RecommendationReasonCode_ (3356)
/* Primitive ns1:RecommendationReasonCode schema type: */
class SOAP_CMAC ns1__RecommendationReasonCode_ : public xsd__anyType
{
public:
	enum ns1__RecommendationReasonCode __item;
public:
	virtual int soap_type() const { return 3356; } /* = unique id SOAP_TYPE_ns1__RecommendationReasonCode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RecommendationReasonCode_() { ns1__RecommendationReasonCode_::soap_default(NULL); }
	virtual ~ns1__RecommendationReasonCode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_
#define SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_ (3358)
/* Primitive ns1:DVPortStatusVmDirectPathGen2InactiveReasonNetwork schema type: */
class SOAP_CMAC ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_ : public xsd__anyType
{
public:
	enum ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork __item;
public:
	virtual int soap_type() const { return 3358; } /* = unique id SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_() { ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_::soap_default(NULL); }
	virtual ~ns1__DVPortStatusVmDirectPathGen2InactiveReasonNetwork_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_
#define SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_ (3360)
/* Primitive ns1:DVPortStatusVmDirectPathGen2InactiveReasonOther schema type: */
class SOAP_CMAC ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_ : public xsd__anyType
{
public:
	enum ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther __item;
public:
	virtual int soap_type() const { return 3360; } /* = unique id SOAP_TYPE_ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_() { ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_::soap_default(NULL); }
	virtual ~ns1__DVPortStatusVmDirectPathGen2InactiveReasonOther_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPortgroupPortgroupType_
#define SOAP_TYPE_ns1__DistributedVirtualPortgroupPortgroupType_ (3362)
/* Primitive ns1:DistributedVirtualPortgroupPortgroupType schema type: */
class SOAP_CMAC ns1__DistributedVirtualPortgroupPortgroupType_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualPortgroupPortgroupType __item;
public:
	virtual int soap_type() const { return 3362; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualPortgroupPortgroupType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualPortgroupPortgroupType_() { ns1__DistributedVirtualPortgroupPortgroupType_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualPortgroupPortgroupType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPortgroupMetaTagName_
#define SOAP_TYPE_ns1__DistributedVirtualPortgroupMetaTagName_ (3364)
/* Primitive ns1:DistributedVirtualPortgroupMetaTagName schema type: */
class SOAP_CMAC ns1__DistributedVirtualPortgroupMetaTagName_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualPortgroupMetaTagName __item;
public:
	virtual int soap_type() const { return 3364; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualPortgroupMetaTagName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualPortgroupMetaTagName_() { ns1__DistributedVirtualPortgroupMetaTagName_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualPortgroupMetaTagName_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_
#define SOAP_TYPE_ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_ (3366)
/* Primitive ns1:HostDistributedVirtualSwitchManagerNetworkResourcePoolKey schema type: */
class SOAP_CMAC ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_ : public xsd__anyType
{
public:
	enum ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey __item;
public:
	virtual int soap_type() const { return 3366; } /* = unique id SOAP_TYPE_ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_() { ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_::soap_default(NULL); }
	virtual ~ns1__HostDistributedVirtualSwitchManagerNetworkResourcePoolKey_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberHostComponentState_
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberHostComponentState_ (3368)
/* Primitive ns1:DistributedVirtualSwitchHostMemberHostComponentState schema type: */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberHostComponentState_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualSwitchHostMemberHostComponentState __item;
public:
	virtual int soap_type() const { return 3368; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberHostComponentState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberHostComponentState_() { ns1__DistributedVirtualSwitchHostMemberHostComponentState_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberHostComponentState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_ (3370)
/* Primitive ns1:DistributedVirtualSwitchPortConnecteeConnecteeType schema type: */
class SOAP_CMAC ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_ : public xsd__anyType
{
public:
	enum ns1__DistributedVirtualSwitchPortConnecteeConnecteeType __item;
public:
	virtual int soap_type() const { return 3370; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_() { ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchPortConnecteeConnecteeType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanPortType_
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanPortType_ (3372)
/* Primitive ns1:VmwareDistributedVirtualSwitchPvlanPortType schema type: */
class SOAP_CMAC ns1__VmwareDistributedVirtualSwitchPvlanPortType_ : public xsd__anyType
{
public:
	enum ns1__VmwareDistributedVirtualSwitchPvlanPortType __item;
public:
	virtual int soap_type() const { return 3372; } /* = unique id SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanPortType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareDistributedVirtualSwitchPvlanPortType_() { ns1__VmwareDistributedVirtualSwitchPvlanPortType_::soap_default(NULL); }
	virtual ~ns1__VmwareDistributedVirtualSwitchPvlanPortType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventEventSeverity_
#define SOAP_TYPE_ns1__EventEventSeverity_ (3374)
/* Primitive ns1:EventEventSeverity schema type: */
class SOAP_CMAC ns1__EventEventSeverity_ : public xsd__anyType
{
public:
	enum ns1__EventEventSeverity __item;
public:
	virtual int soap_type() const { return 3374; } /* = unique id SOAP_TYPE_ns1__EventEventSeverity_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventEventSeverity_() { ns1__EventEventSeverity_::soap_default(NULL); }
	virtual ~ns1__EventEventSeverity_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDisconnectedEventReasonCode_
#define SOAP_TYPE_ns1__HostDisconnectedEventReasonCode_ (3376)
/* Primitive ns1:HostDisconnectedEventReasonCode schema type: */
class SOAP_CMAC ns1__HostDisconnectedEventReasonCode_ : public xsd__anyType
{
public:
	enum ns1__HostDisconnectedEventReasonCode __item;
public:
	virtual int soap_type() const { return 3376; } /* = unique id SOAP_TYPE_ns1__HostDisconnectedEventReasonCode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDisconnectedEventReasonCode_() { ns1__HostDisconnectedEventReasonCode_::soap_default(NULL); }
	virtual ~ns1__HostDisconnectedEventReasonCode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasErrorEventHostDasErrorReason_
#define SOAP_TYPE_ns1__HostDasErrorEventHostDasErrorReason_ (3378)
/* Primitive ns1:HostDasErrorEventHostDasErrorReason schema type: */
class SOAP_CMAC ns1__HostDasErrorEventHostDasErrorReason_ : public xsd__anyType
{
public:
	enum ns1__HostDasErrorEventHostDasErrorReason __item;
public:
	virtual int soap_type() const { return 3378; } /* = unique id SOAP_TYPE_ns1__HostDasErrorEventHostDasErrorReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasErrorEventHostDasErrorReason_() { ns1__HostDasErrorEventHostDasErrorReason_::soap_default(NULL); }
	virtual ~ns1__HostDasErrorEventHostDasErrorReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmShutdownOnIsolationEventOperation_
#define SOAP_TYPE_ns1__VmShutdownOnIsolationEventOperation_ (3380)
/* Primitive ns1:VmShutdownOnIsolationEventOperation schema type: */
class SOAP_CMAC ns1__VmShutdownOnIsolationEventOperation_ : public xsd__anyType
{
public:
	enum ns1__VmShutdownOnIsolationEventOperation __item;
public:
	virtual int soap_type() const { return 3380; } /* = unique id SOAP_TYPE_ns1__VmShutdownOnIsolationEventOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmShutdownOnIsolationEventOperation_() { ns1__VmShutdownOnIsolationEventOperation_::soap_default(NULL); }
	virtual ~ns1__VmShutdownOnIsolationEventOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasBeingResetEventReasonCode_
#define SOAP_TYPE_ns1__VmDasBeingResetEventReasonCode_ (3382)
/* Primitive ns1:VmDasBeingResetEventReasonCode schema type: */
class SOAP_CMAC ns1__VmDasBeingResetEventReasonCode_ : public xsd__anyType
{
public:
	enum ns1__VmDasBeingResetEventReasonCode __item;
public:
	virtual int soap_type() const { return 3382; } /* = unique id SOAP_TYPE_ns1__VmDasBeingResetEventReasonCode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasBeingResetEventReasonCode_() { ns1__VmDasBeingResetEventReasonCode_::soap_default(NULL); }
	virtual ~ns1__VmDasBeingResetEventReasonCode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedStartingSecondaryEventFailureReason_
#define SOAP_TYPE_ns1__VmFailedStartingSecondaryEventFailureReason_ (3384)
/* Primitive ns1:VmFailedStartingSecondaryEventFailureReason schema type: */
class SOAP_CMAC ns1__VmFailedStartingSecondaryEventFailureReason_ : public xsd__anyType
{
public:
	enum ns1__VmFailedStartingSecondaryEventFailureReason __item;
public:
	virtual int soap_type() const { return 3384; } /* = unique id SOAP_TYPE_ns1__VmFailedStartingSecondaryEventFailureReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedStartingSecondaryEventFailureReason_() { ns1__VmFailedStartingSecondaryEventFailureReason_::soap_default(NULL); }
	virtual ~ns1__VmFailedStartingSecondaryEventFailureReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventCategory_
#define SOAP_TYPE_ns1__EventCategory_ (3386)
/* Primitive ns1:EventCategory schema type: */
class SOAP_CMAC ns1__EventCategory_ : public xsd__anyType
{
public:
	enum ns1__EventCategory __item;
public:
	virtual int soap_type() const { return 3386; } /* = unique id SOAP_TYPE_ns1__EventCategory_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventCategory_() { ns1__EventCategory_::soap_default(NULL); }
	virtual ~ns1__EventCategory_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpecRecursionOption_
#define SOAP_TYPE_ns1__EventFilterSpecRecursionOption_ (3388)
/* Primitive ns1:EventFilterSpecRecursionOption schema type: */
class SOAP_CMAC ns1__EventFilterSpecRecursionOption_ : public xsd__anyType
{
public:
	enum ns1__EventFilterSpecRecursionOption __item;
public:
	virtual int soap_type() const { return 3388; } /* = unique id SOAP_TYPE_ns1__EventFilterSpecRecursionOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventFilterSpecRecursionOption_() { ns1__EventFilterSpecRecursionOption_::soap_default(NULL); }
	virtual ~ns1__EventFilterSpecRecursionOption_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AffinityType_
#define SOAP_TYPE_ns1__AffinityType_ (3390)
/* Primitive ns1:AffinityType schema type: */
class SOAP_CMAC ns1__AffinityType_ : public xsd__anyType
{
public:
	enum ns1__AffinityType __item;
public:
	virtual int soap_type() const { return 3390; } /* = unique id SOAP_TYPE_ns1__AffinityType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AffinityType_() { ns1__AffinityType_::soap_default(NULL); }
	virtual ~ns1__AffinityType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AgentInstallFailedReason_
#define SOAP_TYPE_ns1__AgentInstallFailedReason_ (3392)
/* Primitive ns1:AgentInstallFailedReason schema type: */
class SOAP_CMAC ns1__AgentInstallFailedReason_ : public xsd__anyType
{
public:
	enum ns1__AgentInstallFailedReason __item;
public:
	virtual int soap_type() const { return 3392; } /* = unique id SOAP_TYPE_ns1__AgentInstallFailedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AgentInstallFailedReason_() { ns1__AgentInstallFailedReason_::soap_default(NULL); }
	virtual ~ns1__AgentInstallFailedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotMoveFaultToleranceVmMoveType_
#define SOAP_TYPE_ns1__CannotMoveFaultToleranceVmMoveType_ (3394)
/* Primitive ns1:CannotMoveFaultToleranceVmMoveType schema type: */
class SOAP_CMAC ns1__CannotMoveFaultToleranceVmMoveType_ : public xsd__anyType
{
public:
	enum ns1__CannotMoveFaultToleranceVmMoveType __item;
public:
	virtual int soap_type() const { return 3394; } /* = unique id SOAP_TYPE_ns1__CannotMoveFaultToleranceVmMoveType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotMoveFaultToleranceVmMoveType_() { ns1__CannotMoveFaultToleranceVmMoveType_::soap_default(NULL); }
	virtual ~ns1__CannotMoveFaultToleranceVmMoveType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasConfigFaultDasConfigFaultReason_
#define SOAP_TYPE_ns1__DasConfigFaultDasConfigFaultReason_ (3396)
/* Primitive ns1:DasConfigFaultDasConfigFaultReason schema type: */
class SOAP_CMAC ns1__DasConfigFaultDasConfigFaultReason_ : public xsd__anyType
{
public:
	enum ns1__DasConfigFaultDasConfigFaultReason __item;
public:
	virtual int soap_type() const { return 3396; } /* = unique id SOAP_TYPE_ns1__DasConfigFaultDasConfigFaultReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasConfigFaultDasConfigFaultReason_() { ns1__DasConfigFaultDasConfigFaultReason_::soap_default(NULL); }
	virtual ~ns1__DasConfigFaultDasConfigFaultReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceNotSupportedReason_
#define SOAP_TYPE_ns1__DeviceNotSupportedReason_ (3398)
/* Primitive ns1:DeviceNotSupportedReason schema type: */
class SOAP_CMAC ns1__DeviceNotSupportedReason_ : public xsd__anyType
{
public:
	enum ns1__DeviceNotSupportedReason __item;
public:
	virtual int soap_type() const { return 3398; } /* = unique id SOAP_TYPE_ns1__DeviceNotSupportedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceNotSupportedReason_() { ns1__DeviceNotSupportedReason_::soap_default(NULL); }
	virtual ~ns1__DeviceNotSupportedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FtIssuesOnHostHostSelectionType_
#define SOAP_TYPE_ns1__FtIssuesOnHostHostSelectionType_ (3400)
/* Primitive ns1:FtIssuesOnHostHostSelectionType schema type: */
class SOAP_CMAC ns1__FtIssuesOnHostHostSelectionType_ : public xsd__anyType
{
public:
	enum ns1__FtIssuesOnHostHostSelectionType __item;
public:
	virtual int soap_type() const { return 3400; } /* = unique id SOAP_TYPE_ns1__FtIssuesOnHostHostSelectionType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FtIssuesOnHostHostSelectionType_() { ns1__FtIssuesOnHostHostSelectionType_::soap_default(NULL); }
	virtual ~ns1__FtIssuesOnHostHostSelectionType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForFaultToleranceReason_
#define SOAP_TYPE_ns1__HostIncompatibleForFaultToleranceReason_ (3402)
/* Primitive ns1:HostIncompatibleForFaultToleranceReason schema type: */
class SOAP_CMAC ns1__HostIncompatibleForFaultToleranceReason_ : public xsd__anyType
{
public:
	enum ns1__HostIncompatibleForFaultToleranceReason __item;
public:
	virtual int soap_type() const { return 3402; } /* = unique id SOAP_TYPE_ns1__HostIncompatibleForFaultToleranceReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIncompatibleForFaultToleranceReason_() { ns1__HostIncompatibleForFaultToleranceReason_::soap_default(NULL); }
	virtual ~ns1__HostIncompatibleForFaultToleranceReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForRecordReplayReason_
#define SOAP_TYPE_ns1__HostIncompatibleForRecordReplayReason_ (3404)
/* Primitive ns1:HostIncompatibleForRecordReplayReason schema type: */
class SOAP_CMAC ns1__HostIncompatibleForRecordReplayReason_ : public xsd__anyType
{
public:
	enum ns1__HostIncompatibleForRecordReplayReason __item;
public:
	virtual int soap_type() const { return 3404; } /* = unique id SOAP_TYPE_ns1__HostIncompatibleForRecordReplayReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIncompatibleForRecordReplayReason_() { ns1__HostIncompatibleForRecordReplayReason_::soap_default(NULL); }
	virtual ~ns1__HostIncompatibleForRecordReplayReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseAssignmentFailedReason_
#define SOAP_TYPE_ns1__LicenseAssignmentFailedReason_ (3406)
/* Primitive ns1:LicenseAssignmentFailedReason schema type: */
class SOAP_CMAC ns1__LicenseAssignmentFailedReason_ : public xsd__anyType
{
public:
	enum ns1__LicenseAssignmentFailedReason __item;
public:
	virtual int soap_type() const { return 3406; } /* = unique id SOAP_TYPE_ns1__LicenseAssignmentFailedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseAssignmentFailedReason_() { ns1__LicenseAssignmentFailedReason_::soap_default(NULL); }
	virtual ~ns1__LicenseAssignmentFailedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedDeviceForFTDeviceType_
#define SOAP_TYPE_ns1__NotSupportedDeviceForFTDeviceType_ (3408)
/* Primitive ns1:NotSupportedDeviceForFTDeviceType schema type: */
class SOAP_CMAC ns1__NotSupportedDeviceForFTDeviceType_ : public xsd__anyType
{
public:
	enum ns1__NotSupportedDeviceForFTDeviceType __item;
public:
	virtual int soap_type() const { return 3408; } /* = unique id SOAP_TYPE_ns1__NotSupportedDeviceForFTDeviceType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupportedDeviceForFTDeviceType_() { ns1__NotSupportedDeviceForFTDeviceType_::soap_default(NULL); }
	virtual ~ns1__NotSupportedDeviceForFTDeviceType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumVirtualCpusIncompatibleReason_
#define SOAP_TYPE_ns1__NumVirtualCpusIncompatibleReason_ (3410)
/* Primitive ns1:NumVirtualCpusIncompatibleReason schema type: */
class SOAP_CMAC ns1__NumVirtualCpusIncompatibleReason_ : public xsd__anyType
{
public:
	enum ns1__NumVirtualCpusIncompatibleReason __item;
public:
	virtual int soap_type() const { return 3410; } /* = unique id SOAP_TYPE_ns1__NumVirtualCpusIncompatibleReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumVirtualCpusIncompatibleReason_() { ns1__NumVirtualCpusIncompatibleReason_::soap_default(NULL); }
	virtual ~ns1__NumVirtualCpusIncompatibleReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceConfigIssueReasonForIssue_
#define SOAP_TYPE_ns1__VmFaultToleranceConfigIssueReasonForIssue_ (3412)
/* Primitive ns1:VmFaultToleranceConfigIssueReasonForIssue schema type: */
class SOAP_CMAC ns1__VmFaultToleranceConfigIssueReasonForIssue_ : public xsd__anyType
{
public:
	enum ns1__VmFaultToleranceConfigIssueReasonForIssue __item;
public:
	virtual int soap_type() const { return 3412; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceConfigIssueReasonForIssue_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceConfigIssueReasonForIssue_() { ns1__VmFaultToleranceConfigIssueReasonForIssue_::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceConfigIssueReasonForIssue_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBackingDeviceType_
#define SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBackingDeviceType_ (3414)
/* Primitive ns1:VmFaultToleranceInvalidFileBackingDeviceType schema type: */
class SOAP_CMAC ns1__VmFaultToleranceInvalidFileBackingDeviceType_ : public xsd__anyType
{
public:
	enum ns1__VmFaultToleranceInvalidFileBackingDeviceType __item;
public:
	virtual int soap_type() const { return 3414; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBackingDeviceType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceInvalidFileBackingDeviceType_() { ns1__VmFaultToleranceInvalidFileBackingDeviceType_::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceInvalidFileBackingDeviceType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostActiveDirectoryInfoDomainMembershipStatus_
#define SOAP_TYPE_ns1__HostActiveDirectoryInfoDomainMembershipStatus_ (3416)
/* Primitive ns1:HostActiveDirectoryInfoDomainMembershipStatus schema type: */
class SOAP_CMAC ns1__HostActiveDirectoryInfoDomainMembershipStatus_ : public xsd__anyType
{
public:
	enum ns1__HostActiveDirectoryInfoDomainMembershipStatus __item;
public:
	virtual int soap_type() const { return 3416; } /* = unique id SOAP_TYPE_ns1__HostActiveDirectoryInfoDomainMembershipStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostActiveDirectoryInfoDomainMembershipStatus_() { ns1__HostActiveDirectoryInfoDomainMembershipStatus_::soap_default(NULL); }
	virtual ~ns1__HostActiveDirectoryInfoDomainMembershipStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartAction_
#define SOAP_TYPE_ns1__AutoStartAction_ (3418)
/* Primitive ns1:AutoStartAction schema type: */
class SOAP_CMAC ns1__AutoStartAction_ : public xsd__anyType
{
public:
	enum ns1__AutoStartAction __item;
public:
	virtual int soap_type() const { return 3418; } /* = unique id SOAP_TYPE_ns1__AutoStartAction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartAction_() { ns1__AutoStartAction_::soap_default(NULL); }
	virtual ~ns1__AutoStartAction_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartWaitHeartbeatSetting_
#define SOAP_TYPE_ns1__AutoStartWaitHeartbeatSetting_ (3420)
/* Primitive ns1:AutoStartWaitHeartbeatSetting schema type: */
class SOAP_CMAC ns1__AutoStartWaitHeartbeatSetting_ : public xsd__anyType
{
public:
	enum ns1__AutoStartWaitHeartbeatSetting __item;
public:
	virtual int soap_type() const { return 3420; } /* = unique id SOAP_TYPE_ns1__AutoStartWaitHeartbeatSetting_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartWaitHeartbeatSetting_() { ns1__AutoStartWaitHeartbeatSetting_::soap_default(NULL); }
	virtual ~ns1__AutoStartWaitHeartbeatSetting_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostReplayUnsupportedReason_
#define SOAP_TYPE_ns1__HostReplayUnsupportedReason_ (3422)
/* Primitive ns1:HostReplayUnsupportedReason schema type: */
class SOAP_CMAC ns1__HostReplayUnsupportedReason_ : public xsd__anyType
{
public:
	enum ns1__HostReplayUnsupportedReason __item;
public:
	virtual int soap_type() const { return 3422; } /* = unique id SOAP_TYPE_ns1__HostReplayUnsupportedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostReplayUnsupportedReason_() { ns1__HostReplayUnsupportedReason_::soap_default(NULL); }
	virtual ~ns1__HostReplayUnsupportedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCapabilityFtUnsupportedReason_
#define SOAP_TYPE_ns1__HostCapabilityFtUnsupportedReason_ (3424)
/* Primitive ns1:HostCapabilityFtUnsupportedReason schema type: */
class SOAP_CMAC ns1__HostCapabilityFtUnsupportedReason_ : public xsd__anyType
{
public:
	enum ns1__HostCapabilityFtUnsupportedReason __item;
public:
	virtual int soap_type() const { return 3424; } /* = unique id SOAP_TYPE_ns1__HostCapabilityFtUnsupportedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCapabilityFtUnsupportedReason_() { ns1__HostCapabilityFtUnsupportedReason_::soap_default(NULL); }
	virtual ~ns1__HostCapabilityFtUnsupportedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_
#define SOAP_TYPE_ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_ (3426)
/* Primitive ns1:HostCapabilityVmDirectPathGen2UnsupportedReason schema type: */
class SOAP_CMAC ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_ : public xsd__anyType
{
public:
	enum ns1__HostCapabilityVmDirectPathGen2UnsupportedReason __item;
public:
	virtual int soap_type() const { return 3426; } /* = unique id SOAP_TYPE_ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_() { ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_::soap_default(NULL); }
	virtual ~ns1__HostCapabilityVmDirectPathGen2UnsupportedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigChangeMode_
#define SOAP_TYPE_ns1__HostConfigChangeMode_ (3428)
/* Primitive ns1:HostConfigChangeMode schema type: */
class SOAP_CMAC ns1__HostConfigChangeMode_ : public xsd__anyType
{
public:
	enum ns1__HostConfigChangeMode __item;
public:
	virtual int soap_type() const { return 3428; } /* = unique id SOAP_TYPE_ns1__HostConfigChangeMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigChangeMode_() { ns1__HostConfigChangeMode_::soap_default(NULL); }
	virtual ~ns1__HostConfigChangeMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigChangeOperation_
#define SOAP_TYPE_ns1__HostConfigChangeOperation_ (3430)
/* Primitive ns1:HostConfigChangeOperation schema type: */
class SOAP_CMAC ns1__HostConfigChangeOperation_ : public xsd__anyType
{
public:
	enum ns1__HostConfigChangeOperation __item;
public:
	virtual int soap_type() const { return 3430; } /* = unique id SOAP_TYPE_ns1__HostConfigChangeOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigChangeOperation_() { ns1__HostConfigChangeOperation_::soap_default(NULL); }
	virtual ~ns1__HostConfigChangeOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticPartitionStorageType_
#define SOAP_TYPE_ns1__DiagnosticPartitionStorageType_ (3432)
/* Primitive ns1:DiagnosticPartitionStorageType schema type: */
class SOAP_CMAC ns1__DiagnosticPartitionStorageType_ : public xsd__anyType
{
public:
	enum ns1__DiagnosticPartitionStorageType __item;
public:
	virtual int soap_type() const { return 3432; } /* = unique id SOAP_TYPE_ns1__DiagnosticPartitionStorageType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticPartitionStorageType_() { ns1__DiagnosticPartitionStorageType_::soap_default(NULL); }
	virtual ~ns1__DiagnosticPartitionStorageType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticPartitionType_
#define SOAP_TYPE_ns1__DiagnosticPartitionType_ (3434)
/* Primitive ns1:DiagnosticPartitionType schema type: */
class SOAP_CMAC ns1__DiagnosticPartitionType_ : public xsd__anyType
{
public:
	enum ns1__DiagnosticPartitionType __item;
public:
	virtual int soap_type() const { return 3434; } /* = unique id SOAP_TYPE_ns1__DiagnosticPartitionType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticPartitionType_() { ns1__DiagnosticPartitionType_::soap_default(NULL); }
	virtual ~ns1__DiagnosticPartitionType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionInfoType_
#define SOAP_TYPE_ns1__HostDiskPartitionInfoType_ (3436)
/* Primitive ns1:HostDiskPartitionInfoType schema type: */
class SOAP_CMAC ns1__HostDiskPartitionInfoType_ : public xsd__anyType
{
public:
	enum ns1__HostDiskPartitionInfoType __item;
public:
	virtual int soap_type() const { return 3436; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionInfoType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionInfoType_() { ns1__HostDiskPartitionInfoType_::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionInfoType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFeatureVersionKey_
#define SOAP_TYPE_ns1__HostFeatureVersionKey_ (3438)
/* Primitive ns1:HostFeatureVersionKey schema type: */
class SOAP_CMAC ns1__HostFeatureVersionKey_ : public xsd__anyType
{
public:
	enum ns1__HostFeatureVersionKey __item;
public:
	virtual int soap_type() const { return 3438; } /* = unique id SOAP_TYPE_ns1__HostFeatureVersionKey_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFeatureVersionKey_() { ns1__HostFeatureVersionKey_::soap_default(NULL); }
	virtual ~ns1__HostFeatureVersionKey_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileSystemMountInfoVStorageSupportStatus_
#define SOAP_TYPE_ns1__FileSystemMountInfoVStorageSupportStatus_ (3440)
/* Primitive ns1:FileSystemMountInfoVStorageSupportStatus schema type: */
class SOAP_CMAC ns1__FileSystemMountInfoVStorageSupportStatus_ : public xsd__anyType
{
public:
	enum ns1__FileSystemMountInfoVStorageSupportStatus __item;
public:
	virtual int soap_type() const { return 3440; } /* = unique id SOAP_TYPE_ns1__FileSystemMountInfoVStorageSupportStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileSystemMountInfoVStorageSupportStatus_() { ns1__FileSystemMountInfoVStorageSupportStatus_::soap_default(NULL); }
	virtual ~ns1__FileSystemMountInfoVStorageSupportStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPowerManagementInfoPolicyType_
#define SOAP_TYPE_ns1__HostCpuPowerManagementInfoPolicyType_ (3442)
/* Primitive ns1:HostCpuPowerManagementInfoPolicyType schema type: */
class SOAP_CMAC ns1__HostCpuPowerManagementInfoPolicyType_ : public xsd__anyType
{
public:
	enum ns1__HostCpuPowerManagementInfoPolicyType __item;
public:
	virtual int soap_type() const { return 3442; } /* = unique id SOAP_TYPE_ns1__HostCpuPowerManagementInfoPolicyType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuPowerManagementInfoPolicyType_() { ns1__HostCpuPowerManagementInfoPolicyType_::soap_default(NULL); }
	virtual ~ns1__HostCpuPowerManagementInfoPolicyType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPackageVendor_
#define SOAP_TYPE_ns1__HostCpuPackageVendor_ (3444)
/* Primitive ns1:HostCpuPackageVendor schema type: */
class SOAP_CMAC ns1__HostCpuPackageVendor_ : public xsd__anyType
{
public:
	enum ns1__HostCpuPackageVendor __item;
public:
	virtual int soap_type() const { return 3444; } /* = unique id SOAP_TYPE_ns1__HostCpuPackageVendor_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuPackageVendor_() { ns1__HostCpuPackageVendor_::soap_default(NULL); }
	virtual ~ns1__HostCpuPackageVendor_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareElementStatus_
#define SOAP_TYPE_ns1__HostHardwareElementStatus_ (3446)
/* Primitive ns1:HostHardwareElementStatus schema type: */
class SOAP_CMAC ns1__HostHardwareElementStatus_ : public xsd__anyType
{
public:
	enum ns1__HostHardwareElementStatus __item;
public:
	virtual int soap_type() const { return 3446; } /* = unique id SOAP_TYPE_ns1__HostHardwareElementStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHardwareElementStatus_() { ns1__HostHardwareElementStatus_::soap_default(NULL); }
	virtual ~ns1__HostHardwareElementStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FibreChannelPortType_
#define SOAP_TYPE_ns1__FibreChannelPortType_ (3448)
/* Primitive ns1:FibreChannelPortType schema type: */
class SOAP_CMAC ns1__FibreChannelPortType_ : public xsd__anyType
{
public:
	enum ns1__FibreChannelPortType __item;
public:
	virtual int soap_type() const { return 3448; } /* = unique id SOAP_TYPE_ns1__FibreChannelPortType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FibreChannelPortType_() { ns1__FibreChannelPortType_::soap_default(NULL); }
	virtual ~ns1__FibreChannelPortType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InternetScsiSnsDiscoveryMethod_
#define SOAP_TYPE_ns1__InternetScsiSnsDiscoveryMethod_ (3450)
/* Primitive ns1:InternetScsiSnsDiscoveryMethod schema type: */
class SOAP_CMAC ns1__InternetScsiSnsDiscoveryMethod_ : public xsd__anyType
{
public:
	enum ns1__InternetScsiSnsDiscoveryMethod __item;
public:
	virtual int soap_type() const { return 3450; } /* = unique id SOAP_TYPE_ns1__InternetScsiSnsDiscoveryMethod_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InternetScsiSnsDiscoveryMethod_() { ns1__InternetScsiSnsDiscoveryMethod_::soap_default(NULL); }
	virtual ~ns1__InternetScsiSnsDiscoveryMethod_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SlpDiscoveryMethod_
#define SOAP_TYPE_ns1__SlpDiscoveryMethod_ (3452)
/* Primitive ns1:SlpDiscoveryMethod schema type: */
class SOAP_CMAC ns1__SlpDiscoveryMethod_ : public xsd__anyType
{
public:
	enum ns1__SlpDiscoveryMethod __item;
public:
	virtual int soap_type() const { return 3452; } /* = unique id SOAP_TYPE_ns1__SlpDiscoveryMethod_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SlpDiscoveryMethod_() { ns1__SlpDiscoveryMethod_::soap_default(NULL); }
	virtual ~ns1__SlpDiscoveryMethod_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaChapAuthenticationType_
#define SOAP_TYPE_ns1__HostInternetScsiHbaChapAuthenticationType_ (3454)
/* Primitive ns1:HostInternetScsiHbaChapAuthenticationType schema type: */
class SOAP_CMAC ns1__HostInternetScsiHbaChapAuthenticationType_ : public xsd__anyType
{
public:
	enum ns1__HostInternetScsiHbaChapAuthenticationType __item;
public:
	virtual int soap_type() const { return 3454; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaChapAuthenticationType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaChapAuthenticationType_() { ns1__HostInternetScsiHbaChapAuthenticationType_::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaChapAuthenticationType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDigestType_
#define SOAP_TYPE_ns1__HostInternetScsiHbaDigestType_ (3456)
/* Primitive ns1:HostInternetScsiHbaDigestType schema type: */
class SOAP_CMAC ns1__HostInternetScsiHbaDigestType_ : public xsd__anyType
{
public:
	enum ns1__HostInternetScsiHbaDigestType __item;
public:
	virtual int soap_type() const { return 3456; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaDigestType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaDigestType_() { ns1__HostInternetScsiHbaDigestType_::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaDigestType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfigType_
#define SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfigType_ (3458)
/* Primitive ns1:HostIpConfigIpV6AddressConfigType schema type: */
class SOAP_CMAC ns1__HostIpConfigIpV6AddressConfigType_ : public xsd__anyType
{
public:
	enum ns1__HostIpConfigIpV6AddressConfigType __item;
public:
	virtual int soap_type() const { return 3458; } /* = unique id SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfigType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpConfigIpV6AddressConfigType_() { ns1__HostIpConfigIpV6AddressConfigType_::soap_default(NULL); }
	virtual ~ns1__HostIpConfigIpV6AddressConfigType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6AddressStatus_
#define SOAP_TYPE_ns1__HostIpConfigIpV6AddressStatus_ (3460)
/* Primitive ns1:HostIpConfigIpV6AddressStatus schema type: */
class SOAP_CMAC ns1__HostIpConfigIpV6AddressStatus_ : public xsd__anyType
{
public:
	enum ns1__HostIpConfigIpV6AddressStatus __item;
public:
	virtual int soap_type() const { return 3460; } /* = unique id SOAP_TYPE_ns1__HostIpConfigIpV6AddressStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpConfigIpV6AddressStatus_() { ns1__HostIpConfigIpV6AddressStatus_::soap_default(NULL); }
	virtual ~ns1__HostIpConfigIpV6AddressStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigProtocolType_
#define SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigProtocolType_ (3462)
/* Primitive ns1:LinkDiscoveryProtocolConfigProtocolType schema type: */
class SOAP_CMAC ns1__LinkDiscoveryProtocolConfigProtocolType_ : public xsd__anyType
{
public:
	enum ns1__LinkDiscoveryProtocolConfigProtocolType __item;
public:
	virtual int soap_type() const { return 3462; } /* = unique id SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigProtocolType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LinkDiscoveryProtocolConfigProtocolType_() { ns1__LinkDiscoveryProtocolConfigProtocolType_::soap_default(NULL); }
	virtual ~ns1__LinkDiscoveryProtocolConfigProtocolType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigOperationType_
#define SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigOperationType_ (3464)
/* Primitive ns1:LinkDiscoveryProtocolConfigOperationType schema type: */
class SOAP_CMAC ns1__LinkDiscoveryProtocolConfigOperationType_ : public xsd__anyType
{
public:
	enum ns1__LinkDiscoveryProtocolConfigOperationType __item;
public:
	virtual int soap_type() const { return 3464; } /* = unique id SOAP_TYPE_ns1__LinkDiscoveryProtocolConfigOperationType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LinkDiscoveryProtocolConfigOperationType_() { ns1__LinkDiscoveryProtocolConfigOperationType_::soap_default(NULL); }
	virtual ~ns1__LinkDiscoveryProtocolConfigOperationType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLowLevelProvisioningManagerReloadTarget_
#define SOAP_TYPE_ns1__HostLowLevelProvisioningManagerReloadTarget_ (3466)
/* Primitive ns1:HostLowLevelProvisioningManagerReloadTarget schema type: */
class SOAP_CMAC ns1__HostLowLevelProvisioningManagerReloadTarget_ : public xsd__anyType
{
public:
	enum ns1__HostLowLevelProvisioningManagerReloadTarget __item;
public:
	virtual int soap_type() const { return 3466; } /* = unique id SOAP_TYPE_ns1__HostLowLevelProvisioningManagerReloadTarget_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLowLevelProvisioningManagerReloadTarget_() { ns1__HostLowLevelProvisioningManagerReloadTarget_::soap_default(NULL); }
	virtual ~ns1__HostLowLevelProvisioningManagerReloadTarget_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMemoryAllocationPolicy_
#define SOAP_TYPE_ns1__VirtualMachineMemoryAllocationPolicy_ (3468)
/* Primitive ns1:VirtualMachineMemoryAllocationPolicy schema type: */
class SOAP_CMAC ns1__VirtualMachineMemoryAllocationPolicy_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineMemoryAllocationPolicy __item;
public:
	virtual int soap_type() const { return 3468; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMemoryAllocationPolicy_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMemoryAllocationPolicy_() { ns1__VirtualMachineMemoryAllocationPolicy_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMemoryAllocationPolicy_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMountMode_
#define SOAP_TYPE_ns1__HostMountMode_ (3470)
/* Primitive ns1:HostMountMode schema type: */
class SOAP_CMAC ns1__HostMountMode_ : public xsd__anyType
{
public:
	enum ns1__HostMountMode __item;
public:
	virtual int soap_type() const { return 3470; } /* = unique id SOAP_TYPE_ns1__HostMountMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMountMode_() { ns1__HostMountMode_::soap_default(NULL); }
	virtual ~ns1__HostMountMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MultipathState_
#define SOAP_TYPE_ns1__MultipathState_ (3472)
/* Primitive ns1:MultipathState schema type: */
class SOAP_CMAC ns1__MultipathState_ : public xsd__anyType
{
public:
	enum ns1__MultipathState __item;
public:
	virtual int soap_type() const { return 3472; } /* = unique id SOAP_TYPE_ns1__MultipathState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MultipathState_() { ns1__MultipathState_::soap_default(NULL); }
	virtual ~ns1__MultipathState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNumericSensorHealthState_
#define SOAP_TYPE_ns1__HostNumericSensorHealthState_ (3474)
/* Primitive ns1:HostNumericSensorHealthState schema type: */
class SOAP_CMAC ns1__HostNumericSensorHealthState_ : public xsd__anyType
{
public:
	enum ns1__HostNumericSensorHealthState __item;
public:
	virtual int soap_type() const { return 3474; } /* = unique id SOAP_TYPE_ns1__HostNumericSensorHealthState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNumericSensorHealthState_() { ns1__HostNumericSensorHealthState_::soap_default(NULL); }
	virtual ~ns1__HostNumericSensorHealthState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNumericSensorType_
#define SOAP_TYPE_ns1__HostNumericSensorType_ (3476)
/* Primitive ns1:HostNumericSensorType schema type: */
class SOAP_CMAC ns1__HostNumericSensorType_ : public xsd__anyType
{
public:
	enum ns1__HostNumericSensorType __item;
public:
	virtual int soap_type() const { return 3476; } /* = unique id SOAP_TYPE_ns1__HostNumericSensorType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNumericSensorType_() { ns1__HostNumericSensorType_::soap_default(NULL); }
	virtual ~ns1__HostNumericSensorType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerReason_
#define SOAP_TYPE_ns1__HostPatchManagerReason_ (3478)
/* Primitive ns1:HostPatchManagerReason schema type: */
class SOAP_CMAC ns1__HostPatchManagerReason_ : public xsd__anyType
{
public:
	enum ns1__HostPatchManagerReason __item;
public:
	virtual int soap_type() const { return 3478; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerReason_() { ns1__HostPatchManagerReason_::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerIntegrityStatus_
#define SOAP_TYPE_ns1__HostPatchManagerIntegrityStatus_ (3480)
/* Primitive ns1:HostPatchManagerIntegrityStatus schema type: */
class SOAP_CMAC ns1__HostPatchManagerIntegrityStatus_ : public xsd__anyType
{
public:
	enum ns1__HostPatchManagerIntegrityStatus __item;
public:
	virtual int soap_type() const { return 3480; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerIntegrityStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerIntegrityStatus_() { ns1__HostPatchManagerIntegrityStatus_::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerIntegrityStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerInstallState_
#define SOAP_TYPE_ns1__HostPatchManagerInstallState_ (3482)
/* Primitive ns1:HostPatchManagerInstallState schema type: */
class SOAP_CMAC ns1__HostPatchManagerInstallState_ : public xsd__anyType
{
public:
	enum ns1__HostPatchManagerInstallState __item;
public:
	virtual int soap_type() const { return 3482; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerInstallState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerInstallState_() { ns1__HostPatchManagerInstallState_::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerInstallState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicVmDirectPathGen2SupportedMode_
#define SOAP_TYPE_ns1__PhysicalNicVmDirectPathGen2SupportedMode_ (3484)
/* Primitive ns1:PhysicalNicVmDirectPathGen2SupportedMode schema type: */
class SOAP_CMAC ns1__PhysicalNicVmDirectPathGen2SupportedMode_ : public xsd__anyType
{
public:
	enum ns1__PhysicalNicVmDirectPathGen2SupportedMode __item;
public:
	virtual int soap_type() const { return 3484; } /* = unique id SOAP_TYPE_ns1__PhysicalNicVmDirectPathGen2SupportedMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicVmDirectPathGen2SupportedMode_() { ns1__PhysicalNicVmDirectPathGen2SupportedMode_::soap_default(NULL); }
	virtual ~ns1__PhysicalNicVmDirectPathGen2SupportedMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_
#define SOAP_TYPE_ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_ (3486)
/* Primitive ns1:PhysicalNicResourcePoolSchedulerDisallowedReason schema type: */
class SOAP_CMAC ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_ : public xsd__anyType
{
public:
	enum ns1__PhysicalNicResourcePoolSchedulerDisallowedReason __item;
public:
	virtual int soap_type() const { return 3486; } /* = unique id SOAP_TYPE_ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_() { ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_::soap_default(NULL); }
	virtual ~ns1__PhysicalNicResourcePoolSchedulerDisallowedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PortGroupConnecteeType_
#define SOAP_TYPE_ns1__PortGroupConnecteeType_ (3488)
/* Primitive ns1:PortGroupConnecteeType schema type: */
class SOAP_CMAC ns1__PortGroupConnecteeType_ : public xsd__anyType
{
public:
	enum ns1__PortGroupConnecteeType __item;
public:
	virtual int soap_type() const { return 3488; } /* = unique id SOAP_TYPE_ns1__PortGroupConnecteeType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PortGroupConnecteeType_() { ns1__PortGroupConnecteeType_::soap_default(NULL); }
	virtual ~ns1__PortGroupConnecteeType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRuleDirection_
#define SOAP_TYPE_ns1__HostFirewallRuleDirection_ (3490)
/* Primitive ns1:HostFirewallRuleDirection schema type: */
class SOAP_CMAC ns1__HostFirewallRuleDirection_ : public xsd__anyType
{
public:
	enum ns1__HostFirewallRuleDirection __item;
public:
	virtual int soap_type() const { return 3490; } /* = unique id SOAP_TYPE_ns1__HostFirewallRuleDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallRuleDirection_() { ns1__HostFirewallRuleDirection_::soap_default(NULL); }
	virtual ~ns1__HostFirewallRuleDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRuleProtocol_
#define SOAP_TYPE_ns1__HostFirewallRuleProtocol_ (3492)
/* Primitive ns1:HostFirewallRuleProtocol schema type: */
class SOAP_CMAC ns1__HostFirewallRuleProtocol_ : public xsd__anyType
{
public:
	enum ns1__HostFirewallRuleProtocol __item;
public:
	virtual int soap_type() const { return 3492; } /* = unique id SOAP_TYPE_ns1__HostFirewallRuleProtocol_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallRuleProtocol_() { ns1__HostFirewallRuleProtocol_::soap_default(NULL); }
	virtual ~ns1__HostFirewallRuleProtocol_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunType_
#define SOAP_TYPE_ns1__ScsiLunType_ (3494)
/* Primitive ns1:ScsiLunType schema type: */
class SOAP_CMAC ns1__ScsiLunType_ : public xsd__anyType
{
public:
	enum ns1__ScsiLunType __item;
public:
	virtual int soap_type() const { return 3494; } /* = unique id SOAP_TYPE_ns1__ScsiLunType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunType_() { ns1__ScsiLunType_::soap_default(NULL); }
	virtual ~ns1__ScsiLunType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunState_
#define SOAP_TYPE_ns1__ScsiLunState_ (3496)
/* Primitive ns1:ScsiLunState schema type: */
class SOAP_CMAC ns1__ScsiLunState_ : public xsd__anyType
{
public:
	enum ns1__ScsiLunState __item;
public:
	virtual int soap_type() const { return 3496; } /* = unique id SOAP_TYPE_ns1__ScsiLunState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunState_() { ns1__ScsiLunState_::soap_default(NULL); }
	virtual ~ns1__ScsiLunState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunDescriptorQuality_
#define SOAP_TYPE_ns1__ScsiLunDescriptorQuality_ (3498)
/* Primitive ns1:ScsiLunDescriptorQuality schema type: */
class SOAP_CMAC ns1__ScsiLunDescriptorQuality_ : public xsd__anyType
{
public:
	enum ns1__ScsiLunDescriptorQuality __item;
public:
	virtual int soap_type() const { return 3498; } /* = unique id SOAP_TYPE_ns1__ScsiLunDescriptorQuality_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunDescriptorQuality_() { ns1__ScsiLunDescriptorQuality_::soap_default(NULL); }
	virtual ~ns1__ScsiLunDescriptorQuality_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunVStorageSupportStatus_
#define SOAP_TYPE_ns1__ScsiLunVStorageSupportStatus_ (3500)
/* Primitive ns1:ScsiLunVStorageSupportStatus schema type: */
class SOAP_CMAC ns1__ScsiLunVStorageSupportStatus_ : public xsd__anyType
{
public:
	enum ns1__ScsiLunVStorageSupportStatus __item;
public:
	virtual int soap_type() const { return 3500; } /* = unique id SOAP_TYPE_ns1__ScsiLunVStorageSupportStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunVStorageSupportStatus_() { ns1__ScsiLunVStorageSupportStatus_::soap_default(NULL); }
	virtual ~ns1__ScsiLunVStorageSupportStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostServicePolicy_
#define SOAP_TYPE_ns1__HostServicePolicy_ (3502)
/* Primitive ns1:HostServicePolicy schema type: */
class SOAP_CMAC ns1__HostServicePolicy_ : public xsd__anyType
{
public:
	enum ns1__HostServicePolicy __item;
public:
	virtual int soap_type() const { return 3502; } /* = unique id SOAP_TYPE_ns1__HostServicePolicy_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostServicePolicy_() { ns1__HostServicePolicy_::soap_default(NULL); }
	virtual ~ns1__HostServicePolicy_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSnmpAgentCapability_
#define SOAP_TYPE_ns1__HostSnmpAgentCapability_ (3504)
/* Primitive ns1:HostSnmpAgentCapability schema type: */
class SOAP_CMAC ns1__HostSnmpAgentCapability_ : public xsd__anyType
{
public:
	enum ns1__HostSnmpAgentCapability __item;
public:
	virtual int soap_type() const { return 3504; } /* = unique id SOAP_TYPE_ns1__HostSnmpAgentCapability_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSnmpAgentCapability_() { ns1__HostSnmpAgentCapability_::soap_default(NULL); }
	virtual ~ns1__HostSnmpAgentCapability_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemIdentificationInfoIdentifier_
#define SOAP_TYPE_ns1__HostSystemIdentificationInfoIdentifier_ (3506)
/* Primitive ns1:HostSystemIdentificationInfoIdentifier schema type: */
class SOAP_CMAC ns1__HostSystemIdentificationInfoIdentifier_ : public xsd__anyType
{
public:
	enum ns1__HostSystemIdentificationInfoIdentifier __item;
public:
	virtual int soap_type() const { return 3506; } /* = unique id SOAP_TYPE_ns1__HostSystemIdentificationInfoIdentifier_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemIdentificationInfoIdentifier_() { ns1__HostSystemIdentificationInfoIdentifier_::soap_default(NULL); }
	virtual ~ns1__HostSystemIdentificationInfoIdentifier_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDigestInfoDigestMethodType_
#define SOAP_TYPE_ns1__HostDigestInfoDigestMethodType_ (3508)
/* Primitive ns1:HostDigestInfoDigestMethodType schema type: */
class SOAP_CMAC ns1__HostDigestInfoDigestMethodType_ : public xsd__anyType
{
public:
	enum ns1__HostDigestInfoDigestMethodType __item;
public:
	virtual int soap_type() const { return 3508; } /* = unique id SOAP_TYPE_ns1__HostDigestInfoDigestMethodType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDigestInfoDigestMethodType_() { ns1__HostDigestInfoDigestMethodType_::soap_default(NULL); }
	virtual ~ns1__HostDigestInfoDigestMethodType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsExtentUnresolvedReason_
#define SOAP_TYPE_ns1__HostUnresolvedVmfsExtentUnresolvedReason_ (3510)
/* Primitive ns1:HostUnresolvedVmfsExtentUnresolvedReason schema type: */
class SOAP_CMAC ns1__HostUnresolvedVmfsExtentUnresolvedReason_ : public xsd__anyType
{
public:
	enum ns1__HostUnresolvedVmfsExtentUnresolvedReason __item;
public:
	virtual int soap_type() const { return 3510; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsExtentUnresolvedReason_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsExtentUnresolvedReason_() { ns1__HostUnresolvedVmfsExtentUnresolvedReason_::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsExtentUnresolvedReason_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_
#define SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_ (3512)
/* Primitive ns1:HostUnresolvedVmfsResolutionSpecVmfsUuidResolution schema type: */
class SOAP_CMAC ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_ : public xsd__anyType
{
public:
	enum ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution __item;
public:
	virtual int soap_type() const { return 3512; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_() { ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicManagerNicType_
#define SOAP_TYPE_ns1__HostVirtualNicManagerNicType_ (3514)
/* Primitive ns1:HostVirtualNicManagerNicType schema type: */
class SOAP_CMAC ns1__HostVirtualNicManagerNicType_ : public xsd__anyType
{
public:
	enum ns1__HostVirtualNicManagerNicType __item;
public:
	virtual int soap_type() const { return 3514; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicManagerNicType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicManagerNicType_() { ns1__HostVirtualNicManagerNicType_::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicManagerNicType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfoIpAddressOrigin_
#define SOAP_TYPE_ns1__NetIpConfigInfoIpAddressOrigin_ (3516)
/* Primitive ns1:NetIpConfigInfoIpAddressOrigin schema type: */
class SOAP_CMAC ns1__NetIpConfigInfoIpAddressOrigin_ : public xsd__anyType
{
public:
	enum ns1__NetIpConfigInfoIpAddressOrigin __item;
public:
	virtual int soap_type() const { return 3516; } /* = unique id SOAP_TYPE_ns1__NetIpConfigInfoIpAddressOrigin_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigInfoIpAddressOrigin_() { ns1__NetIpConfigInfoIpAddressOrigin_::soap_default(NULL); }
	virtual ~ns1__NetIpConfigInfoIpAddressOrigin_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfoIpAddressStatus_
#define SOAP_TYPE_ns1__NetIpConfigInfoIpAddressStatus_ (3518)
/* Primitive ns1:NetIpConfigInfoIpAddressStatus schema type: */
class SOAP_CMAC ns1__NetIpConfigInfoIpAddressStatus_ : public xsd__anyType
{
public:
	enum ns1__NetIpConfigInfoIpAddressStatus __item;
public:
	virtual int soap_type() const { return 3518; } /* = unique id SOAP_TYPE_ns1__NetIpConfigInfoIpAddressStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigInfoIpAddressStatus_() { ns1__NetIpConfigInfoIpAddressStatus_::soap_default(NULL); }
	virtual ~ns1__NetIpConfigInfoIpAddressStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoEntryType_
#define SOAP_TYPE_ns1__NetIpStackInfoEntryType_ (3520)
/* Primitive ns1:NetIpStackInfoEntryType schema type: */
class SOAP_CMAC ns1__NetIpStackInfoEntryType_ : public xsd__anyType
{
public:
	enum ns1__NetIpStackInfoEntryType __item;
public:
	virtual int soap_type() const { return 3520; } /* = unique id SOAP_TYPE_ns1__NetIpStackInfoEntryType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpStackInfoEntryType_() { ns1__NetIpStackInfoEntryType_::soap_default(NULL); }
	virtual ~ns1__NetIpStackInfoEntryType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoPreference_
#define SOAP_TYPE_ns1__NetIpStackInfoPreference_ (3522)
/* Primitive ns1:NetIpStackInfoPreference schema type: */
class SOAP_CMAC ns1__NetIpStackInfoPreference_ : public xsd__anyType
{
public:
	enum ns1__NetIpStackInfoPreference __item;
public:
	virtual int soap_type() const { return 3522; } /* = unique id SOAP_TYPE_ns1__NetIpStackInfoPreference_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpStackInfoPreference_() { ns1__NetIpStackInfoPreference_::soap_default(NULL); }
	virtual ~ns1__NetIpStackInfoPreference_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetBIOSConfigInfoMode_
#define SOAP_TYPE_ns1__NetBIOSConfigInfoMode_ (3524)
/* Primitive ns1:NetBIOSConfigInfoMode schema type: */
class SOAP_CMAC ns1__NetBIOSConfigInfoMode_ : public xsd__anyType
{
public:
	enum ns1__NetBIOSConfigInfoMode __item;
public:
	virtual int soap_type() const { return 3524; } /* = unique id SOAP_TYPE_ns1__NetBIOSConfigInfoMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetBIOSConfigInfoMode_() { ns1__NetBIOSConfigInfoMode_::soap_default(NULL); }
	virtual ~ns1__NetBIOSConfigInfoMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayUpdateOperation_
#define SOAP_TYPE_ns1__ArrayUpdateOperation_ (3526)
/* Primitive ns1:ArrayUpdateOperation schema type: */
class SOAP_CMAC ns1__ArrayUpdateOperation_ : public xsd__anyType
{
public:
	enum ns1__ArrayUpdateOperation __item;
public:
	virtual int soap_type() const { return 3526; } /* = unique id SOAP_TYPE_ns1__ArrayUpdateOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayUpdateOperation_() { ns1__ArrayUpdateOperation_::soap_default(NULL); }
	virtual ~ns1__ArrayUpdateOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceResultStatus_
#define SOAP_TYPE_ns1__ComplianceResultStatus_ (3528)
/* Primitive ns1:ComplianceResultStatus schema type: */
class SOAP_CMAC ns1__ComplianceResultStatus_ : public xsd__anyType
{
public:
	enum ns1__ComplianceResultStatus __item;
public:
	virtual int soap_type() const { return 3528; } /* = unique id SOAP_TYPE_ns1__ComplianceResultStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplianceResultStatus_() { ns1__ComplianceResultStatus_::soap_default(NULL); }
	virtual ~ns1__ComplianceResultStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileNumericComparator_
#define SOAP_TYPE_ns1__ProfileNumericComparator_ (3530)
/* Primitive ns1:ProfileNumericComparator schema type: */
class SOAP_CMAC ns1__ProfileNumericComparator_ : public xsd__anyType
{
public:
	enum ns1__ProfileNumericComparator __item;
public:
	virtual int soap_type() const { return 3530; } /* = unique id SOAP_TYPE_ns1__ProfileNumericComparator_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileNumericComparator_() { ns1__ProfileNumericComparator_::soap_default(NULL); }
	virtual ~ns1__ProfileNumericComparator_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileServiceType_
#define SOAP_TYPE_ns1__ClusterProfileServiceType_ (3532)
/* Primitive ns1:ClusterProfileServiceType schema type: */
class SOAP_CMAC ns1__ClusterProfileServiceType_ : public xsd__anyType
{
public:
	enum ns1__ClusterProfileServiceType __item;
public:
	virtual int soap_type() const { return 3532; } /* = unique id SOAP_TYPE_ns1__ClusterProfileServiceType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileServiceType_() { ns1__ClusterProfileServiceType_::soap_default(NULL); }
	virtual ~ns1__ClusterProfileServiceType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExecuteResultStatus_
#define SOAP_TYPE_ns1__ProfileExecuteResultStatus_ (3534)
/* Primitive ns1:ProfileExecuteResultStatus schema type: */
class SOAP_CMAC ns1__ProfileExecuteResultStatus_ : public xsd__anyType
{
public:
	enum ns1__ProfileExecuteResultStatus __item;
public:
	virtual int soap_type() const { return 3534; } /* = unique id SOAP_TYPE_ns1__ProfileExecuteResultStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileExecuteResultStatus_() { ns1__ProfileExecuteResultStatus_::soap_default(NULL); }
	virtual ~ns1__ProfileExecuteResultStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DayOfWeek_
#define SOAP_TYPE_ns1__DayOfWeek_ (3536)
/* Primitive ns1:DayOfWeek schema type: */
class SOAP_CMAC ns1__DayOfWeek_ : public xsd__anyType
{
public:
	enum ns1__DayOfWeek __item;
public:
	virtual int soap_type() const { return 3536; } /* = unique id SOAP_TYPE_ns1__DayOfWeek_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DayOfWeek_() { ns1__DayOfWeek_::soap_default(NULL); }
	virtual ~ns1__DayOfWeek_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WeekOfMonth_
#define SOAP_TYPE_ns1__WeekOfMonth_ (3538)
/* Primitive ns1:WeekOfMonth schema type: */
class SOAP_CMAC ns1__WeekOfMonth_ : public xsd__anyType
{
public:
	enum ns1__WeekOfMonth __item;
public:
	virtual int soap_type() const { return 3538; } /* = unique id SOAP_TYPE_ns1__WeekOfMonth_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WeekOfMonth_() { ns1__WeekOfMonth_::soap_default(NULL); }
	virtual ~ns1__WeekOfMonth_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppCloneSpecProvisioningType_
#define SOAP_TYPE_ns1__VAppCloneSpecProvisioningType_ (3540)
/* Primitive ns1:VAppCloneSpecProvisioningType schema type: */
class SOAP_CMAC ns1__VAppCloneSpecProvisioningType_ : public xsd__anyType
{
public:
	enum ns1__VAppCloneSpecProvisioningType __item;
public:
	virtual int soap_type() const { return 3540; } /* = unique id SOAP_TYPE_ns1__VAppCloneSpecProvisioningType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppCloneSpecProvisioningType_() { ns1__VAppCloneSpecProvisioningType_::soap_default(NULL); }
	virtual ~ns1__VAppCloneSpecProvisioningType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppAutoStartAction_
#define SOAP_TYPE_ns1__VAppAutoStartAction_ (3542)
/* Primitive ns1:VAppAutoStartAction schema type: */
class SOAP_CMAC ns1__VAppAutoStartAction_ : public xsd__anyType
{
public:
	enum ns1__VAppAutoStartAction __item;
public:
	virtual int soap_type() const { return 3542; } /* = unique id SOAP_TYPE_ns1__VAppAutoStartAction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppAutoStartAction_() { ns1__VAppAutoStartAction_::soap_default(NULL); }
	virtual ~ns1__VAppAutoStartAction_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoIpAllocationPolicy_
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoIpAllocationPolicy_ (3544)
/* Primitive ns1:VAppIPAssignmentInfoIpAllocationPolicy schema type: */
class SOAP_CMAC ns1__VAppIPAssignmentInfoIpAllocationPolicy_ : public xsd__anyType
{
public:
	enum ns1__VAppIPAssignmentInfoIpAllocationPolicy __item;
public:
	virtual int soap_type() const { return 3544; } /* = unique id SOAP_TYPE_ns1__VAppIPAssignmentInfoIpAllocationPolicy_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppIPAssignmentInfoIpAllocationPolicy_() { ns1__VAppIPAssignmentInfoIpAllocationPolicy_::soap_default(NULL); }
	virtual ~ns1__VAppIPAssignmentInfoIpAllocationPolicy_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoAllocationSchemes_
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoAllocationSchemes_ (3546)
/* Primitive ns1:VAppIPAssignmentInfoAllocationSchemes schema type: */
class SOAP_CMAC ns1__VAppIPAssignmentInfoAllocationSchemes_ : public xsd__anyType
{
public:
	enum ns1__VAppIPAssignmentInfoAllocationSchemes __item;
public:
	virtual int soap_type() const { return 3546; } /* = unique id SOAP_TYPE_ns1__VAppIPAssignmentInfoAllocationSchemes_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppIPAssignmentInfoAllocationSchemes_() { ns1__VAppIPAssignmentInfoAllocationSchemes_::soap_default(NULL); }
	virtual ~ns1__VAppIPAssignmentInfoAllocationSchemes_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfoProtocols_
#define SOAP_TYPE_ns1__VAppIPAssignmentInfoProtocols_ (3548)
/* Primitive ns1:VAppIPAssignmentInfoProtocols schema type: */
class SOAP_CMAC ns1__VAppIPAssignmentInfoProtocols_ : public xsd__anyType
{
public:
	enum ns1__VAppIPAssignmentInfoProtocols __item;
public:
	virtual int soap_type() const { return 3548; } /* = unique id SOAP_TYPE_ns1__VAppIPAssignmentInfoProtocols_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppIPAssignmentInfoProtocols_() { ns1__VAppIPAssignmentInfoProtocols_::soap_default(NULL); }
	virtual ~ns1__VAppIPAssignmentInfoProtocols_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfoNpivWwnType_
#define SOAP_TYPE_ns1__VirtualMachineConfigInfoNpivWwnType_ (3550)
/* Primitive ns1:VirtualMachineConfigInfoNpivWwnType schema type: */
class SOAP_CMAC ns1__VirtualMachineConfigInfoNpivWwnType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineConfigInfoNpivWwnType __item;
public:
	virtual int soap_type() const { return 3550; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigInfoNpivWwnType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigInfoNpivWwnType_() { ns1__VirtualMachineConfigInfoNpivWwnType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigInfoNpivWwnType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfoSwapPlacementType_
#define SOAP_TYPE_ns1__VirtualMachineConfigInfoSwapPlacementType_ (3552)
/* Primitive ns1:VirtualMachineConfigInfoSwapPlacementType schema type: */
class SOAP_CMAC ns1__VirtualMachineConfigInfoSwapPlacementType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineConfigInfoSwapPlacementType __item;
public:
	virtual int soap_type() const { return 3552; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigInfoSwapPlacementType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigInfoSwapPlacementType_() { ns1__VirtualMachineConfigInfoSwapPlacementType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigInfoSwapPlacementType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigSpecNpivWwnOp_
#define SOAP_TYPE_ns1__VirtualMachineConfigSpecNpivWwnOp_ (3554)
/* Primitive ns1:VirtualMachineConfigSpecNpivWwnOp schema type: */
class SOAP_CMAC ns1__VirtualMachineConfigSpecNpivWwnOp_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineConfigSpecNpivWwnOp __item;
public:
	virtual int soap_type() const { return 3554; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigSpecNpivWwnOp_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigSpecNpivWwnOp_() { ns1__VirtualMachineConfigSpecNpivWwnOp_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigSpecNpivWwnOp_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerOpType_
#define SOAP_TYPE_ns1__VirtualMachinePowerOpType_ (3556)
/* Primitive ns1:VirtualMachinePowerOpType schema type: */
class SOAP_CMAC ns1__VirtualMachinePowerOpType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachinePowerOpType __item;
public:
	virtual int soap_type() const { return 3556; } /* = unique id SOAP_TYPE_ns1__VirtualMachinePowerOpType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachinePowerOpType_() { ns1__VirtualMachinePowerOpType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachinePowerOpType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineStandbyActionType_
#define SOAP_TYPE_ns1__VirtualMachineStandbyActionType_ (3558)
/* Primitive ns1:VirtualMachineStandbyActionType schema type: */
class SOAP_CMAC ns1__VirtualMachineStandbyActionType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineStandbyActionType __item;
public:
	virtual int soap_type() const { return 3558; } /* = unique id SOAP_TYPE_ns1__VirtualMachineStandbyActionType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineStandbyActionType_() { ns1__VirtualMachineStandbyActionType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineStandbyActionType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_ (3560)
/* Primitive ns1:VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm schema type: */
class SOAP_CMAC ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm __item;
public:
	virtual int soap_type() const { return 3560; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_() { ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_ (3562)
/* Primitive ns1:VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther schema type: */
class SOAP_CMAC ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther __item;
public:
	virtual int soap_type() const { return 3562; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_() { ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileType_
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileType_ (3564)
/* Primitive ns1:VirtualMachineFileLayoutExFileType schema type: */
class SOAP_CMAC ns1__VirtualMachineFileLayoutExFileType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineFileLayoutExFileType __item;
public:
	virtual int soap_type() const { return 3564; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutExFileType_() { ns1__VirtualMachineFileLayoutExFileType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutExFileType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineHtSharing_
#define SOAP_TYPE_ns1__VirtualMachineHtSharing_ (3566)
/* Primitive ns1:VirtualMachineHtSharing schema type: */
class SOAP_CMAC ns1__VirtualMachineHtSharing_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineHtSharing __item;
public:
	virtual int soap_type() const { return 3566; } /* = unique id SOAP_TYPE_ns1__VirtualMachineHtSharing_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineHtSharing_() { ns1__VirtualMachineHtSharing_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineHtSharing_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePowerOffBehavior_
#define SOAP_TYPE_ns1__VirtualMachinePowerOffBehavior_ (3568)
/* Primitive ns1:VirtualMachinePowerOffBehavior schema type: */
class SOAP_CMAC ns1__VirtualMachinePowerOffBehavior_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachinePowerOffBehavior __item;
public:
	virtual int soap_type() const { return 3568; } /* = unique id SOAP_TYPE_ns1__VirtualMachinePowerOffBehavior_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachinePowerOffBehavior_() { ns1__VirtualMachinePowerOffBehavior_::soap_default(NULL); }
	virtual ~ns1__VirtualMachinePowerOffBehavior_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoMonitorType_
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoMonitorType_ (3570)
/* Primitive ns1:VirtualMachineFlagInfoMonitorType schema type: */
class SOAP_CMAC ns1__VirtualMachineFlagInfoMonitorType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineFlagInfoMonitorType __item;
public:
	virtual int soap_type() const { return 3570; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFlagInfoMonitorType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFlagInfoMonitorType_() { ns1__VirtualMachineFlagInfoMonitorType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFlagInfoMonitorType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualMmuUsage_
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualMmuUsage_ (3572)
/* Primitive ns1:VirtualMachineFlagInfoVirtualMmuUsage schema type: */
class SOAP_CMAC ns1__VirtualMachineFlagInfoVirtualMmuUsage_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineFlagInfoVirtualMmuUsage __item;
public:
	virtual int soap_type() const { return 3572; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualMmuUsage_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFlagInfoVirtualMmuUsage_() { ns1__VirtualMachineFlagInfoVirtualMmuUsage_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFlagInfoVirtualMmuUsage_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualExecUsage_
#define SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualExecUsage_ (3574)
/* Primitive ns1:VirtualMachineFlagInfoVirtualExecUsage schema type: */
class SOAP_CMAC ns1__VirtualMachineFlagInfoVirtualExecUsage_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineFlagInfoVirtualExecUsage __item;
public:
	virtual int soap_type() const { return 3574; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFlagInfoVirtualExecUsage_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFlagInfoVirtualExecUsage_() { ns1__VirtualMachineFlagInfoVirtualExecUsage_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFlagInfoVirtualExecUsage_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsStatus_
#define SOAP_TYPE_ns1__VirtualMachineToolsStatus_ (3576)
/* Primitive ns1:VirtualMachineToolsStatus schema type: */
class SOAP_CMAC ns1__VirtualMachineToolsStatus_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineToolsStatus __item;
public:
	virtual int soap_type() const { return 3576; } /* = unique id SOAP_TYPE_ns1__VirtualMachineToolsStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineToolsStatus_() { ns1__VirtualMachineToolsStatus_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineToolsStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsVersionStatus_
#define SOAP_TYPE_ns1__VirtualMachineToolsVersionStatus_ (3578)
/* Primitive ns1:VirtualMachineToolsVersionStatus schema type: */
class SOAP_CMAC ns1__VirtualMachineToolsVersionStatus_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineToolsVersionStatus __item;
public:
	virtual int soap_type() const { return 3578; } /* = unique id SOAP_TYPE_ns1__VirtualMachineToolsVersionStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineToolsVersionStatus_() { ns1__VirtualMachineToolsVersionStatus_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineToolsVersionStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineToolsRunningStatus_
#define SOAP_TYPE_ns1__VirtualMachineToolsRunningStatus_ (3580)
/* Primitive ns1:VirtualMachineToolsRunningStatus schema type: */
class SOAP_CMAC ns1__VirtualMachineToolsRunningStatus_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineToolsRunningStatus __item;
public:
	virtual int soap_type() const { return 3580; } /* = unique id SOAP_TYPE_ns1__VirtualMachineToolsRunningStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineToolsRunningStatus_() { ns1__VirtualMachineToolsRunningStatus_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineToolsRunningStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestState_
#define SOAP_TYPE_ns1__VirtualMachineGuestState_ (3582)
/* Primitive ns1:VirtualMachineGuestState schema type: */
class SOAP_CMAC ns1__VirtualMachineGuestState_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineGuestState __item;
public:
	virtual int soap_type() const { return 3582; } /* = unique id SOAP_TYPE_ns1__VirtualMachineGuestState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineGuestState_() { ns1__VirtualMachineGuestState_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineGuestState_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestOsFamily_
#define SOAP_TYPE_ns1__VirtualMachineGuestOsFamily_ (3584)
/* Primitive ns1:VirtualMachineGuestOsFamily schema type: */
class SOAP_CMAC ns1__VirtualMachineGuestOsFamily_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineGuestOsFamily __item;
public:
	virtual int soap_type() const { return 3584; } /* = unique id SOAP_TYPE_ns1__VirtualMachineGuestOsFamily_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineGuestOsFamily_() { ns1__VirtualMachineGuestOsFamily_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineGuestOsFamily_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestOsIdentifier_
#define SOAP_TYPE_ns1__VirtualMachineGuestOsIdentifier_ (3586)
/* Primitive ns1:VirtualMachineGuestOsIdentifier schema type: */
class SOAP_CMAC ns1__VirtualMachineGuestOsIdentifier_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineGuestOsIdentifier __item;
public:
	virtual int soap_type() const { return 3586; } /* = unique id SOAP_TYPE_ns1__VirtualMachineGuestOsIdentifier_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineGuestOsIdentifier_() { ns1__VirtualMachineGuestOsIdentifier_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineGuestOsIdentifier_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateTransformation_
#define SOAP_TYPE_ns1__VirtualMachineRelocateTransformation_ (3588)
/* Primitive ns1:VirtualMachineRelocateTransformation schema type: */
class SOAP_CMAC ns1__VirtualMachineRelocateTransformation_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineRelocateTransformation __item;
public:
	virtual int soap_type() const { return 3588; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRelocateTransformation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRelocateTransformation_() { ns1__VirtualMachineRelocateTransformation_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRelocateTransformation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateDiskMoveOptions_
#define SOAP_TYPE_ns1__VirtualMachineRelocateDiskMoveOptions_ (3590)
/* Primitive ns1:VirtualMachineRelocateDiskMoveOptions schema type: */
class SOAP_CMAC ns1__VirtualMachineRelocateDiskMoveOptions_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineRelocateDiskMoveOptions __item;
public:
	virtual int soap_type() const { return 3590; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRelocateDiskMoveOptions_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRelocateDiskMoveOptions_() { ns1__VirtualMachineRelocateDiskMoveOptions_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRelocateDiskMoveOptions_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineScsiPassthroughType_
#define SOAP_TYPE_ns1__VirtualMachineScsiPassthroughType_ (3592)
/* Primitive ns1:VirtualMachineScsiPassthroughType schema type: */
class SOAP_CMAC ns1__VirtualMachineScsiPassthroughType_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineScsiPassthroughType __item;
public:
	virtual int soap_type() const { return 3592; } /* = unique id SOAP_TYPE_ns1__VirtualMachineScsiPassthroughType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineScsiPassthroughType_() { ns1__VirtualMachineScsiPassthroughType_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineScsiPassthroughType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTargetInfoConfigurationTag_
#define SOAP_TYPE_ns1__VirtualMachineTargetInfoConfigurationTag_ (3594)
/* Primitive ns1:VirtualMachineTargetInfoConfigurationTag schema type: */
class SOAP_CMAC ns1__VirtualMachineTargetInfoConfigurationTag_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineTargetInfoConfigurationTag __item;
public:
	virtual int soap_type() const { return 3594; } /* = unique id SOAP_TYPE_ns1__VirtualMachineTargetInfoConfigurationTag_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineTargetInfoConfigurationTag_() { ns1__VirtualMachineTargetInfoConfigurationTag_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineTargetInfoConfigurationTag_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradePolicy_
#define SOAP_TYPE_ns1__UpgradePolicy_ (3596)
/* Primitive ns1:UpgradePolicy schema type: */
class SOAP_CMAC ns1__UpgradePolicy_ : public xsd__anyType
{
public:
	enum ns1__UpgradePolicy __item;
public:
	virtual int soap_type() const { return 3596; } /* = unique id SOAP_TYPE_ns1__UpgradePolicy_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradePolicy_() { ns1__UpgradePolicy_::soap_default(NULL); }
	virtual ~ns1__UpgradePolicy_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsbInfoSpeed_
#define SOAP_TYPE_ns1__VirtualMachineUsbInfoSpeed_ (3598)
/* Primitive ns1:VirtualMachineUsbInfoSpeed schema type: */
class SOAP_CMAC ns1__VirtualMachineUsbInfoSpeed_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineUsbInfoSpeed __item;
public:
	virtual int soap_type() const { return 3598; } /* = unique id SOAP_TYPE_ns1__VirtualMachineUsbInfoSpeed_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineUsbInfoSpeed_() { ns1__VirtualMachineUsbInfoSpeed_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineUsbInfoSpeed_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsbInfoFamily_
#define SOAP_TYPE_ns1__VirtualMachineUsbInfoFamily_ (3600)
/* Primitive ns1:VirtualMachineUsbInfoFamily schema type: */
class SOAP_CMAC ns1__VirtualMachineUsbInfoFamily_ : public xsd__anyType
{
public:
	enum ns1__VirtualMachineUsbInfoFamily __item;
public:
	virtual int soap_type() const { return 3600; } /* = unique id SOAP_TYPE_ns1__VirtualMachineUsbInfoFamily_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineUsbInfoFamily_() { ns1__VirtualMachineUsbInfoFamily_::soap_default(NULL); }
	virtual ~ns1__VirtualMachineUsbInfoFamily_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckTestType_
#define SOAP_TYPE_ns1__CheckTestType_ (3602)
/* Primitive ns1:CheckTestType schema type: */
class SOAP_CMAC ns1__CheckTestType_ : public xsd__anyType
{
public:
	enum ns1__CheckTestType __item;
public:
	virtual int soap_type() const { return 3602; } /* = unique id SOAP_TYPE_ns1__CheckTestType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckTestType_() { ns1__CheckTestType_::soap_default(NULL); }
	virtual ~ns1__CheckTestType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSysprepRebootOption_
#define SOAP_TYPE_ns1__CustomizationSysprepRebootOption_ (3604)
/* Primitive ns1:CustomizationSysprepRebootOption schema type: */
class SOAP_CMAC ns1__CustomizationSysprepRebootOption_ : public xsd__anyType
{
public:
	enum ns1__CustomizationSysprepRebootOption __item;
public:
	virtual int soap_type() const { return 3604; } /* = unique id SOAP_TYPE_ns1__CustomizationSysprepRebootOption_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSysprepRebootOption_() { ns1__CustomizationSysprepRebootOption_::soap_default(NULL); }
	virtual ~ns1__CustomizationSysprepRebootOption_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLicenseDataMode_
#define SOAP_TYPE_ns1__CustomizationLicenseDataMode_ (3606)
/* Primitive ns1:CustomizationLicenseDataMode schema type: */
class SOAP_CMAC ns1__CustomizationLicenseDataMode_ : public xsd__anyType
{
public:
	enum ns1__CustomizationLicenseDataMode __item;
public:
	virtual int soap_type() const { return 3606; } /* = unique id SOAP_TYPE_ns1__CustomizationLicenseDataMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationLicenseDataMode_() { ns1__CustomizationLicenseDataMode_::soap_default(NULL); }
	virtual ~ns1__CustomizationLicenseDataMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationNetBIOSMode_
#define SOAP_TYPE_ns1__CustomizationNetBIOSMode_ (3608)
/* Primitive ns1:CustomizationNetBIOSMode schema type: */
class SOAP_CMAC ns1__CustomizationNetBIOSMode_ : public xsd__anyType
{
public:
	enum ns1__CustomizationNetBIOSMode __item;
public:
	virtual int soap_type() const { return 3608; } /* = unique id SOAP_TYPE_ns1__CustomizationNetBIOSMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationNetBIOSMode_() { ns1__CustomizationNetBIOSMode_::soap_default(NULL); }
	virtual ~ns1__CustomizationNetBIOSMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConnectInfoStatus_
#define SOAP_TYPE_ns1__VirtualDeviceConnectInfoStatus_ (3610)
/* Primitive ns1:VirtualDeviceConnectInfoStatus schema type: */
class SOAP_CMAC ns1__VirtualDeviceConnectInfoStatus_ : public xsd__anyType
{
public:
	enum ns1__VirtualDeviceConnectInfoStatus __item;
public:
	virtual int soap_type() const { return 3610; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConnectInfoStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConnectInfoStatus_() { ns1__VirtualDeviceConnectInfoStatus_::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConnectInfoStatus_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceFileExtension_
#define SOAP_TYPE_ns1__VirtualDeviceFileExtension_ (3612)
/* Primitive ns1:VirtualDeviceFileExtension schema type: */
class SOAP_CMAC ns1__VirtualDeviceFileExtension_ : public xsd__anyType
{
public:
	enum ns1__VirtualDeviceFileExtension __item;
public:
	virtual int soap_type() const { return 3612; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceFileExtension_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceFileExtension_() { ns1__VirtualDeviceFileExtension_::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceFileExtension_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceURIBackingOptionDirection_
#define SOAP_TYPE_ns1__VirtualDeviceURIBackingOptionDirection_ (3614)
/* Primitive ns1:VirtualDeviceURIBackingOptionDirection schema type: */
class SOAP_CMAC ns1__VirtualDeviceURIBackingOptionDirection_ : public xsd__anyType
{
public:
	enum ns1__VirtualDeviceURIBackingOptionDirection __item;
public:
	virtual int soap_type() const { return 3614; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceURIBackingOptionDirection_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceURIBackingOptionDirection_() { ns1__VirtualDeviceURIBackingOptionDirection_::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceURIBackingOptionDirection_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConfigSpecOperation_
#define SOAP_TYPE_ns1__VirtualDeviceConfigSpecOperation_ (3616)
/* Primitive ns1:VirtualDeviceConfigSpecOperation schema type: */
class SOAP_CMAC ns1__VirtualDeviceConfigSpecOperation_ : public xsd__anyType
{
public:
	enum ns1__VirtualDeviceConfigSpecOperation __item;
public:
	virtual int soap_type() const { return 3616; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConfigSpecOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConfigSpecOperation_() { ns1__VirtualDeviceConfigSpecOperation_::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConfigSpecOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConfigSpecFileOperation_
#define SOAP_TYPE_ns1__VirtualDeviceConfigSpecFileOperation_ (3618)
/* Primitive ns1:VirtualDeviceConfigSpecFileOperation schema type: */
class SOAP_CMAC ns1__VirtualDeviceConfigSpecFileOperation_ : public xsd__anyType
{
public:
	enum ns1__VirtualDeviceConfigSpecFileOperation __item;
public:
	virtual int soap_type() const { return 3618; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConfigSpecFileOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConfigSpecFileOperation_() { ns1__VirtualDeviceConfigSpecFileOperation_::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConfigSpecFileOperation_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskMode_
#define SOAP_TYPE_ns1__VirtualDiskMode_ (3620)
/* Primitive ns1:VirtualDiskMode schema type: */
class SOAP_CMAC ns1__VirtualDiskMode_ : public xsd__anyType
{
public:
	enum ns1__VirtualDiskMode __item;
public:
	virtual int soap_type() const { return 3620; } /* = unique id SOAP_TYPE_ns1__VirtualDiskMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskMode_() { ns1__VirtualDiskMode_::soap_default(NULL); }
	virtual ~ns1__VirtualDiskMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskCompatibilityMode_
#define SOAP_TYPE_ns1__VirtualDiskCompatibilityMode_ (3622)
/* Primitive ns1:VirtualDiskCompatibilityMode schema type: */
class SOAP_CMAC ns1__VirtualDiskCompatibilityMode_ : public xsd__anyType
{
public:
	enum ns1__VirtualDiskCompatibilityMode __item;
public:
	virtual int soap_type() const { return 3622; } /* = unique id SOAP_TYPE_ns1__VirtualDiskCompatibilityMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskCompatibilityMode_() { ns1__VirtualDiskCompatibilityMode_::soap_default(NULL); }
	virtual ~ns1__VirtualDiskCompatibilityMode_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkDeviceName_
#define SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkDeviceName_ (3624)
/* Primitive ns1:VirtualEthernetCardLegacyNetworkDeviceName schema type: */
class SOAP_CMAC ns1__VirtualEthernetCardLegacyNetworkDeviceName_ : public xsd__anyType
{
public:
	enum ns1__VirtualEthernetCardLegacyNetworkDeviceName __item;
public:
	virtual int soap_type() const { return 3624; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkDeviceName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardLegacyNetworkDeviceName_() { ns1__VirtualEthernetCardLegacyNetworkDeviceName_::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardLegacyNetworkDeviceName_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardMacType_
#define SOAP_TYPE_ns1__VirtualEthernetCardMacType_ (3626)
/* Primitive ns1:VirtualEthernetCardMacType schema type: */
class SOAP_CMAC ns1__VirtualEthernetCardMacType_ : public xsd__anyType
{
public:
	enum ns1__VirtualEthernetCardMacType __item;
public:
	virtual int soap_type() const { return 3626; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardMacType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardMacType_() { ns1__VirtualEthernetCardMacType_::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardMacType_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDeviceHostChoice_
#define SOAP_TYPE_ns1__VirtualPointingDeviceHostChoice_ (3628)
/* Primitive ns1:VirtualPointingDeviceHostChoice schema type: */
class SOAP_CMAC ns1__VirtualPointingDeviceHostChoice_ : public xsd__anyType
{
public:
	enum ns1__VirtualPointingDeviceHostChoice __item;
public:
	virtual int soap_type() const { return 3628; } /* = unique id SOAP_TYPE_ns1__VirtualPointingDeviceHostChoice_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPointingDeviceHostChoice_() { ns1__VirtualPointingDeviceHostChoice_::soap_default(NULL); }
	virtual ~ns1__VirtualPointingDeviceHostChoice_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSISharing_
#define SOAP_TYPE_ns1__VirtualSCSISharing_ (3630)
/* Primitive ns1:VirtualSCSISharing schema type: */
class SOAP_CMAC ns1__VirtualSCSISharing_ : public xsd__anyType
{
public:
	enum ns1__VirtualSCSISharing __item;
public:
	virtual int soap_type() const { return 3630; } /* = unique id SOAP_TYPE_ns1__VirtualSCSISharing_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSISharing_() { ns1__VirtualSCSISharing_::soap_default(NULL); }
	virtual ~ns1__VirtualSCSISharing_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortEndPoint_
#define SOAP_TYPE_ns1__VirtualSerialPortEndPoint_ (3632)
/* Primitive ns1:VirtualSerialPortEndPoint schema type: */
class SOAP_CMAC ns1__VirtualSerialPortEndPoint_ : public xsd__anyType
{
public:
	enum ns1__VirtualSerialPortEndPoint __item;
public:
	virtual int soap_type() const { return 3632; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortEndPoint_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortEndPoint_() { ns1__VirtualSerialPortEndPoint_::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortEndPoint_() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyPropertyFilterRequestType
#define SOAP_TYPE_ns1__DestroyPropertyFilterRequestType (25)
/* ns1:DestroyPropertyFilterRequestType */
class SOAP_CMAC ns1__DestroyPropertyFilterRequestType : public xsd__anyType
{
public:
	class ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__DestroyPropertyFilterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyPropertyFilterRequestType() { ns1__DestroyPropertyFilterRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyPropertyFilterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateFilterRequestType
#define SOAP_TYPE_ns1__CreateFilterRequestType (26)
/* ns1:CreateFilterRequestType */
class SOAP_CMAC ns1__CreateFilterRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__PropertyFilterSpec *spec;	/* required element of type ns1:PropertyFilterSpec */
	bool partialUpdates;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__CreateFilterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateFilterRequestType() { ns1__CreateFilterRequestType::soap_default(NULL); }
	virtual ~ns1__CreateFilterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrievePropertiesRequestType
#define SOAP_TYPE_ns1__RetrievePropertiesRequestType (27)
/* ns1:RetrievePropertiesRequestType */
class SOAP_CMAC ns1__RetrievePropertiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__PropertyFilterSpec * >specSet;	/* required element of type ns1:PropertyFilterSpec */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns1__RetrievePropertiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrievePropertiesRequestType() { ns1__RetrievePropertiesRequestType::soap_default(NULL); }
	virtual ~ns1__RetrievePropertiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckForUpdatesRequestType
#define SOAP_TYPE_ns1__CheckForUpdatesRequestType (28)
/* ns1:CheckForUpdatesRequestType */
class SOAP_CMAC ns1__CheckForUpdatesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *version;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__CheckForUpdatesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckForUpdatesRequestType() { ns1__CheckForUpdatesRequestType::soap_default(NULL); }
	virtual ~ns1__CheckForUpdatesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WaitForUpdatesRequestType
#define SOAP_TYPE_ns1__WaitForUpdatesRequestType (29)
/* ns1:WaitForUpdatesRequestType */
class SOAP_CMAC ns1__WaitForUpdatesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *version;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns1__WaitForUpdatesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WaitForUpdatesRequestType() { ns1__WaitForUpdatesRequestType::soap_default(NULL); }
	virtual ~ns1__WaitForUpdatesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CancelWaitForUpdatesRequestType
#define SOAP_TYPE_ns1__CancelWaitForUpdatesRequestType (30)
/* ns1:CancelWaitForUpdatesRequestType */
class SOAP_CMAC ns1__CancelWaitForUpdatesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns1__CancelWaitForUpdatesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CancelWaitForUpdatesRequestType() { ns1__CancelWaitForUpdatesRequestType::soap_default(NULL); }
	virtual ~ns1__CancelWaitForUpdatesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WaitForUpdatesExRequestType
#define SOAP_TYPE_ns1__WaitForUpdatesExRequestType (31)
/* ns1:WaitForUpdatesExRequestType */
class SOAP_CMAC ns1__WaitForUpdatesExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *version;	/* optional element of type xsd:string */
	class ns1__WaitOptions *options;	/* optional element of type ns1:WaitOptions */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__WaitForUpdatesExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WaitForUpdatesExRequestType() { ns1__WaitForUpdatesExRequestType::soap_default(NULL); }
	virtual ~ns1__WaitForUpdatesExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrievePropertiesExRequestType
#define SOAP_TYPE_ns1__RetrievePropertiesExRequestType (32)
/* ns1:RetrievePropertiesExRequestType */
class SOAP_CMAC ns1__RetrievePropertiesExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__PropertyFilterSpec * >specSet;	/* required element of type ns1:PropertyFilterSpec */
	class ns1__RetrieveOptions *options;	/* required element of type ns1:RetrieveOptions */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__RetrievePropertiesExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrievePropertiesExRequestType() { ns1__RetrievePropertiesExRequestType::soap_default(NULL); }
	virtual ~ns1__RetrievePropertiesExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ContinueRetrievePropertiesExRequestType
#define SOAP_TYPE_ns1__ContinueRetrievePropertiesExRequestType (33)
/* ns1:ContinueRetrievePropertiesExRequestType */
class SOAP_CMAC ns1__ContinueRetrievePropertiesExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string token;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns1__ContinueRetrievePropertiesExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ContinueRetrievePropertiesExRequestType() { ns1__ContinueRetrievePropertiesExRequestType::soap_default(NULL); }
	virtual ~ns1__ContinueRetrievePropertiesExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CancelRetrievePropertiesExRequestType
#define SOAP_TYPE_ns1__CancelRetrievePropertiesExRequestType (34)
/* ns1:CancelRetrievePropertiesExRequestType */
class SOAP_CMAC ns1__CancelRetrievePropertiesExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string token;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns1__CancelRetrievePropertiesExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CancelRetrievePropertiesExRequestType() { ns1__CancelRetrievePropertiesExRequestType::soap_default(NULL); }
	virtual ~ns1__CancelRetrievePropertiesExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreatePropertyCollectorRequestType
#define SOAP_TYPE_ns1__CreatePropertyCollectorRequestType (35)
/* ns1:CreatePropertyCollectorRequestType */
class SOAP_CMAC ns1__CreatePropertyCollectorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns1__CreatePropertyCollectorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreatePropertyCollectorRequestType() { ns1__CreatePropertyCollectorRequestType::soap_default(NULL); }
	virtual ~ns1__CreatePropertyCollectorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyPropertyCollectorRequestType
#define SOAP_TYPE_ns1__DestroyPropertyCollectorRequestType (36)
/* ns1:DestroyPropertyCollectorRequestType */
class SOAP_CMAC ns1__DestroyPropertyCollectorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns1__DestroyPropertyCollectorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyPropertyCollectorRequestType() { ns1__DestroyPropertyCollectorRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyPropertyCollectorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DynamicArray
#define SOAP_TYPE_ns1__DynamicArray (37)
/* ns1:DynamicArray */
class SOAP_CMAC ns1__DynamicArray : public xsd__anyType
{
public:
	std::string *dynamicType;	/* optional element of type xsd:string */
	std::vector<xsd__anyType * >val;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns1__DynamicArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DynamicArray() { ns1__DynamicArray::soap_default(NULL); }
	virtual ~ns1__DynamicArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DynamicData
#define SOAP_TYPE_ns1__DynamicData (38)
/* ns1:DynamicData */
class SOAP_CMAC ns1__DynamicData : public xsd__anyType
{
public:
	std::string *dynamicType;	/* optional element of type xsd:string */
	std::vector<class ns1__DynamicProperty * >dynamicProperty;	/* optional element of type ns1:DynamicProperty */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns1__DynamicData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DynamicData() { ns1__DynamicData::soap_default(NULL); }
	virtual ~ns1__DynamicData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DynamicProperty
#define SOAP_TYPE_ns1__DynamicProperty (39)
/* ns1:DynamicProperty */
class SOAP_CMAC ns1__DynamicProperty : public xsd__anyType
{
public:
	std::string name;	/* required element of type xsd:string */
	xsd__anyType *val;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns1__DynamicProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DynamicProperty() { ns1__DynamicProperty::soap_default(NULL); }
	virtual ~ns1__DynamicProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDynamicProperty
#define SOAP_TYPE_ns1__ArrayOfDynamicProperty (40)
/* ns1:ArrayOfDynamicProperty */
class SOAP_CMAC ns1__ArrayOfDynamicProperty : public xsd__anyType
{
public:
	std::vector<ns1__DynamicProperty * >DynamicProperty;	/* optional element of type ns1:DynamicProperty */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns1__ArrayOfDynamicProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDynamicProperty() { ns1__ArrayOfDynamicProperty::soap_default(NULL); }
	virtual ~ns1__ArrayOfDynamicProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfKeyAnyValue
#define SOAP_TYPE_ns1__ArrayOfKeyAnyValue (42)
/* ns1:ArrayOfKeyAnyValue */
class SOAP_CMAC ns1__ArrayOfKeyAnyValue : public xsd__anyType
{
public:
	std::vector<class ns1__KeyAnyValue * >KeyAnyValue;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns1__ArrayOfKeyAnyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfKeyAnyValue() { ns1__ArrayOfKeyAnyValue::soap_default(NULL); }
	virtual ~ns1__ArrayOfKeyAnyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLocalizableMessage
#define SOAP_TYPE_ns1__ArrayOfLocalizableMessage (44)
/* ns1:ArrayOfLocalizableMessage */
class SOAP_CMAC ns1__ArrayOfLocalizableMessage : public xsd__anyType
{
public:
	std::vector<class ns1__LocalizableMessage * >LocalizableMessage;	/* optional element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns1__ArrayOfLocalizableMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLocalizableMessage() { ns1__ArrayOfLocalizableMessage::soap_default(NULL); }
	virtual ~ns1__ArrayOfLocalizableMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodFault
#define SOAP_TYPE_ns1__MethodFault (61)
/* ns1:MethodFault */
class SOAP_CMAC ns1__MethodFault : public xsd__anyType
{
public:
	std::string *dynamicType;	/* optional element of type xsd:string */
	std::vector<ns1__DynamicProperty * >dynamicProperty;	/* optional element of type ns1:DynamicProperty */
	class ns1__LocalizedMethodFault *faultCause;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizableMessage * >faultMessage;	/* optional element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns1__MethodFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodFault() { ns1__MethodFault::soap_default(NULL); }
	virtual ~ns1__MethodFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMethodFault
#define SOAP_TYPE_ns1__ArrayOfMethodFault (62)
/* ns1:ArrayOfMethodFault */
class SOAP_CMAC ns1__ArrayOfMethodFault : public xsd__anyType
{
public:
	std::vector<ns1__MethodFault * >MethodFault;	/* optional element of type ns1:MethodFault */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns1__ArrayOfMethodFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfMethodFault() { ns1__ArrayOfMethodFault::soap_default(NULL); }
	virtual ~ns1__ArrayOfMethodFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (65)
/* ns1:ArrayOfString */
class SOAP_CMAC ns1__ArrayOfString : public xsd__anyType
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns1__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfString() { ns1__ArrayOfString::soap_default(NULL); }
	virtual ~ns1__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAnyType
#define SOAP_TYPE_ns1__ArrayOfAnyType (66)
/* ns1:ArrayOfAnyType */
class SOAP_CMAC ns1__ArrayOfAnyType : public xsd__anyType
{
public:
	std::vector<xsd__anyType * >anyType;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns1__ArrayOfAnyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAnyType() { ns1__ArrayOfAnyType::soap_default(NULL); }
	virtual ~ns1__ArrayOfAnyType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfManagedObjectReference
#define SOAP_TYPE_ns1__ArrayOfManagedObjectReference (67)
/* ns1:ArrayOfManagedObjectReference */
class SOAP_CMAC ns1__ArrayOfManagedObjectReference : public xsd__anyType
{
public:
	std::vector<ns1__ManagedObjectReference * >ManagedObjectReference;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns1__ArrayOfManagedObjectReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfManagedObjectReference() { ns1__ArrayOfManagedObjectReference::soap_default(NULL); }
	virtual ~ns1__ArrayOfManagedObjectReference() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfByte
#define SOAP_TYPE_ns1__ArrayOfByte (68)
/* ns1:ArrayOfByte */
class SOAP_CMAC ns1__ArrayOfByte : public xsd__anyType
{
public:
	std::vector<char >byte;	/* optional element of type xsd:byte */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns1__ArrayOfByte */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfByte() { ns1__ArrayOfByte::soap_default(NULL); }
	virtual ~ns1__ArrayOfByte() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfInt
#define SOAP_TYPE_ns1__ArrayOfInt (69)
/* ns1:ArrayOfInt */
class SOAP_CMAC ns1__ArrayOfInt : public xsd__anyType
{
public:
	std::vector<int >int_;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns1__ArrayOfInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfInt() { ns1__ArrayOfInt::soap_default(NULL); }
	virtual ~ns1__ArrayOfInt() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLong
#define SOAP_TYPE_ns1__ArrayOfLong (70)
/* ns1:ArrayOfLong */
class SOAP_CMAC ns1__ArrayOfLong : public xsd__anyType
{
public:
	std::vector<LONG64 >long_;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns1__ArrayOfLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLong() { ns1__ArrayOfLong::soap_default(NULL); }
	virtual ~ns1__ArrayOfLong() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfShort
#define SOAP_TYPE_ns1__ArrayOfShort (71)
/* ns1:ArrayOfShort */
class SOAP_CMAC ns1__ArrayOfShort : public xsd__anyType
{
public:
	std::vector<short >short_;	/* optional element of type xsd:short */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns1__ArrayOfShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfShort() { ns1__ArrayOfShort::soap_default(NULL); }
	virtual ~ns1__ArrayOfShort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPropertyFilterSpec
#define SOAP_TYPE_ns1__ArrayOfPropertyFilterSpec (75)
/* ns1:ArrayOfPropertyFilterSpec */
class SOAP_CMAC ns1__ArrayOfPropertyFilterSpec : public xsd__anyType
{
public:
	std::vector<ns1__PropertyFilterSpec * >PropertyFilterSpec;	/* optional element of type ns1:PropertyFilterSpec */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns1__ArrayOfPropertyFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPropertyFilterSpec() { ns1__ArrayOfPropertyFilterSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfPropertyFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPropertySpec
#define SOAP_TYPE_ns1__ArrayOfPropertySpec (77)
/* ns1:ArrayOfPropertySpec */
class SOAP_CMAC ns1__ArrayOfPropertySpec : public xsd__anyType
{
public:
	std::vector<class ns1__PropertySpec * >PropertySpec;	/* optional element of type ns1:PropertySpec */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns1__ArrayOfPropertySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPropertySpec() { ns1__ArrayOfPropertySpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfPropertySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfObjectSpec
#define SOAP_TYPE_ns1__ArrayOfObjectSpec (79)
/* ns1:ArrayOfObjectSpec */
class SOAP_CMAC ns1__ArrayOfObjectSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ObjectSpec * >ObjectSpec;	/* optional element of type ns1:ObjectSpec */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns1__ArrayOfObjectSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfObjectSpec() { ns1__ArrayOfObjectSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfObjectSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSelectionSpec
#define SOAP_TYPE_ns1__ArrayOfSelectionSpec (81)
/* ns1:ArrayOfSelectionSpec */
class SOAP_CMAC ns1__ArrayOfSelectionSpec : public xsd__anyType
{
public:
	std::vector<class ns1__SelectionSpec * >SelectionSpec;	/* optional element of type ns1:SelectionSpec */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns1__ArrayOfSelectionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfSelectionSpec() { ns1__ArrayOfSelectionSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfSelectionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfObjectContent
#define SOAP_TYPE_ns1__ArrayOfObjectContent (84)
/* ns1:ArrayOfObjectContent */
class SOAP_CMAC ns1__ArrayOfObjectContent : public xsd__anyType
{
public:
	std::vector<class ns1__ObjectContent * >ObjectContent;	/* optional element of type ns1:ObjectContent */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns1__ArrayOfObjectContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfObjectContent() { ns1__ArrayOfObjectContent::soap_default(NULL); }
	virtual ~ns1__ArrayOfObjectContent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPropertyFilterUpdate
#define SOAP_TYPE_ns1__ArrayOfPropertyFilterUpdate (87)
/* ns1:ArrayOfPropertyFilterUpdate */
class SOAP_CMAC ns1__ArrayOfPropertyFilterUpdate : public xsd__anyType
{
public:
	std::vector<class ns1__PropertyFilterUpdate * >PropertyFilterUpdate;	/* optional element of type ns1:PropertyFilterUpdate */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns1__ArrayOfPropertyFilterUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPropertyFilterUpdate() { ns1__ArrayOfPropertyFilterUpdate::soap_default(NULL); }
	virtual ~ns1__ArrayOfPropertyFilterUpdate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfObjectUpdate
#define SOAP_TYPE_ns1__ArrayOfObjectUpdate (89)
/* ns1:ArrayOfObjectUpdate */
class SOAP_CMAC ns1__ArrayOfObjectUpdate : public xsd__anyType
{
public:
	std::vector<class ns1__ObjectUpdate * >ObjectUpdate;	/* optional element of type ns1:ObjectUpdate */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns1__ArrayOfObjectUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfObjectUpdate() { ns1__ArrayOfObjectUpdate::soap_default(NULL); }
	virtual ~ns1__ArrayOfObjectUpdate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPropertyChange
#define SOAP_TYPE_ns1__ArrayOfPropertyChange (91)
/* ns1:ArrayOfPropertyChange */
class SOAP_CMAC ns1__ArrayOfPropertyChange : public xsd__anyType
{
public:
	std::vector<class ns1__PropertyChange * >PropertyChange;	/* optional element of type ns1:PropertyChange */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns1__ArrayOfPropertyChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPropertyChange() { ns1__ArrayOfPropertyChange::soap_default(NULL); }
	virtual ~ns1__ArrayOfPropertyChange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMissingProperty
#define SOAP_TYPE_ns1__ArrayOfMissingProperty (93)
/* ns1:ArrayOfMissingProperty */
class SOAP_CMAC ns1__ArrayOfMissingProperty : public xsd__anyType
{
public:
	std::vector<class ns1__MissingProperty * >MissingProperty;	/* optional element of type ns1:MissingProperty */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ns1__ArrayOfMissingProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfMissingProperty() { ns1__ArrayOfMissingProperty::soap_default(NULL); }
	virtual ~ns1__ArrayOfMissingProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMissingObject
#define SOAP_TYPE_ns1__ArrayOfMissingObject (95)
/* ns1:ArrayOfMissingObject */
class SOAP_CMAC ns1__ArrayOfMissingObject : public xsd__anyType
{
public:
	std::vector<class ns1__MissingObject * >MissingObject;	/* optional element of type ns1:MissingObject */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_ns1__ArrayOfMissingObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfMissingObject() { ns1__ArrayOfMissingObject::soap_default(NULL); }
	virtual ~ns1__ArrayOfMissingObject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddAuthorizationRoleRequestType
#define SOAP_TYPE_ns1__AddAuthorizationRoleRequestType (99)
/* ns1:AddAuthorizationRoleRequestType */
class SOAP_CMAC ns1__AddAuthorizationRoleRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::vector<std::string >privIds;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_ns1__AddAuthorizationRoleRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddAuthorizationRoleRequestType() { ns1__AddAuthorizationRoleRequestType::soap_default(NULL); }
	virtual ~ns1__AddAuthorizationRoleRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveAuthorizationRoleRequestType
#define SOAP_TYPE_ns1__RemoveAuthorizationRoleRequestType (100)
/* ns1:RemoveAuthorizationRoleRequestType */
class SOAP_CMAC ns1__RemoveAuthorizationRoleRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int roleId;	/* required element of type xsd:int */
	bool failIfUsed;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_ns1__RemoveAuthorizationRoleRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveAuthorizationRoleRequestType() { ns1__RemoveAuthorizationRoleRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveAuthorizationRoleRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateAuthorizationRoleRequestType
#define SOAP_TYPE_ns1__UpdateAuthorizationRoleRequestType (101)
/* ns1:UpdateAuthorizationRoleRequestType */
class SOAP_CMAC ns1__UpdateAuthorizationRoleRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int roleId;	/* required element of type xsd:int */
	std::string newName;	/* required element of type xsd:string */
	std::vector<std::string >privIds;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_ns1__UpdateAuthorizationRoleRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateAuthorizationRoleRequestType() { ns1__UpdateAuthorizationRoleRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateAuthorizationRoleRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MergePermissionsRequestType
#define SOAP_TYPE_ns1__MergePermissionsRequestType (102)
/* ns1:MergePermissionsRequestType */
class SOAP_CMAC ns1__MergePermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int srcRoleId;	/* required element of type xsd:int */
	int dstRoleId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_ns1__MergePermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MergePermissionsRequestType() { ns1__MergePermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__MergePermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveRolePermissionsRequestType
#define SOAP_TYPE_ns1__RetrieveRolePermissionsRequestType (103)
/* ns1:RetrieveRolePermissionsRequestType */
class SOAP_CMAC ns1__RetrieveRolePermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int roleId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_ns1__RetrieveRolePermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveRolePermissionsRequestType() { ns1__RetrieveRolePermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveRolePermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveEntityPermissionsRequestType
#define SOAP_TYPE_ns1__RetrieveEntityPermissionsRequestType (104)
/* ns1:RetrieveEntityPermissionsRequestType */
class SOAP_CMAC ns1__RetrieveEntityPermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	bool inherited;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_ns1__RetrieveEntityPermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveEntityPermissionsRequestType() { ns1__RetrieveEntityPermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveEntityPermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveAllPermissionsRequestType
#define SOAP_TYPE_ns1__RetrieveAllPermissionsRequestType (105)
/* ns1:RetrieveAllPermissionsRequestType */
class SOAP_CMAC ns1__RetrieveAllPermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_ns1__RetrieveAllPermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveAllPermissionsRequestType() { ns1__RetrieveAllPermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveAllPermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetEntityPermissionsRequestType
#define SOAP_TYPE_ns1__SetEntityPermissionsRequestType (106)
/* ns1:SetEntityPermissionsRequestType */
class SOAP_CMAC ns1__SetEntityPermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__Permission * >permission;	/* optional element of type ns1:Permission */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE_ns1__SetEntityPermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetEntityPermissionsRequestType() { ns1__SetEntityPermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__SetEntityPermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetEntityPermissionsRequestType
#define SOAP_TYPE_ns1__ResetEntityPermissionsRequestType (107)
/* ns1:ResetEntityPermissionsRequestType */
class SOAP_CMAC ns1__ResetEntityPermissionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__Permission * >permission;	/* optional element of type ns1:Permission */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_ns1__ResetEntityPermissionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetEntityPermissionsRequestType() { ns1__ResetEntityPermissionsRequestType::soap_default(NULL); }
	virtual ~ns1__ResetEntityPermissionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveEntityPermissionRequestType
#define SOAP_TYPE_ns1__RemoveEntityPermissionRequestType (108)
/* ns1:RemoveEntityPermissionRequestType */
class SOAP_CMAC ns1__RemoveEntityPermissionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::string user;	/* required element of type xsd:string */
	bool isGroup;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_ns1__RemoveEntityPermissionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveEntityPermissionRequestType() { ns1__RemoveEntityPermissionRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveEntityPermissionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureClusterRequestType
#define SOAP_TYPE_ns1__ReconfigureClusterRequestType (109)
/* ns1:ReconfigureClusterRequestType */
class SOAP_CMAC ns1__ReconfigureClusterRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ClusterConfigSpec *spec;	/* required element of type ns1:ClusterConfigSpec */
	bool modify;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_ns1__ReconfigureClusterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureClusterRequestType() { ns1__ReconfigureClusterRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureClusterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ApplyRecommendationRequestType
#define SOAP_TYPE_ns1__ApplyRecommendationRequestType (110)
/* ns1:ApplyRecommendationRequestType */
class SOAP_CMAC ns1__ApplyRecommendationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_ns1__ApplyRecommendationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ApplyRecommendationRequestType() { ns1__ApplyRecommendationRequestType::soap_default(NULL); }
	virtual ~ns1__ApplyRecommendationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CancelRecommendationRequestType
#define SOAP_TYPE_ns1__CancelRecommendationRequestType (111)
/* ns1:CancelRecommendationRequestType */
class SOAP_CMAC ns1__CancelRecommendationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_ns1__CancelRecommendationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CancelRecommendationRequestType() { ns1__CancelRecommendationRequestType::soap_default(NULL); }
	virtual ~ns1__CancelRecommendationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RecommendHostsForVmRequestType
#define SOAP_TYPE_ns1__RecommendHostsForVmRequestType (112)
/* ns1:RecommendHostsForVmRequestType */
class SOAP_CMAC ns1__RecommendHostsForVmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_ns1__RecommendHostsForVmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RecommendHostsForVmRequestType() { ns1__RecommendHostsForVmRequestType::soap_default(NULL); }
	virtual ~ns1__RecommendHostsForVmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddHostRequestType
#define SOAP_TYPE_ns1__AddHostRequestType (113)
/* ns1:AddHostRequestType */
class SOAP_CMAC ns1__AddHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostConnectSpec *spec;	/* required element of type ns1:HostConnectSpec */
	bool asConnected;	/* required element of type xsd:boolean */
	ns1__ManagedObjectReference *resourcePool;	/* optional element of type ns1:ManagedObjectReference */
	std::string *license;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE_ns1__AddHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddHostRequestType() { ns1__AddHostRequestType::soap_default(NULL); }
	virtual ~ns1__AddHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveIntoRequestType
#define SOAP_TYPE_ns1__MoveIntoRequestType (114)
/* ns1:MoveIntoRequestType */
class SOAP_CMAC ns1__MoveIntoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_ns1__MoveIntoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveIntoRequestType() { ns1__MoveIntoRequestType::soap_default(NULL); }
	virtual ~ns1__MoveIntoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveHostIntoRequestType
#define SOAP_TYPE_ns1__MoveHostIntoRequestType (115)
/* ns1:MoveHostIntoRequestType */
class SOAP_CMAC ns1__MoveHostIntoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *resourcePool;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE_ns1__MoveHostIntoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveHostIntoRequestType() { ns1__MoveHostIntoRequestType::soap_default(NULL); }
	virtual ~ns1__MoveHostIntoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshRecommendationRequestType
#define SOAP_TYPE_ns1__RefreshRecommendationRequestType (116)
/* ns1:RefreshRecommendationRequestType */
class SOAP_CMAC ns1__RefreshRecommendationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_ns1__RefreshRecommendationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshRecommendationRequestType() { ns1__RefreshRecommendationRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshRecommendationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveDasAdvancedRuntimeInfoRequestType
#define SOAP_TYPE_ns1__RetrieveDasAdvancedRuntimeInfoRequestType (117)
/* ns1:RetrieveDasAdvancedRuntimeInfoRequestType */
class SOAP_CMAC ns1__RetrieveDasAdvancedRuntimeInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_ns1__RetrieveDasAdvancedRuntimeInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveDasAdvancedRuntimeInfoRequestType() { ns1__RetrieveDasAdvancedRuntimeInfoRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveDasAdvancedRuntimeInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureComputeResourceRequestType
#define SOAP_TYPE_ns1__ReconfigureComputeResourceRequestType (118)
/* ns1:ReconfigureComputeResourceRequestType */
class SOAP_CMAC ns1__ReconfigureComputeResourceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ComputeResourceConfigSpec *spec;	/* required element of type ns1:ComputeResourceConfigSpec */
	bool modify;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_ns1__ReconfigureComputeResourceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureComputeResourceRequestType() { ns1__ReconfigureComputeResourceRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureComputeResourceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddCustomFieldDefRequestType
#define SOAP_TYPE_ns1__AddCustomFieldDefRequestType (119)
/* ns1:AddCustomFieldDefRequestType */
class SOAP_CMAC ns1__AddCustomFieldDefRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string *moType;	/* optional element of type xsd:string */
	class ns1__PrivilegePolicyDef *fieldDefPolicy;	/* optional element of type ns1:PrivilegePolicyDef */
	ns1__PrivilegePolicyDef *fieldPolicy;	/* optional element of type ns1:PrivilegePolicyDef */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_ns1__AddCustomFieldDefRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddCustomFieldDefRequestType() { ns1__AddCustomFieldDefRequestType::soap_default(NULL); }
	virtual ~ns1__AddCustomFieldDefRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveCustomFieldDefRequestType
#define SOAP_TYPE_ns1__RemoveCustomFieldDefRequestType (120)
/* ns1:RemoveCustomFieldDefRequestType */
class SOAP_CMAC ns1__RemoveCustomFieldDefRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int key;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_ns1__RemoveCustomFieldDefRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveCustomFieldDefRequestType() { ns1__RemoveCustomFieldDefRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveCustomFieldDefRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RenameCustomFieldDefRequestType
#define SOAP_TYPE_ns1__RenameCustomFieldDefRequestType (121)
/* ns1:RenameCustomFieldDefRequestType */
class SOAP_CMAC ns1__RenameCustomFieldDefRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int key;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_ns1__RenameCustomFieldDefRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RenameCustomFieldDefRequestType() { ns1__RenameCustomFieldDefRequestType::soap_default(NULL); }
	virtual ~ns1__RenameCustomFieldDefRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetFieldRequestType
#define SOAP_TYPE_ns1__SetFieldRequestType (122)
/* ns1:SetFieldRequestType */
class SOAP_CMAC ns1__SetFieldRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	int key;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_ns1__SetFieldRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetFieldRequestType() { ns1__SetFieldRequestType::soap_default(NULL); }
	virtual ~ns1__SetFieldRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DoesCustomizationSpecExistRequestType
#define SOAP_TYPE_ns1__DoesCustomizationSpecExistRequestType (123)
/* ns1:DoesCustomizationSpecExistRequestType */
class SOAP_CMAC ns1__DoesCustomizationSpecExistRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_ns1__DoesCustomizationSpecExistRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DoesCustomizationSpecExistRequestType() { ns1__DoesCustomizationSpecExistRequestType::soap_default(NULL); }
	virtual ~ns1__DoesCustomizationSpecExistRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCustomizationSpecRequestType
#define SOAP_TYPE_ns1__GetCustomizationSpecRequestType (124)
/* ns1:GetCustomizationSpecRequestType */
class SOAP_CMAC ns1__GetCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_ns1__GetCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCustomizationSpecRequestType() { ns1__GetCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__GetCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateCustomizationSpecRequestType
#define SOAP_TYPE_ns1__CreateCustomizationSpecRequestType (125)
/* ns1:CreateCustomizationSpecRequestType */
class SOAP_CMAC ns1__CreateCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__CustomizationSpecItem *item;	/* required element of type ns1:CustomizationSpecItem */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_ns1__CreateCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateCustomizationSpecRequestType() { ns1__CreateCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__CreateCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OverwriteCustomizationSpecRequestType
#define SOAP_TYPE_ns1__OverwriteCustomizationSpecRequestType (126)
/* ns1:OverwriteCustomizationSpecRequestType */
class SOAP_CMAC ns1__OverwriteCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__CustomizationSpecItem *item;	/* required element of type ns1:CustomizationSpecItem */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE_ns1__OverwriteCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OverwriteCustomizationSpecRequestType() { ns1__OverwriteCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__OverwriteCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteCustomizationSpecRequestType
#define SOAP_TYPE_ns1__DeleteCustomizationSpecRequestType (127)
/* ns1:DeleteCustomizationSpecRequestType */
class SOAP_CMAC ns1__DeleteCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_ns1__DeleteCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteCustomizationSpecRequestType() { ns1__DeleteCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__DeleteCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DuplicateCustomizationSpecRequestType
#define SOAP_TYPE_ns1__DuplicateCustomizationSpecRequestType (128)
/* ns1:DuplicateCustomizationSpecRequestType */
class SOAP_CMAC ns1__DuplicateCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_ns1__DuplicateCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DuplicateCustomizationSpecRequestType() { ns1__DuplicateCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__DuplicateCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RenameCustomizationSpecRequestType
#define SOAP_TYPE_ns1__RenameCustomizationSpecRequestType (129)
/* ns1:RenameCustomizationSpecRequestType */
class SOAP_CMAC ns1__RenameCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_ns1__RenameCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RenameCustomizationSpecRequestType() { ns1__RenameCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__RenameCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSpecItemToXmlRequestType
#define SOAP_TYPE_ns1__CustomizationSpecItemToXmlRequestType (130)
/* ns1:CustomizationSpecItemToXmlRequestType */
class SOAP_CMAC ns1__CustomizationSpecItemToXmlRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__CustomizationSpecItem *item;	/* required element of type ns1:CustomizationSpecItem */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_ns1__CustomizationSpecItemToXmlRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSpecItemToXmlRequestType() { ns1__CustomizationSpecItemToXmlRequestType::soap_default(NULL); }
	virtual ~ns1__CustomizationSpecItemToXmlRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__XmlToCustomizationSpecItemRequestType
#define SOAP_TYPE_ns1__XmlToCustomizationSpecItemRequestType (131)
/* ns1:XmlToCustomizationSpecItemRequestType */
class SOAP_CMAC ns1__XmlToCustomizationSpecItemRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string specItemXml;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_ns1__XmlToCustomizationSpecItemRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__XmlToCustomizationSpecItemRequestType() { ns1__XmlToCustomizationSpecItemRequestType::soap_default(NULL); }
	virtual ~ns1__XmlToCustomizationSpecItemRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckCustomizationResourcesRequestType
#define SOAP_TYPE_ns1__CheckCustomizationResourcesRequestType (132)
/* ns1:CheckCustomizationResourcesRequestType */
class SOAP_CMAC ns1__CheckCustomizationResourcesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string guestOs;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_ns1__CheckCustomizationResourcesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckCustomizationResourcesRequestType() { ns1__CheckCustomizationResourcesRequestType::soap_default(NULL); }
	virtual ~ns1__CheckCustomizationResourcesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryConnectionInfoRequestType
#define SOAP_TYPE_ns1__QueryConnectionInfoRequestType (133)
/* ns1:QueryConnectionInfoRequestType */
class SOAP_CMAC ns1__QueryConnectionInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string hostname;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
	std::string username;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_ns1__QueryConnectionInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryConnectionInfoRequestType() { ns1__QueryConnectionInfoRequestType::soap_default(NULL); }
	virtual ~ns1__QueryConnectionInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOnMultiVMRequestType
#define SOAP_TYPE_ns1__PowerOnMultiVMRequestType (134)
/* ns1:PowerOnMultiVMRequestType */
class SOAP_CMAC ns1__PowerOnMultiVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_ns1__PowerOnMultiVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOnMultiVMRequestType() { ns1__PowerOnMultiVMRequestType::soap_default(NULL); }
	virtual ~ns1__PowerOnMultiVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshDatastoreRequestType
#define SOAP_TYPE_ns1__RefreshDatastoreRequestType (135)
/* ns1:RefreshDatastoreRequestType */
class SOAP_CMAC ns1__RefreshDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_ns1__RefreshDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshDatastoreRequestType() { ns1__RefreshDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshDatastoreStorageInfoRequestType
#define SOAP_TYPE_ns1__RefreshDatastoreStorageInfoRequestType (136)
/* ns1:RefreshDatastoreStorageInfoRequestType */
class SOAP_CMAC ns1__RefreshDatastoreStorageInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_ns1__RefreshDatastoreStorageInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshDatastoreStorageInfoRequestType() { ns1__RefreshDatastoreStorageInfoRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshDatastoreStorageInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVirtualMachineFilesRequestType
#define SOAP_TYPE_ns1__UpdateVirtualMachineFilesRequestType (137)
/* ns1:UpdateVirtualMachineFilesRequestType */
class SOAP_CMAC ns1__UpdateVirtualMachineFilesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__DatastoreMountPathDatastorePair * >mountPathDatastoreMapping;	/* required element of type ns1:DatastoreMountPathDatastorePair */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE_ns1__UpdateVirtualMachineFilesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVirtualMachineFilesRequestType() { ns1__UpdateVirtualMachineFilesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateVirtualMachineFilesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RenameDatastoreRequestType
#define SOAP_TYPE_ns1__RenameDatastoreRequestType (138)
/* ns1:RenameDatastoreRequestType */
class SOAP_CMAC ns1__RenameDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_ns1__RenameDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RenameDatastoreRequestType() { ns1__RenameDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__RenameDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyDatastoreRequestType
#define SOAP_TYPE_ns1__DestroyDatastoreRequestType (139)
/* ns1:DestroyDatastoreRequestType */
class SOAP_CMAC ns1__DestroyDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_ns1__DestroyDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyDatastoreRequestType() { ns1__DestroyDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDescriptionsRequestType
#define SOAP_TYPE_ns1__QueryDescriptionsRequestType (140)
/* ns1:QueryDescriptionsRequestType */
class SOAP_CMAC ns1__QueryDescriptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_ns1__QueryDescriptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDescriptionsRequestType() { ns1__QueryDescriptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDescriptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BrowseDiagnosticLogRequestType
#define SOAP_TYPE_ns1__BrowseDiagnosticLogRequestType (141)
/* ns1:BrowseDiagnosticLogRequestType */
class SOAP_CMAC ns1__BrowseDiagnosticLogRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string key;	/* required element of type xsd:string */
	int *start;	/* optional element of type xsd:int */
	int *lines;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_ns1__BrowseDiagnosticLogRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BrowseDiagnosticLogRequestType() { ns1__BrowseDiagnosticLogRequestType::soap_default(NULL); }
	virtual ~ns1__BrowseDiagnosticLogRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GenerateLogBundlesRequestType
#define SOAP_TYPE_ns1__GenerateLogBundlesRequestType (142)
/* ns1:GenerateLogBundlesRequestType */
class SOAP_CMAC ns1__GenerateLogBundlesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool includeDefault;	/* required element of type xsd:boolean */
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_ns1__GenerateLogBundlesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GenerateLogBundlesRequestType() { ns1__GenerateLogBundlesRequestType::soap_default(NULL); }
	virtual ~ns1__GenerateLogBundlesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FetchDVPortKeysRequestType
#define SOAP_TYPE_ns1__FetchDVPortKeysRequestType (143)
/* ns1:FetchDVPortKeysRequestType */
class SOAP_CMAC ns1__FetchDVPortKeysRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DistributedVirtualSwitchPortCriteria *criteria;	/* optional element of type ns1:DistributedVirtualSwitchPortCriteria */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_ns1__FetchDVPortKeysRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FetchDVPortKeysRequestType() { ns1__FetchDVPortKeysRequestType::soap_default(NULL); }
	virtual ~ns1__FetchDVPortKeysRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FetchDVPortsRequestType
#define SOAP_TYPE_ns1__FetchDVPortsRequestType (144)
/* ns1:FetchDVPortsRequestType */
class SOAP_CMAC ns1__FetchDVPortsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__DistributedVirtualSwitchPortCriteria *criteria;	/* optional element of type ns1:DistributedVirtualSwitchPortCriteria */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_ns1__FetchDVPortsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FetchDVPortsRequestType() { ns1__FetchDVPortsRequestType::soap_default(NULL); }
	virtual ~ns1__FetchDVPortsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryUsedVlanIdInDvsRequestType
#define SOAP_TYPE_ns1__QueryUsedVlanIdInDvsRequestType (145)
/* ns1:QueryUsedVlanIdInDvsRequestType */
class SOAP_CMAC ns1__QueryUsedVlanIdInDvsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_ns1__QueryUsedVlanIdInDvsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryUsedVlanIdInDvsRequestType() { ns1__QueryUsedVlanIdInDvsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryUsedVlanIdInDvsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureDvsRequestType
#define SOAP_TYPE_ns1__ReconfigureDvsRequestType (146)
/* ns1:ReconfigureDvsRequestType */
class SOAP_CMAC ns1__ReconfigureDvsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DVSConfigSpec *spec;	/* required element of type ns1:DVSConfigSpec */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_ns1__ReconfigureDvsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureDvsRequestType() { ns1__ReconfigureDvsRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureDvsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerformDvsProductSpecOperationRequestType
#define SOAP_TYPE_ns1__PerformDvsProductSpecOperationRequestType (147)
/* ns1:PerformDvsProductSpecOperationRequestType */
class SOAP_CMAC ns1__PerformDvsProductSpecOperationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string operation;	/* required element of type xsd:string */
	class ns1__DistributedVirtualSwitchProductSpec *productSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_ns1__PerformDvsProductSpecOperationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerformDvsProductSpecOperationRequestType() { ns1__PerformDvsProductSpecOperationRequestType::soap_default(NULL); }
	virtual ~ns1__PerformDvsProductSpecOperationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MergeDvsRequestType
#define SOAP_TYPE_ns1__MergeDvsRequestType (148)
/* ns1:MergeDvsRequestType */
class SOAP_CMAC ns1__MergeDvsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dvs;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_ns1__MergeDvsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MergeDvsRequestType() { ns1__MergeDvsRequestType::soap_default(NULL); }
	virtual ~ns1__MergeDvsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddDVPortgroupRequestType
#define SOAP_TYPE_ns1__AddDVPortgroupRequestType (149)
/* ns1:AddDVPortgroupRequestType */
class SOAP_CMAC ns1__AddDVPortgroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__DVPortgroupConfigSpec * >spec;	/* required element of type ns1:DVPortgroupConfigSpec */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_ns1__AddDVPortgroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddDVPortgroupRequestType() { ns1__AddDVPortgroupRequestType::soap_default(NULL); }
	virtual ~ns1__AddDVPortgroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveDVPortRequestType
#define SOAP_TYPE_ns1__MoveDVPortRequestType (150)
/* ns1:MoveDVPortRequestType */
class SOAP_CMAC ns1__MoveDVPortRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >portKey;	/* required element of type xsd:string */
	std::string *destinationPortgroupKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE_ns1__MoveDVPortRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveDVPortRequestType() { ns1__MoveDVPortRequestType::soap_default(NULL); }
	virtual ~ns1__MoveDVPortRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDvsCapabilityRequestType
#define SOAP_TYPE_ns1__UpdateDvsCapabilityRequestType (151)
/* ns1:UpdateDvsCapabilityRequestType */
class SOAP_CMAC ns1__UpdateDvsCapabilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DVSCapability *capability;	/* required element of type ns1:DVSCapability */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE_ns1__UpdateDvsCapabilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDvsCapabilityRequestType() { ns1__UpdateDvsCapabilityRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDvsCapabilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureDVPortRequestType
#define SOAP_TYPE_ns1__ReconfigureDVPortRequestType (152)
/* ns1:ReconfigureDVPortRequestType */
class SOAP_CMAC ns1__ReconfigureDVPortRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__DVPortConfigSpec * >port;	/* required element of type ns1:DVPortConfigSpec */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_ns1__ReconfigureDVPortRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureDVPortRequestType() { ns1__ReconfigureDVPortRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureDVPortRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshDVPortStateRequestType
#define SOAP_TYPE_ns1__RefreshDVPortStateRequestType (153)
/* ns1:RefreshDVPortStateRequestType */
class SOAP_CMAC ns1__RefreshDVPortStateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >portKeys;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE_ns1__RefreshDVPortStateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshDVPortStateRequestType() { ns1__RefreshDVPortStateRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshDVPortStateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RectifyDvsHostRequestType
#define SOAP_TYPE_ns1__RectifyDvsHostRequestType (154)
/* ns1:RectifyDvsHostRequestType */
class SOAP_CMAC ns1__RectifyDvsHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >hosts;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE_ns1__RectifyDvsHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RectifyDvsHostRequestType() { ns1__RectifyDvsHostRequestType::soap_default(NULL); }
	virtual ~ns1__RectifyDvsHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateNetworkResourcePoolRequestType
#define SOAP_TYPE_ns1__UpdateNetworkResourcePoolRequestType (155)
/* ns1:UpdateNetworkResourcePoolRequestType */
class SOAP_CMAC ns1__UpdateNetworkResourcePoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__DVSNetworkResourcePoolConfigSpec * >configSpec;	/* required element of type ns1:DVSNetworkResourcePoolConfigSpec */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE_ns1__UpdateNetworkResourcePoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateNetworkResourcePoolRequestType() { ns1__UpdateNetworkResourcePoolRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateNetworkResourcePoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableNetworkResourceManagementRequestType
#define SOAP_TYPE_ns1__EnableNetworkResourceManagementRequestType (156)
/* ns1:EnableNetworkResourceManagementRequestType */
class SOAP_CMAC ns1__EnableNetworkResourceManagementRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool enable;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE_ns1__EnableNetworkResourceManagementRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableNetworkResourceManagementRequestType() { ns1__EnableNetworkResourceManagementRequestType::soap_default(NULL); }
	virtual ~ns1__EnableNetworkResourceManagementRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryConfigOptionDescriptorRequestType
#define SOAP_TYPE_ns1__QueryConfigOptionDescriptorRequestType (157)
/* ns1:QueryConfigOptionDescriptorRequestType */
class SOAP_CMAC ns1__QueryConfigOptionDescriptorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_ns1__QueryConfigOptionDescriptorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryConfigOptionDescriptorRequestType() { ns1__QueryConfigOptionDescriptorRequestType::soap_default(NULL); }
	virtual ~ns1__QueryConfigOptionDescriptorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryConfigOptionRequestType
#define SOAP_TYPE_ns1__QueryConfigOptionRequestType (158)
/* ns1:QueryConfigOptionRequestType */
class SOAP_CMAC ns1__QueryConfigOptionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *key;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_ns1__QueryConfigOptionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryConfigOptionRequestType() { ns1__QueryConfigOptionRequestType::soap_default(NULL); }
	virtual ~ns1__QueryConfigOptionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryConfigTargetRequestType
#define SOAP_TYPE_ns1__QueryConfigTargetRequestType (159)
/* ns1:QueryConfigTargetRequestType */
class SOAP_CMAC ns1__QueryConfigTargetRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE_ns1__QueryConfigTargetRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryConfigTargetRequestType() { ns1__QueryConfigTargetRequestType::soap_default(NULL); }
	virtual ~ns1__QueryConfigTargetRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryTargetCapabilitiesRequestType
#define SOAP_TYPE_ns1__QueryTargetCapabilitiesRequestType (160)
/* ns1:QueryTargetCapabilitiesRequestType */
class SOAP_CMAC ns1__QueryTargetCapabilitiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE_ns1__QueryTargetCapabilitiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryTargetCapabilitiesRequestType() { ns1__QueryTargetCapabilitiesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryTargetCapabilitiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__setCustomValueRequestType
#define SOAP_TYPE_ns1__setCustomValueRequestType (161)
/* ns1:setCustomValueRequestType */
class SOAP_CMAC ns1__setCustomValueRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE_ns1__setCustomValueRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__setCustomValueRequestType() { ns1__setCustomValueRequestType::soap_default(NULL); }
	virtual ~ns1__setCustomValueRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnregisterExtensionRequestType
#define SOAP_TYPE_ns1__UnregisterExtensionRequestType (162)
/* ns1:UnregisterExtensionRequestType */
class SOAP_CMAC ns1__UnregisterExtensionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_ns1__UnregisterExtensionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnregisterExtensionRequestType() { ns1__UnregisterExtensionRequestType::soap_default(NULL); }
	virtual ~ns1__UnregisterExtensionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindExtensionRequestType
#define SOAP_TYPE_ns1__FindExtensionRequestType (163)
/* ns1:FindExtensionRequestType */
class SOAP_CMAC ns1__FindExtensionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE_ns1__FindExtensionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindExtensionRequestType() { ns1__FindExtensionRequestType::soap_default(NULL); }
	virtual ~ns1__FindExtensionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RegisterExtensionRequestType
#define SOAP_TYPE_ns1__RegisterExtensionRequestType (164)
/* ns1:RegisterExtensionRequestType */
class SOAP_CMAC ns1__RegisterExtensionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__Extension *extension;	/* required element of type ns1:Extension */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE_ns1__RegisterExtensionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RegisterExtensionRequestType() { ns1__RegisterExtensionRequestType::soap_default(NULL); }
	virtual ~ns1__RegisterExtensionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateExtensionRequestType
#define SOAP_TYPE_ns1__UpdateExtensionRequestType (165)
/* ns1:UpdateExtensionRequestType */
class SOAP_CMAC ns1__UpdateExtensionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__Extension *extension;	/* required element of type ns1:Extension */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE_ns1__UpdateExtensionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateExtensionRequestType() { ns1__UpdateExtensionRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateExtensionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetPublicKeyRequestType
#define SOAP_TYPE_ns1__GetPublicKeyRequestType (166)
/* ns1:GetPublicKeyRequestType */
class SOAP_CMAC ns1__GetPublicKeyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_ns1__GetPublicKeyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetPublicKeyRequestType() { ns1__GetPublicKeyRequestType::soap_default(NULL); }
	virtual ~ns1__GetPublicKeyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetPublicKeyRequestType
#define SOAP_TYPE_ns1__SetPublicKeyRequestType (167)
/* ns1:SetPublicKeyRequestType */
class SOAP_CMAC ns1__SetPublicKeyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
	std::string publicKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE_ns1__SetPublicKeyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetPublicKeyRequestType() { ns1__SetPublicKeyRequestType::soap_default(NULL); }
	virtual ~ns1__SetPublicKeyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetExtensionCertificateRequestType
#define SOAP_TYPE_ns1__SetExtensionCertificateRequestType (168)
/* ns1:SetExtensionCertificateRequestType */
class SOAP_CMAC ns1__SetExtensionCertificateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
	std::string *certificatePem;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_ns1__SetExtensionCertificateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetExtensionCertificateRequestType() { ns1__SetExtensionCertificateRequestType::soap_default(NULL); }
	virtual ~ns1__SetExtensionCertificateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveDatastoreFileRequestType
#define SOAP_TYPE_ns1__MoveDatastoreFileRequestType (169)
/* ns1:MoveDatastoreFileRequestType */
class SOAP_CMAC ns1__MoveDatastoreFileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string sourceName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *sourceDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string destinationName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *destinationDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	bool *force;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE_ns1__MoveDatastoreFileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveDatastoreFileRequestType() { ns1__MoveDatastoreFileRequestType::soap_default(NULL); }
	virtual ~ns1__MoveDatastoreFileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyDatastoreFileRequestType
#define SOAP_TYPE_ns1__CopyDatastoreFileRequestType (170)
/* ns1:CopyDatastoreFileRequestType */
class SOAP_CMAC ns1__CopyDatastoreFileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string sourceName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *sourceDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string destinationName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *destinationDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	bool *force;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE_ns1__CopyDatastoreFileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyDatastoreFileRequestType() { ns1__CopyDatastoreFileRequestType::soap_default(NULL); }
	virtual ~ns1__CopyDatastoreFileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDatastoreFileRequestType
#define SOAP_TYPE_ns1__DeleteDatastoreFileRequestType (171)
/* ns1:DeleteDatastoreFileRequestType */
class SOAP_CMAC ns1__DeleteDatastoreFileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE_ns1__DeleteDatastoreFileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDatastoreFileRequestType() { ns1__DeleteDatastoreFileRequestType::soap_default(NULL); }
	virtual ~ns1__DeleteDatastoreFileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MakeDirectoryRequestType
#define SOAP_TYPE_ns1__MakeDirectoryRequestType (172)
/* ns1:MakeDirectoryRequestType */
class SOAP_CMAC ns1__MakeDirectoryRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	bool *createParentDirectories;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_ns1__MakeDirectoryRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MakeDirectoryRequestType() { ns1__MakeDirectoryRequestType::soap_default(NULL); }
	virtual ~ns1__MakeDirectoryRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChangeOwnerRequestType
#define SOAP_TYPE_ns1__ChangeOwnerRequestType (173)
/* ns1:ChangeOwnerRequestType */
class SOAP_CMAC ns1__ChangeOwnerRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string owner;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_ns1__ChangeOwnerRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChangeOwnerRequestType() { ns1__ChangeOwnerRequestType::soap_default(NULL); }
	virtual ~ns1__ChangeOwnerRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateFolderRequestType
#define SOAP_TYPE_ns1__CreateFolderRequestType (174)
/* ns1:CreateFolderRequestType */
class SOAP_CMAC ns1__CreateFolderRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_ns1__CreateFolderRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateFolderRequestType() { ns1__CreateFolderRequestType::soap_default(NULL); }
	virtual ~ns1__CreateFolderRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveIntoFolderRequestType
#define SOAP_TYPE_ns1__MoveIntoFolderRequestType (175)
/* ns1:MoveIntoFolderRequestType */
class SOAP_CMAC ns1__MoveIntoFolderRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >list;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_ns1__MoveIntoFolderRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveIntoFolderRequestType() { ns1__MoveIntoFolderRequestType::soap_default(NULL); }
	virtual ~ns1__MoveIntoFolderRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVMRequestType
#define SOAP_TYPE_ns1__CreateVMRequestType (176)
/* ns1:CreateVMRequestType */
class SOAP_CMAC ns1__CreateVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VirtualMachineConfigSpec *config;	/* required element of type ns1:VirtualMachineConfigSpec */
	ns1__ManagedObjectReference *pool;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE_ns1__CreateVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVMRequestType() { ns1__CreateVMRequestType::soap_default(NULL); }
	virtual ~ns1__CreateVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RegisterVMRequestType
#define SOAP_TYPE_ns1__RegisterVMRequestType (177)
/* ns1:RegisterVMRequestType */
class SOAP_CMAC ns1__RegisterVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string path;	/* required element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	bool asTemplate;	/* required element of type xsd:boolean */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE_ns1__RegisterVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RegisterVMRequestType() { ns1__RegisterVMRequestType::soap_default(NULL); }
	virtual ~ns1__RegisterVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateClusterRequestType
#define SOAP_TYPE_ns1__CreateClusterRequestType (178)
/* ns1:CreateClusterRequestType */
class SOAP_CMAC ns1__CreateClusterRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ClusterConfigSpec *spec;	/* required element of type ns1:ClusterConfigSpec */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_ns1__CreateClusterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateClusterRequestType() { ns1__CreateClusterRequestType::soap_default(NULL); }
	virtual ~ns1__CreateClusterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateClusterExRequestType
#define SOAP_TYPE_ns1__CreateClusterExRequestType (179)
/* ns1:CreateClusterExRequestType */
class SOAP_CMAC ns1__CreateClusterExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	class ns1__ClusterConfigSpecEx *spec;	/* required element of type ns1:ClusterConfigSpecEx */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_ns1__CreateClusterExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateClusterExRequestType() { ns1__CreateClusterExRequestType::soap_default(NULL); }
	virtual ~ns1__CreateClusterExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddStandaloneHostRequestType
#define SOAP_TYPE_ns1__AddStandaloneHostRequestType (180)
/* ns1:AddStandaloneHostRequestType */
class SOAP_CMAC ns1__AddStandaloneHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostConnectSpec *spec;	/* required element of type ns1:HostConnectSpec */
	ns1__ComputeResourceConfigSpec *compResSpec;	/* optional element of type ns1:ComputeResourceConfigSpec */
	bool addConnected;	/* required element of type xsd:boolean */
	std::string *license;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE_ns1__AddStandaloneHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddStandaloneHostRequestType() { ns1__AddStandaloneHostRequestType::soap_default(NULL); }
	virtual ~ns1__AddStandaloneHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDatacenterRequestType
#define SOAP_TYPE_ns1__CreateDatacenterRequestType (181)
/* ns1:CreateDatacenterRequestType */
class SOAP_CMAC ns1__CreateDatacenterRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_ns1__CreateDatacenterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDatacenterRequestType() { ns1__CreateDatacenterRequestType::soap_default(NULL); }
	virtual ~ns1__CreateDatacenterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnregisterAndDestroyRequestType
#define SOAP_TYPE_ns1__UnregisterAndDestroyRequestType (182)
/* ns1:UnregisterAndDestroyRequestType */
class SOAP_CMAC ns1__UnregisterAndDestroyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_ns1__UnregisterAndDestroyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnregisterAndDestroyRequestType() { ns1__UnregisterAndDestroyRequestType::soap_default(NULL); }
	virtual ~ns1__UnregisterAndDestroyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDVSRequestType
#define SOAP_TYPE_ns1__CreateDVSRequestType (183)
/* ns1:CreateDVSRequestType */
class SOAP_CMAC ns1__CreateDVSRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DVSCreateSpec *spec;	/* required element of type ns1:DVSCreateSpec */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_ns1__CreateDVSRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDVSRequestType() { ns1__CreateDVSRequestType::soap_default(NULL); }
	virtual ~ns1__CreateDVSRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetCollectorPageSizeRequestType
#define SOAP_TYPE_ns1__SetCollectorPageSizeRequestType (184)
/* ns1:SetCollectorPageSizeRequestType */
class SOAP_CMAC ns1__SetCollectorPageSizeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int maxCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE_ns1__SetCollectorPageSizeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetCollectorPageSizeRequestType() { ns1__SetCollectorPageSizeRequestType::soap_default(NULL); }
	virtual ~ns1__SetCollectorPageSizeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RewindCollectorRequestType
#define SOAP_TYPE_ns1__RewindCollectorRequestType (185)
/* ns1:RewindCollectorRequestType */
class SOAP_CMAC ns1__RewindCollectorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE_ns1__RewindCollectorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RewindCollectorRequestType() { ns1__RewindCollectorRequestType::soap_default(NULL); }
	virtual ~ns1__RewindCollectorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetCollectorRequestType
#define SOAP_TYPE_ns1__ResetCollectorRequestType (186)
/* ns1:ResetCollectorRequestType */
class SOAP_CMAC ns1__ResetCollectorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE_ns1__ResetCollectorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetCollectorRequestType() { ns1__ResetCollectorRequestType::soap_default(NULL); }
	virtual ~ns1__ResetCollectorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyCollectorRequestType
#define SOAP_TYPE_ns1__DestroyCollectorRequestType (187)
/* ns1:DestroyCollectorRequestType */
class SOAP_CMAC ns1__DestroyCollectorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_ns1__DestroyCollectorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyCollectorRequestType() { ns1__DestroyCollectorRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyCollectorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryHostConnectionInfoRequestType
#define SOAP_TYPE_ns1__QueryHostConnectionInfoRequestType (188)
/* ns1:QueryHostConnectionInfoRequestType */
class SOAP_CMAC ns1__QueryHostConnectionInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_ns1__QueryHostConnectionInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryHostConnectionInfoRequestType() { ns1__QueryHostConnectionInfoRequestType::soap_default(NULL); }
	virtual ~ns1__QueryHostConnectionInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateSystemResourcesRequestType
#define SOAP_TYPE_ns1__UpdateSystemResourcesRequestType (189)
/* ns1:UpdateSystemResourcesRequestType */
class SOAP_CMAC ns1__UpdateSystemResourcesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostSystemResourceInfo *resourceInfo;	/* required element of type ns1:HostSystemResourceInfo */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE_ns1__UpdateSystemResourcesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateSystemResourcesRequestType() { ns1__UpdateSystemResourcesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateSystemResourcesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconnectHostRequestType
#define SOAP_TYPE_ns1__ReconnectHostRequestType (190)
/* ns1:ReconnectHostRequestType */
class SOAP_CMAC ns1__ReconnectHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostConnectSpec *cnxSpec;	/* optional element of type ns1:HostConnectSpec */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE_ns1__ReconnectHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconnectHostRequestType() { ns1__ReconnectHostRequestType::soap_default(NULL); }
	virtual ~ns1__ReconnectHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisconnectHostRequestType
#define SOAP_TYPE_ns1__DisconnectHostRequestType (191)
/* ns1:DisconnectHostRequestType */
class SOAP_CMAC ns1__DisconnectHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_ns1__DisconnectHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisconnectHostRequestType() { ns1__DisconnectHostRequestType::soap_default(NULL); }
	virtual ~ns1__DisconnectHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnterMaintenanceModeRequestType
#define SOAP_TYPE_ns1__EnterMaintenanceModeRequestType (192)
/* ns1:EnterMaintenanceModeRequestType */
class SOAP_CMAC ns1__EnterMaintenanceModeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int timeout;	/* required element of type xsd:int */
	bool *evacuatePoweredOffVms;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE_ns1__EnterMaintenanceModeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnterMaintenanceModeRequestType() { ns1__EnterMaintenanceModeRequestType::soap_default(NULL); }
	virtual ~ns1__EnterMaintenanceModeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitMaintenanceModeRequestType
#define SOAP_TYPE_ns1__ExitMaintenanceModeRequestType (193)
/* ns1:ExitMaintenanceModeRequestType */
class SOAP_CMAC ns1__ExitMaintenanceModeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int timeout;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_ns1__ExitMaintenanceModeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitMaintenanceModeRequestType() { ns1__ExitMaintenanceModeRequestType::soap_default(NULL); }
	virtual ~ns1__ExitMaintenanceModeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RebootHostRequestType
#define SOAP_TYPE_ns1__RebootHostRequestType (194)
/* ns1:RebootHostRequestType */
class SOAP_CMAC ns1__RebootHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE_ns1__RebootHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RebootHostRequestType() { ns1__RebootHostRequestType::soap_default(NULL); }
	virtual ~ns1__RebootHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShutdownHostRequestType
#define SOAP_TYPE_ns1__ShutdownHostRequestType (195)
/* ns1:ShutdownHostRequestType */
class SOAP_CMAC ns1__ShutdownHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_ns1__ShutdownHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShutdownHostRequestType() { ns1__ShutdownHostRequestType::soap_default(NULL); }
	virtual ~ns1__ShutdownHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerDownHostToStandByRequestType
#define SOAP_TYPE_ns1__PowerDownHostToStandByRequestType (196)
/* ns1:PowerDownHostToStandByRequestType */
class SOAP_CMAC ns1__PowerDownHostToStandByRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int timeoutSec;	/* required element of type xsd:int */
	bool *evacuatePoweredOffVms;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE_ns1__PowerDownHostToStandByRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerDownHostToStandByRequestType() { ns1__PowerDownHostToStandByRequestType::soap_default(NULL); }
	virtual ~ns1__PowerDownHostToStandByRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerUpHostFromStandByRequestType
#define SOAP_TYPE_ns1__PowerUpHostFromStandByRequestType (197)
/* ns1:PowerUpHostFromStandByRequestType */
class SOAP_CMAC ns1__PowerUpHostFromStandByRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int timeoutSec;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_ns1__PowerUpHostFromStandByRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerUpHostFromStandByRequestType() { ns1__PowerUpHostFromStandByRequestType::soap_default(NULL); }
	virtual ~ns1__PowerUpHostFromStandByRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryMemoryOverheadRequestType
#define SOAP_TYPE_ns1__QueryMemoryOverheadRequestType (198)
/* ns1:QueryMemoryOverheadRequestType */
class SOAP_CMAC ns1__QueryMemoryOverheadRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	LONG64 memorySize;	/* required element of type xsd:long */
	int *videoRamSize;	/* optional element of type xsd:int */
	int numVcpus;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_ns1__QueryMemoryOverheadRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryMemoryOverheadRequestType() { ns1__QueryMemoryOverheadRequestType::soap_default(NULL); }
	virtual ~ns1__QueryMemoryOverheadRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryMemoryOverheadExRequestType
#define SOAP_TYPE_ns1__QueryMemoryOverheadExRequestType (199)
/* ns1:QueryMemoryOverheadExRequestType */
class SOAP_CMAC ns1__QueryMemoryOverheadExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VirtualMachineConfigInfo *vmConfigInfo;	/* required element of type ns1:VirtualMachineConfigInfo */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_ns1__QueryMemoryOverheadExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryMemoryOverheadExRequestType() { ns1__QueryMemoryOverheadExRequestType::soap_default(NULL); }
	virtual ~ns1__QueryMemoryOverheadExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureHostForDASRequestType
#define SOAP_TYPE_ns1__ReconfigureHostForDASRequestType (200)
/* ns1:ReconfigureHostForDASRequestType */
class SOAP_CMAC ns1__ReconfigureHostForDASRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_ns1__ReconfigureHostForDASRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureHostForDASRequestType() { ns1__ReconfigureHostForDASRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureHostForDASRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateFlagsRequestType
#define SOAP_TYPE_ns1__UpdateFlagsRequestType (201)
/* ns1:UpdateFlagsRequestType */
class SOAP_CMAC ns1__UpdateFlagsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostFlagInfo *flagInfo;	/* required element of type ns1:HostFlagInfo */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_ns1__UpdateFlagsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateFlagsRequestType() { ns1__UpdateFlagsRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateFlagsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnterLockdownModeRequestType
#define SOAP_TYPE_ns1__EnterLockdownModeRequestType (202)
/* ns1:EnterLockdownModeRequestType */
class SOAP_CMAC ns1__EnterLockdownModeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_ns1__EnterLockdownModeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnterLockdownModeRequestType() { ns1__EnterLockdownModeRequestType::soap_default(NULL); }
	virtual ~ns1__EnterLockdownModeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitLockdownModeRequestType
#define SOAP_TYPE_ns1__ExitLockdownModeRequestType (203)
/* ns1:ExitLockdownModeRequestType */
class SOAP_CMAC ns1__ExitLockdownModeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_ns1__ExitLockdownModeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitLockdownModeRequestType() { ns1__ExitLockdownModeRequestType::soap_default(NULL); }
	virtual ~ns1__ExitLockdownModeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcquireCimServicesTicketRequestType
#define SOAP_TYPE_ns1__AcquireCimServicesTicketRequestType (204)
/* ns1:AcquireCimServicesTicketRequestType */
class SOAP_CMAC ns1__AcquireCimServicesTicketRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_ns1__AcquireCimServicesTicketRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcquireCimServicesTicketRequestType() { ns1__AcquireCimServicesTicketRequestType::soap_default(NULL); }
	virtual ~ns1__AcquireCimServicesTicketRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateIpmiRequestType
#define SOAP_TYPE_ns1__UpdateIpmiRequestType (205)
/* ns1:UpdateIpmiRequestType */
class SOAP_CMAC ns1__UpdateIpmiRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostIpmiInfo *ipmiInfo;	/* required element of type ns1:HostIpmiInfo */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE_ns1__UpdateIpmiRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateIpmiRequestType() { ns1__UpdateIpmiRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateIpmiRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveHardwareUptimeRequestType
#define SOAP_TYPE_ns1__RetrieveHardwareUptimeRequestType (206)
/* ns1:RetrieveHardwareUptimeRequestType */
class SOAP_CMAC ns1__RetrieveHardwareUptimeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_ns1__RetrieveHardwareUptimeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveHardwareUptimeRequestType() { ns1__RetrieveHardwareUptimeRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveHardwareUptimeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseGetManifestRequestType
#define SOAP_TYPE_ns1__HttpNfcLeaseGetManifestRequestType (207)
/* ns1:HttpNfcLeaseGetManifestRequestType */
class SOAP_CMAC ns1__HttpNfcLeaseGetManifestRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseGetManifestRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseGetManifestRequestType() { ns1__HttpNfcLeaseGetManifestRequestType::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseGetManifestRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseCompleteRequestType
#define SOAP_TYPE_ns1__HttpNfcLeaseCompleteRequestType (208)
/* ns1:HttpNfcLeaseCompleteRequestType */
class SOAP_CMAC ns1__HttpNfcLeaseCompleteRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseCompleteRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseCompleteRequestType() { ns1__HttpNfcLeaseCompleteRequestType::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseCompleteRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseAbortRequestType
#define SOAP_TYPE_ns1__HttpNfcLeaseAbortRequestType (209)
/* ns1:HttpNfcLeaseAbortRequestType */
class SOAP_CMAC ns1__HttpNfcLeaseAbortRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseAbortRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseAbortRequestType() { ns1__HttpNfcLeaseAbortRequestType::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseAbortRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseProgressRequestType
#define SOAP_TYPE_ns1__HttpNfcLeaseProgressRequestType (210)
/* ns1:HttpNfcLeaseProgressRequestType */
class SOAP_CMAC ns1__HttpNfcLeaseProgressRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int percent;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseProgressRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseProgressRequestType() { ns1__HttpNfcLeaseProgressRequestType::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseProgressRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryIpPoolsRequestType
#define SOAP_TYPE_ns1__QueryIpPoolsRequestType (211)
/* ns1:QueryIpPoolsRequestType */
class SOAP_CMAC ns1__QueryIpPoolsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dc;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_ns1__QueryIpPoolsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryIpPoolsRequestType() { ns1__QueryIpPoolsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryIpPoolsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateIpPoolRequestType
#define SOAP_TYPE_ns1__CreateIpPoolRequestType (212)
/* ns1:CreateIpPoolRequestType */
class SOAP_CMAC ns1__CreateIpPoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dc;	/* required element of type ns1:ManagedObjectReference */
	class ns1__IpPool *pool;	/* required element of type ns1:IpPool */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_ns1__CreateIpPoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateIpPoolRequestType() { ns1__CreateIpPoolRequestType::soap_default(NULL); }
	virtual ~ns1__CreateIpPoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateIpPoolRequestType
#define SOAP_TYPE_ns1__UpdateIpPoolRequestType (213)
/* ns1:UpdateIpPoolRequestType */
class SOAP_CMAC ns1__UpdateIpPoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dc;	/* required element of type ns1:ManagedObjectReference */
	ns1__IpPool *pool;	/* required element of type ns1:IpPool */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_ns1__UpdateIpPoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateIpPoolRequestType() { ns1__UpdateIpPoolRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateIpPoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyIpPoolRequestType
#define SOAP_TYPE_ns1__DestroyIpPoolRequestType (214)
/* ns1:DestroyIpPoolRequestType */
class SOAP_CMAC ns1__DestroyIpPoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dc;	/* required element of type ns1:ManagedObjectReference */
	int id;	/* required element of type xsd:int */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_ns1__DestroyIpPoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyIpPoolRequestType() { ns1__DestroyIpPoolRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyIpPoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateAssignedLicenseRequestType
#define SOAP_TYPE_ns1__UpdateAssignedLicenseRequestType (215)
/* ns1:UpdateAssignedLicenseRequestType */
class SOAP_CMAC ns1__UpdateAssignedLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string entity;	/* required element of type xsd:string */
	std::string licenseKey;	/* required element of type xsd:string */
	std::string *entityDisplayName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_ns1__UpdateAssignedLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateAssignedLicenseRequestType() { ns1__UpdateAssignedLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateAssignedLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveAssignedLicenseRequestType
#define SOAP_TYPE_ns1__RemoveAssignedLicenseRequestType (216)
/* ns1:RemoveAssignedLicenseRequestType */
class SOAP_CMAC ns1__RemoveAssignedLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string entityId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_ns1__RemoveAssignedLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveAssignedLicenseRequestType() { ns1__RemoveAssignedLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveAssignedLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAssignedLicensesRequestType
#define SOAP_TYPE_ns1__QueryAssignedLicensesRequestType (217)
/* ns1:QueryAssignedLicensesRequestType */
class SOAP_CMAC ns1__QueryAssignedLicensesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *entityId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_ns1__QueryAssignedLicensesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAssignedLicensesRequestType() { ns1__QueryAssignedLicensesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAssignedLicensesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QuerySupportedFeaturesRequestType
#define SOAP_TYPE_ns1__QuerySupportedFeaturesRequestType (218)
/* ns1:QuerySupportedFeaturesRequestType */
class SOAP_CMAC ns1__QuerySupportedFeaturesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_ns1__QuerySupportedFeaturesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QuerySupportedFeaturesRequestType() { ns1__QuerySupportedFeaturesRequestType::soap_default(NULL); }
	virtual ~ns1__QuerySupportedFeaturesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryLicenseSourceAvailabilityRequestType
#define SOAP_TYPE_ns1__QueryLicenseSourceAvailabilityRequestType (219)
/* ns1:QueryLicenseSourceAvailabilityRequestType */
class SOAP_CMAC ns1__QueryLicenseSourceAvailabilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_ns1__QueryLicenseSourceAvailabilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryLicenseSourceAvailabilityRequestType() { ns1__QueryLicenseSourceAvailabilityRequestType::soap_default(NULL); }
	virtual ~ns1__QueryLicenseSourceAvailabilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryLicenseUsageRequestType
#define SOAP_TYPE_ns1__QueryLicenseUsageRequestType (220)
/* ns1:QueryLicenseUsageRequestType */
class SOAP_CMAC ns1__QueryLicenseUsageRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_ns1__QueryLicenseUsageRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryLicenseUsageRequestType() { ns1__QueryLicenseUsageRequestType::soap_default(NULL); }
	virtual ~ns1__QueryLicenseUsageRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetLicenseEditionRequestType
#define SOAP_TYPE_ns1__SetLicenseEditionRequestType (221)
/* ns1:SetLicenseEditionRequestType */
class SOAP_CMAC ns1__SetLicenseEditionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string *featureKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_ns1__SetLicenseEditionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetLicenseEditionRequestType() { ns1__SetLicenseEditionRequestType::soap_default(NULL); }
	virtual ~ns1__SetLicenseEditionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckLicenseFeatureRequestType
#define SOAP_TYPE_ns1__CheckLicenseFeatureRequestType (222)
/* ns1:CheckLicenseFeatureRequestType */
class SOAP_CMAC ns1__CheckLicenseFeatureRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string featureKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_ns1__CheckLicenseFeatureRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckLicenseFeatureRequestType() { ns1__CheckLicenseFeatureRequestType::soap_default(NULL); }
	virtual ~ns1__CheckLicenseFeatureRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableFeatureRequestType
#define SOAP_TYPE_ns1__EnableFeatureRequestType (223)
/* ns1:EnableFeatureRequestType */
class SOAP_CMAC ns1__EnableFeatureRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string featureKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_ns1__EnableFeatureRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableFeatureRequestType() { ns1__EnableFeatureRequestType::soap_default(NULL); }
	virtual ~ns1__EnableFeatureRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableFeatureRequestType
#define SOAP_TYPE_ns1__DisableFeatureRequestType (224)
/* ns1:DisableFeatureRequestType */
class SOAP_CMAC ns1__DisableFeatureRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string featureKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_ns1__DisableFeatureRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableFeatureRequestType() { ns1__DisableFeatureRequestType::soap_default(NULL); }
	virtual ~ns1__DisableFeatureRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigureLicenseSourceRequestType
#define SOAP_TYPE_ns1__ConfigureLicenseSourceRequestType (225)
/* ns1:ConfigureLicenseSourceRequestType */
class SOAP_CMAC ns1__ConfigureLicenseSourceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	class ns1__LicenseSource *licenseSource;	/* required element of type ns1:LicenseSource */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_ns1__ConfigureLicenseSourceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigureLicenseSourceRequestType() { ns1__ConfigureLicenseSourceRequestType::soap_default(NULL); }
	virtual ~ns1__ConfigureLicenseSourceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateLicenseRequestType
#define SOAP_TYPE_ns1__UpdateLicenseRequestType (226)
/* ns1:UpdateLicenseRequestType */
class SOAP_CMAC ns1__UpdateLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
	std::vector<class ns1__KeyValue * >labels;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_ns1__UpdateLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateLicenseRequestType() { ns1__UpdateLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddLicenseRequestType
#define SOAP_TYPE_ns1__AddLicenseRequestType (227)
/* ns1:AddLicenseRequestType */
class SOAP_CMAC ns1__AddLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
	std::vector<ns1__KeyValue * >labels;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_ns1__AddLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddLicenseRequestType() { ns1__AddLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__AddLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveLicenseRequestType
#define SOAP_TYPE_ns1__RemoveLicenseRequestType (228)
/* ns1:RemoveLicenseRequestType */
class SOAP_CMAC ns1__RemoveLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_ns1__RemoveLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveLicenseRequestType() { ns1__RemoveLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DecodeLicenseRequestType
#define SOAP_TYPE_ns1__DecodeLicenseRequestType (229)
/* ns1:DecodeLicenseRequestType */
class SOAP_CMAC ns1__DecodeLicenseRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_ns1__DecodeLicenseRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DecodeLicenseRequestType() { ns1__DecodeLicenseRequestType::soap_default(NULL); }
	virtual ~ns1__DecodeLicenseRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateLicenseLabelRequestType
#define SOAP_TYPE_ns1__UpdateLicenseLabelRequestType (230)
/* ns1:UpdateLicenseLabelRequestType */
class SOAP_CMAC ns1__UpdateLicenseLabelRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
	std::string labelKey;	/* required element of type xsd:string */
	std::string labelValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE_ns1__UpdateLicenseLabelRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateLicenseLabelRequestType() { ns1__UpdateLicenseLabelRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateLicenseLabelRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveLicenseLabelRequestType
#define SOAP_TYPE_ns1__RemoveLicenseLabelRequestType (231)
/* ns1:RemoveLicenseLabelRequestType */
class SOAP_CMAC ns1__RemoveLicenseLabelRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string licenseKey;	/* required element of type xsd:string */
	std::string labelKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE_ns1__RemoveLicenseLabelRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveLicenseLabelRequestType() { ns1__RemoveLicenseLabelRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveLicenseLabelRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReloadRequestType
#define SOAP_TYPE_ns1__ReloadRequestType (232)
/* ns1:ReloadRequestType */
class SOAP_CMAC ns1__ReloadRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE_ns1__ReloadRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReloadRequestType() { ns1__ReloadRequestType::soap_default(NULL); }
	virtual ~ns1__ReloadRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RenameRequestType
#define SOAP_TYPE_ns1__RenameRequestType (233)
/* ns1:RenameRequestType */
class SOAP_CMAC ns1__RenameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE_ns1__RenameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RenameRequestType() { ns1__RenameRequestType::soap_default(NULL); }
	virtual ~ns1__RenameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyRequestType
#define SOAP_TYPE_ns1__DestroyRequestType (234)
/* ns1:DestroyRequestType */
class SOAP_CMAC ns1__DestroyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE_ns1__DestroyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyRequestType() { ns1__DestroyRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyNetworkRequestType
#define SOAP_TYPE_ns1__DestroyNetworkRequestType (235)
/* ns1:DestroyNetworkRequestType */
class SOAP_CMAC ns1__DestroyNetworkRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE_ns1__DestroyNetworkRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyNetworkRequestType() { ns1__DestroyNetworkRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyNetworkRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateHostRequestType
#define SOAP_TYPE_ns1__ValidateHostRequestType (236)
/* ns1:ValidateHostRequestType */
class SOAP_CMAC ns1__ValidateHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string ovfDescriptor;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	class ns1__OvfValidateHostParams *vhp;	/* required element of type ns1:OvfValidateHostParams */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE_ns1__ValidateHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateHostRequestType() { ns1__ValidateHostRequestType::soap_default(NULL); }
	virtual ~ns1__ValidateHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ParseDescriptorRequestType
#define SOAP_TYPE_ns1__ParseDescriptorRequestType (237)
/* ns1:ParseDescriptorRequestType */
class SOAP_CMAC ns1__ParseDescriptorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string ovfDescriptor;	/* required element of type xsd:string */
	class ns1__OvfParseDescriptorParams *pdp;	/* required element of type ns1:OvfParseDescriptorParams */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE_ns1__ParseDescriptorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ParseDescriptorRequestType() { ns1__ParseDescriptorRequestType::soap_default(NULL); }
	virtual ~ns1__ParseDescriptorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateImportSpecRequestType
#define SOAP_TYPE_ns1__CreateImportSpecRequestType (238)
/* ns1:CreateImportSpecRequestType */
class SOAP_CMAC ns1__CreateImportSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string ovfDescriptor;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *resourcePool;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	class ns1__OvfCreateImportSpecParams *cisp;	/* required element of type ns1:OvfCreateImportSpecParams */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE_ns1__CreateImportSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateImportSpecRequestType() { ns1__CreateImportSpecRequestType::soap_default(NULL); }
	virtual ~ns1__CreateImportSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDescriptorRequestType
#define SOAP_TYPE_ns1__CreateDescriptorRequestType (239)
/* ns1:CreateDescriptorRequestType */
class SOAP_CMAC ns1__CreateDescriptorRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	class ns1__OvfCreateDescriptorParams *cdp;	/* required element of type ns1:OvfCreateDescriptorParams */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE_ns1__CreateDescriptorRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDescriptorRequestType() { ns1__CreateDescriptorRequestType::soap_default(NULL); }
	virtual ~ns1__CreateDescriptorRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPerfProviderSummaryRequestType
#define SOAP_TYPE_ns1__QueryPerfProviderSummaryRequestType (240)
/* ns1:QueryPerfProviderSummaryRequestType */
class SOAP_CMAC ns1__QueryPerfProviderSummaryRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE_ns1__QueryPerfProviderSummaryRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPerfProviderSummaryRequestType() { ns1__QueryPerfProviderSummaryRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPerfProviderSummaryRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAvailablePerfMetricRequestType
#define SOAP_TYPE_ns1__QueryAvailablePerfMetricRequestType (241)
/* ns1:QueryAvailablePerfMetricRequestType */
class SOAP_CMAC ns1__QueryAvailablePerfMetricRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	time_t *beginTime;	/* optional element of type xsd:dateTime */
	time_t *endTime;	/* optional element of type xsd:dateTime */
	int *intervalId;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE_ns1__QueryAvailablePerfMetricRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAvailablePerfMetricRequestType() { ns1__QueryAvailablePerfMetricRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAvailablePerfMetricRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPerfCounterRequestType
#define SOAP_TYPE_ns1__QueryPerfCounterRequestType (242)
/* ns1:QueryPerfCounterRequestType */
class SOAP_CMAC ns1__QueryPerfCounterRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<int >counterId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE_ns1__QueryPerfCounterRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPerfCounterRequestType() { ns1__QueryPerfCounterRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPerfCounterRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPerfCounterByLevelRequestType
#define SOAP_TYPE_ns1__QueryPerfCounterByLevelRequestType (243)
/* ns1:QueryPerfCounterByLevelRequestType */
class SOAP_CMAC ns1__QueryPerfCounterByLevelRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int level;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE_ns1__QueryPerfCounterByLevelRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPerfCounterByLevelRequestType() { ns1__QueryPerfCounterByLevelRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPerfCounterByLevelRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPerfRequestType
#define SOAP_TYPE_ns1__QueryPerfRequestType (244)
/* ns1:QueryPerfRequestType */
class SOAP_CMAC ns1__QueryPerfRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__PerfQuerySpec * >querySpec;	/* required element of type ns1:PerfQuerySpec */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE_ns1__QueryPerfRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPerfRequestType() { ns1__QueryPerfRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPerfRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPerfCompositeRequestType
#define SOAP_TYPE_ns1__QueryPerfCompositeRequestType (245)
/* ns1:QueryPerfCompositeRequestType */
class SOAP_CMAC ns1__QueryPerfCompositeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__PerfQuerySpec *querySpec;	/* required element of type ns1:PerfQuerySpec */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE_ns1__QueryPerfCompositeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPerfCompositeRequestType() { ns1__QueryPerfCompositeRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPerfCompositeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreatePerfIntervalRequestType
#define SOAP_TYPE_ns1__CreatePerfIntervalRequestType (246)
/* ns1:CreatePerfIntervalRequestType */
class SOAP_CMAC ns1__CreatePerfIntervalRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__PerfInterval *intervalId;	/* required element of type ns1:PerfInterval */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE_ns1__CreatePerfIntervalRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreatePerfIntervalRequestType() { ns1__CreatePerfIntervalRequestType::soap_default(NULL); }
	virtual ~ns1__CreatePerfIntervalRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemovePerfIntervalRequestType
#define SOAP_TYPE_ns1__RemovePerfIntervalRequestType (247)
/* ns1:RemovePerfIntervalRequestType */
class SOAP_CMAC ns1__RemovePerfIntervalRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int samplePeriod;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE_ns1__RemovePerfIntervalRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemovePerfIntervalRequestType() { ns1__RemovePerfIntervalRequestType::soap_default(NULL); }
	virtual ~ns1__RemovePerfIntervalRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdatePerfIntervalRequestType
#define SOAP_TYPE_ns1__UpdatePerfIntervalRequestType (248)
/* ns1:UpdatePerfIntervalRequestType */
class SOAP_CMAC ns1__UpdatePerfIntervalRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__PerfInterval *interval;	/* required element of type ns1:PerfInterval */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_ns1__UpdatePerfIntervalRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdatePerfIntervalRequestType() { ns1__UpdatePerfIntervalRequestType::soap_default(NULL); }
	virtual ~ns1__UpdatePerfIntervalRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EstimateDatabaseSizeRequestType
#define SOAP_TYPE_ns1__EstimateDatabaseSizeRequestType (249)
/* ns1:EstimateDatabaseSizeRequestType */
class SOAP_CMAC ns1__EstimateDatabaseSizeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DatabaseSizeParam *dbSizeParam;	/* required element of type ns1:DatabaseSizeParam */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_ns1__EstimateDatabaseSizeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EstimateDatabaseSizeRequestType() { ns1__EstimateDatabaseSizeRequestType::soap_default(NULL); }
	virtual ~ns1__EstimateDatabaseSizeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateConfigRequestType
#define SOAP_TYPE_ns1__UpdateConfigRequestType (250)
/* ns1:UpdateConfigRequestType */
class SOAP_CMAC ns1__UpdateConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *name;	/* optional element of type xsd:string */
	class ns1__ResourceConfigSpec *config;	/* optional element of type ns1:ResourceConfigSpec */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE_ns1__UpdateConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateConfigRequestType() { ns1__UpdateConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveIntoResourcePoolRequestType
#define SOAP_TYPE_ns1__MoveIntoResourcePoolRequestType (251)
/* ns1:MoveIntoResourcePoolRequestType */
class SOAP_CMAC ns1__MoveIntoResourcePoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >list;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_ns1__MoveIntoResourcePoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveIntoResourcePoolRequestType() { ns1__MoveIntoResourcePoolRequestType::soap_default(NULL); }
	virtual ~ns1__MoveIntoResourcePoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateChildResourceConfigurationRequestType
#define SOAP_TYPE_ns1__UpdateChildResourceConfigurationRequestType (252)
/* ns1:UpdateChildResourceConfigurationRequestType */
class SOAP_CMAC ns1__UpdateChildResourceConfigurationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ResourceConfigSpec * >spec;	/* required element of type ns1:ResourceConfigSpec */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_ns1__UpdateChildResourceConfigurationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateChildResourceConfigurationRequestType() { ns1__UpdateChildResourceConfigurationRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateChildResourceConfigurationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateResourcePoolRequestType
#define SOAP_TYPE_ns1__CreateResourcePoolRequestType (253)
/* ns1:CreateResourcePoolRequestType */
class SOAP_CMAC ns1__CreateResourcePoolRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ResourceConfigSpec *spec;	/* required element of type ns1:ResourceConfigSpec */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_ns1__CreateResourcePoolRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateResourcePoolRequestType() { ns1__CreateResourcePoolRequestType::soap_default(NULL); }
	virtual ~ns1__CreateResourcePoolRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyChildrenRequestType
#define SOAP_TYPE_ns1__DestroyChildrenRequestType (254)
/* ns1:DestroyChildrenRequestType */
class SOAP_CMAC ns1__DestroyChildrenRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_ns1__DestroyChildrenRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyChildrenRequestType() { ns1__DestroyChildrenRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyChildrenRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVAppRequestType
#define SOAP_TYPE_ns1__CreateVAppRequestType (255)
/* ns1:CreateVAppRequestType */
class SOAP_CMAC ns1__CreateVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ResourceConfigSpec *resSpec;	/* required element of type ns1:ResourceConfigSpec */
	class ns1__VAppConfigSpec *configSpec;	/* required element of type ns1:VAppConfigSpec */
	ns1__ManagedObjectReference *vmFolder;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_ns1__CreateVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVAppRequestType() { ns1__CreateVAppRequestType::soap_default(NULL); }
	virtual ~ns1__CreateVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateChildVMRequestType
#define SOAP_TYPE_ns1__CreateChildVMRequestType (256)
/* ns1:CreateChildVMRequestType */
class SOAP_CMAC ns1__CreateChildVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__VirtualMachineConfigSpec *config;	/* required element of type ns1:VirtualMachineConfigSpec */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_ns1__CreateChildVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateChildVMRequestType() { ns1__CreateChildVMRequestType::soap_default(NULL); }
	virtual ~ns1__CreateChildVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RegisterChildVMRequestType
#define SOAP_TYPE_ns1__RegisterChildVMRequestType (257)
/* ns1:RegisterChildVMRequestType */
class SOAP_CMAC ns1__RegisterChildVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string path;	/* required element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_ns1__RegisterChildVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RegisterChildVMRequestType() { ns1__RegisterChildVMRequestType::soap_default(NULL); }
	virtual ~ns1__RegisterChildVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ImportVAppRequestType
#define SOAP_TYPE_ns1__ImportVAppRequestType (258)
/* ns1:ImportVAppRequestType */
class SOAP_CMAC ns1__ImportVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ImportSpec *spec;	/* required element of type ns1:ImportSpec */
	ns1__ManagedObjectReference *folder;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_ns1__ImportVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ImportVAppRequestType() { ns1__ImportVAppRequestType::soap_default(NULL); }
	virtual ~ns1__ImportVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryResourceConfigOptionRequestType
#define SOAP_TYPE_ns1__QueryResourceConfigOptionRequestType (259)
/* ns1:QueryResourceConfigOptionRequestType */
class SOAP_CMAC ns1__QueryResourceConfigOptionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_ns1__QueryResourceConfigOptionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryResourceConfigOptionRequestType() { ns1__QueryResourceConfigOptionRequestType::soap_default(NULL); }
	virtual ~ns1__QueryResourceConfigOptionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshRuntimeRequestType
#define SOAP_TYPE_ns1__RefreshRuntimeRequestType (260)
/* ns1:RefreshRuntimeRequestType */
class SOAP_CMAC ns1__RefreshRuntimeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_ns1__RefreshRuntimeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshRuntimeRequestType() { ns1__RefreshRuntimeRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshRuntimeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindByUuidRequestType
#define SOAP_TYPE_ns1__FindByUuidRequestType (261)
/* ns1:FindByUuidRequestType */
class SOAP_CMAC ns1__FindByUuidRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string uuid;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
	bool *instanceUuid;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_ns1__FindByUuidRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindByUuidRequestType() { ns1__FindByUuidRequestType::soap_default(NULL); }
	virtual ~ns1__FindByUuidRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindByDatastorePathRequestType
#define SOAP_TYPE_ns1__FindByDatastorePathRequestType (262)
/* ns1:FindByDatastorePathRequestType */
class SOAP_CMAC ns1__FindByDatastorePathRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* required element of type ns1:ManagedObjectReference */
	std::string path;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_ns1__FindByDatastorePathRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindByDatastorePathRequestType() { ns1__FindByDatastorePathRequestType::soap_default(NULL); }
	virtual ~ns1__FindByDatastorePathRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindByDnsNameRequestType
#define SOAP_TYPE_ns1__FindByDnsNameRequestType (263)
/* ns1:FindByDnsNameRequestType */
class SOAP_CMAC ns1__FindByDnsNameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string dnsName;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_ns1__FindByDnsNameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindByDnsNameRequestType() { ns1__FindByDnsNameRequestType::soap_default(NULL); }
	virtual ~ns1__FindByDnsNameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindByIpRequestType
#define SOAP_TYPE_ns1__FindByIpRequestType (264)
/* ns1:FindByIpRequestType */
class SOAP_CMAC ns1__FindByIpRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string ip;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_ns1__FindByIpRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindByIpRequestType() { ns1__FindByIpRequestType::soap_default(NULL); }
	virtual ~ns1__FindByIpRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindByInventoryPathRequestType
#define SOAP_TYPE_ns1__FindByInventoryPathRequestType (265)
/* ns1:FindByInventoryPathRequestType */
class SOAP_CMAC ns1__FindByInventoryPathRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string inventoryPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_ns1__FindByInventoryPathRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindByInventoryPathRequestType() { ns1__FindByInventoryPathRequestType::soap_default(NULL); }
	virtual ~ns1__FindByInventoryPathRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindChildRequestType
#define SOAP_TYPE_ns1__FindChildRequestType (266)
/* ns1:FindChildRequestType */
class SOAP_CMAC ns1__FindChildRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_ns1__FindChildRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindChildRequestType() { ns1__FindChildRequestType::soap_default(NULL); }
	virtual ~ns1__FindChildRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindAllByUuidRequestType
#define SOAP_TYPE_ns1__FindAllByUuidRequestType (267)
/* ns1:FindAllByUuidRequestType */
class SOAP_CMAC ns1__FindAllByUuidRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string uuid;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
	bool *instanceUuid;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_ns1__FindAllByUuidRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindAllByUuidRequestType() { ns1__FindAllByUuidRequestType::soap_default(NULL); }
	virtual ~ns1__FindAllByUuidRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindAllByDnsNameRequestType
#define SOAP_TYPE_ns1__FindAllByDnsNameRequestType (268)
/* ns1:FindAllByDnsNameRequestType */
class SOAP_CMAC ns1__FindAllByDnsNameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string dnsName;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_ns1__FindAllByDnsNameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindAllByDnsNameRequestType() { ns1__FindAllByDnsNameRequestType::soap_default(NULL); }
	virtual ~ns1__FindAllByDnsNameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindAllByIpRequestType
#define SOAP_TYPE_ns1__FindAllByIpRequestType (269)
/* ns1:FindAllByIpRequestType */
class SOAP_CMAC ns1__FindAllByIpRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string ip;	/* required element of type xsd:string */
	bool vmSearch;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_ns1__FindAllByIpRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindAllByIpRequestType() { ns1__FindAllByIpRequestType::soap_default(NULL); }
	virtual ~ns1__FindAllByIpRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CurrentTimeRequestType
#define SOAP_TYPE_ns1__CurrentTimeRequestType (270)
/* ns1:CurrentTimeRequestType */
class SOAP_CMAC ns1__CurrentTimeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_ns1__CurrentTimeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CurrentTimeRequestType() { ns1__CurrentTimeRequestType::soap_default(NULL); }
	virtual ~ns1__CurrentTimeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveServiceContentRequestType
#define SOAP_TYPE_ns1__RetrieveServiceContentRequestType (271)
/* ns1:RetrieveServiceContentRequestType */
class SOAP_CMAC ns1__RetrieveServiceContentRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_ns1__RetrieveServiceContentRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveServiceContentRequestType() { ns1__RetrieveServiceContentRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveServiceContentRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateMigrationRequestType
#define SOAP_TYPE_ns1__ValidateMigrationRequestType (272)
/* ns1:ValidateMigrationRequestType */
class SOAP_CMAC ns1__ValidateMigrationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__VirtualMachinePowerState *state;	/* optional element of type ns1:VirtualMachinePowerState */
	std::vector<std::string >testType;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_ns1__ValidateMigrationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateMigrationRequestType() { ns1__ValidateMigrationRequestType::soap_default(NULL); }
	virtual ~ns1__ValidateMigrationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVMotionCompatibilityRequestType
#define SOAP_TYPE_ns1__QueryVMotionCompatibilityRequestType (273)
/* ns1:QueryVMotionCompatibilityRequestType */
class SOAP_CMAC ns1__QueryVMotionCompatibilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >host;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >compatibility;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_ns1__QueryVMotionCompatibilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVMotionCompatibilityRequestType() { ns1__QueryVMotionCompatibilityRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVMotionCompatibilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveProductComponentsRequestType
#define SOAP_TYPE_ns1__RetrieveProductComponentsRequestType (274)
/* ns1:RetrieveProductComponentsRequestType */
class SOAP_CMAC ns1__RetrieveProductComponentsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_ns1__RetrieveProductComponentsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveProductComponentsRequestType() { ns1__RetrieveProductComponentsRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveProductComponentsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateServiceMessageRequestType
#define SOAP_TYPE_ns1__UpdateServiceMessageRequestType (275)
/* ns1:UpdateServiceMessageRequestType */
class SOAP_CMAC ns1__UpdateServiceMessageRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string message;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_ns1__UpdateServiceMessageRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateServiceMessageRequestType() { ns1__UpdateServiceMessageRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateServiceMessageRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginRequestType
#define SOAP_TYPE_ns1__LoginRequestType (276)
/* ns1:LoginRequestType */
class SOAP_CMAC ns1__LoginRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_ns1__LoginRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginRequestType() { ns1__LoginRequestType::soap_default(NULL); }
	virtual ~ns1__LoginRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginBySSPIRequestType
#define SOAP_TYPE_ns1__LoginBySSPIRequestType (277)
/* ns1:LoginBySSPIRequestType */
class SOAP_CMAC ns1__LoginBySSPIRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string base64Token;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_ns1__LoginBySSPIRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginBySSPIRequestType() { ns1__LoginBySSPIRequestType::soap_default(NULL); }
	virtual ~ns1__LoginBySSPIRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LogoutRequestType
#define SOAP_TYPE_ns1__LogoutRequestType (278)
/* ns1:LogoutRequestType */
class SOAP_CMAC ns1__LogoutRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_ns1__LogoutRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LogoutRequestType() { ns1__LogoutRequestType::soap_default(NULL); }
	virtual ~ns1__LogoutRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcquireLocalTicketRequestType
#define SOAP_TYPE_ns1__AcquireLocalTicketRequestType (279)
/* ns1:AcquireLocalTicketRequestType */
class SOAP_CMAC ns1__AcquireLocalTicketRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_ns1__AcquireLocalTicketRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcquireLocalTicketRequestType() { ns1__AcquireLocalTicketRequestType::soap_default(NULL); }
	virtual ~ns1__AcquireLocalTicketRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TerminateSessionRequestType
#define SOAP_TYPE_ns1__TerminateSessionRequestType (280)
/* ns1:TerminateSessionRequestType */
class SOAP_CMAC ns1__TerminateSessionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >sessionId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_ns1__TerminateSessionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TerminateSessionRequestType() { ns1__TerminateSessionRequestType::soap_default(NULL); }
	virtual ~ns1__TerminateSessionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetLocaleRequestType
#define SOAP_TYPE_ns1__SetLocaleRequestType (281)
/* ns1:SetLocaleRequestType */
class SOAP_CMAC ns1__SetLocaleRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string locale;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_ns1__SetLocaleRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetLocaleRequestType() { ns1__SetLocaleRequestType::soap_default(NULL); }
	virtual ~ns1__SetLocaleRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginExtensionBySubjectNameRequestType
#define SOAP_TYPE_ns1__LoginExtensionBySubjectNameRequestType (282)
/* ns1:LoginExtensionBySubjectNameRequestType */
class SOAP_CMAC ns1__LoginExtensionBySubjectNameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_ns1__LoginExtensionBySubjectNameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginExtensionBySubjectNameRequestType() { ns1__LoginExtensionBySubjectNameRequestType::soap_default(NULL); }
	virtual ~ns1__LoginExtensionBySubjectNameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginExtensionByCertificateRequestType
#define SOAP_TYPE_ns1__LoginExtensionByCertificateRequestType (283)
/* ns1:LoginExtensionByCertificateRequestType */
class SOAP_CMAC ns1__LoginExtensionByCertificateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string extensionKey;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_ns1__LoginExtensionByCertificateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginExtensionByCertificateRequestType() { ns1__LoginExtensionByCertificateRequestType::soap_default(NULL); }
	virtual ~ns1__LoginExtensionByCertificateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ImpersonateUserRequestType
#define SOAP_TYPE_ns1__ImpersonateUserRequestType (284)
/* ns1:ImpersonateUserRequestType */
class SOAP_CMAC ns1__ImpersonateUserRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string userName;	/* required element of type xsd:string */
	std::string *locale;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_ns1__ImpersonateUserRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ImpersonateUserRequestType() { ns1__ImpersonateUserRequestType::soap_default(NULL); }
	virtual ~ns1__ImpersonateUserRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SessionIsActiveRequestType
#define SOAP_TYPE_ns1__SessionIsActiveRequestType (285)
/* ns1:SessionIsActiveRequestType */
class SOAP_CMAC ns1__SessionIsActiveRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string sessionID;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_ns1__SessionIsActiveRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SessionIsActiveRequestType() { ns1__SessionIsActiveRequestType::soap_default(NULL); }
	virtual ~ns1__SessionIsActiveRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcquireCloneTicketRequestType
#define SOAP_TYPE_ns1__AcquireCloneTicketRequestType (286)
/* ns1:AcquireCloneTicketRequestType */
class SOAP_CMAC ns1__AcquireCloneTicketRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_ns1__AcquireCloneTicketRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcquireCloneTicketRequestType() { ns1__AcquireCloneTicketRequestType::soap_default(NULL); }
	virtual ~ns1__AcquireCloneTicketRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CloneSessionRequestType
#define SOAP_TYPE_ns1__CloneSessionRequestType (287)
/* ns1:CloneSessionRequestType */
class SOAP_CMAC ns1__CloneSessionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string cloneTicket;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_ns1__CloneSessionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CloneSessionRequestType() { ns1__CloneSessionRequestType::soap_default(NULL); }
	virtual ~ns1__CloneSessionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigureDatastoreIORMRequestType
#define SOAP_TYPE_ns1__ConfigureDatastoreIORMRequestType (288)
/* ns1:ConfigureDatastoreIORMRequestType */
class SOAP_CMAC ns1__ConfigureDatastoreIORMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	class ns1__StorageIORMConfigSpec *spec;	/* required element of type ns1:StorageIORMConfigSpec */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_ns1__ConfigureDatastoreIORMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigureDatastoreIORMRequestType() { ns1__ConfigureDatastoreIORMRequestType::soap_default(NULL); }
	virtual ~ns1__ConfigureDatastoreIORMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryIORMConfigOptionRequestType
#define SOAP_TYPE_ns1__QueryIORMConfigOptionRequestType (289)
/* ns1:QueryIORMConfigOptionRequestType */
class SOAP_CMAC ns1__QueryIORMConfigOptionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_ns1__QueryIORMConfigOptionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryIORMConfigOptionRequestType() { ns1__QueryIORMConfigOptionRequestType::soap_default(NULL); }
	virtual ~ns1__QueryIORMConfigOptionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CancelTaskRequestType
#define SOAP_TYPE_ns1__CancelTaskRequestType (290)
/* ns1:CancelTaskRequestType */
class SOAP_CMAC ns1__CancelTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_ns1__CancelTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CancelTaskRequestType() { ns1__CancelTaskRequestType::soap_default(NULL); }
	virtual ~ns1__CancelTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateProgressRequestType
#define SOAP_TYPE_ns1__UpdateProgressRequestType (291)
/* ns1:UpdateProgressRequestType */
class SOAP_CMAC ns1__UpdateProgressRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int percentDone;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_ns1__UpdateProgressRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateProgressRequestType() { ns1__UpdateProgressRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateProgressRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTaskStateRequestType
#define SOAP_TYPE_ns1__SetTaskStateRequestType (292)
/* ns1:SetTaskStateRequestType */
class SOAP_CMAC ns1__SetTaskStateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__TaskInfoState state;	/* required element of type ns1:TaskInfoState */
	xsd__anyType *result;	/* optional element of type xsd:anyType */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_ns1__SetTaskStateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTaskStateRequestType() { ns1__SetTaskStateRequestType::soap_default(NULL); }
	virtual ~ns1__SetTaskStateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTaskDescriptionRequestType
#define SOAP_TYPE_ns1__SetTaskDescriptionRequestType (293)
/* ns1:SetTaskDescriptionRequestType */
class SOAP_CMAC ns1__SetTaskDescriptionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizableMessage *description;	/* required element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_ns1__SetTaskDescriptionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTaskDescriptionRequestType() { ns1__SetTaskDescriptionRequestType::soap_default(NULL); }
	virtual ~ns1__SetTaskDescriptionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReadNextTasksRequestType
#define SOAP_TYPE_ns1__ReadNextTasksRequestType (294)
/* ns1:ReadNextTasksRequestType */
class SOAP_CMAC ns1__ReadNextTasksRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int maxCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_ns1__ReadNextTasksRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReadNextTasksRequestType() { ns1__ReadNextTasksRequestType::soap_default(NULL); }
	virtual ~ns1__ReadNextTasksRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReadPreviousTasksRequestType
#define SOAP_TYPE_ns1__ReadPreviousTasksRequestType (295)
/* ns1:ReadPreviousTasksRequestType */
class SOAP_CMAC ns1__ReadPreviousTasksRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int maxCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_ns1__ReadPreviousTasksRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReadPreviousTasksRequestType() { ns1__ReadPreviousTasksRequestType::soap_default(NULL); }
	virtual ~ns1__ReadPreviousTasksRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateCollectorForTasksRequestType
#define SOAP_TYPE_ns1__CreateCollectorForTasksRequestType (296)
/* ns1:CreateCollectorForTasksRequestType */
class SOAP_CMAC ns1__CreateCollectorForTasksRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__TaskFilterSpec *filter;	/* required element of type ns1:TaskFilterSpec */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_ns1__CreateCollectorForTasksRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateCollectorForTasksRequestType() { ns1__CreateCollectorForTasksRequestType::soap_default(NULL); }
	virtual ~ns1__CreateCollectorForTasksRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateTaskRequestType
#define SOAP_TYPE_ns1__CreateTaskRequestType (297)
/* ns1:CreateTaskRequestType */
class SOAP_CMAC ns1__CreateTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	std::string taskTypeId;	/* required element of type xsd:string */
	std::string *initiatedBy;	/* optional element of type xsd:string */
	bool cancelable;	/* required element of type xsd:boolean */
	std::string *parentTaskKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_ns1__CreateTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateTaskRequestType() { ns1__CreateTaskRequestType::soap_default(NULL); }
	virtual ~ns1__CreateTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveUserGroupsRequestType
#define SOAP_TYPE_ns1__RetrieveUserGroupsRequestType (298)
/* ns1:RetrieveUserGroupsRequestType */
class SOAP_CMAC ns1__RetrieveUserGroupsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *domain;	/* optional element of type xsd:string */
	std::string searchStr;	/* required element of type xsd:string */
	std::string *belongsToGroup;	/* optional element of type xsd:string */
	std::string *belongsToUser;	/* optional element of type xsd:string */
	bool exactMatch;	/* required element of type xsd:boolean */
	bool findUsers;	/* required element of type xsd:boolean */
	bool findGroups;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_ns1__RetrieveUserGroupsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveUserGroupsRequestType() { ns1__RetrieveUserGroupsRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveUserGroupsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVAppConfigRequestType
#define SOAP_TYPE_ns1__UpdateVAppConfigRequestType (299)
/* ns1:UpdateVAppConfigRequestType */
class SOAP_CMAC ns1__UpdateVAppConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__VAppConfigSpec *spec;	/* required element of type ns1:VAppConfigSpec */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_ns1__UpdateVAppConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVAppConfigRequestType() { ns1__UpdateVAppConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateVAppConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateLinkedChildrenRequestType
#define SOAP_TYPE_ns1__UpdateLinkedChildrenRequestType (300)
/* ns1:UpdateLinkedChildrenRequestType */
class SOAP_CMAC ns1__UpdateLinkedChildrenRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__VirtualAppLinkInfo * >addChangeSet;	/* optional element of type ns1:VirtualAppLinkInfo */
	std::vector<ns1__ManagedObjectReference * >removeSet;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_ns1__UpdateLinkedChildrenRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateLinkedChildrenRequestType() { ns1__UpdateLinkedChildrenRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateLinkedChildrenRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CloneVAppRequestType
#define SOAP_TYPE_ns1__CloneVAppRequestType (301)
/* ns1:CloneVAppRequestType */
class SOAP_CMAC ns1__CloneVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *target;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VAppCloneSpec *spec;	/* required element of type ns1:VAppCloneSpec */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_ns1__CloneVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CloneVAppRequestType() { ns1__CloneVAppRequestType::soap_default(NULL); }
	virtual ~ns1__CloneVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExportVAppRequestType
#define SOAP_TYPE_ns1__ExportVAppRequestType (302)
/* ns1:ExportVAppRequestType */
class SOAP_CMAC ns1__ExportVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_ns1__ExportVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExportVAppRequestType() { ns1__ExportVAppRequestType::soap_default(NULL); }
	virtual ~ns1__ExportVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOnVAppRequestType
#define SOAP_TYPE_ns1__PowerOnVAppRequestType (303)
/* ns1:PowerOnVAppRequestType */
class SOAP_CMAC ns1__PowerOnVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_ns1__PowerOnVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOnVAppRequestType() { ns1__PowerOnVAppRequestType::soap_default(NULL); }
	virtual ~ns1__PowerOnVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOffVAppRequestType
#define SOAP_TYPE_ns1__PowerOffVAppRequestType (304)
/* ns1:PowerOffVAppRequestType */
class SOAP_CMAC ns1__PowerOffVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_ns1__PowerOffVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOffVAppRequestType() { ns1__PowerOffVAppRequestType::soap_default(NULL); }
	virtual ~ns1__PowerOffVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SuspendVAppRequestType
#define SOAP_TYPE_ns1__SuspendVAppRequestType (305)
/* ns1:SuspendVAppRequestType */
class SOAP_CMAC ns1__SuspendVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_ns1__SuspendVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SuspendVAppRequestType() { ns1__SuspendVAppRequestType::soap_default(NULL); }
	virtual ~ns1__SuspendVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__unregisterVAppRequestType
#define SOAP_TYPE_ns1__unregisterVAppRequestType (306)
/* ns1:unregisterVAppRequestType */
class SOAP_CMAC ns1__unregisterVAppRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_ns1__unregisterVAppRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__unregisterVAppRequestType() { ns1__unregisterVAppRequestType::soap_default(NULL); }
	virtual ~ns1__unregisterVAppRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVirtualDiskRequestType
#define SOAP_TYPE_ns1__CreateVirtualDiskRequestType (307)
/* ns1:CreateVirtualDiskRequestType */
class SOAP_CMAC ns1__CreateVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	class ns1__VirtualDiskSpec *spec;	/* required element of type ns1:VirtualDiskSpec */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_ns1__CreateVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVirtualDiskRequestType() { ns1__CreateVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__CreateVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteVirtualDiskRequestType
#define SOAP_TYPE_ns1__DeleteVirtualDiskRequestType (308)
/* ns1:DeleteVirtualDiskRequestType */
class SOAP_CMAC ns1__DeleteVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_ns1__DeleteVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteVirtualDiskRequestType() { ns1__DeleteVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__DeleteVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveVirtualDiskRequestType
#define SOAP_TYPE_ns1__MoveVirtualDiskRequestType (309)
/* ns1:MoveVirtualDiskRequestType */
class SOAP_CMAC ns1__MoveVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string sourceName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *sourceDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string destName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *destDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	bool *force;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_ns1__MoveVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveVirtualDiskRequestType() { ns1__MoveVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__MoveVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyVirtualDiskRequestType
#define SOAP_TYPE_ns1__CopyVirtualDiskRequestType (310)
/* ns1:CopyVirtualDiskRequestType */
class SOAP_CMAC ns1__CopyVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string sourceName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *sourceDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string destName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *destDatacenter;	/* optional element of type ns1:ManagedObjectReference */
	ns1__VirtualDiskSpec *destSpec;	/* optional element of type ns1:VirtualDiskSpec */
	bool *force;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_ns1__CopyVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyVirtualDiskRequestType() { ns1__CopyVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__CopyVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendVirtualDiskRequestType
#define SOAP_TYPE_ns1__ExtendVirtualDiskRequestType (311)
/* ns1:ExtendVirtualDiskRequestType */
class SOAP_CMAC ns1__ExtendVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	LONG64 newCapacityKb;	/* required element of type xsd:long */
	bool *eagerZero;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_ns1__ExtendVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendVirtualDiskRequestType() { ns1__ExtendVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__ExtendVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVirtualDiskFragmentationRequestType
#define SOAP_TYPE_ns1__QueryVirtualDiskFragmentationRequestType (312)
/* ns1:QueryVirtualDiskFragmentationRequestType */
class SOAP_CMAC ns1__QueryVirtualDiskFragmentationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_ns1__QueryVirtualDiskFragmentationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVirtualDiskFragmentationRequestType() { ns1__QueryVirtualDiskFragmentationRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVirtualDiskFragmentationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DefragmentVirtualDiskRequestType
#define SOAP_TYPE_ns1__DefragmentVirtualDiskRequestType (313)
/* ns1:DefragmentVirtualDiskRequestType */
class SOAP_CMAC ns1__DefragmentVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_ns1__DefragmentVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DefragmentVirtualDiskRequestType() { ns1__DefragmentVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__DefragmentVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShrinkVirtualDiskRequestType
#define SOAP_TYPE_ns1__ShrinkVirtualDiskRequestType (314)
/* ns1:ShrinkVirtualDiskRequestType */
class SOAP_CMAC ns1__ShrinkVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	bool *copy;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_ns1__ShrinkVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShrinkVirtualDiskRequestType() { ns1__ShrinkVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__ShrinkVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InflateVirtualDiskRequestType
#define SOAP_TYPE_ns1__InflateVirtualDiskRequestType (315)
/* ns1:InflateVirtualDiskRequestType */
class SOAP_CMAC ns1__InflateVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_ns1__InflateVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InflateVirtualDiskRequestType() { ns1__InflateVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__InflateVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EagerZeroVirtualDiskRequestType
#define SOAP_TYPE_ns1__EagerZeroVirtualDiskRequestType (316)
/* ns1:EagerZeroVirtualDiskRequestType */
class SOAP_CMAC ns1__EagerZeroVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_ns1__EagerZeroVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EagerZeroVirtualDiskRequestType() { ns1__EagerZeroVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__EagerZeroVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ZeroFillVirtualDiskRequestType
#define SOAP_TYPE_ns1__ZeroFillVirtualDiskRequestType (317)
/* ns1:ZeroFillVirtualDiskRequestType */
class SOAP_CMAC ns1__ZeroFillVirtualDiskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_ns1__ZeroFillVirtualDiskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ZeroFillVirtualDiskRequestType() { ns1__ZeroFillVirtualDiskRequestType::soap_default(NULL); }
	virtual ~ns1__ZeroFillVirtualDiskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetVirtualDiskUuidRequestType
#define SOAP_TYPE_ns1__SetVirtualDiskUuidRequestType (318)
/* ns1:SetVirtualDiskUuidRequestType */
class SOAP_CMAC ns1__SetVirtualDiskUuidRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
	std::string uuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_ns1__SetVirtualDiskUuidRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetVirtualDiskUuidRequestType() { ns1__SetVirtualDiskUuidRequestType::soap_default(NULL); }
	virtual ~ns1__SetVirtualDiskUuidRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVirtualDiskUuidRequestType
#define SOAP_TYPE_ns1__QueryVirtualDiskUuidRequestType (319)
/* ns1:QueryVirtualDiskUuidRequestType */
class SOAP_CMAC ns1__QueryVirtualDiskUuidRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_ns1__QueryVirtualDiskUuidRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVirtualDiskUuidRequestType() { ns1__QueryVirtualDiskUuidRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVirtualDiskUuidRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVirtualDiskGeometryRequestType
#define SOAP_TYPE_ns1__QueryVirtualDiskGeometryRequestType (320)
/* ns1:QueryVirtualDiskGeometryRequestType */
class SOAP_CMAC ns1__QueryVirtualDiskGeometryRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_ns1__QueryVirtualDiskGeometryRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVirtualDiskGeometryRequestType() { ns1__QueryVirtualDiskGeometryRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVirtualDiskGeometryRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshStorageInfoRequestType
#define SOAP_TYPE_ns1__RefreshStorageInfoRequestType (321)
/* ns1:RefreshStorageInfoRequestType */
class SOAP_CMAC ns1__RefreshStorageInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_ns1__RefreshStorageInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshStorageInfoRequestType() { ns1__RefreshStorageInfoRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshStorageInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSnapshotRequestType
#define SOAP_TYPE_ns1__CreateSnapshotRequestType (322)
/* ns1:CreateSnapshotRequestType */
class SOAP_CMAC ns1__CreateSnapshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	bool memory;	/* required element of type xsd:boolean */
	bool quiesce;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_ns1__CreateSnapshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSnapshotRequestType() { ns1__CreateSnapshotRequestType::soap_default(NULL); }
	virtual ~ns1__CreateSnapshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RevertToCurrentSnapshotRequestType
#define SOAP_TYPE_ns1__RevertToCurrentSnapshotRequestType (323)
/* ns1:RevertToCurrentSnapshotRequestType */
class SOAP_CMAC ns1__RevertToCurrentSnapshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	bool *suppressPowerOn;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_ns1__RevertToCurrentSnapshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RevertToCurrentSnapshotRequestType() { ns1__RevertToCurrentSnapshotRequestType::soap_default(NULL); }
	virtual ~ns1__RevertToCurrentSnapshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveAllSnapshotsRequestType
#define SOAP_TYPE_ns1__RemoveAllSnapshotsRequestType (324)
/* ns1:RemoveAllSnapshotsRequestType */
class SOAP_CMAC ns1__RemoveAllSnapshotsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_ns1__RemoveAllSnapshotsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveAllSnapshotsRequestType() { ns1__RemoveAllSnapshotsRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveAllSnapshotsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigVMRequestType
#define SOAP_TYPE_ns1__ReconfigVMRequestType (325)
/* ns1:ReconfigVMRequestType */
class SOAP_CMAC ns1__ReconfigVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__VirtualMachineConfigSpec *spec;	/* required element of type ns1:VirtualMachineConfigSpec */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_ns1__ReconfigVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigVMRequestType() { ns1__ReconfigVMRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradeVMRequestType
#define SOAP_TYPE_ns1__UpgradeVMRequestType (326)
/* ns1:UpgradeVMRequestType */
class SOAP_CMAC ns1__UpgradeVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *version;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_ns1__UpgradeVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradeVMRequestType() { ns1__UpgradeVMRequestType::soap_default(NULL); }
	virtual ~ns1__UpgradeVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtractOvfEnvironmentRequestType
#define SOAP_TYPE_ns1__ExtractOvfEnvironmentRequestType (327)
/* ns1:ExtractOvfEnvironmentRequestType */
class SOAP_CMAC ns1__ExtractOvfEnvironmentRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_ns1__ExtractOvfEnvironmentRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtractOvfEnvironmentRequestType() { ns1__ExtractOvfEnvironmentRequestType::soap_default(NULL); }
	virtual ~ns1__ExtractOvfEnvironmentRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOnVMRequestType
#define SOAP_TYPE_ns1__PowerOnVMRequestType (328)
/* ns1:PowerOnVMRequestType */
class SOAP_CMAC ns1__PowerOnVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_ns1__PowerOnVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOnVMRequestType() { ns1__PowerOnVMRequestType::soap_default(NULL); }
	virtual ~ns1__PowerOnVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOffVMRequestType
#define SOAP_TYPE_ns1__PowerOffVMRequestType (329)
/* ns1:PowerOffVMRequestType */
class SOAP_CMAC ns1__PowerOffVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_ns1__PowerOffVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOffVMRequestType() { ns1__PowerOffVMRequestType::soap_default(NULL); }
	virtual ~ns1__PowerOffVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SuspendVMRequestType
#define SOAP_TYPE_ns1__SuspendVMRequestType (330)
/* ns1:SuspendVMRequestType */
class SOAP_CMAC ns1__SuspendVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_ns1__SuspendVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SuspendVMRequestType() { ns1__SuspendVMRequestType::soap_default(NULL); }
	virtual ~ns1__SuspendVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetVMRequestType
#define SOAP_TYPE_ns1__ResetVMRequestType (331)
/* ns1:ResetVMRequestType */
class SOAP_CMAC ns1__ResetVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_ns1__ResetVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetVMRequestType() { ns1__ResetVMRequestType::soap_default(NULL); }
	virtual ~ns1__ResetVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShutdownGuestRequestType
#define SOAP_TYPE_ns1__ShutdownGuestRequestType (332)
/* ns1:ShutdownGuestRequestType */
class SOAP_CMAC ns1__ShutdownGuestRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_ns1__ShutdownGuestRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShutdownGuestRequestType() { ns1__ShutdownGuestRequestType::soap_default(NULL); }
	virtual ~ns1__ShutdownGuestRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RebootGuestRequestType
#define SOAP_TYPE_ns1__RebootGuestRequestType (333)
/* ns1:RebootGuestRequestType */
class SOAP_CMAC ns1__RebootGuestRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_ns1__RebootGuestRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RebootGuestRequestType() { ns1__RebootGuestRequestType::soap_default(NULL); }
	virtual ~ns1__RebootGuestRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StandbyGuestRequestType
#define SOAP_TYPE_ns1__StandbyGuestRequestType (334)
/* ns1:StandbyGuestRequestType */
class SOAP_CMAC ns1__StandbyGuestRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_ns1__StandbyGuestRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StandbyGuestRequestType() { ns1__StandbyGuestRequestType::soap_default(NULL); }
	virtual ~ns1__StandbyGuestRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AnswerVMRequestType
#define SOAP_TYPE_ns1__AnswerVMRequestType (335)
/* ns1:AnswerVMRequestType */
class SOAP_CMAC ns1__AnswerVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string questionId;	/* required element of type xsd:string */
	std::string answerChoice;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_ns1__AnswerVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AnswerVMRequestType() { ns1__AnswerVMRequestType::soap_default(NULL); }
	virtual ~ns1__AnswerVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizeVMRequestType
#define SOAP_TYPE_ns1__CustomizeVMRequestType (336)
/* ns1:CustomizeVMRequestType */
class SOAP_CMAC ns1__CustomizeVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__CustomizationSpec *spec;	/* required element of type ns1:CustomizationSpec */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_ns1__CustomizeVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizeVMRequestType() { ns1__CustomizeVMRequestType::soap_default(NULL); }
	virtual ~ns1__CustomizeVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckCustomizationSpecRequestType
#define SOAP_TYPE_ns1__CheckCustomizationSpecRequestType (337)
/* ns1:CheckCustomizationSpecRequestType */
class SOAP_CMAC ns1__CheckCustomizationSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__CustomizationSpec *spec;	/* required element of type ns1:CustomizationSpec */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_ns1__CheckCustomizationSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckCustomizationSpecRequestType() { ns1__CheckCustomizationSpecRequestType::soap_default(NULL); }
	virtual ~ns1__CheckCustomizationSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrateVMRequestType
#define SOAP_TYPE_ns1__MigrateVMRequestType (338)
/* ns1:MigrateVMRequestType */
class SOAP_CMAC ns1__MigrateVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	enum ns1__VirtualMachineMovePriority priority;	/* required element of type ns1:VirtualMachineMovePriority */
	enum ns1__VirtualMachinePowerState *state;	/* optional element of type ns1:VirtualMachinePowerState */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_ns1__MigrateVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrateVMRequestType() { ns1__MigrateVMRequestType::soap_default(NULL); }
	virtual ~ns1__MigrateVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RelocateVMRequestType
#define SOAP_TYPE_ns1__RelocateVMRequestType (339)
/* ns1:RelocateVMRequestType */
class SOAP_CMAC ns1__RelocateVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VirtualMachineRelocateSpec *spec;	/* required element of type ns1:VirtualMachineRelocateSpec */
	enum ns1__VirtualMachineMovePriority *priority;	/* optional element of type ns1:VirtualMachineMovePriority */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_ns1__RelocateVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RelocateVMRequestType() { ns1__RelocateVMRequestType::soap_default(NULL); }
	virtual ~ns1__RelocateVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CloneVMRequestType
#define SOAP_TYPE_ns1__CloneVMRequestType (340)
/* ns1:CloneVMRequestType */
class SOAP_CMAC ns1__CloneVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *folder;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	class ns1__VirtualMachineCloneSpec *spec;	/* required element of type ns1:VirtualMachineCloneSpec */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_ns1__CloneVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CloneVMRequestType() { ns1__CloneVMRequestType::soap_default(NULL); }
	virtual ~ns1__CloneVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExportVmRequestType
#define SOAP_TYPE_ns1__ExportVmRequestType (341)
/* ns1:ExportVmRequestType */
class SOAP_CMAC ns1__ExportVmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_ns1__ExportVmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExportVmRequestType() { ns1__ExportVmRequestType::soap_default(NULL); }
	virtual ~ns1__ExportVmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MarkAsTemplateRequestType
#define SOAP_TYPE_ns1__MarkAsTemplateRequestType (342)
/* ns1:MarkAsTemplateRequestType */
class SOAP_CMAC ns1__MarkAsTemplateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_ns1__MarkAsTemplateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MarkAsTemplateRequestType() { ns1__MarkAsTemplateRequestType::soap_default(NULL); }
	virtual ~ns1__MarkAsTemplateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MarkAsVirtualMachineRequestType
#define SOAP_TYPE_ns1__MarkAsVirtualMachineRequestType (343)
/* ns1:MarkAsVirtualMachineRequestType */
class SOAP_CMAC ns1__MarkAsVirtualMachineRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_ns1__MarkAsVirtualMachineRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MarkAsVirtualMachineRequestType() { ns1__MarkAsVirtualMachineRequestType::soap_default(NULL); }
	virtual ~ns1__MarkAsVirtualMachineRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnregisterVMRequestType
#define SOAP_TYPE_ns1__UnregisterVMRequestType (344)
/* ns1:UnregisterVMRequestType */
class SOAP_CMAC ns1__UnregisterVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_ns1__UnregisterVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnregisterVMRequestType() { ns1__UnregisterVMRequestType::soap_default(NULL); }
	virtual ~ns1__UnregisterVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetGuestInformationRequestType
#define SOAP_TYPE_ns1__ResetGuestInformationRequestType (345)
/* ns1:ResetGuestInformationRequestType */
class SOAP_CMAC ns1__ResetGuestInformationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_ns1__ResetGuestInformationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetGuestInformationRequestType() { ns1__ResetGuestInformationRequestType::soap_default(NULL); }
	virtual ~ns1__ResetGuestInformationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MountToolsInstallerRequestType
#define SOAP_TYPE_ns1__MountToolsInstallerRequestType (346)
/* ns1:MountToolsInstallerRequestType */
class SOAP_CMAC ns1__MountToolsInstallerRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_ns1__MountToolsInstallerRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MountToolsInstallerRequestType() { ns1__MountToolsInstallerRequestType::soap_default(NULL); }
	virtual ~ns1__MountToolsInstallerRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnmountToolsInstallerRequestType
#define SOAP_TYPE_ns1__UnmountToolsInstallerRequestType (347)
/* ns1:UnmountToolsInstallerRequestType */
class SOAP_CMAC ns1__UnmountToolsInstallerRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_ns1__UnmountToolsInstallerRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnmountToolsInstallerRequestType() { ns1__UnmountToolsInstallerRequestType::soap_default(NULL); }
	virtual ~ns1__UnmountToolsInstallerRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradeToolsRequestType
#define SOAP_TYPE_ns1__UpgradeToolsRequestType (348)
/* ns1:UpgradeToolsRequestType */
class SOAP_CMAC ns1__UpgradeToolsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *installerOptions;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_ns1__UpgradeToolsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradeToolsRequestType() { ns1__UpgradeToolsRequestType::soap_default(NULL); }
	virtual ~ns1__UpgradeToolsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcquireMksTicketRequestType
#define SOAP_TYPE_ns1__AcquireMksTicketRequestType (349)
/* ns1:AcquireMksTicketRequestType */
class SOAP_CMAC ns1__AcquireMksTicketRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_ns1__AcquireMksTicketRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcquireMksTicketRequestType() { ns1__AcquireMksTicketRequestType::soap_default(NULL); }
	virtual ~ns1__AcquireMksTicketRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcquireTicketRequestType
#define SOAP_TYPE_ns1__AcquireTicketRequestType (350)
/* ns1:AcquireTicketRequestType */
class SOAP_CMAC ns1__AcquireTicketRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string ticketType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_ns1__AcquireTicketRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcquireTicketRequestType() { ns1__AcquireTicketRequestType::soap_default(NULL); }
	virtual ~ns1__AcquireTicketRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetScreenResolutionRequestType
#define SOAP_TYPE_ns1__SetScreenResolutionRequestType (351)
/* ns1:SetScreenResolutionRequestType */
class SOAP_CMAC ns1__SetScreenResolutionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_ns1__SetScreenResolutionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetScreenResolutionRequestType() { ns1__SetScreenResolutionRequestType::soap_default(NULL); }
	virtual ~ns1__SetScreenResolutionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DefragmentAllDisksRequestType
#define SOAP_TYPE_ns1__DefragmentAllDisksRequestType (352)
/* ns1:DefragmentAllDisksRequestType */
class SOAP_CMAC ns1__DefragmentAllDisksRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_ns1__DefragmentAllDisksRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DefragmentAllDisksRequestType() { ns1__DefragmentAllDisksRequestType::soap_default(NULL); }
	virtual ~ns1__DefragmentAllDisksRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSecondaryVMRequestType
#define SOAP_TYPE_ns1__CreateSecondaryVMRequestType (353)
/* ns1:CreateSecondaryVMRequestType */
class SOAP_CMAC ns1__CreateSecondaryVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_ns1__CreateSecondaryVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSecondaryVMRequestType() { ns1__CreateSecondaryVMRequestType::soap_default(NULL); }
	virtual ~ns1__CreateSecondaryVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TurnOffFaultToleranceForVMRequestType
#define SOAP_TYPE_ns1__TurnOffFaultToleranceForVMRequestType (354)
/* ns1:TurnOffFaultToleranceForVMRequestType */
class SOAP_CMAC ns1__TurnOffFaultToleranceForVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_ns1__TurnOffFaultToleranceForVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TurnOffFaultToleranceForVMRequestType() { ns1__TurnOffFaultToleranceForVMRequestType::soap_default(NULL); }
	virtual ~ns1__TurnOffFaultToleranceForVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MakePrimaryVMRequestType
#define SOAP_TYPE_ns1__MakePrimaryVMRequestType (355)
/* ns1:MakePrimaryVMRequestType */
class SOAP_CMAC ns1__MakePrimaryVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_ns1__MakePrimaryVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MakePrimaryVMRequestType() { ns1__MakePrimaryVMRequestType::soap_default(NULL); }
	virtual ~ns1__MakePrimaryVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TerminateFaultTolerantVMRequestType
#define SOAP_TYPE_ns1__TerminateFaultTolerantVMRequestType (356)
/* ns1:TerminateFaultTolerantVMRequestType */
class SOAP_CMAC ns1__TerminateFaultTolerantVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_ns1__TerminateFaultTolerantVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TerminateFaultTolerantVMRequestType() { ns1__TerminateFaultTolerantVMRequestType::soap_default(NULL); }
	virtual ~ns1__TerminateFaultTolerantVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableSecondaryVMRequestType
#define SOAP_TYPE_ns1__DisableSecondaryVMRequestType (357)
/* ns1:DisableSecondaryVMRequestType */
class SOAP_CMAC ns1__DisableSecondaryVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_ns1__DisableSecondaryVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableSecondaryVMRequestType() { ns1__DisableSecondaryVMRequestType::soap_default(NULL); }
	virtual ~ns1__DisableSecondaryVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableSecondaryVMRequestType
#define SOAP_TYPE_ns1__EnableSecondaryVMRequestType (358)
/* ns1:EnableSecondaryVMRequestType */
class SOAP_CMAC ns1__EnableSecondaryVMRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_ns1__EnableSecondaryVMRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableSecondaryVMRequestType() { ns1__EnableSecondaryVMRequestType::soap_default(NULL); }
	virtual ~ns1__EnableSecondaryVMRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetDisplayTopologyRequestType
#define SOAP_TYPE_ns1__SetDisplayTopologyRequestType (359)
/* ns1:SetDisplayTopologyRequestType */
class SOAP_CMAC ns1__SetDisplayTopologyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__VirtualMachineDisplayTopology * >displays;	/* required element of type ns1:VirtualMachineDisplayTopology */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_ns1__SetDisplayTopologyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetDisplayTopologyRequestType() { ns1__SetDisplayTopologyRequestType::soap_default(NULL); }
	virtual ~ns1__SetDisplayTopologyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StartRecordingRequestType
#define SOAP_TYPE_ns1__StartRecordingRequestType (360)
/* ns1:StartRecordingRequestType */
class SOAP_CMAC ns1__StartRecordingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_ns1__StartRecordingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StartRecordingRequestType() { ns1__StartRecordingRequestType::soap_default(NULL); }
	virtual ~ns1__StartRecordingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StopRecordingRequestType
#define SOAP_TYPE_ns1__StopRecordingRequestType (361)
/* ns1:StopRecordingRequestType */
class SOAP_CMAC ns1__StopRecordingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_ns1__StopRecordingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StopRecordingRequestType() { ns1__StopRecordingRequestType::soap_default(NULL); }
	virtual ~ns1__StopRecordingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StartReplayingRequestType
#define SOAP_TYPE_ns1__StartReplayingRequestType (362)
/* ns1:StartReplayingRequestType */
class SOAP_CMAC ns1__StartReplayingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *replaySnapshot;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_ns1__StartReplayingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StartReplayingRequestType() { ns1__StartReplayingRequestType::soap_default(NULL); }
	virtual ~ns1__StartReplayingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StopReplayingRequestType
#define SOAP_TYPE_ns1__StopReplayingRequestType (363)
/* ns1:StopReplayingRequestType */
class SOAP_CMAC ns1__StopReplayingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_ns1__StopReplayingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StopReplayingRequestType() { ns1__StopReplayingRequestType::soap_default(NULL); }
	virtual ~ns1__StopReplayingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PromoteDisksRequestType
#define SOAP_TYPE_ns1__PromoteDisksRequestType (364)
/* ns1:PromoteDisksRequestType */
class SOAP_CMAC ns1__PromoteDisksRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool unlink;	/* required element of type xsd:boolean */
	std::vector<class ns1__VirtualDisk * >disks;	/* optional element of type ns1:VirtualDisk */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_ns1__PromoteDisksRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PromoteDisksRequestType() { ns1__PromoteDisksRequestType::soap_default(NULL); }
	virtual ~ns1__PromoteDisksRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateScreenshotRequestType
#define SOAP_TYPE_ns1__CreateScreenshotRequestType (365)
/* ns1:CreateScreenshotRequestType */
class SOAP_CMAC ns1__CreateScreenshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_ns1__CreateScreenshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateScreenshotRequestType() { ns1__CreateScreenshotRequestType::soap_default(NULL); }
	virtual ~ns1__CreateScreenshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryChangedDiskAreasRequestType
#define SOAP_TYPE_ns1__QueryChangedDiskAreasRequestType (366)
/* ns1:QueryChangedDiskAreasRequestType */
class SOAP_CMAC ns1__QueryChangedDiskAreasRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *snapshot;	/* optional element of type ns1:ManagedObjectReference */
	int deviceKey;	/* required element of type xsd:int */
	LONG64 startOffset;	/* required element of type xsd:long */
	std::string changeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_ns1__QueryChangedDiskAreasRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryChangedDiskAreasRequestType() { ns1__QueryChangedDiskAreasRequestType::soap_default(NULL); }
	virtual ~ns1__QueryChangedDiskAreasRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryUnownedFilesRequestType
#define SOAP_TYPE_ns1__QueryUnownedFilesRequestType (367)
/* ns1:QueryUnownedFilesRequestType */
class SOAP_CMAC ns1__QueryUnownedFilesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_ns1__QueryUnownedFilesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryUnownedFilesRequestType() { ns1__QueryUnownedFilesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryUnownedFilesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__reloadVirtualMachineFromPathRequestType
#define SOAP_TYPE_ns1__reloadVirtualMachineFromPathRequestType (368)
/* ns1:reloadVirtualMachineFromPathRequestType */
class SOAP_CMAC ns1__reloadVirtualMachineFromPathRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string configurationPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_ns1__reloadVirtualMachineFromPathRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__reloadVirtualMachineFromPathRequestType() { ns1__reloadVirtualMachineFromPathRequestType::soap_default(NULL); }
	virtual ~ns1__reloadVirtualMachineFromPathRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryFaultToleranceCompatibilityRequestType
#define SOAP_TYPE_ns1__QueryFaultToleranceCompatibilityRequestType (369)
/* ns1:QueryFaultToleranceCompatibilityRequestType */
class SOAP_CMAC ns1__QueryFaultToleranceCompatibilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_ns1__QueryFaultToleranceCompatibilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryFaultToleranceCompatibilityRequestType() { ns1__QueryFaultToleranceCompatibilityRequestType::soap_default(NULL); }
	virtual ~ns1__QueryFaultToleranceCompatibilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveAlarmRequestType
#define SOAP_TYPE_ns1__RemoveAlarmRequestType (370)
/* ns1:RemoveAlarmRequestType */
class SOAP_CMAC ns1__RemoveAlarmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_ns1__RemoveAlarmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveAlarmRequestType() { ns1__RemoveAlarmRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveAlarmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureAlarmRequestType
#define SOAP_TYPE_ns1__ReconfigureAlarmRequestType (371)
/* ns1:ReconfigureAlarmRequestType */
class SOAP_CMAC ns1__ReconfigureAlarmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__AlarmSpec *spec;	/* required element of type ns1:AlarmSpec */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_ns1__ReconfigureAlarmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureAlarmRequestType() { ns1__ReconfigureAlarmRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureAlarmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateAlarmRequestType
#define SOAP_TYPE_ns1__CreateAlarmRequestType (372)
/* ns1:CreateAlarmRequestType */
class SOAP_CMAC ns1__CreateAlarmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	ns1__AlarmSpec *spec;	/* required element of type ns1:AlarmSpec */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_ns1__CreateAlarmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateAlarmRequestType() { ns1__CreateAlarmRequestType::soap_default(NULL); }
	virtual ~ns1__CreateAlarmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAlarmRequestType
#define SOAP_TYPE_ns1__GetAlarmRequestType (373)
/* ns1:GetAlarmRequestType */
class SOAP_CMAC ns1__GetAlarmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_ns1__GetAlarmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAlarmRequestType() { ns1__GetAlarmRequestType::soap_default(NULL); }
	virtual ~ns1__GetAlarmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AreAlarmActionsEnabledRequestType
#define SOAP_TYPE_ns1__AreAlarmActionsEnabledRequestType (374)
/* ns1:AreAlarmActionsEnabledRequestType */
class SOAP_CMAC ns1__AreAlarmActionsEnabledRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_ns1__AreAlarmActionsEnabledRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AreAlarmActionsEnabledRequestType() { ns1__AreAlarmActionsEnabledRequestType::soap_default(NULL); }
	virtual ~ns1__AreAlarmActionsEnabledRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableAlarmActionsRequestType
#define SOAP_TYPE_ns1__EnableAlarmActionsRequestType (375)
/* ns1:EnableAlarmActionsRequestType */
class SOAP_CMAC ns1__EnableAlarmActionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_ns1__EnableAlarmActionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableAlarmActionsRequestType() { ns1__EnableAlarmActionsRequestType::soap_default(NULL); }
	virtual ~ns1__EnableAlarmActionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAlarmStateRequestType
#define SOAP_TYPE_ns1__GetAlarmStateRequestType (376)
/* ns1:GetAlarmStateRequestType */
class SOAP_CMAC ns1__GetAlarmStateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_ns1__GetAlarmStateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAlarmStateRequestType() { ns1__GetAlarmStateRequestType::soap_default(NULL); }
	virtual ~ns1__GetAlarmStateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AcknowledgeAlarmRequestType
#define SOAP_TYPE_ns1__AcknowledgeAlarmRequestType (377)
/* ns1:AcknowledgeAlarmRequestType */
class SOAP_CMAC ns1__AcknowledgeAlarmRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *alarm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_ns1__AcknowledgeAlarmRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AcknowledgeAlarmRequestType() { ns1__AcknowledgeAlarmRequestType::soap_default(NULL); }
	virtual ~ns1__AcknowledgeAlarmRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureDVPortgroupRequestType
#define SOAP_TYPE_ns1__ReconfigureDVPortgroupRequestType (378)
/* ns1:ReconfigureDVPortgroupRequestType */
class SOAP_CMAC ns1__ReconfigureDVPortgroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__DVPortgroupConfigSpec *spec;	/* required element of type ns1:DVPortgroupConfigSpec */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_ns1__ReconfigureDVPortgroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureDVPortgroupRequestType() { ns1__ReconfigureDVPortgroupRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureDVPortgroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAvailableDvsSpecRequestType
#define SOAP_TYPE_ns1__QueryAvailableDvsSpecRequestType (379)
/* ns1:QueryAvailableDvsSpecRequestType */
class SOAP_CMAC ns1__QueryAvailableDvsSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_ns1__QueryAvailableDvsSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAvailableDvsSpecRequestType() { ns1__QueryAvailableDvsSpecRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAvailableDvsSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryCompatibleHostForNewDvsRequestType
#define SOAP_TYPE_ns1__QueryCompatibleHostForNewDvsRequestType (380)
/* ns1:QueryCompatibleHostForNewDvsRequestType */
class SOAP_CMAC ns1__QueryCompatibleHostForNewDvsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *container;	/* required element of type ns1:ManagedObjectReference */
	bool recursive;	/* required element of type xsd:boolean */
	ns1__DistributedVirtualSwitchProductSpec *switchProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_ns1__QueryCompatibleHostForNewDvsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryCompatibleHostForNewDvsRequestType() { ns1__QueryCompatibleHostForNewDvsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryCompatibleHostForNewDvsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryCompatibleHostForExistingDvsRequestType
#define SOAP_TYPE_ns1__QueryCompatibleHostForExistingDvsRequestType (381)
/* ns1:QueryCompatibleHostForExistingDvsRequestType */
class SOAP_CMAC ns1__QueryCompatibleHostForExistingDvsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *container;	/* required element of type ns1:ManagedObjectReference */
	bool recursive;	/* required element of type xsd:boolean */
	ns1__ManagedObjectReference *dvs;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_ns1__QueryCompatibleHostForExistingDvsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryCompatibleHostForExistingDvsRequestType() { ns1__QueryCompatibleHostForExistingDvsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryCompatibleHostForExistingDvsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDvsCompatibleHostSpecRequestType
#define SOAP_TYPE_ns1__QueryDvsCompatibleHostSpecRequestType (382)
/* ns1:QueryDvsCompatibleHostSpecRequestType */
class SOAP_CMAC ns1__QueryDvsCompatibleHostSpecRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__DistributedVirtualSwitchProductSpec *switchProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_ns1__QueryDvsCompatibleHostSpecRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDvsCompatibleHostSpecRequestType() { ns1__QueryDvsCompatibleHostSpecRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDvsCompatibleHostSpecRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDvsFeatureCapabilityRequestType
#define SOAP_TYPE_ns1__QueryDvsFeatureCapabilityRequestType (383)
/* ns1:QueryDvsFeatureCapabilityRequestType */
class SOAP_CMAC ns1__QueryDvsFeatureCapabilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__DistributedVirtualSwitchProductSpec *switchProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_ns1__QueryDvsFeatureCapabilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDvsFeatureCapabilityRequestType() { ns1__QueryDvsFeatureCapabilityRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDvsFeatureCapabilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDvsByUuidRequestType
#define SOAP_TYPE_ns1__QueryDvsByUuidRequestType (384)
/* ns1:QueryDvsByUuidRequestType */
class SOAP_CMAC ns1__QueryDvsByUuidRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string uuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_ns1__QueryDvsByUuidRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDvsByUuidRequestType() { ns1__QueryDvsByUuidRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDvsByUuidRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDvsConfigTargetRequestType
#define SOAP_TYPE_ns1__QueryDvsConfigTargetRequestType (385)
/* ns1:QueryDvsConfigTargetRequestType */
class SOAP_CMAC ns1__QueryDvsConfigTargetRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dvs;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_ns1__QueryDvsConfigTargetRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDvsConfigTargetRequestType() { ns1__QueryDvsConfigTargetRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDvsConfigTargetRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDvsCheckCompatibilityRequestType
#define SOAP_TYPE_ns1__QueryDvsCheckCompatibilityRequestType (386)
/* ns1:QueryDvsCheckCompatibilityRequestType */
class SOAP_CMAC ns1__QueryDvsCheckCompatibilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DistributedVirtualSwitchManagerHostContainer *hostContainer;	/* required element of type ns1:DistributedVirtualSwitchManagerHostContainer */
	class ns1__DistributedVirtualSwitchManagerDvsProductSpec *dvsProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchManagerDvsProductSpec */
	std::vector<class ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec * >hostFilterSpec;	/* optional element of type ns1:DistributedVirtualSwitchManagerHostDvsFilterSpec */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_ns1__QueryDvsCheckCompatibilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDvsCheckCompatibilityRequestType() { ns1__QueryDvsCheckCompatibilityRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDvsCheckCompatibilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReadNextEventsRequestType
#define SOAP_TYPE_ns1__ReadNextEventsRequestType (387)
/* ns1:ReadNextEventsRequestType */
class SOAP_CMAC ns1__ReadNextEventsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int maxCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_ns1__ReadNextEventsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReadNextEventsRequestType() { ns1__ReadNextEventsRequestType::soap_default(NULL); }
	virtual ~ns1__ReadNextEventsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReadPreviousEventsRequestType
#define SOAP_TYPE_ns1__ReadPreviousEventsRequestType (388)
/* ns1:ReadPreviousEventsRequestType */
class SOAP_CMAC ns1__ReadPreviousEventsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int maxCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_ns1__ReadPreviousEventsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReadPreviousEventsRequestType() { ns1__ReadPreviousEventsRequestType::soap_default(NULL); }
	virtual ~ns1__ReadPreviousEventsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveArgumentDescriptionRequestType
#define SOAP_TYPE_ns1__RetrieveArgumentDescriptionRequestType (389)
/* ns1:RetrieveArgumentDescriptionRequestType */
class SOAP_CMAC ns1__RetrieveArgumentDescriptionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string eventTypeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_ns1__RetrieveArgumentDescriptionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveArgumentDescriptionRequestType() { ns1__RetrieveArgumentDescriptionRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveArgumentDescriptionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateCollectorForEventsRequestType
#define SOAP_TYPE_ns1__CreateCollectorForEventsRequestType (390)
/* ns1:CreateCollectorForEventsRequestType */
class SOAP_CMAC ns1__CreateCollectorForEventsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__EventFilterSpec *filter;	/* required element of type ns1:EventFilterSpec */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_ns1__CreateCollectorForEventsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateCollectorForEventsRequestType() { ns1__CreateCollectorForEventsRequestType::soap_default(NULL); }
	virtual ~ns1__CreateCollectorForEventsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LogUserEventRequestType
#define SOAP_TYPE_ns1__LogUserEventRequestType (391)
/* ns1:LogUserEventRequestType */
class SOAP_CMAC ns1__LogUserEventRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::string msg;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_ns1__LogUserEventRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LogUserEventRequestType() { ns1__LogUserEventRequestType::soap_default(NULL); }
	virtual ~ns1__LogUserEventRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryEventsRequestType
#define SOAP_TYPE_ns1__QueryEventsRequestType (392)
/* ns1:QueryEventsRequestType */
class SOAP_CMAC ns1__QueryEventsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__EventFilterSpec *filter;	/* required element of type ns1:EventFilterSpec */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_ns1__QueryEventsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryEventsRequestType() { ns1__QueryEventsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryEventsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PostEventRequestType
#define SOAP_TYPE_ns1__PostEventRequestType (393)
/* ns1:PostEventRequestType */
class SOAP_CMAC ns1__PostEventRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__Event *eventToPost;	/* required element of type ns1:Event */
	class ns1__TaskInfo *taskInfo;	/* optional element of type ns1:TaskInfo */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_ns1__PostEventRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PostEventRequestType() { ns1__PostEventRequestType::soap_default(NULL); }
	virtual ~ns1__PostEventRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__JoinDomainRequestType
#define SOAP_TYPE_ns1__JoinDomainRequestType (394)
/* ns1:JoinDomainRequestType */
class SOAP_CMAC ns1__JoinDomainRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string domainName;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_ns1__JoinDomainRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__JoinDomainRequestType() { ns1__JoinDomainRequestType::soap_default(NULL); }
	virtual ~ns1__JoinDomainRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LeaveCurrentDomainRequestType
#define SOAP_TYPE_ns1__LeaveCurrentDomainRequestType (395)
/* ns1:LeaveCurrentDomainRequestType */
class SOAP_CMAC ns1__LeaveCurrentDomainRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_ns1__LeaveCurrentDomainRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LeaveCurrentDomainRequestType() { ns1__LeaveCurrentDomainRequestType::soap_default(NULL); }
	virtual ~ns1__LeaveCurrentDomainRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureAutostartRequestType
#define SOAP_TYPE_ns1__ReconfigureAutostartRequestType (396)
/* ns1:ReconfigureAutostartRequestType */
class SOAP_CMAC ns1__ReconfigureAutostartRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostAutoStartManagerConfig *spec;	/* required element of type ns1:HostAutoStartManagerConfig */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_ns1__ReconfigureAutostartRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureAutostartRequestType() { ns1__ReconfigureAutostartRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureAutostartRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartPowerOnRequestType
#define SOAP_TYPE_ns1__AutoStartPowerOnRequestType (397)
/* ns1:AutoStartPowerOnRequestType */
class SOAP_CMAC ns1__AutoStartPowerOnRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_ns1__AutoStartPowerOnRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartPowerOnRequestType() { ns1__AutoStartPowerOnRequestType::soap_default(NULL); }
	virtual ~ns1__AutoStartPowerOnRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartPowerOffRequestType
#define SOAP_TYPE_ns1__AutoStartPowerOffRequestType (398)
/* ns1:AutoStartPowerOffRequestType */
class SOAP_CMAC ns1__AutoStartPowerOffRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_ns1__AutoStartPowerOffRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartPowerOffRequestType() { ns1__AutoStartPowerOffRequestType::soap_default(NULL); }
	virtual ~ns1__AutoStartPowerOffRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryBootDevicesRequestType
#define SOAP_TYPE_ns1__QueryBootDevicesRequestType (399)
/* ns1:QueryBootDevicesRequestType */
class SOAP_CMAC ns1__QueryBootDevicesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_ns1__QueryBootDevicesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryBootDevicesRequestType() { ns1__QueryBootDevicesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryBootDevicesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateBootDeviceRequestType
#define SOAP_TYPE_ns1__UpdateBootDeviceRequestType (400)
/* ns1:UpdateBootDeviceRequestType */
class SOAP_CMAC ns1__UpdateBootDeviceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_ns1__UpdateBootDeviceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateBootDeviceRequestType() { ns1__UpdateBootDeviceRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateBootDeviceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableHyperThreadingRequestType
#define SOAP_TYPE_ns1__EnableHyperThreadingRequestType (401)
/* ns1:EnableHyperThreadingRequestType */
class SOAP_CMAC ns1__EnableHyperThreadingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_ns1__EnableHyperThreadingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableHyperThreadingRequestType() { ns1__EnableHyperThreadingRequestType::soap_default(NULL); }
	virtual ~ns1__EnableHyperThreadingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableHyperThreadingRequestType
#define SOAP_TYPE_ns1__DisableHyperThreadingRequestType (402)
/* ns1:DisableHyperThreadingRequestType */
class SOAP_CMAC ns1__DisableHyperThreadingRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_ns1__DisableHyperThreadingRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableHyperThreadingRequestType() { ns1__DisableHyperThreadingRequestType::soap_default(NULL); }
	virtual ~ns1__DisableHyperThreadingRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SearchDatastoreRequestType
#define SOAP_TYPE_ns1__SearchDatastoreRequestType (403)
/* ns1:SearchDatastoreRequestType */
class SOAP_CMAC ns1__SearchDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string datastorePath;	/* required element of type xsd:string */
	class ns1__HostDatastoreBrowserSearchSpec *searchSpec;	/* optional element of type ns1:HostDatastoreBrowserSearchSpec */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_ns1__SearchDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SearchDatastoreRequestType() { ns1__SearchDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__SearchDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SearchDatastoreSubFoldersRequestType
#define SOAP_TYPE_ns1__SearchDatastoreSubFoldersRequestType (404)
/* ns1:SearchDatastoreSubFoldersRequestType */
class SOAP_CMAC ns1__SearchDatastoreSubFoldersRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string datastorePath;	/* required element of type xsd:string */
	ns1__HostDatastoreBrowserSearchSpec *searchSpec;	/* optional element of type ns1:HostDatastoreBrowserSearchSpec */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_ns1__SearchDatastoreSubFoldersRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SearchDatastoreSubFoldersRequestType() { ns1__SearchDatastoreSubFoldersRequestType::soap_default(NULL); }
	virtual ~ns1__SearchDatastoreSubFoldersRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileRequestType
#define SOAP_TYPE_ns1__DeleteFileRequestType (405)
/* ns1:DeleteFileRequestType */
class SOAP_CMAC ns1__DeleteFileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string datastorePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_ns1__DeleteFileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileRequestType() { ns1__DeleteFileRequestType::soap_default(NULL); }
	virtual ~ns1__DeleteFileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateLocalSwapDatastoreRequestType
#define SOAP_TYPE_ns1__UpdateLocalSwapDatastoreRequestType (406)
/* ns1:UpdateLocalSwapDatastoreRequestType */
class SOAP_CMAC ns1__UpdateLocalSwapDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_ns1__UpdateLocalSwapDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateLocalSwapDatastoreRequestType() { ns1__UpdateLocalSwapDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateLocalSwapDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAvailableDisksForVmfsRequestType
#define SOAP_TYPE_ns1__QueryAvailableDisksForVmfsRequestType (407)
/* ns1:QueryAvailableDisksForVmfsRequestType */
class SOAP_CMAC ns1__QueryAvailableDisksForVmfsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_ns1__QueryAvailableDisksForVmfsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAvailableDisksForVmfsRequestType() { ns1__QueryAvailableDisksForVmfsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAvailableDisksForVmfsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVmfsDatastoreCreateOptionsRequestType
#define SOAP_TYPE_ns1__QueryVmfsDatastoreCreateOptionsRequestType (408)
/* ns1:QueryVmfsDatastoreCreateOptionsRequestType */
class SOAP_CMAC ns1__QueryVmfsDatastoreCreateOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string devicePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_ns1__QueryVmfsDatastoreCreateOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVmfsDatastoreCreateOptionsRequestType() { ns1__QueryVmfsDatastoreCreateOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVmfsDatastoreCreateOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateVmfsDatastoreRequestType
#define SOAP_TYPE_ns1__CreateVmfsDatastoreRequestType (409)
/* ns1:CreateVmfsDatastoreRequestType */
class SOAP_CMAC ns1__CreateVmfsDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VmfsDatastoreCreateSpec *spec;	/* required element of type ns1:VmfsDatastoreCreateSpec */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_ns1__CreateVmfsDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateVmfsDatastoreRequestType() { ns1__CreateVmfsDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__CreateVmfsDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVmfsDatastoreExtendOptionsRequestType
#define SOAP_TYPE_ns1__QueryVmfsDatastoreExtendOptionsRequestType (410)
/* ns1:QueryVmfsDatastoreExtendOptionsRequestType */
class SOAP_CMAC ns1__QueryVmfsDatastoreExtendOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	std::string devicePath;	/* required element of type xsd:string */
	bool *suppressExpandCandidates;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_ns1__QueryVmfsDatastoreExtendOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVmfsDatastoreExtendOptionsRequestType() { ns1__QueryVmfsDatastoreExtendOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVmfsDatastoreExtendOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVmfsDatastoreExpandOptionsRequestType
#define SOAP_TYPE_ns1__QueryVmfsDatastoreExpandOptionsRequestType (411)
/* ns1:QueryVmfsDatastoreExpandOptionsRequestType */
class SOAP_CMAC ns1__QueryVmfsDatastoreExpandOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_ns1__QueryVmfsDatastoreExpandOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVmfsDatastoreExpandOptionsRequestType() { ns1__QueryVmfsDatastoreExpandOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVmfsDatastoreExpandOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendVmfsDatastoreRequestType
#define SOAP_TYPE_ns1__ExtendVmfsDatastoreRequestType (412)
/* ns1:ExtendVmfsDatastoreRequestType */
class SOAP_CMAC ns1__ExtendVmfsDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VmfsDatastoreExtendSpec *spec;	/* required element of type ns1:VmfsDatastoreExtendSpec */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_ns1__ExtendVmfsDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendVmfsDatastoreRequestType() { ns1__ExtendVmfsDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__ExtendVmfsDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExpandVmfsDatastoreRequestType
#define SOAP_TYPE_ns1__ExpandVmfsDatastoreRequestType (413)
/* ns1:ExpandVmfsDatastoreRequestType */
class SOAP_CMAC ns1__ExpandVmfsDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VmfsDatastoreExpandSpec *spec;	/* required element of type ns1:VmfsDatastoreExpandSpec */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_ns1__ExpandVmfsDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExpandVmfsDatastoreRequestType() { ns1__ExpandVmfsDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__ExpandVmfsDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateNasDatastoreRequestType
#define SOAP_TYPE_ns1__CreateNasDatastoreRequestType (414)
/* ns1:CreateNasDatastoreRequestType */
class SOAP_CMAC ns1__CreateNasDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostNasVolumeSpec *spec;	/* required element of type ns1:HostNasVolumeSpec */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_ns1__CreateNasDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateNasDatastoreRequestType() { ns1__CreateNasDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__CreateNasDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateLocalDatastoreRequestType
#define SOAP_TYPE_ns1__CreateLocalDatastoreRequestType (415)
/* ns1:CreateLocalDatastoreRequestType */
class SOAP_CMAC ns1__CreateLocalDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string path;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_ns1__CreateLocalDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateLocalDatastoreRequestType() { ns1__CreateLocalDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__CreateLocalDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveDatastoreRequestType
#define SOAP_TYPE_ns1__RemoveDatastoreRequestType (416)
/* ns1:RemoveDatastoreRequestType */
class SOAP_CMAC ns1__RemoveDatastoreRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_ns1__RemoveDatastoreRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveDatastoreRequestType() { ns1__RemoveDatastoreRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveDatastoreRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigureDatastorePrincipalRequestType
#define SOAP_TYPE_ns1__ConfigureDatastorePrincipalRequestType (417)
/* ns1:ConfigureDatastorePrincipalRequestType */
class SOAP_CMAC ns1__ConfigureDatastorePrincipalRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string userName;	/* required element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_ns1__ConfigureDatastorePrincipalRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigureDatastorePrincipalRequestType() { ns1__ConfigureDatastorePrincipalRequestType::soap_default(NULL); }
	virtual ~ns1__ConfigureDatastorePrincipalRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumesRequestType
#define SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumesRequestType (418)
/* ns1:QueryUnresolvedVmfsVolumesRequestType */
class SOAP_CMAC ns1__QueryUnresolvedVmfsVolumesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryUnresolvedVmfsVolumesRequestType() { ns1__QueryUnresolvedVmfsVolumesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryUnresolvedVmfsVolumesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResignatureUnresolvedVmfsVolumeRequestType
#define SOAP_TYPE_ns1__ResignatureUnresolvedVmfsVolumeRequestType (419)
/* ns1:ResignatureUnresolvedVmfsVolumeRequestType */
class SOAP_CMAC ns1__ResignatureUnresolvedVmfsVolumeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostUnresolvedVmfsResignatureSpec *resolutionSpec;	/* required element of type ns1:HostUnresolvedVmfsResignatureSpec */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_ns1__ResignatureUnresolvedVmfsVolumeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResignatureUnresolvedVmfsVolumeRequestType() { ns1__ResignatureUnresolvedVmfsVolumeRequestType::soap_default(NULL); }
	virtual ~ns1__ResignatureUnresolvedVmfsVolumeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDateTimeConfigRequestType
#define SOAP_TYPE_ns1__UpdateDateTimeConfigRequestType (420)
/* ns1:UpdateDateTimeConfigRequestType */
class SOAP_CMAC ns1__UpdateDateTimeConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostDateTimeConfig *config;	/* required element of type ns1:HostDateTimeConfig */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_ns1__UpdateDateTimeConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDateTimeConfigRequestType() { ns1__UpdateDateTimeConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDateTimeConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAvailableTimeZonesRequestType
#define SOAP_TYPE_ns1__QueryAvailableTimeZonesRequestType (421)
/* ns1:QueryAvailableTimeZonesRequestType */
class SOAP_CMAC ns1__QueryAvailableTimeZonesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_ns1__QueryAvailableTimeZonesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAvailableTimeZonesRequestType() { ns1__QueryAvailableTimeZonesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAvailableTimeZonesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryDateTimeRequestType
#define SOAP_TYPE_ns1__QueryDateTimeRequestType (422)
/* ns1:QueryDateTimeRequestType */
class SOAP_CMAC ns1__QueryDateTimeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_ns1__QueryDateTimeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryDateTimeRequestType() { ns1__QueryDateTimeRequestType::soap_default(NULL); }
	virtual ~ns1__QueryDateTimeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDateTimeRequestType
#define SOAP_TYPE_ns1__UpdateDateTimeRequestType (423)
/* ns1:UpdateDateTimeRequestType */
class SOAP_CMAC ns1__UpdateDateTimeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	time_t dateTime;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_ns1__UpdateDateTimeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDateTimeRequestType() { ns1__UpdateDateTimeRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDateTimeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshDateTimeSystemRequestType
#define SOAP_TYPE_ns1__RefreshDateTimeSystemRequestType (424)
/* ns1:RefreshDateTimeSystemRequestType */
class SOAP_CMAC ns1__RefreshDateTimeSystemRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_ns1__RefreshDateTimeSystemRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshDateTimeSystemRequestType() { ns1__RefreshDateTimeSystemRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshDateTimeSystemRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryAvailablePartitionRequestType
#define SOAP_TYPE_ns1__QueryAvailablePartitionRequestType (425)
/* ns1:QueryAvailablePartitionRequestType */
class SOAP_CMAC ns1__QueryAvailablePartitionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_ns1__QueryAvailablePartitionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryAvailablePartitionRequestType() { ns1__QueryAvailablePartitionRequestType::soap_default(NULL); }
	virtual ~ns1__QueryAvailablePartitionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SelectActivePartitionRequestType
#define SOAP_TYPE_ns1__SelectActivePartitionRequestType (426)
/* ns1:SelectActivePartitionRequestType */
class SOAP_CMAC ns1__SelectActivePartitionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostScsiDiskPartition *partition;	/* optional element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_ns1__SelectActivePartitionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SelectActivePartitionRequestType() { ns1__SelectActivePartitionRequestType::soap_default(NULL); }
	virtual ~ns1__SelectActivePartitionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPartitionCreateOptionsRequestType
#define SOAP_TYPE_ns1__QueryPartitionCreateOptionsRequestType (427)
/* ns1:QueryPartitionCreateOptionsRequestType */
class SOAP_CMAC ns1__QueryPartitionCreateOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string storageType;	/* required element of type xsd:string */
	std::string diagnosticType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_ns1__QueryPartitionCreateOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPartitionCreateOptionsRequestType() { ns1__QueryPartitionCreateOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPartitionCreateOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPartitionCreateDescRequestType
#define SOAP_TYPE_ns1__QueryPartitionCreateDescRequestType (428)
/* ns1:QueryPartitionCreateDescRequestType */
class SOAP_CMAC ns1__QueryPartitionCreateDescRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string diskUuid;	/* required element of type xsd:string */
	std::string diagnosticType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_ns1__QueryPartitionCreateDescRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPartitionCreateDescRequestType() { ns1__QueryPartitionCreateDescRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPartitionCreateDescRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDiagnosticPartitionRequestType
#define SOAP_TYPE_ns1__CreateDiagnosticPartitionRequestType (429)
/* ns1:CreateDiagnosticPartitionRequestType */
class SOAP_CMAC ns1__CreateDiagnosticPartitionRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostDiagnosticPartitionCreateSpec *spec;	/* required element of type ns1:HostDiagnosticPartitionCreateSpec */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_ns1__CreateDiagnosticPartitionRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDiagnosticPartitionRequestType() { ns1__CreateDiagnosticPartitionRequestType::soap_default(NULL); }
	virtual ~ns1__CreateDiagnosticPartitionRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDefaultPolicyRequestType
#define SOAP_TYPE_ns1__UpdateDefaultPolicyRequestType (430)
/* ns1:UpdateDefaultPolicyRequestType */
class SOAP_CMAC ns1__UpdateDefaultPolicyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostFirewallDefaultPolicy *defaultPolicy;	/* required element of type ns1:HostFirewallDefaultPolicy */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_ns1__UpdateDefaultPolicyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDefaultPolicyRequestType() { ns1__UpdateDefaultPolicyRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDefaultPolicyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableRulesetRequestType
#define SOAP_TYPE_ns1__EnableRulesetRequestType (431)
/* ns1:EnableRulesetRequestType */
class SOAP_CMAC ns1__EnableRulesetRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_ns1__EnableRulesetRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableRulesetRequestType() { ns1__EnableRulesetRequestType::soap_default(NULL); }
	virtual ~ns1__EnableRulesetRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableRulesetRequestType
#define SOAP_TYPE_ns1__DisableRulesetRequestType (432)
/* ns1:DisableRulesetRequestType */
class SOAP_CMAC ns1__DisableRulesetRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_ns1__DisableRulesetRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableRulesetRequestType() { ns1__DisableRulesetRequestType::soap_default(NULL); }
	virtual ~ns1__DisableRulesetRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshFirewallRequestType
#define SOAP_TYPE_ns1__RefreshFirewallRequestType (433)
/* ns1:RefreshFirewallRequestType */
class SOAP_CMAC ns1__RefreshFirewallRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_ns1__RefreshFirewallRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshFirewallRequestType() { ns1__RefreshFirewallRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshFirewallRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetFirmwareToFactoryDefaultsRequestType
#define SOAP_TYPE_ns1__ResetFirmwareToFactoryDefaultsRequestType (434)
/* ns1:ResetFirmwareToFactoryDefaultsRequestType */
class SOAP_CMAC ns1__ResetFirmwareToFactoryDefaultsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_ns1__ResetFirmwareToFactoryDefaultsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetFirmwareToFactoryDefaultsRequestType() { ns1__ResetFirmwareToFactoryDefaultsRequestType::soap_default(NULL); }
	virtual ~ns1__ResetFirmwareToFactoryDefaultsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BackupFirmwareConfigurationRequestType
#define SOAP_TYPE_ns1__BackupFirmwareConfigurationRequestType (435)
/* ns1:BackupFirmwareConfigurationRequestType */
class SOAP_CMAC ns1__BackupFirmwareConfigurationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_ns1__BackupFirmwareConfigurationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BackupFirmwareConfigurationRequestType() { ns1__BackupFirmwareConfigurationRequestType::soap_default(NULL); }
	virtual ~ns1__BackupFirmwareConfigurationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryFirmwareConfigUploadURLRequestType
#define SOAP_TYPE_ns1__QueryFirmwareConfigUploadURLRequestType (436)
/* ns1:QueryFirmwareConfigUploadURLRequestType */
class SOAP_CMAC ns1__QueryFirmwareConfigUploadURLRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_ns1__QueryFirmwareConfigUploadURLRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryFirmwareConfigUploadURLRequestType() { ns1__QueryFirmwareConfigUploadURLRequestType::soap_default(NULL); }
	virtual ~ns1__QueryFirmwareConfigUploadURLRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RestoreFirmwareConfigurationRequestType
#define SOAP_TYPE_ns1__RestoreFirmwareConfigurationRequestType (437)
/* ns1:RestoreFirmwareConfigurationRequestType */
class SOAP_CMAC ns1__RestoreFirmwareConfigurationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_ns1__RestoreFirmwareConfigurationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RestoreFirmwareConfigurationRequestType() { ns1__RestoreFirmwareConfigurationRequestType::soap_default(NULL); }
	virtual ~ns1__RestoreFirmwareConfigurationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshHealthStatusSystemRequestType
#define SOAP_TYPE_ns1__RefreshHealthStatusSystemRequestType (438)
/* ns1:RefreshHealthStatusSystemRequestType */
class SOAP_CMAC ns1__RefreshHealthStatusSystemRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_ns1__RefreshHealthStatusSystemRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshHealthStatusSystemRequestType() { ns1__RefreshHealthStatusSystemRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshHealthStatusSystemRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetSystemHealthInfoRequestType
#define SOAP_TYPE_ns1__ResetSystemHealthInfoRequestType (439)
/* ns1:ResetSystemHealthInfoRequestType */
class SOAP_CMAC ns1__ResetSystemHealthInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_ns1__ResetSystemHealthInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetSystemHealthInfoRequestType() { ns1__ResetSystemHealthInfoRequestType::soap_default(NULL); }
	virtual ~ns1__ResetSystemHealthInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryModulesRequestType
#define SOAP_TYPE_ns1__QueryModulesRequestType (440)
/* ns1:QueryModulesRequestType */
class SOAP_CMAC ns1__QueryModulesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_ns1__QueryModulesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryModulesRequestType() { ns1__QueryModulesRequestType::soap_default(NULL); }
	virtual ~ns1__QueryModulesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateModuleOptionStringRequestType
#define SOAP_TYPE_ns1__UpdateModuleOptionStringRequestType (441)
/* ns1:UpdateModuleOptionStringRequestType */
class SOAP_CMAC ns1__UpdateModuleOptionStringRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string options;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_ns1__UpdateModuleOptionStringRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateModuleOptionStringRequestType() { ns1__UpdateModuleOptionStringRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateModuleOptionStringRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryConfiguredModuleOptionStringRequestType
#define SOAP_TYPE_ns1__QueryConfiguredModuleOptionStringRequestType (442)
/* ns1:QueryConfiguredModuleOptionStringRequestType */
class SOAP_CMAC ns1__QueryConfiguredModuleOptionStringRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_ns1__QueryConfiguredModuleOptionStringRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryConfiguredModuleOptionStringRequestType() { ns1__QueryConfiguredModuleOptionStringRequestType::soap_default(NULL); }
	virtual ~ns1__QueryConfiguredModuleOptionStringRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateUserRequestType
#define SOAP_TYPE_ns1__CreateUserRequestType (443)
/* ns1:CreateUserRequestType */
class SOAP_CMAC ns1__CreateUserRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostAccountSpec *user;	/* required element of type ns1:HostAccountSpec */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_ns1__CreateUserRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateUserRequestType() { ns1__CreateUserRequestType::soap_default(NULL); }
	virtual ~ns1__CreateUserRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateUserRequestType
#define SOAP_TYPE_ns1__UpdateUserRequestType (444)
/* ns1:UpdateUserRequestType */
class SOAP_CMAC ns1__UpdateUserRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostAccountSpec *user;	/* required element of type ns1:HostAccountSpec */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_ns1__UpdateUserRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateUserRequestType() { ns1__UpdateUserRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateUserRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateGroupRequestType
#define SOAP_TYPE_ns1__CreateGroupRequestType (445)
/* ns1:CreateGroupRequestType */
class SOAP_CMAC ns1__CreateGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostAccountSpec *group;	/* required element of type ns1:HostAccountSpec */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_ns1__CreateGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateGroupRequestType() { ns1__CreateGroupRequestType::soap_default(NULL); }
	virtual ~ns1__CreateGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveUserRequestType
#define SOAP_TYPE_ns1__RemoveUserRequestType (446)
/* ns1:RemoveUserRequestType */
class SOAP_CMAC ns1__RemoveUserRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_ns1__RemoveUserRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveUserRequestType() { ns1__RemoveUserRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveUserRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveGroupRequestType
#define SOAP_TYPE_ns1__RemoveGroupRequestType (447)
/* ns1:RemoveGroupRequestType */
class SOAP_CMAC ns1__RemoveGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string groupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_ns1__RemoveGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveGroupRequestType() { ns1__RemoveGroupRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AssignUserToGroupRequestType
#define SOAP_TYPE_ns1__AssignUserToGroupRequestType (448)
/* ns1:AssignUserToGroupRequestType */
class SOAP_CMAC ns1__AssignUserToGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string user;	/* required element of type xsd:string */
	std::string group;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_ns1__AssignUserToGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AssignUserToGroupRequestType() { ns1__AssignUserToGroupRequestType::soap_default(NULL); }
	virtual ~ns1__AssignUserToGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnassignUserFromGroupRequestType
#define SOAP_TYPE_ns1__UnassignUserFromGroupRequestType (449)
/* ns1:UnassignUserFromGroupRequestType */
class SOAP_CMAC ns1__UnassignUserFromGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string user;	/* required element of type xsd:string */
	std::string group;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_ns1__UnassignUserFromGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnassignUserFromGroupRequestType() { ns1__UnassignUserFromGroupRequestType::soap_default(NULL); }
	virtual ~ns1__UnassignUserFromGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureServiceConsoleReservationRequestType
#define SOAP_TYPE_ns1__ReconfigureServiceConsoleReservationRequestType (450)
/* ns1:ReconfigureServiceConsoleReservationRequestType */
class SOAP_CMAC ns1__ReconfigureServiceConsoleReservationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	LONG64 cfgBytes;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_ns1__ReconfigureServiceConsoleReservationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureServiceConsoleReservationRequestType() { ns1__ReconfigureServiceConsoleReservationRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureServiceConsoleReservationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureVirtualMachineReservationRequestType
#define SOAP_TYPE_ns1__ReconfigureVirtualMachineReservationRequestType (451)
/* ns1:ReconfigureVirtualMachineReservationRequestType */
class SOAP_CMAC ns1__ReconfigureVirtualMachineReservationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__VirtualMachineMemoryReservationSpec *spec;	/* required element of type ns1:VirtualMachineMemoryReservationSpec */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_ns1__ReconfigureVirtualMachineReservationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureVirtualMachineReservationRequestType() { ns1__ReconfigureVirtualMachineReservationRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureVirtualMachineReservationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateNetworkConfigRequestType
#define SOAP_TYPE_ns1__UpdateNetworkConfigRequestType (452)
/* ns1:UpdateNetworkConfigRequestType */
class SOAP_CMAC ns1__UpdateNetworkConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostNetworkConfig *config;	/* required element of type ns1:HostNetworkConfig */
	std::string changeMode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_ns1__UpdateNetworkConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateNetworkConfigRequestType() { ns1__UpdateNetworkConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateNetworkConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDnsConfigRequestType
#define SOAP_TYPE_ns1__UpdateDnsConfigRequestType (453)
/* ns1:UpdateDnsConfigRequestType */
class SOAP_CMAC ns1__UpdateDnsConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostDnsConfig *config;	/* required element of type ns1:HostDnsConfig */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_ns1__UpdateDnsConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDnsConfigRequestType() { ns1__UpdateDnsConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDnsConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateIpRouteConfigRequestType
#define SOAP_TYPE_ns1__UpdateIpRouteConfigRequestType (454)
/* ns1:UpdateIpRouteConfigRequestType */
class SOAP_CMAC ns1__UpdateIpRouteConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostIpRouteConfig *config;	/* required element of type ns1:HostIpRouteConfig */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_ns1__UpdateIpRouteConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateIpRouteConfigRequestType() { ns1__UpdateIpRouteConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateIpRouteConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateConsoleIpRouteConfigRequestType
#define SOAP_TYPE_ns1__UpdateConsoleIpRouteConfigRequestType (455)
/* ns1:UpdateConsoleIpRouteConfigRequestType */
class SOAP_CMAC ns1__UpdateConsoleIpRouteConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostIpRouteConfig *config;	/* required element of type ns1:HostIpRouteConfig */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_ns1__UpdateConsoleIpRouteConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateConsoleIpRouteConfigRequestType() { ns1__UpdateConsoleIpRouteConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateConsoleIpRouteConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateIpRouteTableConfigRequestType
#define SOAP_TYPE_ns1__UpdateIpRouteTableConfigRequestType (456)
/* ns1:UpdateIpRouteTableConfigRequestType */
class SOAP_CMAC ns1__UpdateIpRouteTableConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostIpRouteTableConfig *config;	/* required element of type ns1:HostIpRouteTableConfig */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_ns1__UpdateIpRouteTableConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateIpRouteTableConfigRequestType() { ns1__UpdateIpRouteTableConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateIpRouteTableConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddVirtualSwitchRequestType
#define SOAP_TYPE_ns1__AddVirtualSwitchRequestType (457)
/* ns1:AddVirtualSwitchRequestType */
class SOAP_CMAC ns1__AddVirtualSwitchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vswitchName;	/* required element of type xsd:string */
	class ns1__HostVirtualSwitchSpec *spec;	/* optional element of type ns1:HostVirtualSwitchSpec */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_ns1__AddVirtualSwitchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddVirtualSwitchRequestType() { ns1__AddVirtualSwitchRequestType::soap_default(NULL); }
	virtual ~ns1__AddVirtualSwitchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveVirtualSwitchRequestType
#define SOAP_TYPE_ns1__RemoveVirtualSwitchRequestType (458)
/* ns1:RemoveVirtualSwitchRequestType */
class SOAP_CMAC ns1__RemoveVirtualSwitchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vswitchName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_ns1__RemoveVirtualSwitchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveVirtualSwitchRequestType() { ns1__RemoveVirtualSwitchRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveVirtualSwitchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVirtualSwitchRequestType
#define SOAP_TYPE_ns1__UpdateVirtualSwitchRequestType (459)
/* ns1:UpdateVirtualSwitchRequestType */
class SOAP_CMAC ns1__UpdateVirtualSwitchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vswitchName;	/* required element of type xsd:string */
	ns1__HostVirtualSwitchSpec *spec;	/* required element of type ns1:HostVirtualSwitchSpec */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_ns1__UpdateVirtualSwitchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVirtualSwitchRequestType() { ns1__UpdateVirtualSwitchRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateVirtualSwitchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddPortGroupRequestType
#define SOAP_TYPE_ns1__AddPortGroupRequestType (460)
/* ns1:AddPortGroupRequestType */
class SOAP_CMAC ns1__AddPortGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostPortGroupSpec *portgrp;	/* required element of type ns1:HostPortGroupSpec */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_ns1__AddPortGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddPortGroupRequestType() { ns1__AddPortGroupRequestType::soap_default(NULL); }
	virtual ~ns1__AddPortGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemovePortGroupRequestType
#define SOAP_TYPE_ns1__RemovePortGroupRequestType (461)
/* ns1:RemovePortGroupRequestType */
class SOAP_CMAC ns1__RemovePortGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string pgName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_ns1__RemovePortGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemovePortGroupRequestType() { ns1__RemovePortGroupRequestType::soap_default(NULL); }
	virtual ~ns1__RemovePortGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdatePortGroupRequestType
#define SOAP_TYPE_ns1__UpdatePortGroupRequestType (462)
/* ns1:UpdatePortGroupRequestType */
class SOAP_CMAC ns1__UpdatePortGroupRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string pgName;	/* required element of type xsd:string */
	ns1__HostPortGroupSpec *portgrp;	/* required element of type ns1:HostPortGroupSpec */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_ns1__UpdatePortGroupRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdatePortGroupRequestType() { ns1__UpdatePortGroupRequestType::soap_default(NULL); }
	virtual ~ns1__UpdatePortGroupRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdatePhysicalNicLinkSpeedRequestType
#define SOAP_TYPE_ns1__UpdatePhysicalNicLinkSpeedRequestType (463)
/* ns1:UpdatePhysicalNicLinkSpeedRequestType */
class SOAP_CMAC ns1__UpdatePhysicalNicLinkSpeedRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
	class ns1__PhysicalNicLinkInfo *linkSpeed;	/* optional element of type ns1:PhysicalNicLinkInfo */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_ns1__UpdatePhysicalNicLinkSpeedRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdatePhysicalNicLinkSpeedRequestType() { ns1__UpdatePhysicalNicLinkSpeedRequestType::soap_default(NULL); }
	virtual ~ns1__UpdatePhysicalNicLinkSpeedRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryNetworkHintRequestType
#define SOAP_TYPE_ns1__QueryNetworkHintRequestType (464)
/* ns1:QueryNetworkHintRequestType */
class SOAP_CMAC ns1__QueryNetworkHintRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >device;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_ns1__QueryNetworkHintRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryNetworkHintRequestType() { ns1__QueryNetworkHintRequestType::soap_default(NULL); }
	virtual ~ns1__QueryNetworkHintRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddVirtualNicRequestType
#define SOAP_TYPE_ns1__AddVirtualNicRequestType (465)
/* ns1:AddVirtualNicRequestType */
class SOAP_CMAC ns1__AddVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string portgroup;	/* required element of type xsd:string */
	class ns1__HostVirtualNicSpec *nic;	/* required element of type ns1:HostVirtualNicSpec */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_ns1__AddVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddVirtualNicRequestType() { ns1__AddVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__AddVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveVirtualNicRequestType
#define SOAP_TYPE_ns1__RemoveVirtualNicRequestType (466)
/* ns1:RemoveVirtualNicRequestType */
class SOAP_CMAC ns1__RemoveVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_ns1__RemoveVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveVirtualNicRequestType() { ns1__RemoveVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVirtualNicRequestType
#define SOAP_TYPE_ns1__UpdateVirtualNicRequestType (467)
/* ns1:UpdateVirtualNicRequestType */
class SOAP_CMAC ns1__UpdateVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
	ns1__HostVirtualNicSpec *nic;	/* required element of type ns1:HostVirtualNicSpec */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_ns1__UpdateVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVirtualNicRequestType() { ns1__UpdateVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddServiceConsoleVirtualNicRequestType
#define SOAP_TYPE_ns1__AddServiceConsoleVirtualNicRequestType (468)
/* ns1:AddServiceConsoleVirtualNicRequestType */
class SOAP_CMAC ns1__AddServiceConsoleVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string portgroup;	/* required element of type xsd:string */
	ns1__HostVirtualNicSpec *nic;	/* required element of type ns1:HostVirtualNicSpec */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_ns1__AddServiceConsoleVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddServiceConsoleVirtualNicRequestType() { ns1__AddServiceConsoleVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__AddServiceConsoleVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveServiceConsoleVirtualNicRequestType
#define SOAP_TYPE_ns1__RemoveServiceConsoleVirtualNicRequestType (469)
/* ns1:RemoveServiceConsoleVirtualNicRequestType */
class SOAP_CMAC ns1__RemoveServiceConsoleVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_ns1__RemoveServiceConsoleVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveServiceConsoleVirtualNicRequestType() { ns1__RemoveServiceConsoleVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveServiceConsoleVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateServiceConsoleVirtualNicRequestType
#define SOAP_TYPE_ns1__UpdateServiceConsoleVirtualNicRequestType (470)
/* ns1:UpdateServiceConsoleVirtualNicRequestType */
class SOAP_CMAC ns1__UpdateServiceConsoleVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
	ns1__HostVirtualNicSpec *nic;	/* required element of type ns1:HostVirtualNicSpec */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_ns1__UpdateServiceConsoleVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateServiceConsoleVirtualNicRequestType() { ns1__UpdateServiceConsoleVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateServiceConsoleVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RestartServiceConsoleVirtualNicRequestType
#define SOAP_TYPE_ns1__RestartServiceConsoleVirtualNicRequestType (471)
/* ns1:RestartServiceConsoleVirtualNicRequestType */
class SOAP_CMAC ns1__RestartServiceConsoleVirtualNicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_ns1__RestartServiceConsoleVirtualNicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RestartServiceConsoleVirtualNicRequestType() { ns1__RestartServiceConsoleVirtualNicRequestType::soap_default(NULL); }
	virtual ~ns1__RestartServiceConsoleVirtualNicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshNetworkSystemRequestType
#define SOAP_TYPE_ns1__RefreshNetworkSystemRequestType (472)
/* ns1:RefreshNetworkSystemRequestType */
class SOAP_CMAC ns1__RefreshNetworkSystemRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_ns1__RefreshNetworkSystemRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshNetworkSystemRequestType() { ns1__RefreshNetworkSystemRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshNetworkSystemRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckHostPatchRequestType
#define SOAP_TYPE_ns1__CheckHostPatchRequestType (473)
/* ns1:CheckHostPatchRequestType */
class SOAP_CMAC ns1__CheckHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >metaUrls;	/* optional element of type xsd:string */
	std::vector<std::string >bundleUrls;	/* optional element of type xsd:string */
	class ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_ns1__CheckHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckHostPatchRequestType() { ns1__CheckHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__CheckHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScanHostPatchRequestType
#define SOAP_TYPE_ns1__ScanHostPatchRequestType (474)
/* ns1:ScanHostPatchRequestType */
class SOAP_CMAC ns1__ScanHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostPatchManagerLocator *repository;	/* required element of type ns1:HostPatchManagerLocator */
	std::vector<std::string >updateID;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_ns1__ScanHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScanHostPatchRequestType() { ns1__ScanHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__ScanHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScanHostPatchV2RequestType
#define SOAP_TYPE_ns1__ScanHostPatchV2RequestType (475)
/* ns1:ScanHostPatchV2RequestType */
class SOAP_CMAC ns1__ScanHostPatchV2RequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >metaUrls;	/* optional element of type xsd:string */
	std::vector<std::string >bundleUrls;	/* optional element of type xsd:string */
	ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_ns1__ScanHostPatchV2RequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScanHostPatchV2RequestType() { ns1__ScanHostPatchV2RequestType::soap_default(NULL); }
	virtual ~ns1__ScanHostPatchV2RequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StageHostPatchRequestType
#define SOAP_TYPE_ns1__StageHostPatchRequestType (476)
/* ns1:StageHostPatchRequestType */
class SOAP_CMAC ns1__StageHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >metaUrls;	/* optional element of type xsd:string */
	std::vector<std::string >bundleUrls;	/* optional element of type xsd:string */
	std::vector<std::string >vibUrls;	/* optional element of type xsd:string */
	ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_ns1__StageHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StageHostPatchRequestType() { ns1__StageHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__StageHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InstallHostPatchRequestType
#define SOAP_TYPE_ns1__InstallHostPatchRequestType (477)
/* ns1:InstallHostPatchRequestType */
class SOAP_CMAC ns1__InstallHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostPatchManagerLocator *repository;	/* required element of type ns1:HostPatchManagerLocator */
	std::string updateID;	/* required element of type xsd:string */
	bool *force;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_ns1__InstallHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InstallHostPatchRequestType() { ns1__InstallHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__InstallHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InstallHostPatchV2RequestType
#define SOAP_TYPE_ns1__InstallHostPatchV2RequestType (478)
/* ns1:InstallHostPatchV2RequestType */
class SOAP_CMAC ns1__InstallHostPatchV2RequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >metaUrls;	/* optional element of type xsd:string */
	std::vector<std::string >bundleUrls;	/* optional element of type xsd:string */
	std::vector<std::string >vibUrls;	/* optional element of type xsd:string */
	ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_ns1__InstallHostPatchV2RequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InstallHostPatchV2RequestType() { ns1__InstallHostPatchV2RequestType::soap_default(NULL); }
	virtual ~ns1__InstallHostPatchV2RequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UninstallHostPatchRequestType
#define SOAP_TYPE_ns1__UninstallHostPatchRequestType (479)
/* ns1:UninstallHostPatchRequestType */
class SOAP_CMAC ns1__UninstallHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >bulletinIds;	/* optional element of type xsd:string */
	ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_ns1__UninstallHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UninstallHostPatchRequestType() { ns1__UninstallHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__UninstallHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryHostPatchRequestType
#define SOAP_TYPE_ns1__QueryHostPatchRequestType (480)
/* ns1:QueryHostPatchRequestType */
class SOAP_CMAC ns1__QueryHostPatchRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostPatchManagerPatchManagerOperationSpec *spec;	/* optional element of type ns1:HostPatchManagerPatchManagerOperationSpec */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_ns1__QueryHostPatchRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryHostPatchRequestType() { ns1__QueryHostPatchRequestType::soap_default(NULL); }
	virtual ~ns1__QueryHostPatchRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshRequestType
#define SOAP_TYPE_ns1__RefreshRequestType (481)
/* ns1:RefreshRequestType */
class SOAP_CMAC ns1__RefreshRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_ns1__RefreshRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshRequestType() { ns1__RefreshRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdatePassthruConfigRequestType
#define SOAP_TYPE_ns1__UpdatePassthruConfigRequestType (482)
/* ns1:UpdatePassthruConfigRequestType */
class SOAP_CMAC ns1__UpdatePassthruConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__HostPciPassthruConfig * >config;	/* required element of type ns1:HostPciPassthruConfig */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_ns1__UpdatePassthruConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdatePassthruConfigRequestType() { ns1__UpdatePassthruConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdatePassthruConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigurePowerPolicyRequestType
#define SOAP_TYPE_ns1__ConfigurePowerPolicyRequestType (483)
/* ns1:ConfigurePowerPolicyRequestType */
class SOAP_CMAC ns1__ConfigurePowerPolicyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	int key;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_ns1__ConfigurePowerPolicyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigurePowerPolicyRequestType() { ns1__ConfigurePowerPolicyRequestType::soap_default(NULL); }
	virtual ~ns1__ConfigurePowerPolicyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateServicePolicyRequestType
#define SOAP_TYPE_ns1__UpdateServicePolicyRequestType (484)
/* ns1:UpdateServicePolicyRequestType */
class SOAP_CMAC ns1__UpdateServicePolicyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
	std::string policy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_ns1__UpdateServicePolicyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateServicePolicyRequestType() { ns1__UpdateServicePolicyRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateServicePolicyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StartServiceRequestType
#define SOAP_TYPE_ns1__StartServiceRequestType (485)
/* ns1:StartServiceRequestType */
class SOAP_CMAC ns1__StartServiceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_ns1__StartServiceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StartServiceRequestType() { ns1__StartServiceRequestType::soap_default(NULL); }
	virtual ~ns1__StartServiceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StopServiceRequestType
#define SOAP_TYPE_ns1__StopServiceRequestType (486)
/* ns1:StopServiceRequestType */
class SOAP_CMAC ns1__StopServiceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_ns1__StopServiceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StopServiceRequestType() { ns1__StopServiceRequestType::soap_default(NULL); }
	virtual ~ns1__StopServiceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RestartServiceRequestType
#define SOAP_TYPE_ns1__RestartServiceRequestType (487)
/* ns1:RestartServiceRequestType */
class SOAP_CMAC ns1__RestartServiceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_ns1__RestartServiceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RestartServiceRequestType() { ns1__RestartServiceRequestType::soap_default(NULL); }
	virtual ~ns1__RestartServiceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UninstallServiceRequestType
#define SOAP_TYPE_ns1__UninstallServiceRequestType (488)
/* ns1:UninstallServiceRequestType */
class SOAP_CMAC ns1__UninstallServiceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_ns1__UninstallServiceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UninstallServiceRequestType() { ns1__UninstallServiceRequestType::soap_default(NULL); }
	virtual ~ns1__UninstallServiceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshServicesRequestType
#define SOAP_TYPE_ns1__RefreshServicesRequestType (489)
/* ns1:RefreshServicesRequestType */
class SOAP_CMAC ns1__RefreshServicesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_ns1__RefreshServicesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshServicesRequestType() { ns1__RefreshServicesRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshServicesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureSnmpAgentRequestType
#define SOAP_TYPE_ns1__ReconfigureSnmpAgentRequestType (490)
/* ns1:ReconfigureSnmpAgentRequestType */
class SOAP_CMAC ns1__ReconfigureSnmpAgentRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostSnmpConfigSpec *spec;	/* required element of type ns1:HostSnmpConfigSpec */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_ns1__ReconfigureSnmpAgentRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureSnmpAgentRequestType() { ns1__ReconfigureSnmpAgentRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureSnmpAgentRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SendTestNotificationRequestType
#define SOAP_TYPE_ns1__SendTestNotificationRequestType (491)
/* ns1:SendTestNotificationRequestType */
class SOAP_CMAC ns1__SendTestNotificationRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_ns1__SendTestNotificationRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SendTestNotificationRequestType() { ns1__SendTestNotificationRequestType::soap_default(NULL); }
	virtual ~ns1__SendTestNotificationRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveDiskPartitionInfoRequestType
#define SOAP_TYPE_ns1__RetrieveDiskPartitionInfoRequestType (492)
/* ns1:RetrieveDiskPartitionInfoRequestType */
class SOAP_CMAC ns1__RetrieveDiskPartitionInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >devicePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_ns1__RetrieveDiskPartitionInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveDiskPartitionInfoRequestType() { ns1__RetrieveDiskPartitionInfoRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveDiskPartitionInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeDiskPartitionInfoRequestType
#define SOAP_TYPE_ns1__ComputeDiskPartitionInfoRequestType (493)
/* ns1:ComputeDiskPartitionInfoRequestType */
class SOAP_CMAC ns1__ComputeDiskPartitionInfoRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string devicePath;	/* required element of type xsd:string */
	class ns1__HostDiskPartitionLayout *layout;	/* required element of type ns1:HostDiskPartitionLayout */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_ns1__ComputeDiskPartitionInfoRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeDiskPartitionInfoRequestType() { ns1__ComputeDiskPartitionInfoRequestType::soap_default(NULL); }
	virtual ~ns1__ComputeDiskPartitionInfoRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeDiskPartitionInfoForResizeRequestType
#define SOAP_TYPE_ns1__ComputeDiskPartitionInfoForResizeRequestType (494)
/* ns1:ComputeDiskPartitionInfoForResizeRequestType */
class SOAP_CMAC ns1__ComputeDiskPartitionInfoForResizeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostScsiDiskPartition *partition;	/* required element of type ns1:HostScsiDiskPartition */
	class ns1__HostDiskPartitionBlockRange *blockRange;	/* required element of type ns1:HostDiskPartitionBlockRange */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_ns1__ComputeDiskPartitionInfoForResizeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeDiskPartitionInfoForResizeRequestType() { ns1__ComputeDiskPartitionInfoForResizeRequestType::soap_default(NULL); }
	virtual ~ns1__ComputeDiskPartitionInfoForResizeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateDiskPartitionsRequestType
#define SOAP_TYPE_ns1__UpdateDiskPartitionsRequestType (495)
/* ns1:UpdateDiskPartitionsRequestType */
class SOAP_CMAC ns1__UpdateDiskPartitionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string devicePath;	/* required element of type xsd:string */
	class ns1__HostDiskPartitionSpec *spec;	/* required element of type ns1:HostDiskPartitionSpec */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_ns1__UpdateDiskPartitionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateDiskPartitionsRequestType() { ns1__UpdateDiskPartitionsRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateDiskPartitionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FormatVmfsRequestType
#define SOAP_TYPE_ns1__FormatVmfsRequestType (496)
/* ns1:FormatVmfsRequestType */
class SOAP_CMAC ns1__FormatVmfsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostVmfsSpec *createSpec;	/* required element of type ns1:HostVmfsSpec */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_ns1__FormatVmfsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FormatVmfsRequestType() { ns1__FormatVmfsRequestType::soap_default(NULL); }
	virtual ~ns1__FormatVmfsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RescanVmfsRequestType
#define SOAP_TYPE_ns1__RescanVmfsRequestType (497)
/* ns1:RescanVmfsRequestType */
class SOAP_CMAC ns1__RescanVmfsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_ns1__RescanVmfsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RescanVmfsRequestType() { ns1__RescanVmfsRequestType::soap_default(NULL); }
	virtual ~ns1__RescanVmfsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AttachVmfsExtentRequestType
#define SOAP_TYPE_ns1__AttachVmfsExtentRequestType (498)
/* ns1:AttachVmfsExtentRequestType */
class SOAP_CMAC ns1__AttachVmfsExtentRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vmfsPath;	/* required element of type xsd:string */
	ns1__HostScsiDiskPartition *extent;	/* required element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_ns1__AttachVmfsExtentRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AttachVmfsExtentRequestType() { ns1__AttachVmfsExtentRequestType::soap_default(NULL); }
	virtual ~ns1__AttachVmfsExtentRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExpandVmfsExtentRequestType
#define SOAP_TYPE_ns1__ExpandVmfsExtentRequestType (499)
/* ns1:ExpandVmfsExtentRequestType */
class SOAP_CMAC ns1__ExpandVmfsExtentRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vmfsPath;	/* required element of type xsd:string */
	ns1__HostScsiDiskPartition *extent;	/* required element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_ns1__ExpandVmfsExtentRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExpandVmfsExtentRequestType() { ns1__ExpandVmfsExtentRequestType::soap_default(NULL); }
	virtual ~ns1__ExpandVmfsExtentRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradeVmfsRequestType
#define SOAP_TYPE_ns1__UpgradeVmfsRequestType (500)
/* ns1:UpgradeVmfsRequestType */
class SOAP_CMAC ns1__UpgradeVmfsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vmfsPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_ns1__UpgradeVmfsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradeVmfsRequestType() { ns1__UpgradeVmfsRequestType::soap_default(NULL); }
	virtual ~ns1__UpgradeVmfsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradeVmLayoutRequestType
#define SOAP_TYPE_ns1__UpgradeVmLayoutRequestType (501)
/* ns1:UpgradeVmLayoutRequestType */
class SOAP_CMAC ns1__UpgradeVmLayoutRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_ns1__UpgradeVmLayoutRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradeVmLayoutRequestType() { ns1__UpgradeVmLayoutRequestType::soap_default(NULL); }
	virtual ~ns1__UpgradeVmLayoutRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumeRequestType
#define SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumeRequestType (502)
/* ns1:QueryUnresolvedVmfsVolumeRequestType */
class SOAP_CMAC ns1__QueryUnresolvedVmfsVolumeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_ns1__QueryUnresolvedVmfsVolumeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryUnresolvedVmfsVolumeRequestType() { ns1__QueryUnresolvedVmfsVolumeRequestType::soap_default(NULL); }
	virtual ~ns1__QueryUnresolvedVmfsVolumeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType
#define SOAP_TYPE_ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType (503)
/* ns1:ResolveMultipleUnresolvedVmfsVolumesRequestType */
class SOAP_CMAC ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__HostUnresolvedVmfsResolutionSpec * >resolutionSpec;	/* required element of type ns1:HostUnresolvedVmfsResolutionSpec */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType() { ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType::soap_default(NULL); }
	virtual ~ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnmountForceMountedVmfsVolumeRequestType
#define SOAP_TYPE_ns1__UnmountForceMountedVmfsVolumeRequestType (504)
/* ns1:UnmountForceMountedVmfsVolumeRequestType */
class SOAP_CMAC ns1__UnmountForceMountedVmfsVolumeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string vmfsUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_ns1__UnmountForceMountedVmfsVolumeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnmountForceMountedVmfsVolumeRequestType() { ns1__UnmountForceMountedVmfsVolumeRequestType::soap_default(NULL); }
	virtual ~ns1__UnmountForceMountedVmfsVolumeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RescanHbaRequestType
#define SOAP_TYPE_ns1__RescanHbaRequestType (505)
/* ns1:RescanHbaRequestType */
class SOAP_CMAC ns1__RescanHbaRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string hbaDevice;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_ns1__RescanHbaRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RescanHbaRequestType() { ns1__RescanHbaRequestType::soap_default(NULL); }
	virtual ~ns1__RescanHbaRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RescanAllHbaRequestType
#define SOAP_TYPE_ns1__RescanAllHbaRequestType (506)
/* ns1:RescanAllHbaRequestType */
class SOAP_CMAC ns1__RescanAllHbaRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_ns1__RescanAllHbaRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RescanAllHbaRequestType() { ns1__RescanAllHbaRequestType::soap_default(NULL); }
	virtual ~ns1__RescanAllHbaRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateSoftwareInternetScsiEnabledRequestType
#define SOAP_TYPE_ns1__UpdateSoftwareInternetScsiEnabledRequestType (507)
/* ns1:UpdateSoftwareInternetScsiEnabledRequestType */
class SOAP_CMAC ns1__UpdateSoftwareInternetScsiEnabledRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_ns1__UpdateSoftwareInternetScsiEnabledRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateSoftwareInternetScsiEnabledRequestType() { ns1__UpdateSoftwareInternetScsiEnabledRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateSoftwareInternetScsiEnabledRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiDiscoveryPropertiesRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiDiscoveryPropertiesRequestType (508)
/* ns1:UpdateInternetScsiDiscoveryPropertiesRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiDiscoveryPropertiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	class ns1__HostInternetScsiHbaDiscoveryProperties *discoveryProperties;	/* required element of type ns1:HostInternetScsiHbaDiscoveryProperties */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiDiscoveryPropertiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiDiscoveryPropertiesRequestType() { ns1__UpdateInternetScsiDiscoveryPropertiesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiDiscoveryPropertiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiAuthenticationPropertiesRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiAuthenticationPropertiesRequestType (509)
/* ns1:UpdateInternetScsiAuthenticationPropertiesRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiAuthenticationPropertiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	class ns1__HostInternetScsiHbaAuthenticationProperties *authenticationProperties;	/* required element of type ns1:HostInternetScsiHbaAuthenticationProperties */
	class ns1__HostInternetScsiHbaTargetSet *targetSet;	/* optional element of type ns1:HostInternetScsiHbaTargetSet */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiAuthenticationPropertiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiAuthenticationPropertiesRequestType() { ns1__UpdateInternetScsiAuthenticationPropertiesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiAuthenticationPropertiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiDigestPropertiesRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiDigestPropertiesRequestType (510)
/* ns1:UpdateInternetScsiDigestPropertiesRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiDigestPropertiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	ns1__HostInternetScsiHbaTargetSet *targetSet;	/* optional element of type ns1:HostInternetScsiHbaTargetSet */
	class ns1__HostInternetScsiHbaDigestProperties *digestProperties;	/* required element of type ns1:HostInternetScsiHbaDigestProperties */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiDigestPropertiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiDigestPropertiesRequestType() { ns1__UpdateInternetScsiDigestPropertiesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiDigestPropertiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiAdvancedOptionsRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiAdvancedOptionsRequestType (511)
/* ns1:UpdateInternetScsiAdvancedOptionsRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiAdvancedOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	ns1__HostInternetScsiHbaTargetSet *targetSet;	/* optional element of type ns1:HostInternetScsiHbaTargetSet */
	std::vector<class ns1__HostInternetScsiHbaParamValue * >options;	/* required element of type ns1:HostInternetScsiHbaParamValue */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiAdvancedOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiAdvancedOptionsRequestType() { ns1__UpdateInternetScsiAdvancedOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiAdvancedOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiIPPropertiesRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiIPPropertiesRequestType (512)
/* ns1:UpdateInternetScsiIPPropertiesRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiIPPropertiesRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	class ns1__HostInternetScsiHbaIPProperties *ipProperties;	/* required element of type ns1:HostInternetScsiHbaIPProperties */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiIPPropertiesRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiIPPropertiesRequestType() { ns1__UpdateInternetScsiIPPropertiesRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiIPPropertiesRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiNameRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiNameRequestType (513)
/* ns1:UpdateInternetScsiNameRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiNameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::string iScsiName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiNameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiNameRequestType() { ns1__UpdateInternetScsiNameRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiNameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateInternetScsiAliasRequestType
#define SOAP_TYPE_ns1__UpdateInternetScsiAliasRequestType (514)
/* ns1:UpdateInternetScsiAliasRequestType */
class SOAP_CMAC ns1__UpdateInternetScsiAliasRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::string iScsiAlias;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_ns1__UpdateInternetScsiAliasRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateInternetScsiAliasRequestType() { ns1__UpdateInternetScsiAliasRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateInternetScsiAliasRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddInternetScsiSendTargetsRequestType
#define SOAP_TYPE_ns1__AddInternetScsiSendTargetsRequestType (515)
/* ns1:AddInternetScsiSendTargetsRequestType */
class SOAP_CMAC ns1__AddInternetScsiSendTargetsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::vector<class ns1__HostInternetScsiHbaSendTarget * >targets;	/* required element of type ns1:HostInternetScsiHbaSendTarget */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_ns1__AddInternetScsiSendTargetsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddInternetScsiSendTargetsRequestType() { ns1__AddInternetScsiSendTargetsRequestType::soap_default(NULL); }
	virtual ~ns1__AddInternetScsiSendTargetsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveInternetScsiSendTargetsRequestType
#define SOAP_TYPE_ns1__RemoveInternetScsiSendTargetsRequestType (516)
/* ns1:RemoveInternetScsiSendTargetsRequestType */
class SOAP_CMAC ns1__RemoveInternetScsiSendTargetsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::vector<ns1__HostInternetScsiHbaSendTarget * >targets;	/* required element of type ns1:HostInternetScsiHbaSendTarget */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_ns1__RemoveInternetScsiSendTargetsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveInternetScsiSendTargetsRequestType() { ns1__RemoveInternetScsiSendTargetsRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveInternetScsiSendTargetsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddInternetScsiStaticTargetsRequestType
#define SOAP_TYPE_ns1__AddInternetScsiStaticTargetsRequestType (517)
/* ns1:AddInternetScsiStaticTargetsRequestType */
class SOAP_CMAC ns1__AddInternetScsiStaticTargetsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::vector<class ns1__HostInternetScsiHbaStaticTarget * >targets;	/* required element of type ns1:HostInternetScsiHbaStaticTarget */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_ns1__AddInternetScsiStaticTargetsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddInternetScsiStaticTargetsRequestType() { ns1__AddInternetScsiStaticTargetsRequestType::soap_default(NULL); }
	virtual ~ns1__AddInternetScsiStaticTargetsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveInternetScsiStaticTargetsRequestType
#define SOAP_TYPE_ns1__RemoveInternetScsiStaticTargetsRequestType (518)
/* ns1:RemoveInternetScsiStaticTargetsRequestType */
class SOAP_CMAC ns1__RemoveInternetScsiStaticTargetsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string iScsiHbaDevice;	/* required element of type xsd:string */
	std::vector<ns1__HostInternetScsiHbaStaticTarget * >targets;	/* required element of type ns1:HostInternetScsiHbaStaticTarget */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_ns1__RemoveInternetScsiStaticTargetsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveInternetScsiStaticTargetsRequestType() { ns1__RemoveInternetScsiStaticTargetsRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveInternetScsiStaticTargetsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnableMultipathPathRequestType
#define SOAP_TYPE_ns1__EnableMultipathPathRequestType (519)
/* ns1:EnableMultipathPathRequestType */
class SOAP_CMAC ns1__EnableMultipathPathRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string pathName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_ns1__EnableMultipathPathRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnableMultipathPathRequestType() { ns1__EnableMultipathPathRequestType::soap_default(NULL); }
	virtual ~ns1__EnableMultipathPathRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableMultipathPathRequestType
#define SOAP_TYPE_ns1__DisableMultipathPathRequestType (520)
/* ns1:DisableMultipathPathRequestType */
class SOAP_CMAC ns1__DisableMultipathPathRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string pathName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_ns1__DisableMultipathPathRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableMultipathPathRequestType() { ns1__DisableMultipathPathRequestType::soap_default(NULL); }
	virtual ~ns1__DisableMultipathPathRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetMultipathLunPolicyRequestType
#define SOAP_TYPE_ns1__SetMultipathLunPolicyRequestType (521)
/* ns1:SetMultipathLunPolicyRequestType */
class SOAP_CMAC ns1__SetMultipathLunPolicyRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string lunId;	/* required element of type xsd:string */
	class ns1__HostMultipathInfoLogicalUnitPolicy *policy;	/* required element of type ns1:HostMultipathInfoLogicalUnitPolicy */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_ns1__SetMultipathLunPolicyRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetMultipathLunPolicyRequestType() { ns1__SetMultipathLunPolicyRequestType::soap_default(NULL); }
	virtual ~ns1__SetMultipathLunPolicyRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPathSelectionPolicyOptionsRequestType
#define SOAP_TYPE_ns1__QueryPathSelectionPolicyOptionsRequestType (522)
/* ns1:QueryPathSelectionPolicyOptionsRequestType */
class SOAP_CMAC ns1__QueryPathSelectionPolicyOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_ns1__QueryPathSelectionPolicyOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPathSelectionPolicyOptionsRequestType() { ns1__QueryPathSelectionPolicyOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPathSelectionPolicyOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryStorageArrayTypePolicyOptionsRequestType
#define SOAP_TYPE_ns1__QueryStorageArrayTypePolicyOptionsRequestType (523)
/* ns1:QueryStorageArrayTypePolicyOptionsRequestType */
class SOAP_CMAC ns1__QueryStorageArrayTypePolicyOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_ns1__QueryStorageArrayTypePolicyOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryStorageArrayTypePolicyOptionsRequestType() { ns1__QueryStorageArrayTypePolicyOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryStorageArrayTypePolicyOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateScsiLunDisplayNameRequestType
#define SOAP_TYPE_ns1__UpdateScsiLunDisplayNameRequestType (524)
/* ns1:UpdateScsiLunDisplayNameRequestType */
class SOAP_CMAC ns1__UpdateScsiLunDisplayNameRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string lunUuid;	/* required element of type xsd:string */
	std::string displayName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_ns1__UpdateScsiLunDisplayNameRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateScsiLunDisplayNameRequestType() { ns1__UpdateScsiLunDisplayNameRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateScsiLunDisplayNameRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RefreshStorageSystemRequestType
#define SOAP_TYPE_ns1__RefreshStorageSystemRequestType (525)
/* ns1:RefreshStorageSystemRequestType */
class SOAP_CMAC ns1__RefreshStorageSystemRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_ns1__RefreshStorageSystemRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RefreshStorageSystemRequestType() { ns1__RefreshStorageSystemRequestType::soap_default(NULL); }
	virtual ~ns1__RefreshStorageSystemRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateIpConfigRequestType
#define SOAP_TYPE_ns1__UpdateIpConfigRequestType (526)
/* ns1:UpdateIpConfigRequestType */
class SOAP_CMAC ns1__UpdateIpConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostIpConfig *ipConfig;	/* required element of type ns1:HostIpConfig */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_ns1__UpdateIpConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateIpConfigRequestType() { ns1__UpdateIpConfigRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateIpConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SelectVnicRequestType
#define SOAP_TYPE_ns1__SelectVnicRequestType (527)
/* ns1:SelectVnicRequestType */
class SOAP_CMAC ns1__SelectVnicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_ns1__SelectVnicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SelectVnicRequestType() { ns1__SelectVnicRequestType::soap_default(NULL); }
	virtual ~ns1__SelectVnicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeselectVnicRequestType
#define SOAP_TYPE_ns1__DeselectVnicRequestType (528)
/* ns1:DeselectVnicRequestType */
class SOAP_CMAC ns1__DeselectVnicRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_ns1__DeselectVnicRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeselectVnicRequestType() { ns1__DeselectVnicRequestType::soap_default(NULL); }
	virtual ~ns1__DeselectVnicRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryNetConfigRequestType
#define SOAP_TYPE_ns1__QueryNetConfigRequestType (529)
/* ns1:QueryNetConfigRequestType */
class SOAP_CMAC ns1__QueryNetConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string nicType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_ns1__QueryNetConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryNetConfigRequestType() { ns1__QueryNetConfigRequestType::soap_default(NULL); }
	virtual ~ns1__QueryNetConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SelectVnicForNicTypeRequestType
#define SOAP_TYPE_ns1__SelectVnicForNicTypeRequestType (530)
/* ns1:SelectVnicForNicTypeRequestType */
class SOAP_CMAC ns1__SelectVnicForNicTypeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string nicType;	/* required element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_ns1__SelectVnicForNicTypeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SelectVnicForNicTypeRequestType() { ns1__SelectVnicForNicTypeRequestType::soap_default(NULL); }
	virtual ~ns1__SelectVnicForNicTypeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeselectVnicForNicTypeRequestType
#define SOAP_TYPE_ns1__DeselectVnicForNicTypeRequestType (531)
/* ns1:DeselectVnicForNicTypeRequestType */
class SOAP_CMAC ns1__DeselectVnicForNicTypeRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string nicType;	/* required element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_ns1__DeselectVnicForNicTypeRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeselectVnicForNicTypeRequestType() { ns1__DeselectVnicForNicTypeRequestType::soap_default(NULL); }
	virtual ~ns1__DeselectVnicForNicTypeRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryOptionsRequestType
#define SOAP_TYPE_ns1__QueryOptionsRequestType (532)
/* ns1:QueryOptionsRequestType */
class SOAP_CMAC ns1__QueryOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_ns1__QueryOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryOptionsRequestType() { ns1__QueryOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__QueryOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateOptionsRequestType
#define SOAP_TYPE_ns1__UpdateOptionsRequestType (533)
/* ns1:UpdateOptionsRequestType */
class SOAP_CMAC ns1__UpdateOptionsRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__OptionValue * >changedValue;	/* required element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_ns1__UpdateOptionsRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateOptionsRequestType() { ns1__UpdateOptionsRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateOptionsRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckComplianceRequestType
#define SOAP_TYPE_ns1__CheckComplianceRequestType (534)
/* ns1:CheckComplianceRequestType */
class SOAP_CMAC ns1__CheckComplianceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >profile;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_ns1__CheckComplianceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckComplianceRequestType() { ns1__CheckComplianceRequestType::soap_default(NULL); }
	virtual ~ns1__CheckComplianceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryComplianceStatusRequestType
#define SOAP_TYPE_ns1__QueryComplianceStatusRequestType (535)
/* ns1:QueryComplianceStatusRequestType */
class SOAP_CMAC ns1__QueryComplianceStatusRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >profile;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_ns1__QueryComplianceStatusRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryComplianceStatusRequestType() { ns1__QueryComplianceStatusRequestType::soap_default(NULL); }
	virtual ~ns1__QueryComplianceStatusRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClearComplianceStatusRequestType
#define SOAP_TYPE_ns1__ClearComplianceStatusRequestType (536)
/* ns1:ClearComplianceStatusRequestType */
class SOAP_CMAC ns1__ClearComplianceStatusRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >profile;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_ns1__ClearComplianceStatusRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClearComplianceStatusRequestType() { ns1__ClearComplianceStatusRequestType::soap_default(NULL); }
	virtual ~ns1__ClearComplianceStatusRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryExpressionMetadataRequestType
#define SOAP_TYPE_ns1__QueryExpressionMetadataRequestType (537)
/* ns1:QueryExpressionMetadataRequestType */
class SOAP_CMAC ns1__QueryExpressionMetadataRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >expressionName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_ns1__QueryExpressionMetadataRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryExpressionMetadataRequestType() { ns1__QueryExpressionMetadataRequestType::soap_default(NULL); }
	virtual ~ns1__QueryExpressionMetadataRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyProfileRequestType
#define SOAP_TYPE_ns1__DestroyProfileRequestType (538)
/* ns1:DestroyProfileRequestType */
class SOAP_CMAC ns1__DestroyProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_ns1__DestroyProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyProfileRequestType() { ns1__DestroyProfileRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AssociateProfileRequestType
#define SOAP_TYPE_ns1__AssociateProfileRequestType (539)
/* ns1:AssociateProfileRequestType */
class SOAP_CMAC ns1__AssociateProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_ns1__AssociateProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AssociateProfileRequestType() { ns1__AssociateProfileRequestType::soap_default(NULL); }
	virtual ~ns1__AssociateProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DissociateProfileRequestType
#define SOAP_TYPE_ns1__DissociateProfileRequestType (540)
/* ns1:DissociateProfileRequestType */
class SOAP_CMAC ns1__DissociateProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_ns1__DissociateProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DissociateProfileRequestType() { ns1__DissociateProfileRequestType::soap_default(NULL); }
	virtual ~ns1__DissociateProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckProfileComplianceRequestType
#define SOAP_TYPE_ns1__CheckProfileComplianceRequestType (541)
/* ns1:CheckProfileComplianceRequestType */
class SOAP_CMAC ns1__CheckProfileComplianceRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_ns1__CheckProfileComplianceRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckProfileComplianceRequestType() { ns1__CheckProfileComplianceRequestType::soap_default(NULL); }
	virtual ~ns1__CheckProfileComplianceRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExportProfileRequestType
#define SOAP_TYPE_ns1__ExportProfileRequestType (542)
/* ns1:ExportProfileRequestType */
class SOAP_CMAC ns1__ExportProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_ns1__ExportProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExportProfileRequestType() { ns1__ExportProfileRequestType::soap_default(NULL); }
	virtual ~ns1__ExportProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateProfileRequestType
#define SOAP_TYPE_ns1__CreateProfileRequestType (543)
/* ns1:CreateProfileRequestType */
class SOAP_CMAC ns1__CreateProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ProfileCreateSpec *createSpec;	/* required element of type ns1:ProfileCreateSpec */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_ns1__CreateProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateProfileRequestType() { ns1__CreateProfileRequestType::soap_default(NULL); }
	virtual ~ns1__CreateProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryPolicyMetadataRequestType
#define SOAP_TYPE_ns1__QueryPolicyMetadataRequestType (544)
/* ns1:QueryPolicyMetadataRequestType */
class SOAP_CMAC ns1__QueryPolicyMetadataRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >policyName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_ns1__QueryPolicyMetadataRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryPolicyMetadataRequestType() { ns1__QueryPolicyMetadataRequestType::soap_default(NULL); }
	virtual ~ns1__QueryPolicyMetadataRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FindAssociatedProfileRequestType
#define SOAP_TYPE_ns1__FindAssociatedProfileRequestType (545)
/* ns1:FindAssociatedProfileRequestType */
class SOAP_CMAC ns1__FindAssociatedProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_ns1__FindAssociatedProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FindAssociatedProfileRequestType() { ns1__FindAssociatedProfileRequestType::soap_default(NULL); }
	virtual ~ns1__FindAssociatedProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateClusterProfileRequestType
#define SOAP_TYPE_ns1__UpdateClusterProfileRequestType (546)
/* ns1:UpdateClusterProfileRequestType */
class SOAP_CMAC ns1__UpdateClusterProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ClusterProfileConfigSpec *config;	/* required element of type ns1:ClusterProfileConfigSpec */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_ns1__UpdateClusterProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateClusterProfileRequestType() { ns1__UpdateClusterProfileRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateClusterProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateReferenceHostRequestType
#define SOAP_TYPE_ns1__UpdateReferenceHostRequestType (547)
/* ns1:UpdateReferenceHostRequestType */
class SOAP_CMAC ns1__UpdateReferenceHostRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_ns1__UpdateReferenceHostRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateReferenceHostRequestType() { ns1__UpdateReferenceHostRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateReferenceHostRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateHostProfileRequestType
#define SOAP_TYPE_ns1__UpdateHostProfileRequestType (548)
/* ns1:UpdateHostProfileRequestType */
class SOAP_CMAC ns1__UpdateHostProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostProfileConfigSpec *config;	/* required element of type ns1:HostProfileConfigSpec */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_ns1__UpdateHostProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateHostProfileRequestType() { ns1__UpdateHostProfileRequestType::soap_default(NULL); }
	virtual ~ns1__UpdateHostProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExecuteHostProfileRequestType
#define SOAP_TYPE_ns1__ExecuteHostProfileRequestType (549)
/* ns1:ExecuteHostProfileRequestType */
class SOAP_CMAC ns1__ExecuteHostProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::vector<class ns1__ProfileDeferredPolicyOptionParameter * >deferredParam;	/* optional element of type ns1:ProfileDeferredPolicyOptionParameter */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_ns1__ExecuteHostProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExecuteHostProfileRequestType() { ns1__ExecuteHostProfileRequestType::soap_default(NULL); }
	virtual ~ns1__ExecuteHostProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ApplyHostConfigRequestType
#define SOAP_TYPE_ns1__ApplyHostConfigRequestType (550)
/* ns1:ApplyHostConfigRequestType */
class SOAP_CMAC ns1__ApplyHostConfigRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostConfigSpec *configSpec;	/* required element of type ns1:HostConfigSpec */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_ns1__ApplyHostConfigRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ApplyHostConfigRequestType() { ns1__ApplyHostConfigRequestType::soap_default(NULL); }
	virtual ~ns1__ApplyHostConfigRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GenerateConfigTaskListRequestType
#define SOAP_TYPE_ns1__GenerateConfigTaskListRequestType (551)
/* ns1:GenerateConfigTaskListRequestType */
class SOAP_CMAC ns1__GenerateConfigTaskListRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__HostConfigSpec *configSpec;	/* required element of type ns1:HostConfigSpec */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_ns1__GenerateConfigTaskListRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GenerateConfigTaskListRequestType() { ns1__GenerateConfigTaskListRequestType::soap_default(NULL); }
	virtual ~ns1__GenerateConfigTaskListRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryHostProfileMetadataRequestType
#define SOAP_TYPE_ns1__QueryHostProfileMetadataRequestType (552)
/* ns1:QueryHostProfileMetadataRequestType */
class SOAP_CMAC ns1__QueryHostProfileMetadataRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >profileName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_ns1__QueryHostProfileMetadataRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryHostProfileMetadataRequestType() { ns1__QueryHostProfileMetadataRequestType::soap_default(NULL); }
	virtual ~ns1__QueryHostProfileMetadataRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDefaultProfileRequestType
#define SOAP_TYPE_ns1__CreateDefaultProfileRequestType (553)
/* ns1:CreateDefaultProfileRequestType */
class SOAP_CMAC ns1__CreateDefaultProfileRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string profileType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_ns1__CreateDefaultProfileRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDefaultProfileRequestType() { ns1__CreateDefaultProfileRequestType::soap_default(NULL); }
	virtual ~ns1__CreateDefaultProfileRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveScheduledTaskRequestType
#define SOAP_TYPE_ns1__RemoveScheduledTaskRequestType (554)
/* ns1:RemoveScheduledTaskRequestType */
class SOAP_CMAC ns1__RemoveScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_ns1__RemoveScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveScheduledTaskRequestType() { ns1__RemoveScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReconfigureScheduledTaskRequestType
#define SOAP_TYPE_ns1__ReconfigureScheduledTaskRequestType (555)
/* ns1:ReconfigureScheduledTaskRequestType */
class SOAP_CMAC ns1__ReconfigureScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	class ns1__ScheduledTaskSpec *spec;	/* required element of type ns1:ScheduledTaskSpec */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_ns1__ReconfigureScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReconfigureScheduledTaskRequestType() { ns1__ReconfigureScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__ReconfigureScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RunScheduledTaskRequestType
#define SOAP_TYPE_ns1__RunScheduledTaskRequestType (556)
/* ns1:RunScheduledTaskRequestType */
class SOAP_CMAC ns1__RunScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_ns1__RunScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RunScheduledTaskRequestType() { ns1__RunScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__RunScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateScheduledTaskRequestType
#define SOAP_TYPE_ns1__CreateScheduledTaskRequestType (557)
/* ns1:CreateScheduledTaskRequestType */
class SOAP_CMAC ns1__CreateScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	ns1__ScheduledTaskSpec *spec;	/* required element of type ns1:ScheduledTaskSpec */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_ns1__CreateScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateScheduledTaskRequestType() { ns1__CreateScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__CreateScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveEntityScheduledTaskRequestType
#define SOAP_TYPE_ns1__RetrieveEntityScheduledTaskRequestType (558)
/* ns1:RetrieveEntityScheduledTaskRequestType */
class SOAP_CMAC ns1__RetrieveEntityScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_ns1__RetrieveEntityScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveEntityScheduledTaskRequestType() { ns1__RetrieveEntityScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveEntityScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateObjectScheduledTaskRequestType
#define SOAP_TYPE_ns1__CreateObjectScheduledTaskRequestType (559)
/* ns1:CreateObjectScheduledTaskRequestType */
class SOAP_CMAC ns1__CreateObjectScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	ns1__ScheduledTaskSpec *spec;	/* required element of type ns1:ScheduledTaskSpec */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_ns1__CreateObjectScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateObjectScheduledTaskRequestType() { ns1__CreateObjectScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__CreateObjectScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveObjectScheduledTaskRequestType
#define SOAP_TYPE_ns1__RetrieveObjectScheduledTaskRequestType (560)
/* ns1:RetrieveObjectScheduledTaskRequestType */
class SOAP_CMAC ns1__RetrieveObjectScheduledTaskRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *obj;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_ns1__RetrieveObjectScheduledTaskRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveObjectScheduledTaskRequestType() { ns1__RetrieveObjectScheduledTaskRequestType::soap_default(NULL); }
	virtual ~ns1__RetrieveObjectScheduledTaskRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OpenInventoryViewFolderRequestType
#define SOAP_TYPE_ns1__OpenInventoryViewFolderRequestType (561)
/* ns1:OpenInventoryViewFolderRequestType */
class SOAP_CMAC ns1__OpenInventoryViewFolderRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_ns1__OpenInventoryViewFolderRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OpenInventoryViewFolderRequestType() { ns1__OpenInventoryViewFolderRequestType::soap_default(NULL); }
	virtual ~ns1__OpenInventoryViewFolderRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CloseInventoryViewFolderRequestType
#define SOAP_TYPE_ns1__CloseInventoryViewFolderRequestType (562)
/* ns1:CloseInventoryViewFolderRequestType */
class SOAP_CMAC ns1__CloseInventoryViewFolderRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_ns1__CloseInventoryViewFolderRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CloseInventoryViewFolderRequestType() { ns1__CloseInventoryViewFolderRequestType::soap_default(NULL); }
	virtual ~ns1__CloseInventoryViewFolderRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyListViewRequestType
#define SOAP_TYPE_ns1__ModifyListViewRequestType (563)
/* ns1:ModifyListViewRequestType */
class SOAP_CMAC ns1__ModifyListViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >add;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >remove;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_ns1__ModifyListViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyListViewRequestType() { ns1__ModifyListViewRequestType::soap_default(NULL); }
	virtual ~ns1__ModifyListViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetListViewRequestType
#define SOAP_TYPE_ns1__ResetListViewRequestType (564)
/* ns1:ResetListViewRequestType */
class SOAP_CMAC ns1__ResetListViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >obj;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_ns1__ResetListViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetListViewRequestType() { ns1__ResetListViewRequestType::soap_default(NULL); }
	virtual ~ns1__ResetListViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetListViewFromViewRequestType
#define SOAP_TYPE_ns1__ResetListViewFromViewRequestType (565)
/* ns1:ResetListViewFromViewRequestType */
class SOAP_CMAC ns1__ResetListViewFromViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *view;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_ns1__ResetListViewFromViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetListViewFromViewRequestType() { ns1__ResetListViewFromViewRequestType::soap_default(NULL); }
	virtual ~ns1__ResetListViewFromViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyViewRequestType
#define SOAP_TYPE_ns1__DestroyViewRequestType (566)
/* ns1:DestroyViewRequestType */
class SOAP_CMAC ns1__DestroyViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_ns1__DestroyViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyViewRequestType() { ns1__DestroyViewRequestType::soap_default(NULL); }
	virtual ~ns1__DestroyViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateInventoryViewRequestType
#define SOAP_TYPE_ns1__CreateInventoryViewRequestType (567)
/* ns1:CreateInventoryViewRequestType */
class SOAP_CMAC ns1__CreateInventoryViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_ns1__CreateInventoryViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateInventoryViewRequestType() { ns1__CreateInventoryViewRequestType::soap_default(NULL); }
	virtual ~ns1__CreateInventoryViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateContainerViewRequestType
#define SOAP_TYPE_ns1__CreateContainerViewRequestType (568)
/* ns1:CreateContainerViewRequestType */
class SOAP_CMAC ns1__CreateContainerViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *container;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >type;	/* optional element of type xsd:string */
	bool recursive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_ns1__CreateContainerViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateContainerViewRequestType() { ns1__CreateContainerViewRequestType::soap_default(NULL); }
	virtual ~ns1__CreateContainerViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateListViewRequestType
#define SOAP_TYPE_ns1__CreateListViewRequestType (569)
/* ns1:CreateListViewRequestType */
class SOAP_CMAC ns1__CreateListViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >obj;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_ns1__CreateListViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateListViewRequestType() { ns1__CreateListViewRequestType::soap_default(NULL); }
	virtual ~ns1__CreateListViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateListViewFromViewRequestType
#define SOAP_TYPE_ns1__CreateListViewFromViewRequestType (570)
/* ns1:CreateListViewFromViewRequestType */
class SOAP_CMAC ns1__CreateListViewFromViewRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *view;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_ns1__CreateListViewFromViewRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateListViewFromViewRequestType() { ns1__CreateListViewFromViewRequestType::soap_default(NULL); }
	virtual ~ns1__CreateListViewFromViewRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RevertToSnapshotRequestType
#define SOAP_TYPE_ns1__RevertToSnapshotRequestType (571)
/* ns1:RevertToSnapshotRequestType */
class SOAP_CMAC ns1__RevertToSnapshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	bool *suppressPowerOn;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_ns1__RevertToSnapshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RevertToSnapshotRequestType() { ns1__RevertToSnapshotRequestType::soap_default(NULL); }
	virtual ~ns1__RevertToSnapshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveSnapshotRequestType
#define SOAP_TYPE_ns1__RemoveSnapshotRequestType (572)
/* ns1:RemoveSnapshotRequestType */
class SOAP_CMAC ns1__RemoveSnapshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	bool removeChildren;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_ns1__RemoveSnapshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveSnapshotRequestType() { ns1__RemoveSnapshotRequestType::soap_default(NULL); }
	virtual ~ns1__RemoveSnapshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RenameSnapshotRequestType
#define SOAP_TYPE_ns1__RenameSnapshotRequestType (573)
/* ns1:RenameSnapshotRequestType */
class SOAP_CMAC ns1__RenameSnapshotRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::string *name;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_ns1__RenameSnapshotRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RenameSnapshotRequestType() { ns1__RenameSnapshotRequestType::soap_default(NULL); }
	virtual ~ns1__RenameSnapshotRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckCompatibilityRequestType
#define SOAP_TYPE_ns1__CheckCompatibilityRequestType (574)
/* ns1:CheckCompatibilityRequestType */
class SOAP_CMAC ns1__CheckCompatibilityRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<std::string >testType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_ns1__CheckCompatibilityRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckCompatibilityRequestType() { ns1__CheckCompatibilityRequestType::soap_default(NULL); }
	virtual ~ns1__CheckCompatibilityRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryVMotionCompatibilityExRequestType
#define SOAP_TYPE_ns1__QueryVMotionCompatibilityExRequestType (575)
/* ns1:QueryVMotionCompatibilityExRequestType */
class SOAP_CMAC ns1__QueryVMotionCompatibilityExRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_ns1__QueryVMotionCompatibilityExRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryVMotionCompatibilityExRequestType() { ns1__QueryVMotionCompatibilityExRequestType::soap_default(NULL); }
	virtual ~ns1__QueryVMotionCompatibilityExRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckMigrateRequestType
#define SOAP_TYPE_ns1__CheckMigrateRequestType (576)
/* ns1:CheckMigrateRequestType */
class SOAP_CMAC ns1__CheckMigrateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	enum ns1__VirtualMachinePowerState *state;	/* optional element of type ns1:VirtualMachinePowerState */
	std::vector<std::string >testType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_ns1__CheckMigrateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckMigrateRequestType() { ns1__CheckMigrateRequestType::soap_default(NULL); }
	virtual ~ns1__CheckMigrateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckRelocateRequestType
#define SOAP_TYPE_ns1__CheckRelocateRequestType (577)
/* ns1:CheckRelocateRequestType */
class SOAP_CMAC ns1__CheckRelocateRequestType : public xsd__anyType
{
public:
	ns1__ManagedObjectReference *_USCOREthis;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__VirtualMachineRelocateSpec *spec;	/* required element of type ns1:VirtualMachineRelocateSpec */
	std::vector<std::string >testType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_ns1__CheckRelocateRequestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckRelocateRequestType() { ns1__CheckRelocateRequestType::soap_default(NULL); }
	virtual ~ns1__CheckRelocateRequestType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPermission
#define SOAP_TYPE_ns1__ArrayOfPermission (581)
/* ns1:ArrayOfPermission */
class SOAP_CMAC ns1__ArrayOfPermission : public xsd__anyType
{
public:
	std::vector<ns1__Permission * >Permission;	/* optional element of type ns1:Permission */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_ns1__ArrayOfPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPermission() { ns1__ArrayOfPermission::soap_default(NULL); }
	virtual ~ns1__ArrayOfPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAuthorizationRole
#define SOAP_TYPE_ns1__ArrayOfAuthorizationRole (583)
/* ns1:ArrayOfAuthorizationRole */
class SOAP_CMAC ns1__ArrayOfAuthorizationRole : public xsd__anyType
{
public:
	std::vector<class ns1__AuthorizationRole * >AuthorizationRole;	/* optional element of type ns1:AuthorizationRole */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_ns1__ArrayOfAuthorizationRole */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAuthorizationRole() { ns1__ArrayOfAuthorizationRole::soap_default(NULL); }
	virtual ~ns1__ArrayOfAuthorizationRole() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAuthorizationPrivilege
#define SOAP_TYPE_ns1__ArrayOfAuthorizationPrivilege (585)
/* ns1:ArrayOfAuthorizationPrivilege */
class SOAP_CMAC ns1__ArrayOfAuthorizationPrivilege : public xsd__anyType
{
public:
	std::vector<class ns1__AuthorizationPrivilege * >AuthorizationPrivilege;	/* optional element of type ns1:AuthorizationPrivilege */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_ns1__ArrayOfAuthorizationPrivilege */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAuthorizationPrivilege() { ns1__ArrayOfAuthorizationPrivilege::soap_default(NULL); }
	virtual ~ns1__ArrayOfAuthorizationPrivilege() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCustomFieldDef
#define SOAP_TYPE_ns1__ArrayOfCustomFieldDef (593)
/* ns1:ArrayOfCustomFieldDef */
class SOAP_CMAC ns1__ArrayOfCustomFieldDef : public xsd__anyType
{
public:
	std::vector<class ns1__CustomFieldDef * >CustomFieldDef;	/* optional element of type ns1:CustomFieldDef */
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_ns1__ArrayOfCustomFieldDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCustomFieldDef() { ns1__ArrayOfCustomFieldDef::soap_default(NULL); }
	virtual ~ns1__ArrayOfCustomFieldDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCustomFieldValue
#define SOAP_TYPE_ns1__ArrayOfCustomFieldValue (595)
/* ns1:ArrayOfCustomFieldValue */
class SOAP_CMAC ns1__ArrayOfCustomFieldValue : public xsd__anyType
{
public:
	std::vector<class ns1__CustomFieldValue * >CustomFieldValue;	/* optional element of type ns1:CustomFieldValue */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_ns1__ArrayOfCustomFieldValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCustomFieldValue() { ns1__ArrayOfCustomFieldValue::soap_default(NULL); }
	virtual ~ns1__ArrayOfCustomFieldValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCustomizationSpecInfo
#define SOAP_TYPE_ns1__ArrayOfCustomizationSpecInfo (598)
/* ns1:ArrayOfCustomizationSpecInfo */
class SOAP_CMAC ns1__ArrayOfCustomizationSpecInfo : public xsd__anyType
{
public:
	std::vector<class ns1__CustomizationSpecInfo * >CustomizationSpecInfo;	/* optional element of type ns1:CustomizationSpecInfo */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_ns1__ArrayOfCustomizationSpecInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCustomizationSpecInfo() { ns1__ArrayOfCustomizationSpecInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfCustomizationSpecInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDatastoreHostMount
#define SOAP_TYPE_ns1__ArrayOfDatastoreHostMount (604)
/* ns1:ArrayOfDatastoreHostMount */
class SOAP_CMAC ns1__ArrayOfDatastoreHostMount : public xsd__anyType
{
public:
	std::vector<class ns1__DatastoreHostMount * >DatastoreHostMount;	/* optional element of type ns1:DatastoreHostMount */
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_ns1__ArrayOfDatastoreHostMount */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDatastoreHostMount() { ns1__ArrayOfDatastoreHostMount::soap_default(NULL); }
	virtual ~ns1__ArrayOfDatastoreHostMount() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDatastoreMountPathDatastorePair
#define SOAP_TYPE_ns1__ArrayOfDatastoreMountPathDatastorePair (606)
/* ns1:ArrayOfDatastoreMountPathDatastorePair */
class SOAP_CMAC ns1__ArrayOfDatastoreMountPathDatastorePair : public xsd__anyType
{
public:
	std::vector<ns1__DatastoreMountPathDatastorePair * >DatastoreMountPathDatastorePair;	/* optional element of type ns1:DatastoreMountPathDatastorePair */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_ns1__ArrayOfDatastoreMountPathDatastorePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDatastoreMountPathDatastorePair() { ns1__ArrayOfDatastoreMountPathDatastorePair::soap_default(NULL); }
	virtual ~ns1__ArrayOfDatastoreMountPathDatastorePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDiagnosticManagerLogDescriptor
#define SOAP_TYPE_ns1__ArrayOfDiagnosticManagerLogDescriptor (609)
/* ns1:ArrayOfDiagnosticManagerLogDescriptor */
class SOAP_CMAC ns1__ArrayOfDiagnosticManagerLogDescriptor : public xsd__anyType
{
public:
	std::vector<class ns1__DiagnosticManagerLogDescriptor * >DiagnosticManagerLogDescriptor;	/* optional element of type ns1:DiagnosticManagerLogDescriptor */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_ns1__ArrayOfDiagnosticManagerLogDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDiagnosticManagerLogDescriptor() { ns1__ArrayOfDiagnosticManagerLogDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfDiagnosticManagerLogDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDiagnosticManagerBundleInfo
#define SOAP_TYPE_ns1__ArrayOfDiagnosticManagerBundleInfo (612)
/* ns1:ArrayOfDiagnosticManagerBundleInfo */
class SOAP_CMAC ns1__ArrayOfDiagnosticManagerBundleInfo : public xsd__anyType
{
public:
	std::vector<class ns1__DiagnosticManagerBundleInfo * >DiagnosticManagerBundleInfo;	/* optional element of type ns1:DiagnosticManagerBundleInfo */
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_ns1__ArrayOfDiagnosticManagerBundleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDiagnosticManagerBundleInfo() { ns1__ArrayOfDiagnosticManagerBundleInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfDiagnosticManagerBundleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEVCMode
#define SOAP_TYPE_ns1__ArrayOfEVCMode (624)
/* ns1:ArrayOfEVCMode */
class SOAP_CMAC ns1__ArrayOfEVCMode : public xsd__anyType
{
public:
	std::vector<class ns1__EVCMode * >EVCMode;	/* optional element of type ns1:EVCMode */
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_ns1__ArrayOfEVCMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEVCMode() { ns1__ArrayOfEVCMode::soap_default(NULL); }
	virtual ~ns1__ArrayOfEVCMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfElementDescription
#define SOAP_TYPE_ns1__ArrayOfElementDescription (626)
/* ns1:ArrayOfElementDescription */
class SOAP_CMAC ns1__ArrayOfElementDescription : public xsd__anyType
{
public:
	std::vector<class ns1__ElementDescription * >ElementDescription;	/* optional element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_ns1__ArrayOfElementDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfElementDescription() { ns1__ArrayOfElementDescription::soap_default(NULL); }
	virtual ~ns1__ArrayOfElementDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEnumDescription
#define SOAP_TYPE_ns1__ArrayOfEnumDescription (628)
/* ns1:ArrayOfEnumDescription */
class SOAP_CMAC ns1__ArrayOfEnumDescription : public xsd__anyType
{
public:
	std::vector<class ns1__EnumDescription * >EnumDescription;	/* optional element of type ns1:EnumDescription */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_ns1__ArrayOfEnumDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEnumDescription() { ns1__ArrayOfEnumDescription::soap_default(NULL); }
	virtual ~ns1__ArrayOfEnumDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionServerInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionServerInfo (632)
/* ns1:ArrayOfExtensionServerInfo */
class SOAP_CMAC ns1__ArrayOfExtensionServerInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionServerInfo * >ExtensionServerInfo;	/* optional element of type ns1:ExtensionServerInfo */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionServerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionServerInfo() { ns1__ArrayOfExtensionServerInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionServerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionClientInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionClientInfo (634)
/* ns1:ArrayOfExtensionClientInfo */
class SOAP_CMAC ns1__ArrayOfExtensionClientInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionClientInfo * >ExtensionClientInfo;	/* optional element of type ns1:ExtensionClientInfo */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionClientInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionClientInfo() { ns1__ArrayOfExtensionClientInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionClientInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionTaskTypeInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionTaskTypeInfo (636)
/* ns1:ArrayOfExtensionTaskTypeInfo */
class SOAP_CMAC ns1__ArrayOfExtensionTaskTypeInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionTaskTypeInfo * >ExtensionTaskTypeInfo;	/* optional element of type ns1:ExtensionTaskTypeInfo */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionTaskTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionTaskTypeInfo() { ns1__ArrayOfExtensionTaskTypeInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionTaskTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionEventTypeInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionEventTypeInfo (638)
/* ns1:ArrayOfExtensionEventTypeInfo */
class SOAP_CMAC ns1__ArrayOfExtensionEventTypeInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionEventTypeInfo * >ExtensionEventTypeInfo;	/* optional element of type ns1:ExtensionEventTypeInfo */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionEventTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionEventTypeInfo() { ns1__ArrayOfExtensionEventTypeInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionEventTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionFaultTypeInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionFaultTypeInfo (640)
/* ns1:ArrayOfExtensionFaultTypeInfo */
class SOAP_CMAC ns1__ArrayOfExtensionFaultTypeInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionFaultTypeInfo * >ExtensionFaultTypeInfo;	/* optional element of type ns1:ExtensionFaultTypeInfo */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionFaultTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionFaultTypeInfo() { ns1__ArrayOfExtensionFaultTypeInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionFaultTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionPrivilegeInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionPrivilegeInfo (642)
/* ns1:ArrayOfExtensionPrivilegeInfo */
class SOAP_CMAC ns1__ArrayOfExtensionPrivilegeInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionPrivilegeInfo * >ExtensionPrivilegeInfo;	/* optional element of type ns1:ExtensionPrivilegeInfo */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionPrivilegeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionPrivilegeInfo() { ns1__ArrayOfExtensionPrivilegeInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionPrivilegeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtensionResourceInfo
#define SOAP_TYPE_ns1__ArrayOfExtensionResourceInfo (644)
/* ns1:ArrayOfExtensionResourceInfo */
class SOAP_CMAC ns1__ArrayOfExtensionResourceInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ExtensionResourceInfo * >ExtensionResourceInfo;	/* optional element of type ns1:ExtensionResourceInfo */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtensionResourceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtensionResourceInfo() { ns1__ArrayOfExtensionResourceInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtensionResourceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtension
#define SOAP_TYPE_ns1__ArrayOfExtension (647)
/* ns1:ArrayOfExtension */
class SOAP_CMAC ns1__ArrayOfExtension : public xsd__anyType
{
public:
	std::vector<ns1__Extension * >Extension;	/* optional element of type ns1:Extension */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtension() { ns1__ArrayOfExtension::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo
#define SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo (650)
/* ns1:ArrayOfHttpNfcLeaseDatastoreLeaseInfo */
class SOAP_CMAC ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HttpNfcLeaseDatastoreLeaseInfo * >HttpNfcLeaseDatastoreLeaseInfo;	/* optional element of type ns1:HttpNfcLeaseDatastoreLeaseInfo */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo() { ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHttpNfcLeaseDatastoreLeaseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseHostInfo
#define SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseHostInfo (652)
/* ns1:ArrayOfHttpNfcLeaseHostInfo */
class SOAP_CMAC ns1__ArrayOfHttpNfcLeaseHostInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HttpNfcLeaseHostInfo * >HttpNfcLeaseHostInfo;	/* optional element of type ns1:HttpNfcLeaseHostInfo */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseHostInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHttpNfcLeaseHostInfo() { ns1__ArrayOfHttpNfcLeaseHostInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHttpNfcLeaseHostInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDeviceUrl
#define SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDeviceUrl (655)
/* ns1:ArrayOfHttpNfcLeaseDeviceUrl */
class SOAP_CMAC ns1__ArrayOfHttpNfcLeaseDeviceUrl : public xsd__anyType
{
public:
	std::vector<class ns1__HttpNfcLeaseDeviceUrl * >HttpNfcLeaseDeviceUrl;	/* optional element of type ns1:HttpNfcLeaseDeviceUrl */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseDeviceUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHttpNfcLeaseDeviceUrl() { ns1__ArrayOfHttpNfcLeaseDeviceUrl::soap_default(NULL); }
	virtual ~ns1__ArrayOfHttpNfcLeaseDeviceUrl() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseManifestEntry
#define SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseManifestEntry (657)
/* ns1:ArrayOfHttpNfcLeaseManifestEntry */
class SOAP_CMAC ns1__ArrayOfHttpNfcLeaseManifestEntry : public xsd__anyType
{
public:
	std::vector<class ns1__HttpNfcLeaseManifestEntry * >HttpNfcLeaseManifestEntry;	/* optional element of type ns1:HttpNfcLeaseManifestEntry */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_ns1__ArrayOfHttpNfcLeaseManifestEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHttpNfcLeaseManifestEntry() { ns1__ArrayOfHttpNfcLeaseManifestEntry::soap_default(NULL); }
	virtual ~ns1__ArrayOfHttpNfcLeaseManifestEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfImportSpec
#define SOAP_TYPE_ns1__ArrayOfImportSpec (659)
/* ns1:ArrayOfImportSpec */
class SOAP_CMAC ns1__ArrayOfImportSpec : public xsd__anyType
{
public:
	std::vector<ns1__ImportSpec * >ImportSpec;	/* optional element of type ns1:ImportSpec */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_ns1__ArrayOfImportSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfImportSpec() { ns1__ArrayOfImportSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfImportSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfKeyValue
#define SOAP_TYPE_ns1__ArrayOfKeyValue (663)
/* ns1:ArrayOfKeyValue */
class SOAP_CMAC ns1__ArrayOfKeyValue : public xsd__anyType
{
public:
	std::vector<ns1__KeyValue * >KeyValue;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_ns1__ArrayOfKeyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfKeyValue() { ns1__ArrayOfKeyValue::soap_default(NULL); }
	virtual ~ns1__ArrayOfKeyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment
#define SOAP_TYPE_ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment (665)
/* ns1:ArrayOfLicenseAssignmentManagerLicenseAssignment */
class SOAP_CMAC ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment : public xsd__anyType
{
public:
	std::vector<class ns1__LicenseAssignmentManagerLicenseAssignment * >LicenseAssignmentManagerLicenseAssignment;	/* optional element of type ns1:LicenseAssignmentManagerLicenseAssignment */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment() { ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment::soap_default(NULL); }
	virtual ~ns1__ArrayOfLicenseAssignmentManagerLicenseAssignment() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLicenseFeatureInfo
#define SOAP_TYPE_ns1__ArrayOfLicenseFeatureInfo (671)
/* ns1:ArrayOfLicenseFeatureInfo */
class SOAP_CMAC ns1__ArrayOfLicenseFeatureInfo : public xsd__anyType
{
public:
	std::vector<class ns1__LicenseFeatureInfo * >LicenseFeatureInfo;	/* optional element of type ns1:LicenseFeatureInfo */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_ns1__ArrayOfLicenseFeatureInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLicenseFeatureInfo() { ns1__ArrayOfLicenseFeatureInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfLicenseFeatureInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLicenseReservationInfo
#define SOAP_TYPE_ns1__ArrayOfLicenseReservationInfo (673)
/* ns1:ArrayOfLicenseReservationInfo */
class SOAP_CMAC ns1__ArrayOfLicenseReservationInfo : public xsd__anyType
{
public:
	std::vector<class ns1__LicenseReservationInfo * >LicenseReservationInfo;	/* optional element of type ns1:LicenseReservationInfo */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_ns1__ArrayOfLicenseReservationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLicenseReservationInfo() { ns1__ArrayOfLicenseReservationInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfLicenseReservationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLicenseAvailabilityInfo
#define SOAP_TYPE_ns1__ArrayOfLicenseAvailabilityInfo (675)
/* ns1:ArrayOfLicenseAvailabilityInfo */
class SOAP_CMAC ns1__ArrayOfLicenseAvailabilityInfo : public xsd__anyType
{
public:
	std::vector<class ns1__LicenseAvailabilityInfo * >LicenseAvailabilityInfo;	/* optional element of type ns1:LicenseAvailabilityInfo */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_ns1__ArrayOfLicenseAvailabilityInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLicenseAvailabilityInfo() { ns1__ArrayOfLicenseAvailabilityInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfLicenseAvailabilityInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLicenseManagerLicenseInfo
#define SOAP_TYPE_ns1__ArrayOfLicenseManagerLicenseInfo (680)
/* ns1:ArrayOfLicenseManagerLicenseInfo */
class SOAP_CMAC ns1__ArrayOfLicenseManagerLicenseInfo : public xsd__anyType
{
public:
	std::vector<class ns1__LicenseManagerLicenseInfo * >LicenseManagerLicenseInfo;	/* optional element of type ns1:LicenseManagerLicenseInfo */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_ns1__ArrayOfLicenseManagerLicenseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLicenseManagerLicenseInfo() { ns1__ArrayOfLicenseManagerLicenseInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfLicenseManagerLicenseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfLocalizationManagerMessageCatalog
#define SOAP_TYPE_ns1__ArrayOfLocalizationManagerMessageCatalog (682)
/* ns1:ArrayOfLocalizationManagerMessageCatalog */
class SOAP_CMAC ns1__ArrayOfLocalizationManagerMessageCatalog : public xsd__anyType
{
public:
	std::vector<class ns1__LocalizationManagerMessageCatalog * >LocalizationManagerMessageCatalog;	/* optional element of type ns1:LocalizationManagerMessageCatalog */
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_ns1__ArrayOfLocalizationManagerMessageCatalog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfLocalizationManagerMessageCatalog() { ns1__ArrayOfLocalizationManagerMessageCatalog::soap_default(NULL); }
	virtual ~ns1__ArrayOfLocalizationManagerMessageCatalog() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNumericRange
#define SOAP_TYPE_ns1__ArrayOfNumericRange (687)
/* ns1:ArrayOfNumericRange */
class SOAP_CMAC ns1__ArrayOfNumericRange : public xsd__anyType
{
public:
	std::vector<class ns1__NumericRange * >NumericRange;	/* optional element of type ns1:NumericRange */
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_ns1__ArrayOfNumericRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNumericRange() { ns1__ArrayOfNumericRange::soap_default(NULL); }
	virtual ~ns1__ArrayOfNumericRange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfDeploymentOption
#define SOAP_TYPE_ns1__ArrayOfOvfDeploymentOption (689)
/* ns1:ArrayOfOvfDeploymentOption */
class SOAP_CMAC ns1__ArrayOfOvfDeploymentOption : public xsd__anyType
{
public:
	std::vector<class ns1__OvfDeploymentOption * >OvfDeploymentOption;	/* optional element of type ns1:OvfDeploymentOption */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfDeploymentOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfDeploymentOption() { ns1__ArrayOfOvfDeploymentOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfDeploymentOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfNetworkInfo
#define SOAP_TYPE_ns1__ArrayOfOvfNetworkInfo (696)
/* ns1:ArrayOfOvfNetworkInfo */
class SOAP_CMAC ns1__ArrayOfOvfNetworkInfo : public xsd__anyType
{
public:
	std::vector<class ns1__OvfNetworkInfo * >OvfNetworkInfo;	/* optional element of type ns1:OvfNetworkInfo */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfNetworkInfo() { ns1__ArrayOfOvfNetworkInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfResourceMap
#define SOAP_TYPE_ns1__ArrayOfOvfResourceMap (699)
/* ns1:ArrayOfOvfResourceMap */
class SOAP_CMAC ns1__ArrayOfOvfResourceMap : public xsd__anyType
{
public:
	std::vector<class ns1__OvfResourceMap * >OvfResourceMap;	/* optional element of type ns1:OvfResourceMap */
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfResourceMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfResourceMap() { ns1__ArrayOfOvfResourceMap::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfResourceMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfNetworkMapping
#define SOAP_TYPE_ns1__ArrayOfOvfNetworkMapping (701)
/* ns1:ArrayOfOvfNetworkMapping */
class SOAP_CMAC ns1__ArrayOfOvfNetworkMapping : public xsd__anyType
{
public:
	std::vector<class ns1__OvfNetworkMapping * >OvfNetworkMapping;	/* optional element of type ns1:OvfNetworkMapping */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfNetworkMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfNetworkMapping() { ns1__ArrayOfOvfNetworkMapping::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfNetworkMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfFileItem
#define SOAP_TYPE_ns1__ArrayOfOvfFileItem (704)
/* ns1:ArrayOfOvfFileItem */
class SOAP_CMAC ns1__ArrayOfOvfFileItem : public xsd__anyType
{
public:
	std::vector<class ns1__OvfFileItem * >OvfFileItem;	/* optional element of type ns1:OvfFileItem */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfFileItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfFileItem() { ns1__ArrayOfOvfFileItem::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfFileItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOvfFile
#define SOAP_TYPE_ns1__ArrayOfOvfFile (708)
/* ns1:ArrayOfOvfFile */
class SOAP_CMAC ns1__ArrayOfOvfFile : public xsd__anyType
{
public:
	std::vector<class ns1__OvfFile * >OvfFile;	/* optional element of type ns1:OvfFile */
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE_ns1__ArrayOfOvfFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOvfFile() { ns1__ArrayOfOvfFile::soap_default(NULL); }
	virtual ~ns1__ArrayOfOvfFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfCounterInfo
#define SOAP_TYPE_ns1__ArrayOfPerfCounterInfo (713)
/* ns1:ArrayOfPerfCounterInfo */
class SOAP_CMAC ns1__ArrayOfPerfCounterInfo : public xsd__anyType
{
public:
	std::vector<class ns1__PerfCounterInfo * >PerfCounterInfo;	/* optional element of type ns1:PerfCounterInfo */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfCounterInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfCounterInfo() { ns1__ArrayOfPerfCounterInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfCounterInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfMetricId
#define SOAP_TYPE_ns1__ArrayOfPerfMetricId (715)
/* ns1:ArrayOfPerfMetricId */
class SOAP_CMAC ns1__ArrayOfPerfMetricId : public xsd__anyType
{
public:
	std::vector<class ns1__PerfMetricId * >PerfMetricId;	/* optional element of type ns1:PerfMetricId */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfMetricId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfMetricId() { ns1__ArrayOfPerfMetricId::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfMetricId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfQuerySpec
#define SOAP_TYPE_ns1__ArrayOfPerfQuerySpec (717)
/* ns1:ArrayOfPerfQuerySpec */
class SOAP_CMAC ns1__ArrayOfPerfQuerySpec : public xsd__anyType
{
public:
	std::vector<ns1__PerfQuerySpec * >PerfQuerySpec;	/* optional element of type ns1:PerfQuerySpec */
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfQuerySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfQuerySpec() { ns1__ArrayOfPerfQuerySpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfQuerySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfSampleInfo
#define SOAP_TYPE_ns1__ArrayOfPerfSampleInfo (719)
/* ns1:ArrayOfPerfSampleInfo */
class SOAP_CMAC ns1__ArrayOfPerfSampleInfo : public xsd__anyType
{
public:
	std::vector<class ns1__PerfSampleInfo * >PerfSampleInfo;	/* optional element of type ns1:PerfSampleInfo */
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfSampleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfSampleInfo() { ns1__ArrayOfPerfSampleInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfSampleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfMetricSeries
#define SOAP_TYPE_ns1__ArrayOfPerfMetricSeries (721)
/* ns1:ArrayOfPerfMetricSeries */
class SOAP_CMAC ns1__ArrayOfPerfMetricSeries : public xsd__anyType
{
public:
	std::vector<class ns1__PerfMetricSeries * >PerfMetricSeries;	/* optional element of type ns1:PerfMetricSeries */
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfMetricSeries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfMetricSeries() { ns1__ArrayOfPerfMetricSeries::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfMetricSeries() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfMetricSeriesCSV
#define SOAP_TYPE_ns1__ArrayOfPerfMetricSeriesCSV (724)
/* ns1:ArrayOfPerfMetricSeriesCSV */
class SOAP_CMAC ns1__ArrayOfPerfMetricSeriesCSV : public xsd__anyType
{
public:
	std::vector<class ns1__PerfMetricSeriesCSV * >PerfMetricSeriesCSV;	/* optional element of type ns1:PerfMetricSeriesCSV */
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfMetricSeriesCSV */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfMetricSeriesCSV() { ns1__ArrayOfPerfMetricSeriesCSV::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfMetricSeriesCSV() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfEntityMetricBase
#define SOAP_TYPE_ns1__ArrayOfPerfEntityMetricBase (726)
/* ns1:ArrayOfPerfEntityMetricBase */
class SOAP_CMAC ns1__ArrayOfPerfEntityMetricBase : public xsd__anyType
{
public:
	std::vector<class ns1__PerfEntityMetricBase * >PerfEntityMetricBase;	/* optional element of type ns1:PerfEntityMetricBase */
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfEntityMetricBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfEntityMetricBase() { ns1__ArrayOfPerfEntityMetricBase::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfEntityMetricBase() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPerfInterval
#define SOAP_TYPE_ns1__ArrayOfPerfInterval (731)
/* ns1:ArrayOfPerfInterval */
class SOAP_CMAC ns1__ArrayOfPerfInterval : public xsd__anyType
{
public:
	std::vector<ns1__PerfInterval * >PerfInterval;	/* optional element of type ns1:PerfInterval */
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_ns1__ArrayOfPerfInterval */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPerfInterval() { ns1__ArrayOfPerfInterval::soap_default(NULL); }
	virtual ~ns1__ArrayOfPerfInterval() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfResourceConfigSpec
#define SOAP_TYPE_ns1__ArrayOfResourceConfigSpec (738)
/* ns1:ArrayOfResourceConfigSpec */
class SOAP_CMAC ns1__ArrayOfResourceConfigSpec : public xsd__anyType
{
public:
	std::vector<ns1__ResourceConfigSpec * >ResourceConfigSpec;	/* optional element of type ns1:ResourceConfigSpec */
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_ns1__ArrayOfResourceConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfResourceConfigSpec() { ns1__ArrayOfResourceConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfResourceConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVMotionCompatibility
#define SOAP_TYPE_ns1__ArrayOfHostVMotionCompatibility (748)
/* ns1:ArrayOfHostVMotionCompatibility */
class SOAP_CMAC ns1__ArrayOfHostVMotionCompatibility : public xsd__anyType
{
public:
	std::vector<class ns1__HostVMotionCompatibility * >HostVMotionCompatibility;	/* optional element of type ns1:HostVMotionCompatibility */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVMotionCompatibility */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVMotionCompatibility() { ns1__ArrayOfHostVMotionCompatibility::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVMotionCompatibility() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProductComponentInfo
#define SOAP_TYPE_ns1__ArrayOfProductComponentInfo (750)
/* ns1:ArrayOfProductComponentInfo */
class SOAP_CMAC ns1__ArrayOfProductComponentInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ProductComponentInfo * >ProductComponentInfo;	/* optional element of type ns1:ProductComponentInfo */
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE_ns1__ArrayOfProductComponentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProductComponentInfo() { ns1__ArrayOfProductComponentInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfProductComponentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUserSession
#define SOAP_TYPE_ns1__ArrayOfUserSession (754)
/* ns1:ArrayOfUserSession */
class SOAP_CMAC ns1__ArrayOfUserSession : public xsd__anyType
{
public:
	std::vector<class ns1__UserSession * >UserSession;	/* optional element of type ns1:UserSession */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE_ns1__ArrayOfUserSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUserSession() { ns1__ArrayOfUserSession::soap_default(NULL); }
	virtual ~ns1__ArrayOfUserSession() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfTag
#define SOAP_TYPE_ns1__ArrayOfTag (764)
/* ns1:ArrayOfTag */
class SOAP_CMAC ns1__ArrayOfTag : public xsd__anyType
{
public:
	std::vector<class ns1__Tag * >Tag;	/* optional element of type ns1:Tag */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_ns1__ArrayOfTag */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfTag() { ns1__ArrayOfTag::soap_default(NULL); }
	virtual ~ns1__ArrayOfTag() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfTaskInfoState
#define SOAP_TYPE_ns1__ArrayOfTaskInfoState (770)
/* ns1:ArrayOfTaskInfoState */
class SOAP_CMAC ns1__ArrayOfTaskInfoState : public xsd__anyType
{
public:
	std::vector<enum ns1__TaskInfoState >TaskInfoState;	/* optional element of type ns1:TaskInfoState */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE_ns1__ArrayOfTaskInfoState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfTaskInfoState() { ns1__ArrayOfTaskInfoState::soap_default(NULL); }
	virtual ~ns1__ArrayOfTaskInfoState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfTaskInfo
#define SOAP_TYPE_ns1__ArrayOfTaskInfo (772)
/* ns1:ArrayOfTaskInfo */
class SOAP_CMAC ns1__ArrayOfTaskInfo : public xsd__anyType
{
public:
	std::vector<ns1__TaskInfo * >TaskInfo;	/* optional element of type ns1:TaskInfo */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE_ns1__ArrayOfTaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfTaskInfo() { ns1__ArrayOfTaskInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfTaskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfTypeDescription
#define SOAP_TYPE_ns1__ArrayOfTypeDescription (779)
/* ns1:ArrayOfTypeDescription */
class SOAP_CMAC ns1__ArrayOfTypeDescription : public xsd__anyType
{
public:
	std::vector<class ns1__TypeDescription * >TypeDescription;	/* optional element of type ns1:TypeDescription */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_ns1__ArrayOfTypeDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfTypeDescription() { ns1__ArrayOfTypeDescription::soap_default(NULL); }
	virtual ~ns1__ArrayOfTypeDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo
#define SOAP_TYPE_ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo (781)
/* ns1:ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo */
class SOAP_CMAC ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo : public xsd__anyType
{
public:
	std::vector<class ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo * >UpdateVirtualMachineFilesResultFailedVmFileInfo;	/* optional element of type ns1:UpdateVirtualMachineFilesResultFailedVmFileInfo */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE_ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo() { ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUserSearchResult
#define SOAP_TYPE_ns1__ArrayOfUserSearchResult (784)
/* ns1:ArrayOfUserSearchResult */
class SOAP_CMAC ns1__ArrayOfUserSearchResult : public xsd__anyType
{
public:
	std::vector<class ns1__UserSearchResult * >UserSearchResult;	/* optional element of type ns1:UserSearchResult */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE_ns1__ArrayOfUserSearchResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUserSearchResult() { ns1__ArrayOfUserSearchResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfUserSearchResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualAppLinkInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualAppLinkInfo (787)
/* ns1:ArrayOfVirtualAppLinkInfo */
class SOAP_CMAC ns1__ArrayOfVirtualAppLinkInfo : public xsd__anyType
{
public:
	std::vector<ns1__VirtualAppLinkInfo * >VirtualAppLinkInfo;	/* optional element of type ns1:VirtualAppLinkInfo */
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualAppLinkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualAppLinkInfo() { ns1__ArrayOfVirtualAppLinkInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualAppLinkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineDisplayTopology
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineDisplayTopology (794)
/* ns1:ArrayOfVirtualMachineDisplayTopology */
class SOAP_CMAC ns1__ArrayOfVirtualMachineDisplayTopology : public xsd__anyType
{
public:
	std::vector<ns1__VirtualMachineDisplayTopology * >VirtualMachineDisplayTopology;	/* optional element of type ns1:VirtualMachineDisplayTopology */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineDisplayTopology */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineDisplayTopology() { ns1__ArrayOfVirtualMachineDisplayTopology::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineDisplayTopology() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDiskChangeExtent
#define SOAP_TYPE_ns1__ArrayOfDiskChangeExtent (796)
/* ns1:ArrayOfDiskChangeExtent */
class SOAP_CMAC ns1__ArrayOfDiskChangeExtent : public xsd__anyType
{
public:
	std::vector<class ns1__DiskChangeExtent * >DiskChangeExtent;	/* optional element of type ns1:DiskChangeExtent */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE_ns1__ArrayOfDiskChangeExtent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDiskChangeExtent() { ns1__ArrayOfDiskChangeExtent::soap_default(NULL); }
	virtual ~ns1__ArrayOfDiskChangeExtent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMethodActionArgument
#define SOAP_TYPE_ns1__ArrayOfMethodActionArgument (800)
/* ns1:ArrayOfMethodActionArgument */
class SOAP_CMAC ns1__ArrayOfMethodActionArgument : public xsd__anyType
{
public:
	std::vector<class ns1__MethodActionArgument * >MethodActionArgument;	/* optional element of type ns1:MethodActionArgument */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE_ns1__ArrayOfMethodActionArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfMethodActionArgument() { ns1__ArrayOfMethodActionArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfMethodActionArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAlarmAction
#define SOAP_TYPE_ns1__ArrayOfAlarmAction (807)
/* ns1:ArrayOfAlarmAction */
class SOAP_CMAC ns1__ArrayOfAlarmAction : public xsd__anyType
{
public:
	std::vector<class ns1__AlarmAction * >AlarmAction;	/* optional element of type ns1:AlarmAction */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE_ns1__ArrayOfAlarmAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAlarmAction() { ns1__ArrayOfAlarmAction::soap_default(NULL); }
	virtual ~ns1__ArrayOfAlarmAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAlarmTriggeringActionTransitionSpec
#define SOAP_TYPE_ns1__ArrayOfAlarmTriggeringActionTransitionSpec (809)
/* ns1:ArrayOfAlarmTriggeringActionTransitionSpec */
class SOAP_CMAC ns1__ArrayOfAlarmTriggeringActionTransitionSpec : public xsd__anyType
{
public:
	std::vector<class ns1__AlarmTriggeringActionTransitionSpec * >AlarmTriggeringActionTransitionSpec;	/* optional element of type ns1:AlarmTriggeringActionTransitionSpec */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE_ns1__ArrayOfAlarmTriggeringActionTransitionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAlarmTriggeringActionTransitionSpec() { ns1__ArrayOfAlarmTriggeringActionTransitionSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfAlarmTriggeringActionTransitionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAlarmExpression
#define SOAP_TYPE_ns1__ArrayOfAlarmExpression (814)
/* ns1:ArrayOfAlarmExpression */
class SOAP_CMAC ns1__ArrayOfAlarmExpression : public xsd__anyType
{
public:
	std::vector<class ns1__AlarmExpression * >AlarmExpression;	/* optional element of type ns1:AlarmExpression */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE_ns1__ArrayOfAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAlarmExpression() { ns1__ArrayOfAlarmExpression::soap_default(NULL); }
	virtual ~ns1__ArrayOfAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEventAlarmExpressionComparison
#define SOAP_TYPE_ns1__ArrayOfEventAlarmExpressionComparison (819)
/* ns1:ArrayOfEventAlarmExpressionComparison */
class SOAP_CMAC ns1__ArrayOfEventAlarmExpressionComparison : public xsd__anyType
{
public:
	std::vector<class ns1__EventAlarmExpressionComparison * >EventAlarmExpressionComparison;	/* optional element of type ns1:EventAlarmExpressionComparison */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE_ns1__ArrayOfEventAlarmExpressionComparison */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEventAlarmExpressionComparison() { ns1__ArrayOfEventAlarmExpressionComparison::soap_default(NULL); }
	virtual ~ns1__ArrayOfEventAlarmExpressionComparison() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAlarmState
#define SOAP_TYPE_ns1__ArrayOfAlarmState (826)
/* ns1:ArrayOfAlarmState */
class SOAP_CMAC ns1__ArrayOfAlarmState : public xsd__anyType
{
public:
	std::vector<class ns1__AlarmState * >AlarmState;	/* optional element of type ns1:AlarmState */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE_ns1__ArrayOfAlarmState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAlarmState() { ns1__ArrayOfAlarmState::soap_default(NULL); }
	virtual ~ns1__ArrayOfAlarmState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterAction
#define SOAP_TYPE_ns1__ArrayOfClusterAction (828)
/* ns1:ArrayOfClusterAction */
class SOAP_CMAC ns1__ArrayOfClusterAction : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterAction * >ClusterAction;	/* optional element of type ns1:ClusterAction */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterAction() { ns1__ArrayOfClusterAction::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterActionHistory
#define SOAP_TYPE_ns1__ArrayOfClusterActionHistory (830)
/* ns1:ArrayOfClusterActionHistory */
class SOAP_CMAC ns1__ArrayOfClusterActionHistory : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterActionHistory * >ClusterActionHistory;	/* optional element of type ns1:ClusterActionHistory */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterActionHistory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterActionHistory() { ns1__ArrayOfClusterActionHistory::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterActionHistory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterAttemptedVmInfo
#define SOAP_TYPE_ns1__ArrayOfClusterAttemptedVmInfo (834)
/* ns1:ArrayOfClusterAttemptedVmInfo */
class SOAP_CMAC ns1__ArrayOfClusterAttemptedVmInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterAttemptedVmInfo * >ClusterAttemptedVmInfo;	/* optional element of type ns1:ClusterAttemptedVmInfo */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterAttemptedVmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterAttemptedVmInfo() { ns1__ArrayOfClusterAttemptedVmInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterAttemptedVmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigInfo
#define SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigInfo (838)
/* ns1:ArrayOfClusterDrsVmConfigInfo */
class SOAP_CMAC ns1__ArrayOfClusterDrsVmConfigInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsVmConfigInfo * >ClusterDrsVmConfigInfo;	/* optional element of type ns1:ClusterDrsVmConfigInfo */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsVmConfigInfo() { ns1__ArrayOfClusterDrsVmConfigInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsVmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigInfo
#define SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigInfo (842)
/* ns1:ArrayOfClusterDpmHostConfigInfo */
class SOAP_CMAC ns1__ArrayOfClusterDpmHostConfigInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDpmHostConfigInfo * >ClusterDpmHostConfigInfo;	/* optional element of type ns1:ClusterDpmHostConfigInfo */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDpmHostConfigInfo() { ns1__ArrayOfClusterDpmHostConfigInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDpmHostConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigSpec
#define SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigSpec (845)
/* ns1:ArrayOfClusterDasVmConfigSpec */
class SOAP_CMAC ns1__ArrayOfClusterDasVmConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDasVmConfigSpec * >ClusterDasVmConfigSpec;	/* optional element of type ns1:ClusterDasVmConfigSpec */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDasVmConfigSpec() { ns1__ArrayOfClusterDasVmConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDasVmConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigSpec
#define SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigSpec (847)
/* ns1:ArrayOfClusterDrsVmConfigSpec */
class SOAP_CMAC ns1__ArrayOfClusterDrsVmConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsVmConfigSpec * >ClusterDrsVmConfigSpec;	/* optional element of type ns1:ClusterDrsVmConfigSpec */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsVmConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsVmConfigSpec() { ns1__ArrayOfClusterDrsVmConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsVmConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterRuleSpec
#define SOAP_TYPE_ns1__ArrayOfClusterRuleSpec (849)
/* ns1:ArrayOfClusterRuleSpec */
class SOAP_CMAC ns1__ArrayOfClusterRuleSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterRuleSpec * >ClusterRuleSpec;	/* optional element of type ns1:ClusterRuleSpec */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterRuleSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterRuleSpec() { ns1__ArrayOfClusterRuleSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterRuleSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigSpec
#define SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigSpec (852)
/* ns1:ArrayOfClusterDpmHostConfigSpec */
class SOAP_CMAC ns1__ArrayOfClusterDpmHostConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDpmHostConfigSpec * >ClusterDpmHostConfigSpec;	/* optional element of type ns1:ClusterDpmHostConfigSpec */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDpmHostConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDpmHostConfigSpec() { ns1__ArrayOfClusterDpmHostConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDpmHostConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterGroupSpec
#define SOAP_TYPE_ns1__ArrayOfClusterGroupSpec (854)
/* ns1:ArrayOfClusterGroupSpec */
class SOAP_CMAC ns1__ArrayOfClusterGroupSpec : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterGroupSpec * >ClusterGroupSpec;	/* optional element of type ns1:ClusterGroupSpec */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterGroupSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterGroupSpec() { ns1__ArrayOfClusterGroupSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterGroupSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDasAamNodeState
#define SOAP_TYPE_ns1__ArrayOfClusterDasAamNodeState (857)
/* ns1:ArrayOfClusterDasAamNodeState */
class SOAP_CMAC ns1__ArrayOfClusterDasAamNodeState : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDasAamNodeState * >ClusterDasAamNodeState;	/* optional element of type ns1:ClusterDasAamNodeState */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDasAamNodeState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDasAamNodeState() { ns1__ArrayOfClusterDasAamNodeState::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDasAamNodeState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots
#define SOAP_TYPE_ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots (864)
/* ns1:ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
class SOAP_CMAC ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots * >ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;	/* optional element of type ns1:ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots() { ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigInfo
#define SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigInfo (869)
/* ns1:ArrayOfClusterDasVmConfigInfo */
class SOAP_CMAC ns1__ArrayOfClusterDasVmConfigInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDasVmConfigInfo * >ClusterDasVmConfigInfo;	/* optional element of type ns1:ClusterDasVmConfigInfo */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDasVmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDasVmConfigInfo() { ns1__ArrayOfClusterDasVmConfigInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDasVmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsFaultsFaultsByVm
#define SOAP_TYPE_ns1__ArrayOfClusterDrsFaultsFaultsByVm (872)
/* ns1:ArrayOfClusterDrsFaultsFaultsByVm */
class SOAP_CMAC ns1__ArrayOfClusterDrsFaultsFaultsByVm : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsFaultsFaultsByVm * >ClusterDrsFaultsFaultsByVm;	/* optional element of type ns1:ClusterDrsFaultsFaultsByVm */
public:
	virtual int soap_type() const { return 872; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsFaultsFaultsByVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsFaultsFaultsByVm() { ns1__ArrayOfClusterDrsFaultsFaultsByVm::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsFaultsFaultsByVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsFaults
#define SOAP_TYPE_ns1__ArrayOfClusterDrsFaults (874)
/* ns1:ArrayOfClusterDrsFaults */
class SOAP_CMAC ns1__ArrayOfClusterDrsFaults : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsFaults * >ClusterDrsFaults;	/* optional element of type ns1:ClusterDrsFaults */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsFaults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsFaults() { ns1__ArrayOfClusterDrsFaults::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsFaults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsMigration
#define SOAP_TYPE_ns1__ArrayOfClusterDrsMigration (876)
/* ns1:ArrayOfClusterDrsMigration */
class SOAP_CMAC ns1__ArrayOfClusterDrsMigration : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsMigration * >ClusterDrsMigration;	/* optional element of type ns1:ClusterDrsMigration */
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsMigration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsMigration() { ns1__ArrayOfClusterDrsMigration::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsMigration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterDrsRecommendation
#define SOAP_TYPE_ns1__ArrayOfClusterDrsRecommendation (878)
/* ns1:ArrayOfClusterDrsRecommendation */
class SOAP_CMAC ns1__ArrayOfClusterDrsRecommendation : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterDrsRecommendation * >ClusterDrsRecommendation;	/* optional element of type ns1:ClusterDrsRecommendation */
public:
	virtual int soap_type() const { return 878; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterDrsRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterDrsRecommendation() { ns1__ArrayOfClusterDrsRecommendation::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterDrsRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus
#define SOAP_TYPE_ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus (880)
/* ns1:ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus */
class SOAP_CMAC ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterFailoverHostAdmissionControlInfoHostStatus * >ClusterFailoverHostAdmissionControlInfoHostStatus;	/* optional element of type ns1:ClusterFailoverHostAdmissionControlInfoHostStatus */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus() { ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterGroupInfo
#define SOAP_TYPE_ns1__ArrayOfClusterGroupInfo (888)
/* ns1:ArrayOfClusterGroupInfo */
class SOAP_CMAC ns1__ArrayOfClusterGroupInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterGroupInfo * >ClusterGroupInfo;	/* optional element of type ns1:ClusterGroupInfo */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterGroupInfo() { ns1__ArrayOfClusterGroupInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterHostRecommendation
#define SOAP_TYPE_ns1__ArrayOfClusterHostRecommendation (892)
/* ns1:ArrayOfClusterHostRecommendation */
class SOAP_CMAC ns1__ArrayOfClusterHostRecommendation : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterHostRecommendation * >ClusterHostRecommendation;	/* optional element of type ns1:ClusterHostRecommendation */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterHostRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterHostRecommendation() { ns1__ArrayOfClusterHostRecommendation::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterHostRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterNotAttemptedVmInfo
#define SOAP_TYPE_ns1__ArrayOfClusterNotAttemptedVmInfo (896)
/* ns1:ArrayOfClusterNotAttemptedVmInfo */
class SOAP_CMAC ns1__ArrayOfClusterNotAttemptedVmInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterNotAttemptedVmInfo * >ClusterNotAttemptedVmInfo;	/* optional element of type ns1:ClusterNotAttemptedVmInfo */
public:
	virtual int soap_type() const { return 896; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterNotAttemptedVmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterNotAttemptedVmInfo() { ns1__ArrayOfClusterNotAttemptedVmInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterNotAttemptedVmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterRecommendation
#define SOAP_TYPE_ns1__ArrayOfClusterRecommendation (899)
/* ns1:ArrayOfClusterRecommendation */
class SOAP_CMAC ns1__ArrayOfClusterRecommendation : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterRecommendation * >ClusterRecommendation;	/* optional element of type ns1:ClusterRecommendation */
public:
	virtual int soap_type() const { return 899; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterRecommendation() { ns1__ArrayOfClusterRecommendation::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfClusterRuleInfo
#define SOAP_TYPE_ns1__ArrayOfClusterRuleInfo (901)
/* ns1:ArrayOfClusterRuleInfo */
class SOAP_CMAC ns1__ArrayOfClusterRuleInfo : public xsd__anyType
{
public:
	std::vector<class ns1__ClusterRuleInfo * >ClusterRuleInfo;	/* optional element of type ns1:ClusterRuleInfo */
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE_ns1__ArrayOfClusterRuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfClusterRuleInfo() { ns1__ArrayOfClusterRuleInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfClusterRuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDVPortConfigSpec
#define SOAP_TYPE_ns1__ArrayOfDVPortConfigSpec (906)
/* ns1:ArrayOfDVPortConfigSpec */
class SOAP_CMAC ns1__ArrayOfDVPortConfigSpec : public xsd__anyType
{
public:
	std::vector<ns1__DVPortConfigSpec * >DVPortConfigSpec;	/* optional element of type ns1:DVPortConfigSpec */
public:
	virtual int soap_type() const { return 906; } /* = unique id SOAP_TYPE_ns1__ArrayOfDVPortConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDVPortConfigSpec() { ns1__ArrayOfDVPortConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDVPortConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualPort
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualPort (914)
/* ns1:ArrayOfDistributedVirtualPort */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualPort : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualPort * >DistributedVirtualPort;	/* optional element of type ns1:DistributedVirtualPort */
public:
	virtual int soap_type() const { return 914; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualPort() { ns1__ArrayOfDistributedVirtualPort::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDVPortgroupConfigSpec
#define SOAP_TYPE_ns1__ArrayOfDVPortgroupConfigSpec (917)
/* ns1:ArrayOfDVPortgroupConfigSpec */
class SOAP_CMAC ns1__ArrayOfDVPortgroupConfigSpec : public xsd__anyType
{
public:
	std::vector<ns1__DVPortgroupConfigSpec * >DVPortgroupConfigSpec;	/* optional element of type ns1:DVPortgroupConfigSpec */
public:
	virtual int soap_type() const { return 917; } /* = unique id SOAP_TYPE_ns1__ArrayOfDVPortgroupConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDVPortgroupConfigSpec() { ns1__ArrayOfDVPortgroupConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDVPortgroupConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualPortgroupInfo
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualPortgroupInfo (920)
/* ns1:ArrayOfDistributedVirtualPortgroupInfo */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualPortgroupInfo : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualPortgroupInfo * >DistributedVirtualPortgroupInfo;	/* optional element of type ns1:DistributedVirtualPortgroupInfo */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualPortgroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualPortgroupInfo() { ns1__ArrayOfDistributedVirtualPortgroupInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualPortgroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchInfo
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchInfo (922)
/* ns1:ArrayOfDistributedVirtualSwitchInfo */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchInfo : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchInfo * >DistributedVirtualSwitchInfo;	/* optional element of type ns1:DistributedVirtualSwitchInfo */
public:
	virtual int soap_type() const { return 922; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchInfo() { ns1__ArrayOfDistributedVirtualSwitchInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult (925)
/* ns1:ArrayOfDistributedVirtualSwitchManagerCompatibilityResult */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchManagerCompatibilityResult * >DistributedVirtualSwitchManagerCompatibilityResult;	/* optional element of type ns1:DistributedVirtualSwitchManagerCompatibilityResult */
public:
	virtual int soap_type() const { return 925; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult() { ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchManagerCompatibilityResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec (928)
/* ns1:ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec : public xsd__anyType
{
public:
	std::vector<ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec * >DistributedVirtualSwitchManagerHostDvsFilterSpec;	/* optional element of type ns1:DistributedVirtualSwitchManagerHostDvsFilterSpec */
public:
	virtual int soap_type() const { return 928; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec() { ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec (934)
/* ns1:ArrayOfDistributedVirtualSwitchHostMemberConfigSpec */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchHostMemberConfigSpec * >DistributedVirtualSwitchHostMemberConfigSpec;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberConfigSpec */
public:
	virtual int soap_type() const { return 934; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec() { ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchHostMemberConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec (936)
/* ns1:ArrayOfDistributedVirtualSwitchHostMemberPnicSpec */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchHostMemberPnicSpec * >DistributedVirtualSwitchHostMemberPnicSpec;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberPnicSpec */
public:
	virtual int soap_type() const { return 936; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec() { ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchHostMemberPnicSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMember
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMember (941)
/* ns1:ArrayOfDistributedVirtualSwitchHostMember */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchHostMember : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchHostMember * >DistributedVirtualSwitchHostMember;	/* optional element of type ns1:DistributedVirtualSwitchHostMember */
public:
	virtual int soap_type() const { return 941; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchHostMember() { ns1__ArrayOfDistributedVirtualSwitchHostMember::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchHostMember() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostProductSpec
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostProductSpec (943)
/* ns1:ArrayOfDistributedVirtualSwitchHostProductSpec */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchHostProductSpec : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchHostProductSpec * >DistributedVirtualSwitchHostProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchHostProductSpec */
public:
	virtual int soap_type() const { return 943; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchHostProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchHostProductSpec() { ns1__ArrayOfDistributedVirtualSwitchHostProductSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchHostProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob (945)
/* ns1:ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob : public xsd__anyType
{
public:
	std::vector<class ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >DistributedVirtualSwitchKeyedOpaqueBlob;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
public:
	virtual int soap_type() const { return 945; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob() { ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePoolConfigSpec
#define SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePoolConfigSpec (948)
/* ns1:ArrayOfDVSNetworkResourcePoolConfigSpec */
class SOAP_CMAC ns1__ArrayOfDVSNetworkResourcePoolConfigSpec : public xsd__anyType
{
public:
	std::vector<ns1__DVSNetworkResourcePoolConfigSpec * >DVSNetworkResourcePoolConfigSpec;	/* optional element of type ns1:DVSNetworkResourcePoolConfigSpec */
public:
	virtual int soap_type() const { return 948; } /* = unique id SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePoolConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDVSNetworkResourcePoolConfigSpec() { ns1__ArrayOfDVSNetworkResourcePoolConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDVSNetworkResourcePoolConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePool
#define SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePool (950)
/* ns1:ArrayOfDVSNetworkResourcePool */
class SOAP_CMAC ns1__ArrayOfDVSNetworkResourcePool : public xsd__anyType
{
public:
	std::vector<class ns1__DVSNetworkResourcePool * >DVSNetworkResourcePool;	/* optional element of type ns1:DVSNetworkResourcePool */
public:
	virtual int soap_type() const { return 950; } /* = unique id SOAP_TYPE_ns1__ArrayOfDVSNetworkResourcePool */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDVSNetworkResourcePool() { ns1__ArrayOfDVSNetworkResourcePool::soap_default(NULL); }
	virtual ~ns1__ArrayOfDVSNetworkResourcePool() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchProductSpec
#define SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchProductSpec (956)
/* ns1:ArrayOfDistributedVirtualSwitchProductSpec */
class SOAP_CMAC ns1__ArrayOfDistributedVirtualSwitchProductSpec : public xsd__anyType
{
public:
	std::vector<ns1__DistributedVirtualSwitchProductSpec * >DistributedVirtualSwitchProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 956; } /* = unique id SOAP_TYPE_ns1__ArrayOfDistributedVirtualSwitchProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDistributedVirtualSwitchProductSpec() { ns1__ArrayOfDistributedVirtualSwitchProductSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfDistributedVirtualSwitchProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanConfigSpec
#define SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanConfigSpec (971)
/* ns1:ArrayOfVMwareDVSPvlanConfigSpec */
class SOAP_CMAC ns1__ArrayOfVMwareDVSPvlanConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__VMwareDVSPvlanConfigSpec * >VMwareDVSPvlanConfigSpec;	/* optional element of type ns1:VMwareDVSPvlanConfigSpec */
public:
	virtual int soap_type() const { return 971; } /* = unique id SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVMwareDVSPvlanConfigSpec() { ns1__ArrayOfVMwareDVSPvlanConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVMwareDVSPvlanConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanMapEntry
#define SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanMapEntry (973)
/* ns1:ArrayOfVMwareDVSPvlanMapEntry */
class SOAP_CMAC ns1__ArrayOfVMwareDVSPvlanMapEntry : public xsd__anyType
{
public:
	std::vector<class ns1__VMwareDVSPvlanMapEntry * >VMwareDVSPvlanMapEntry;	/* optional element of type ns1:VMwareDVSPvlanMapEntry */
public:
	virtual int soap_type() const { return 973; } /* = unique id SOAP_TYPE_ns1__ArrayOfVMwareDVSPvlanMapEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVMwareDVSPvlanMapEntry() { ns1__ArrayOfVMwareDVSPvlanMapEntry::soap_default(NULL); }
	virtual ~ns1__ArrayOfVMwareDVSPvlanMapEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEvent
#define SOAP_TYPE_ns1__ArrayOfEvent (975)
/* ns1:ArrayOfEvent */
class SOAP_CMAC ns1__ArrayOfEvent : public xsd__anyType
{
public:
	std::vector<ns1__Event * >Event;	/* optional element of type ns1:Event */
public:
	virtual int soap_type() const { return 975; } /* = unique id SOAP_TYPE_ns1__ArrayOfEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEvent() { ns1__ArrayOfEvent::soap_default(NULL); }
	virtual ~ns1__ArrayOfEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExtendedEventPair
#define SOAP_TYPE_ns1__ArrayOfExtendedEventPair (986)
/* ns1:ArrayOfExtendedEventPair */
class SOAP_CMAC ns1__ArrayOfExtendedEventPair : public xsd__anyType
{
public:
	std::vector<class ns1__ExtendedEventPair * >ExtendedEventPair;	/* optional element of type ns1:ExtendedEventPair */
public:
	virtual int soap_type() const { return 986; } /* = unique id SOAP_TYPE_ns1__ArrayOfExtendedEventPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExtendedEventPair() { ns1__ArrayOfExtendedEventPair::soap_default(NULL); }
	virtual ~ns1__ArrayOfExtendedEventPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVnicPortArgument
#define SOAP_TYPE_ns1__ArrayOfVnicPortArgument (1105)
/* ns1:ArrayOfVnicPortArgument */
class SOAP_CMAC ns1__ArrayOfVnicPortArgument : public xsd__anyType
{
public:
	std::vector<class ns1__VnicPortArgument * >VnicPortArgument;	/* optional element of type ns1:VnicPortArgument */
public:
	virtual int soap_type() const { return 1105; } /* = unique id SOAP_TYPE_ns1__ArrayOfVnicPortArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVnicPortArgument() { ns1__ArrayOfVnicPortArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfVnicPortArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDvsOutOfSyncHostArgument
#define SOAP_TYPE_ns1__ArrayOfDvsOutOfSyncHostArgument (1363)
/* ns1:ArrayOfDvsOutOfSyncHostArgument */
class SOAP_CMAC ns1__ArrayOfDvsOutOfSyncHostArgument : public xsd__anyType
{
public:
	std::vector<class ns1__DvsOutOfSyncHostArgument * >DvsOutOfSyncHostArgument;	/* optional element of type ns1:DvsOutOfSyncHostArgument */
public:
	virtual int soap_type() const { return 1363; } /* = unique id SOAP_TYPE_ns1__ArrayOfDvsOutOfSyncHostArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDvsOutOfSyncHostArgument() { ns1__ArrayOfDvsOutOfSyncHostArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfDvsOutOfSyncHostArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostEventArgument
#define SOAP_TYPE_ns1__ArrayOfHostEventArgument (1401)
/* ns1:ArrayOfHostEventArgument */
class SOAP_CMAC ns1__ArrayOfHostEventArgument : public xsd__anyType
{
public:
	std::vector<class ns1__HostEventArgument * >HostEventArgument;	/* optional element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1401; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostEventArgument() { ns1__ArrayOfHostEventArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVmEventArgument
#define SOAP_TYPE_ns1__ArrayOfVmEventArgument (1403)
/* ns1:ArrayOfVmEventArgument */
class SOAP_CMAC ns1__ArrayOfVmEventArgument : public xsd__anyType
{
public:
	std::vector<class ns1__VmEventArgument * >VmEventArgument;	/* optional element of type ns1:VmEventArgument */
public:
	virtual int soap_type() const { return 1403; } /* = unique id SOAP_TYPE_ns1__ArrayOfVmEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVmEventArgument() { ns1__ArrayOfVmEventArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfVmEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEventArgDesc
#define SOAP_TYPE_ns1__ArrayOfEventArgDesc (1411)
/* ns1:ArrayOfEventArgDesc */
class SOAP_CMAC ns1__ArrayOfEventArgDesc : public xsd__anyType
{
public:
	std::vector<class ns1__EventArgDesc * >EventArgDesc;	/* optional element of type ns1:EventArgDesc */
public:
	virtual int soap_type() const { return 1411; } /* = unique id SOAP_TYPE_ns1__ArrayOfEventArgDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEventArgDesc() { ns1__ArrayOfEventArgDesc::soap_default(NULL); }
	virtual ~ns1__ArrayOfEventArgDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfEventDescriptionEventDetail
#define SOAP_TYPE_ns1__ArrayOfEventDescriptionEventDetail (1413)
/* ns1:ArrayOfEventDescriptionEventDetail */
class SOAP_CMAC ns1__ArrayOfEventDescriptionEventDetail : public xsd__anyType
{
public:
	std::vector<class ns1__EventDescriptionEventDetail * >EventDescriptionEventDetail;	/* optional element of type ns1:EventDescriptionEventDetail */
public:
	virtual int soap_type() const { return 1413; } /* = unique id SOAP_TYPE_ns1__ArrayOfEventDescriptionEventDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfEventDescriptionEventDetail() { ns1__ArrayOfEventDescriptionEventDetail::soap_default(NULL); }
	virtual ~ns1__ArrayOfEventDescriptionEventDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDatacenterMismatchArgument
#define SOAP_TYPE_ns1__ArrayOfDatacenterMismatchArgument (1467)
/* ns1:ArrayOfDatacenterMismatchArgument */
class SOAP_CMAC ns1__ArrayOfDatacenterMismatchArgument : public xsd__anyType
{
public:
	std::vector<class ns1__DatacenterMismatchArgument * >DatacenterMismatchArgument;	/* optional element of type ns1:DatacenterMismatchArgument */
public:
	virtual int soap_type() const { return 1467; } /* = unique id SOAP_TYPE_ns1__ArrayOfDatacenterMismatchArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDatacenterMismatchArgument() { ns1__ArrayOfDatacenterMismatchArgument::soap_default(NULL); }
	virtual ~ns1__ArrayOfDatacenterMismatchArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDvsOperationBulkFaultFaultOnHost
#define SOAP_TYPE_ns1__ArrayOfDvsOperationBulkFaultFaultOnHost (1491)
/* ns1:ArrayOfDvsOperationBulkFaultFaultOnHost */
class SOAP_CMAC ns1__ArrayOfDvsOperationBulkFaultFaultOnHost : public xsd__anyType
{
public:
	std::vector<class ns1__DvsOperationBulkFaultFaultOnHost * >DvsOperationBulkFaultFaultOnHost;	/* optional element of type ns1:DvsOperationBulkFaultFaultOnHost */
public:
	virtual int soap_type() const { return 1491; } /* = unique id SOAP_TYPE_ns1__ArrayOfDvsOperationBulkFaultFaultOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDvsOperationBulkFaultFaultOnHost() { ns1__ArrayOfDvsOperationBulkFaultFaultOnHost::soap_default(NULL); }
	virtual ~ns1__ArrayOfDvsOperationBulkFaultFaultOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData
#define SOAP_TYPE_ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData (1635)
/* ns1:ArrayOfMultipleCertificatesVerifyFaultThumbprintData */
class SOAP_CMAC ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData : public xsd__anyType
{
public:
	std::vector<class ns1__MultipleCertificatesVerifyFaultThumbprintData * >MultipleCertificatesVerifyFaultThumbprintData;	/* optional element of type ns1:MultipleCertificatesVerifyFaultThumbprintData */
public:
	virtual int soap_type() const { return 1635; } /* = unique id SOAP_TYPE_ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData() { ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData::soap_default(NULL); }
	virtual ~ns1__ArrayOfMultipleCertificatesVerifyFaultThumbprintData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileUpdateFailedUpdateFailure
#define SOAP_TYPE_ns1__ArrayOfProfileUpdateFailedUpdateFailure (1766)
/* ns1:ArrayOfProfileUpdateFailedUpdateFailure */
class SOAP_CMAC ns1__ArrayOfProfileUpdateFailedUpdateFailure : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileUpdateFailedUpdateFailure * >ProfileUpdateFailedUpdateFailure;	/* optional element of type ns1:ProfileUpdateFailedUpdateFailure */
public:
	virtual int soap_type() const { return 1766; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileUpdateFailedUpdateFailure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileUpdateFailedUpdateFailure() { ns1__ArrayOfProfileUpdateFailedUpdateFailure::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileUpdateFailedUpdateFailure() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostActiveDirectory
#define SOAP_TYPE_ns1__ArrayOfHostActiveDirectory (1885)
/* ns1:ArrayOfHostActiveDirectory */
class SOAP_CMAC ns1__ArrayOfHostActiveDirectory : public xsd__anyType
{
public:
	std::vector<class ns1__HostActiveDirectory * >HostActiveDirectory;	/* optional element of type ns1:HostActiveDirectory */
public:
	virtual int soap_type() const { return 1885; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostActiveDirectory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostActiveDirectory() { ns1__ArrayOfHostActiveDirectory::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostActiveDirectory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostAuthenticationStoreInfo
#define SOAP_TYPE_ns1__ArrayOfHostAuthenticationStoreInfo (1888)
/* ns1:ArrayOfHostAuthenticationStoreInfo */
class SOAP_CMAC ns1__ArrayOfHostAuthenticationStoreInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostAuthenticationStoreInfo * >HostAuthenticationStoreInfo;	/* optional element of type ns1:HostAuthenticationStoreInfo */
public:
	virtual int soap_type() const { return 1888; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostAuthenticationStoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostAuthenticationStoreInfo() { ns1__ArrayOfHostAuthenticationStoreInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostAuthenticationStoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAutoStartPowerInfo
#define SOAP_TYPE_ns1__ArrayOfAutoStartPowerInfo (1891)
/* ns1:ArrayOfAutoStartPowerInfo */
class SOAP_CMAC ns1__ArrayOfAutoStartPowerInfo : public xsd__anyType
{
public:
	std::vector<class ns1__AutoStartPowerInfo * >AutoStartPowerInfo;	/* optional element of type ns1:AutoStartPowerInfo */
public:
	virtual int soap_type() const { return 1891; } /* = unique id SOAP_TYPE_ns1__ArrayOfAutoStartPowerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfAutoStartPowerInfo() { ns1__ArrayOfAutoStartPowerInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfAutoStartPowerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostBootDevice
#define SOAP_TYPE_ns1__ArrayOfHostBootDevice (1895)
/* ns1:ArrayOfHostBootDevice */
class SOAP_CMAC ns1__ArrayOfHostBootDevice : public xsd__anyType
{
public:
	std::vector<class ns1__HostBootDevice * >HostBootDevice;	/* optional element of type ns1:HostBootDevice */
public:
	virtual int soap_type() const { return 1895; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostBootDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostBootDevice() { ns1__ArrayOfHostBootDevice::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostBootDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostConnectInfoNetworkInfo
#define SOAP_TYPE_ns1__ArrayOfHostConnectInfoNetworkInfo (1902)
/* ns1:ArrayOfHostConnectInfoNetworkInfo */
class SOAP_CMAC ns1__ArrayOfHostConnectInfoNetworkInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostConnectInfoNetworkInfo * >HostConnectInfoNetworkInfo;	/* optional element of type ns1:HostConnectInfoNetworkInfo */
public:
	virtual int soap_type() const { return 1902; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostConnectInfoNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostConnectInfoNetworkInfo() { ns1__ArrayOfHostConnectInfoNetworkInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostConnectInfoNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDatastoreConnectInfo
#define SOAP_TYPE_ns1__ArrayOfHostDatastoreConnectInfo (1905)
/* ns1:ArrayOfHostDatastoreConnectInfo */
class SOAP_CMAC ns1__ArrayOfHostDatastoreConnectInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostDatastoreConnectInfo * >HostDatastoreConnectInfo;	/* optional element of type ns1:HostDatastoreConnectInfo */
public:
	virtual int soap_type() const { return 1905; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDatastoreConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDatastoreConnectInfo() { ns1__ArrayOfHostDatastoreConnectInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDatastoreConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostCpuIdInfo
#define SOAP_TYPE_ns1__ArrayOfHostCpuIdInfo (1912)
/* ns1:ArrayOfHostCpuIdInfo */
class SOAP_CMAC ns1__ArrayOfHostCpuIdInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostCpuIdInfo * >HostCpuIdInfo;	/* optional element of type ns1:HostCpuIdInfo */
public:
	virtual int soap_type() const { return 1912; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostCpuIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostCpuIdInfo() { ns1__ArrayOfHostCpuIdInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostCpuIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfFileInfo
#define SOAP_TYPE_ns1__ArrayOfFileInfo (1916)
/* ns1:ArrayOfFileInfo */
class SOAP_CMAC ns1__ArrayOfFileInfo : public xsd__anyType
{
public:
	std::vector<class ns1__FileInfo * >FileInfo;	/* optional element of type ns1:FileInfo */
public:
	virtual int soap_type() const { return 1916; } /* = unique id SOAP_TYPE_ns1__ArrayOfFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfFileInfo() { ns1__ArrayOfFileInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfFileQuery
#define SOAP_TYPE_ns1__ArrayOfFileQuery (1918)
/* ns1:ArrayOfFileQuery */
class SOAP_CMAC ns1__ArrayOfFileQuery : public xsd__anyType
{
public:
	std::vector<class ns1__FileQuery * >FileQuery;	/* optional element of type ns1:FileQuery */
public:
	virtual int soap_type() const { return 1918; } /* = unique id SOAP_TYPE_ns1__ArrayOfFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfFileQuery() { ns1__ArrayOfFileQuery::soap_default(NULL); }
	virtual ~ns1__ArrayOfFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDatastoreBrowserSearchResults
#define SOAP_TYPE_ns1__ArrayOfHostDatastoreBrowserSearchResults (1943)
/* ns1:ArrayOfHostDatastoreBrowserSearchResults */
class SOAP_CMAC ns1__ArrayOfHostDatastoreBrowserSearchResults : public xsd__anyType
{
public:
	std::vector<class ns1__HostDatastoreBrowserSearchResults * >HostDatastoreBrowserSearchResults;	/* optional element of type ns1:HostDatastoreBrowserSearchResults */
public:
	virtual int soap_type() const { return 1943; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDatastoreBrowserSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDatastoreBrowserSearchResults() { ns1__ArrayOfHostDatastoreBrowserSearchResults::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDatastoreBrowserSearchResults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVmfsDatastoreOption
#define SOAP_TYPE_ns1__ArrayOfVmfsDatastoreOption (1957)
/* ns1:ArrayOfVmfsDatastoreOption */
class SOAP_CMAC ns1__ArrayOfVmfsDatastoreOption : public xsd__anyType
{
public:
	std::vector<class ns1__VmfsDatastoreOption * >VmfsDatastoreOption;	/* optional element of type ns1:VmfsDatastoreOption */
public:
	virtual int soap_type() const { return 1957; } /* = unique id SOAP_TYPE_ns1__ArrayOfVmfsDatastoreOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVmfsDatastoreOption() { ns1__ArrayOfVmfsDatastoreOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfVmfsDatastoreOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDateTimeSystemTimeZone
#define SOAP_TYPE_ns1__ArrayOfHostDateTimeSystemTimeZone (1961)
/* ns1:ArrayOfHostDateTimeSystemTimeZone */
class SOAP_CMAC ns1__ArrayOfHostDateTimeSystemTimeZone : public xsd__anyType
{
public:
	std::vector<class ns1__HostDateTimeSystemTimeZone * >HostDateTimeSystemTimeZone;	/* optional element of type ns1:HostDateTimeSystemTimeZone */
public:
	virtual int soap_type() const { return 1961; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDateTimeSystemTimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDateTimeSystemTimeZone() { ns1__ArrayOfHostDateTimeSystemTimeZone::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDateTimeSystemTimeZone() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDhcpServiceConfig
#define SOAP_TYPE_ns1__ArrayOfHostDhcpServiceConfig (1965)
/* ns1:ArrayOfHostDhcpServiceConfig */
class SOAP_CMAC ns1__ArrayOfHostDhcpServiceConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostDhcpServiceConfig * >HostDhcpServiceConfig;	/* optional element of type ns1:HostDhcpServiceConfig */
public:
	virtual int soap_type() const { return 1965; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDhcpServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDhcpServiceConfig() { ns1__ArrayOfHostDhcpServiceConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDhcpServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDhcpService
#define SOAP_TYPE_ns1__ArrayOfHostDhcpService (1967)
/* ns1:ArrayOfHostDhcpService */
class SOAP_CMAC ns1__ArrayOfHostDhcpService : public xsd__anyType
{
public:
	std::vector<class ns1__HostDhcpService * >HostDhcpService;	/* optional element of type ns1:HostDhcpService */
public:
	virtual int soap_type() const { return 1967; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDhcpService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDhcpService() { ns1__ArrayOfHostDhcpService::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDhcpService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartitionCreateOption
#define SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartitionCreateOption (1969)
/* ns1:ArrayOfHostDiagnosticPartitionCreateOption */
class SOAP_CMAC ns1__ArrayOfHostDiagnosticPartitionCreateOption : public xsd__anyType
{
public:
	std::vector<class ns1__HostDiagnosticPartitionCreateOption * >HostDiagnosticPartitionCreateOption;	/* optional element of type ns1:HostDiagnosticPartitionCreateOption */
public:
	virtual int soap_type() const { return 1969; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartitionCreateOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiagnosticPartitionCreateOption() { ns1__ArrayOfHostDiagnosticPartitionCreateOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiagnosticPartitionCreateOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartition
#define SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartition (1973)
/* ns1:ArrayOfHostDiagnosticPartition */
class SOAP_CMAC ns1__ArrayOfHostDiagnosticPartition : public xsd__anyType
{
public:
	std::vector<class ns1__HostDiagnosticPartition * >HostDiagnosticPartition;	/* optional element of type ns1:HostDiagnosticPartition */
public:
	virtual int soap_type() const { return 1973; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiagnosticPartition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiagnosticPartition() { ns1__ArrayOfHostDiagnosticPartition::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiagnosticPartition() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiskPartitionAttributes
#define SOAP_TYPE_ns1__ArrayOfHostDiskPartitionAttributes (1979)
/* ns1:ArrayOfHostDiskPartitionAttributes */
class SOAP_CMAC ns1__ArrayOfHostDiskPartitionAttributes : public xsd__anyType
{
public:
	std::vector<class ns1__HostDiskPartitionAttributes * >HostDiskPartitionAttributes;	/* optional element of type ns1:HostDiskPartitionAttributes */
public:
	virtual int soap_type() const { return 1979; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiskPartitionAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiskPartitionAttributes() { ns1__ArrayOfHostDiskPartitionAttributes::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiskPartitionAttributes() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiskPartitionBlockRange
#define SOAP_TYPE_ns1__ArrayOfHostDiskPartitionBlockRange (1981)
/* ns1:ArrayOfHostDiskPartitionBlockRange */
class SOAP_CMAC ns1__ArrayOfHostDiskPartitionBlockRange : public xsd__anyType
{
public:
	std::vector<ns1__HostDiskPartitionBlockRange * >HostDiskPartitionBlockRange;	/* optional element of type ns1:HostDiskPartitionBlockRange */
public:
	virtual int soap_type() const { return 1981; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiskPartitionBlockRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiskPartitionBlockRange() { ns1__ArrayOfHostDiskPartitionBlockRange::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiskPartitionBlockRange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiskPartitionInfo
#define SOAP_TYPE_ns1__ArrayOfHostDiskPartitionInfo (1985)
/* ns1:ArrayOfHostDiskPartitionInfo */
class SOAP_CMAC ns1__ArrayOfHostDiskPartitionInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostDiskPartitionInfo * >HostDiskPartitionInfo;	/* optional element of type ns1:HostDiskPartitionInfo */
public:
	virtual int soap_type() const { return 1985; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiskPartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiskPartitionInfo() { ns1__ArrayOfHostDiskPartitionInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiskPartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostFeatureVersionInfo
#define SOAP_TYPE_ns1__ArrayOfHostFeatureVersionInfo (1989)
/* ns1:ArrayOfHostFeatureVersionInfo */
class SOAP_CMAC ns1__ArrayOfHostFeatureVersionInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostFeatureVersionInfo * >HostFeatureVersionInfo;	/* optional element of type ns1:HostFeatureVersionInfo */
public:
	virtual int soap_type() const { return 1989; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostFeatureVersionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostFeatureVersionInfo() { ns1__ArrayOfHostFeatureVersionInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostFeatureVersionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostFileSystemMountInfo
#define SOAP_TYPE_ns1__ArrayOfHostFileSystemMountInfo (1994)
/* ns1:ArrayOfHostFileSystemMountInfo */
class SOAP_CMAC ns1__ArrayOfHostFileSystemMountInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostFileSystemMountInfo * >HostFileSystemMountInfo;	/* optional element of type ns1:HostFileSystemMountInfo */
public:
	virtual int soap_type() const { return 1994; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostFileSystemMountInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostFileSystemMountInfo() { ns1__ArrayOfHostFileSystemMountInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostFileSystemMountInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNasVolumeConfig
#define SOAP_TYPE_ns1__ArrayOfHostNasVolumeConfig (1998)
/* ns1:ArrayOfHostNasVolumeConfig */
class SOAP_CMAC ns1__ArrayOfHostNasVolumeConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostNasVolumeConfig * >HostNasVolumeConfig;	/* optional element of type ns1:HostNasVolumeConfig */
public:
	virtual int soap_type() const { return 1998; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNasVolumeConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNasVolumeConfig() { ns1__ArrayOfHostNasVolumeConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNasVolumeConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostFirewallConfigRuleSetConfig
#define SOAP_TYPE_ns1__ArrayOfHostFirewallConfigRuleSetConfig (2003)
/* ns1:ArrayOfHostFirewallConfigRuleSetConfig */
class SOAP_CMAC ns1__ArrayOfHostFirewallConfigRuleSetConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostFirewallConfigRuleSetConfig * >HostFirewallConfigRuleSetConfig;	/* optional element of type ns1:HostFirewallConfigRuleSetConfig */
public:
	virtual int soap_type() const { return 2003; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostFirewallConfigRuleSetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostFirewallConfigRuleSetConfig() { ns1__ArrayOfHostFirewallConfigRuleSetConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostFirewallConfigRuleSetConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostCpuPackage
#define SOAP_TYPE_ns1__ArrayOfHostCpuPackage (2014)
/* ns1:ArrayOfHostCpuPackage */
class SOAP_CMAC ns1__ArrayOfHostCpuPackage : public xsd__anyType
{
public:
	std::vector<class ns1__HostCpuPackage * >HostCpuPackage;	/* optional element of type ns1:HostCpuPackage */
public:
	virtual int soap_type() const { return 2014; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostCpuPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostCpuPackage() { ns1__ArrayOfHostCpuPackage::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostCpuPackage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNumaNode
#define SOAP_TYPE_ns1__ArrayOfHostNumaNode (2017)
/* ns1:ArrayOfHostNumaNode */
class SOAP_CMAC ns1__ArrayOfHostNumaNode : public xsd__anyType
{
public:
	std::vector<class ns1__HostNumaNode * >HostNumaNode;	/* optional element of type ns1:HostNumaNode */
public:
	virtual int soap_type() const { return 2017; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNumaNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNumaNode() { ns1__ArrayOfHostNumaNode::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNumaNode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostHardwareElementInfo
#define SOAP_TYPE_ns1__ArrayOfHostHardwareElementInfo (2020)
/* ns1:ArrayOfHostHardwareElementInfo */
class SOAP_CMAC ns1__ArrayOfHostHardwareElementInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostHardwareElementInfo * >HostHardwareElementInfo;	/* optional element of type ns1:HostHardwareElementInfo */
public:
	virtual int soap_type() const { return 2020; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostHardwareElementInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostHardwareElementInfo() { ns1__ArrayOfHostHardwareElementInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostHardwareElementInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostStorageOperationalInfo
#define SOAP_TYPE_ns1__ArrayOfHostStorageOperationalInfo (2022)
/* ns1:ArrayOfHostStorageOperationalInfo */
class SOAP_CMAC ns1__ArrayOfHostStorageOperationalInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostStorageOperationalInfo * >HostStorageOperationalInfo;	/* optional element of type ns1:HostStorageOperationalInfo */
public:
	virtual int soap_type() const { return 2022; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostStorageOperationalInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostStorageOperationalInfo() { ns1__ArrayOfHostStorageOperationalInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostStorageOperationalInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostStorageElementInfo
#define SOAP_TYPE_ns1__ArrayOfHostStorageElementInfo (2024)
/* ns1:ArrayOfHostStorageElementInfo */
class SOAP_CMAC ns1__ArrayOfHostStorageElementInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostStorageElementInfo * >HostStorageElementInfo;	/* optional element of type ns1:HostStorageElementInfo */
public:
	virtual int soap_type() const { return 2024; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostStorageElementInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostStorageElementInfo() { ns1__ArrayOfHostStorageElementInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostStorageElementInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostHostBusAdapter
#define SOAP_TYPE_ns1__ArrayOfHostHostBusAdapter (2028)
/* ns1:ArrayOfHostHostBusAdapter */
class SOAP_CMAC ns1__ArrayOfHostHostBusAdapter : public xsd__anyType
{
public:
	std::vector<class ns1__HostHostBusAdapter * >HostHostBusAdapter;	/* optional element of type ns1:HostHostBusAdapter */
public:
	virtual int soap_type() const { return 2028; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostHostBusAdapter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostHostBusAdapter() { ns1__ArrayOfHostHostBusAdapter::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostHostBusAdapter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaParamValue
#define SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaParamValue (2033)
/* ns1:ArrayOfHostInternetScsiHbaParamValue */
class SOAP_CMAC ns1__ArrayOfHostInternetScsiHbaParamValue : public xsd__anyType
{
public:
	std::vector<ns1__HostInternetScsiHbaParamValue * >HostInternetScsiHbaParamValue;	/* optional element of type ns1:HostInternetScsiHbaParamValue */
public:
	virtual int soap_type() const { return 2033; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaParamValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostInternetScsiHbaParamValue() { ns1__ArrayOfHostInternetScsiHbaParamValue::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostInternetScsiHbaParamValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaSendTarget
#define SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaSendTarget (2043)
/* ns1:ArrayOfHostInternetScsiHbaSendTarget */
class SOAP_CMAC ns1__ArrayOfHostInternetScsiHbaSendTarget : public xsd__anyType
{
public:
	std::vector<ns1__HostInternetScsiHbaSendTarget * >HostInternetScsiHbaSendTarget;	/* optional element of type ns1:HostInternetScsiHbaSendTarget */
public:
	virtual int soap_type() const { return 2043; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaSendTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostInternetScsiHbaSendTarget() { ns1__ArrayOfHostInternetScsiHbaSendTarget::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostInternetScsiHbaSendTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaStaticTarget
#define SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaStaticTarget (2045)
/* ns1:ArrayOfHostInternetScsiHbaStaticTarget */
class SOAP_CMAC ns1__ArrayOfHostInternetScsiHbaStaticTarget : public xsd__anyType
{
public:
	std::vector<ns1__HostInternetScsiHbaStaticTarget * >HostInternetScsiHbaStaticTarget;	/* optional element of type ns1:HostInternetScsiHbaStaticTarget */
public:
	virtual int soap_type() const { return 2045; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostInternetScsiHbaStaticTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostInternetScsiHbaStaticTarget() { ns1__ArrayOfHostInternetScsiHbaStaticTarget::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostInternetScsiHbaStaticTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostProxySwitchConfig
#define SOAP_TYPE_ns1__ArrayOfHostProxySwitchConfig (2050)
/* ns1:ArrayOfHostProxySwitchConfig */
class SOAP_CMAC ns1__ArrayOfHostProxySwitchConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostProxySwitchConfig * >HostProxySwitchConfig;	/* optional element of type ns1:HostProxySwitchConfig */
public:
	virtual int soap_type() const { return 2050; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostProxySwitchConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostProxySwitchConfig() { ns1__ArrayOfHostProxySwitchConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostProxySwitchConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostProxySwitch
#define SOAP_TYPE_ns1__ArrayOfHostProxySwitch (2052)
/* ns1:ArrayOfHostProxySwitch */
class SOAP_CMAC ns1__ArrayOfHostProxySwitch : public xsd__anyType
{
public:
	std::vector<class ns1__HostProxySwitch * >HostProxySwitch;	/* optional element of type ns1:HostProxySwitch */
public:
	virtual int soap_type() const { return 2052; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostProxySwitch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostProxySwitch() { ns1__ArrayOfHostProxySwitch::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostProxySwitch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostIpConfigIpV6Address
#define SOAP_TYPE_ns1__ArrayOfHostIpConfigIpV6Address (2054)
/* ns1:ArrayOfHostIpConfigIpV6Address */
class SOAP_CMAC ns1__ArrayOfHostIpConfigIpV6Address : public xsd__anyType
{
public:
	std::vector<class ns1__HostIpConfigIpV6Address * >HostIpConfigIpV6Address;	/* optional element of type ns1:HostIpConfigIpV6Address */
public:
	virtual int soap_type() const { return 2054; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostIpConfigIpV6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostIpConfigIpV6Address() { ns1__ArrayOfHostIpConfigIpV6Address::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostIpConfigIpV6Address() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostIpRouteEntry
#define SOAP_TYPE_ns1__ArrayOfHostIpRouteEntry (2060)
/* ns1:ArrayOfHostIpRouteEntry */
class SOAP_CMAC ns1__ArrayOfHostIpRouteEntry : public xsd__anyType
{
public:
	std::vector<class ns1__HostIpRouteEntry * >HostIpRouteEntry;	/* optional element of type ns1:HostIpRouteEntry */
public:
	virtual int soap_type() const { return 2060; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostIpRouteEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostIpRouteEntry() { ns1__ArrayOfHostIpRouteEntry::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostIpRouteEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostIpRouteOp
#define SOAP_TYPE_ns1__ArrayOfHostIpRouteOp (2062)
/* ns1:ArrayOfHostIpRouteOp */
class SOAP_CMAC ns1__ArrayOfHostIpRouteOp : public xsd__anyType
{
public:
	std::vector<class ns1__HostIpRouteOp * >HostIpRouteOp;	/* optional element of type ns1:HostIpRouteOp */
public:
	virtual int soap_type() const { return 2062; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostIpRouteOp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostIpRouteOp() { ns1__ArrayOfHostIpRouteOp::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostIpRouteOp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfKernelModuleInfo
#define SOAP_TYPE_ns1__ArrayOfKernelModuleInfo (2068)
/* ns1:ArrayOfKernelModuleInfo */
class SOAP_CMAC ns1__ArrayOfKernelModuleInfo : public xsd__anyType
{
public:
	std::vector<class ns1__KernelModuleInfo * >KernelModuleInfo;	/* optional element of type ns1:KernelModuleInfo */
public:
	virtual int soap_type() const { return 2068; } /* = unique id SOAP_TYPE_ns1__ArrayOfKernelModuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfKernelModuleInfo() { ns1__ArrayOfKernelModuleInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfKernelModuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostAccountSpec
#define SOAP_TYPE_ns1__ArrayOfHostAccountSpec (2072)
/* ns1:ArrayOfHostAccountSpec */
class SOAP_CMAC ns1__ArrayOfHostAccountSpec : public xsd__anyType
{
public:
	std::vector<ns1__HostAccountSpec * >HostAccountSpec;	/* optional element of type ns1:HostAccountSpec */
public:
	virtual int soap_type() const { return 2072; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostAccountSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostAccountSpec() { ns1__ArrayOfHostAccountSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostAccountSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostMultipathInfoLogicalUnit
#define SOAP_TYPE_ns1__ArrayOfHostMultipathInfoLogicalUnit (2084)
/* ns1:ArrayOfHostMultipathInfoLogicalUnit */
class SOAP_CMAC ns1__ArrayOfHostMultipathInfoLogicalUnit : public xsd__anyType
{
public:
	std::vector<class ns1__HostMultipathInfoLogicalUnit * >HostMultipathInfoLogicalUnit;	/* optional element of type ns1:HostMultipathInfoLogicalUnit */
public:
	virtual int soap_type() const { return 2084; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostMultipathInfoLogicalUnit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostMultipathInfoLogicalUnit() { ns1__ArrayOfHostMultipathInfoLogicalUnit::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostMultipathInfoLogicalUnit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostMultipathInfoPath
#define SOAP_TYPE_ns1__ArrayOfHostMultipathInfoPath (2086)
/* ns1:ArrayOfHostMultipathInfoPath */
class SOAP_CMAC ns1__ArrayOfHostMultipathInfoPath : public xsd__anyType
{
public:
	std::vector<class ns1__HostMultipathInfoPath * >HostMultipathInfoPath;	/* optional element of type ns1:HostMultipathInfoPath */
public:
	virtual int soap_type() const { return 2086; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostMultipathInfoPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostMultipathInfoPath() { ns1__ArrayOfHostMultipathInfoPath::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostMultipathInfoPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostMultipathStateInfoPath
#define SOAP_TYPE_ns1__ArrayOfHostMultipathStateInfoPath (2089)
/* ns1:ArrayOfHostMultipathStateInfoPath */
class SOAP_CMAC ns1__ArrayOfHostMultipathStateInfoPath : public xsd__anyType
{
public:
	std::vector<class ns1__HostMultipathStateInfoPath * >HostMultipathStateInfoPath;	/* optional element of type ns1:HostMultipathStateInfoPath */
public:
	virtual int soap_type() const { return 2089; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostMultipathStateInfoPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostMultipathStateInfoPath() { ns1__ArrayOfHostMultipathStateInfoPath::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostMultipathStateInfoPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNatServicePortForwardSpec
#define SOAP_TYPE_ns1__ArrayOfHostNatServicePortForwardSpec (2092)
/* ns1:ArrayOfHostNatServicePortForwardSpec */
class SOAP_CMAC ns1__ArrayOfHostNatServicePortForwardSpec : public xsd__anyType
{
public:
	std::vector<class ns1__HostNatServicePortForwardSpec * >HostNatServicePortForwardSpec;	/* optional element of type ns1:HostNatServicePortForwardSpec */
public:
	virtual int soap_type() const { return 2092; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNatServicePortForwardSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNatServicePortForwardSpec() { ns1__ArrayOfHostNatServicePortForwardSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNatServicePortForwardSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNatServiceConfig
#define SOAP_TYPE_ns1__ArrayOfHostNatServiceConfig (2096)
/* ns1:ArrayOfHostNatServiceConfig */
class SOAP_CMAC ns1__ArrayOfHostNatServiceConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostNatServiceConfig * >HostNatServiceConfig;	/* optional element of type ns1:HostNatServiceConfig */
public:
	virtual int soap_type() const { return 2096; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNatServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNatServiceConfig() { ns1__ArrayOfHostNatServiceConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNatServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNatService
#define SOAP_TYPE_ns1__ArrayOfHostNatService (2098)
/* ns1:ArrayOfHostNatService */
class SOAP_CMAC ns1__ArrayOfHostNatService : public xsd__anyType
{
public:
	std::vector<class ns1__HostNatService * >HostNatService;	/* optional element of type ns1:HostNatService */
public:
	virtual int soap_type() const { return 2098; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNatService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNatService() { ns1__ArrayOfHostNatService::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNatService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostNumericSensorInfo
#define SOAP_TYPE_ns1__ArrayOfHostNumericSensorInfo (2112)
/* ns1:ArrayOfHostNumericSensorInfo */
class SOAP_CMAC ns1__ArrayOfHostNumericSensorInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostNumericSensorInfo * >HostNumericSensorInfo;	/* optional element of type ns1:HostNumericSensorInfo */
public:
	virtual int soap_type() const { return 2112; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostNumericSensorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostNumericSensorInfo() { ns1__ArrayOfHostNumericSensorInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostNumericSensorInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch
#define SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch (2115)
/* ns1:ArrayOfHostPatchManagerStatusPrerequisitePatch */
class SOAP_CMAC ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch : public xsd__anyType
{
public:
	std::vector<class ns1__HostPatchManagerStatusPrerequisitePatch * >HostPatchManagerStatusPrerequisitePatch;	/* optional element of type ns1:HostPatchManagerStatusPrerequisitePatch */
public:
	virtual int soap_type() const { return 2115; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch() { ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPatchManagerStatusPrerequisitePatch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatus
#define SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatus (2117)
/* ns1:ArrayOfHostPatchManagerStatus */
class SOAP_CMAC ns1__ArrayOfHostPatchManagerStatus : public xsd__anyType
{
public:
	std::vector<class ns1__HostPatchManagerStatus * >HostPatchManagerStatus;	/* optional element of type ns1:HostPatchManagerStatus */
public:
	virtual int soap_type() const { return 2117; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPatchManagerStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPatchManagerStatus() { ns1__ArrayOfHostPatchManagerStatus::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPatchManagerStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPathSelectionPolicyOption
#define SOAP_TYPE_ns1__ArrayOfHostPathSelectionPolicyOption (2121)
/* ns1:ArrayOfHostPathSelectionPolicyOption */
class SOAP_CMAC ns1__ArrayOfHostPathSelectionPolicyOption : public xsd__anyType
{
public:
	std::vector<class ns1__HostPathSelectionPolicyOption * >HostPathSelectionPolicyOption;	/* optional element of type ns1:HostPathSelectionPolicyOption */
public:
	virtual int soap_type() const { return 2121; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPathSelectionPolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPathSelectionPolicyOption() { ns1__ArrayOfHostPathSelectionPolicyOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPathSelectionPolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPciDevice
#define SOAP_TYPE_ns1__ArrayOfHostPciDevice (2123)
/* ns1:ArrayOfHostPciDevice */
class SOAP_CMAC ns1__ArrayOfHostPciDevice : public xsd__anyType
{
public:
	std::vector<class ns1__HostPciDevice * >HostPciDevice;	/* optional element of type ns1:HostPciDevice */
public:
	virtual int soap_type() const { return 2123; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPciDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPciDevice() { ns1__ArrayOfHostPciDevice::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPciDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPciPassthruConfig
#define SOAP_TYPE_ns1__ArrayOfHostPciPassthruConfig (2125)
/* ns1:ArrayOfHostPciPassthruConfig */
class SOAP_CMAC ns1__ArrayOfHostPciPassthruConfig : public xsd__anyType
{
public:
	std::vector<ns1__HostPciPassthruConfig * >HostPciPassthruConfig;	/* optional element of type ns1:HostPciPassthruConfig */
public:
	virtual int soap_type() const { return 2125; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPciPassthruConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPciPassthruConfig() { ns1__ArrayOfHostPciPassthruConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPciPassthruConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPciPassthruInfo
#define SOAP_TYPE_ns1__ArrayOfHostPciPassthruInfo (2127)
/* ns1:ArrayOfHostPciPassthruInfo */
class SOAP_CMAC ns1__ArrayOfHostPciPassthruInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostPciPassthruInfo * >HostPciPassthruInfo;	/* optional element of type ns1:HostPciPassthruInfo */
public:
	virtual int soap_type() const { return 2127; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPciPassthruInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPciPassthruInfo() { ns1__ArrayOfHostPciPassthruInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPciPassthruInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicConfig
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicConfig (2130)
/* ns1:ArrayOfPhysicalNicConfig */
class SOAP_CMAC ns1__ArrayOfPhysicalNicConfig : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNicConfig * >PhysicalNicConfig;	/* optional element of type ns1:PhysicalNicConfig */
public:
	virtual int soap_type() const { return 2130; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicConfig() { ns1__ArrayOfPhysicalNicConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicLinkInfo
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicLinkInfo (2132)
/* ns1:ArrayOfPhysicalNicLinkInfo */
class SOAP_CMAC ns1__ArrayOfPhysicalNicLinkInfo : public xsd__anyType
{
public:
	std::vector<ns1__PhysicalNicLinkInfo * >PhysicalNicLinkInfo;	/* optional element of type ns1:PhysicalNicLinkInfo */
public:
	virtual int soap_type() const { return 2132; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicLinkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicLinkInfo() { ns1__ArrayOfPhysicalNicLinkInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicLinkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicIpHint
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicIpHint (2135)
/* ns1:ArrayOfPhysicalNicIpHint */
class SOAP_CMAC ns1__ArrayOfPhysicalNicIpHint : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNicIpHint * >PhysicalNicIpHint;	/* optional element of type ns1:PhysicalNicIpHint */
public:
	virtual int soap_type() const { return 2135; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicIpHint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicIpHint() { ns1__ArrayOfPhysicalNicIpHint::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicIpHint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicNameHint
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicNameHint (2137)
/* ns1:ArrayOfPhysicalNicNameHint */
class SOAP_CMAC ns1__ArrayOfPhysicalNicNameHint : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNicNameHint * >PhysicalNicNameHint;	/* optional element of type ns1:PhysicalNicNameHint */
public:
	virtual int soap_type() const { return 2137; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicNameHint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicNameHint() { ns1__ArrayOfPhysicalNicNameHint::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicNameHint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicHintInfo
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicHintInfo (2139)
/* ns1:ArrayOfPhysicalNicHintInfo */
class SOAP_CMAC ns1__ArrayOfPhysicalNicHintInfo : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNicHintInfo * >PhysicalNicHintInfo;	/* optional element of type ns1:PhysicalNicHintInfo */
public:
	virtual int soap_type() const { return 2139; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicHintInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicHintInfo() { ns1__ArrayOfPhysicalNicHintInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicHintInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNic
#define SOAP_TYPE_ns1__ArrayOfPhysicalNic (2143)
/* ns1:ArrayOfPhysicalNic */
class SOAP_CMAC ns1__ArrayOfPhysicalNic : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNic * >PhysicalNic;	/* optional element of type ns1:PhysicalNic */
public:
	virtual int soap_type() const { return 2143; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNic() { ns1__ArrayOfPhysicalNic::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyAdapter
#define SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyAdapter (2145)
/* ns1:ArrayOfHostPlugStoreTopologyAdapter */
class SOAP_CMAC ns1__ArrayOfHostPlugStoreTopologyAdapter : public xsd__anyType
{
public:
	std::vector<class ns1__HostPlugStoreTopologyAdapter * >HostPlugStoreTopologyAdapter;	/* optional element of type ns1:HostPlugStoreTopologyAdapter */
public:
	virtual int soap_type() const { return 2145; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyAdapter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPlugStoreTopologyAdapter() { ns1__ArrayOfHostPlugStoreTopologyAdapter::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPlugStoreTopologyAdapter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPath
#define SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPath (2147)
/* ns1:ArrayOfHostPlugStoreTopologyPath */
class SOAP_CMAC ns1__ArrayOfHostPlugStoreTopologyPath : public xsd__anyType
{
public:
	std::vector<class ns1__HostPlugStoreTopologyPath * >HostPlugStoreTopologyPath;	/* optional element of type ns1:HostPlugStoreTopologyPath */
public:
	virtual int soap_type() const { return 2147; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPlugStoreTopologyPath() { ns1__ArrayOfHostPlugStoreTopologyPath::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPlugStoreTopologyPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyDevice
#define SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyDevice (2149)
/* ns1:ArrayOfHostPlugStoreTopologyDevice */
class SOAP_CMAC ns1__ArrayOfHostPlugStoreTopologyDevice : public xsd__anyType
{
public:
	std::vector<class ns1__HostPlugStoreTopologyDevice * >HostPlugStoreTopologyDevice;	/* optional element of type ns1:HostPlugStoreTopologyDevice */
public:
	virtual int soap_type() const { return 2149; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPlugStoreTopologyDevice() { ns1__ArrayOfHostPlugStoreTopologyDevice::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPlugStoreTopologyDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPlugin
#define SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPlugin (2151)
/* ns1:ArrayOfHostPlugStoreTopologyPlugin */
class SOAP_CMAC ns1__ArrayOfHostPlugStoreTopologyPlugin : public xsd__anyType
{
public:
	std::vector<class ns1__HostPlugStoreTopologyPlugin * >HostPlugStoreTopologyPlugin;	/* optional element of type ns1:HostPlugStoreTopologyPlugin */
public:
	virtual int soap_type() const { return 2151; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyPlugin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPlugStoreTopologyPlugin() { ns1__ArrayOfHostPlugStoreTopologyPlugin::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPlugStoreTopologyPlugin() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyTarget
#define SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyTarget (2153)
/* ns1:ArrayOfHostPlugStoreTopologyTarget */
class SOAP_CMAC ns1__ArrayOfHostPlugStoreTopologyTarget : public xsd__anyType
{
public:
	std::vector<class ns1__HostPlugStoreTopologyTarget * >HostPlugStoreTopologyTarget;	/* optional element of type ns1:HostPlugStoreTopologyTarget */
public:
	virtual int soap_type() const { return 2153; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPlugStoreTopologyTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPlugStoreTopologyTarget() { ns1__ArrayOfHostPlugStoreTopologyTarget::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPlugStoreTopologyTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPortGroupConfig
#define SOAP_TYPE_ns1__ArrayOfHostPortGroupConfig (2157)
/* ns1:ArrayOfHostPortGroupConfig */
class SOAP_CMAC ns1__ArrayOfHostPortGroupConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostPortGroupConfig * >HostPortGroupConfig;	/* optional element of type ns1:HostPortGroupConfig */
public:
	virtual int soap_type() const { return 2157; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPortGroupConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPortGroupConfig() { ns1__ArrayOfHostPortGroupConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPortGroupConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPortGroupPort
#define SOAP_TYPE_ns1__ArrayOfHostPortGroupPort (2159)
/* ns1:ArrayOfHostPortGroupPort */
class SOAP_CMAC ns1__ArrayOfHostPortGroupPort : public xsd__anyType
{
public:
	std::vector<class ns1__HostPortGroupPort * >HostPortGroupPort;	/* optional element of type ns1:HostPortGroupPort */
public:
	virtual int soap_type() const { return 2159; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPortGroupPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPortGroupPort() { ns1__ArrayOfHostPortGroupPort::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPortGroupPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPortGroup
#define SOAP_TYPE_ns1__ArrayOfHostPortGroup (2161)
/* ns1:ArrayOfHostPortGroup */
class SOAP_CMAC ns1__ArrayOfHostPortGroup : public xsd__anyType
{
public:
	std::vector<class ns1__HostPortGroup * >HostPortGroup;	/* optional element of type ns1:HostPortGroup */
public:
	virtual int soap_type() const { return 2161; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPortGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPortGroup() { ns1__ArrayOfHostPortGroup::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPortGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPowerPolicy
#define SOAP_TYPE_ns1__ArrayOfHostPowerPolicy (2163)
/* ns1:ArrayOfHostPowerPolicy */
class SOAP_CMAC ns1__ArrayOfHostPowerPolicy : public xsd__anyType
{
public:
	std::vector<class ns1__HostPowerPolicy * >HostPowerPolicy;	/* optional element of type ns1:HostPowerPolicy */
public:
	virtual int soap_type() const { return 2163; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPowerPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPowerPolicy() { ns1__ArrayOfHostPowerPolicy::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPowerPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostFirewallRule
#define SOAP_TYPE_ns1__ArrayOfHostFirewallRule (2168)
/* ns1:ArrayOfHostFirewallRule */
class SOAP_CMAC ns1__ArrayOfHostFirewallRule : public xsd__anyType
{
public:
	std::vector<class ns1__HostFirewallRule * >HostFirewallRule;	/* optional element of type ns1:HostFirewallRule */
public:
	virtual int soap_type() const { return 2168; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostFirewallRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostFirewallRule() { ns1__ArrayOfHostFirewallRule::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostFirewallRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostFirewallRuleset
#define SOAP_TYPE_ns1__ArrayOfHostFirewallRuleset (2170)
/* ns1:ArrayOfHostFirewallRuleset */
class SOAP_CMAC ns1__ArrayOfHostFirewallRuleset : public xsd__anyType
{
public:
	std::vector<class ns1__HostFirewallRuleset * >HostFirewallRuleset;	/* optional element of type ns1:HostFirewallRuleset */
public:
	virtual int soap_type() const { return 2170; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostFirewallRuleset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostFirewallRuleset() { ns1__ArrayOfHostFirewallRuleset::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostFirewallRuleset() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostScsiDiskPartition
#define SOAP_TYPE_ns1__ArrayOfHostScsiDiskPartition (2173)
/* ns1:ArrayOfHostScsiDiskPartition */
class SOAP_CMAC ns1__ArrayOfHostScsiDiskPartition : public xsd__anyType
{
public:
	std::vector<ns1__HostScsiDiskPartition * >HostScsiDiskPartition;	/* optional element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 2173; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostScsiDiskPartition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostScsiDiskPartition() { ns1__ArrayOfHostScsiDiskPartition::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostScsiDiskPartition() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostScsiDisk
#define SOAP_TYPE_ns1__ArrayOfHostScsiDisk (2175)
/* ns1:ArrayOfHostScsiDisk */
class SOAP_CMAC ns1__ArrayOfHostScsiDisk : public xsd__anyType
{
public:
	std::vector<class ns1__HostScsiDisk * >HostScsiDisk;	/* optional element of type ns1:HostScsiDisk */
public:
	virtual int soap_type() const { return 2175; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostScsiDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostScsiDisk() { ns1__ArrayOfHostScsiDisk::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostScsiDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfScsiLunDurableName
#define SOAP_TYPE_ns1__ArrayOfScsiLunDurableName (2178)
/* ns1:ArrayOfScsiLunDurableName */
class SOAP_CMAC ns1__ArrayOfScsiLunDurableName : public xsd__anyType
{
public:
	std::vector<class ns1__ScsiLunDurableName * >ScsiLunDurableName;	/* optional element of type ns1:ScsiLunDurableName */
public:
	virtual int soap_type() const { return 2178; } /* = unique id SOAP_TYPE_ns1__ArrayOfScsiLunDurableName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfScsiLunDurableName() { ns1__ArrayOfScsiLunDurableName::soap_default(NULL); }
	virtual ~ns1__ArrayOfScsiLunDurableName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfScsiLunDescriptor
#define SOAP_TYPE_ns1__ArrayOfScsiLunDescriptor (2180)
/* ns1:ArrayOfScsiLunDescriptor */
class SOAP_CMAC ns1__ArrayOfScsiLunDescriptor : public xsd__anyType
{
public:
	std::vector<class ns1__ScsiLunDescriptor * >ScsiLunDescriptor;	/* optional element of type ns1:ScsiLunDescriptor */
public:
	virtual int soap_type() const { return 2180; } /* = unique id SOAP_TYPE_ns1__ArrayOfScsiLunDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfScsiLunDescriptor() { ns1__ArrayOfScsiLunDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfScsiLunDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfScsiLun
#define SOAP_TYPE_ns1__ArrayOfScsiLun (2182)
/* ns1:ArrayOfScsiLun */
class SOAP_CMAC ns1__ArrayOfScsiLun : public xsd__anyType
{
public:
	std::vector<class ns1__ScsiLun * >ScsiLun;	/* optional element of type ns1:ScsiLun */
public:
	virtual int soap_type() const { return 2182; } /* = unique id SOAP_TYPE_ns1__ArrayOfScsiLun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfScsiLun() { ns1__ArrayOfScsiLun::soap_default(NULL); }
	virtual ~ns1__ArrayOfScsiLun() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostScsiTopologyInterface
#define SOAP_TYPE_ns1__ArrayOfHostScsiTopologyInterface (2184)
/* ns1:ArrayOfHostScsiTopologyInterface */
class SOAP_CMAC ns1__ArrayOfHostScsiTopologyInterface : public xsd__anyType
{
public:
	std::vector<class ns1__HostScsiTopologyInterface * >HostScsiTopologyInterface;	/* optional element of type ns1:HostScsiTopologyInterface */
public:
	virtual int soap_type() const { return 2184; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostScsiTopologyInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostScsiTopologyInterface() { ns1__ArrayOfHostScsiTopologyInterface::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostScsiTopologyInterface() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostScsiTopologyTarget
#define SOAP_TYPE_ns1__ArrayOfHostScsiTopologyTarget (2186)
/* ns1:ArrayOfHostScsiTopologyTarget */
class SOAP_CMAC ns1__ArrayOfHostScsiTopologyTarget : public xsd__anyType
{
public:
	std::vector<class ns1__HostScsiTopologyTarget * >HostScsiTopologyTarget;	/* optional element of type ns1:HostScsiTopologyTarget */
public:
	virtual int soap_type() const { return 2186; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostScsiTopologyTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostScsiTopologyTarget() { ns1__ArrayOfHostScsiTopologyTarget::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostScsiTopologyTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostScsiTopologyLun
#define SOAP_TYPE_ns1__ArrayOfHostScsiTopologyLun (2188)
/* ns1:ArrayOfHostScsiTopologyLun */
class SOAP_CMAC ns1__ArrayOfHostScsiTopologyLun : public xsd__anyType
{
public:
	std::vector<class ns1__HostScsiTopologyLun * >HostScsiTopologyLun;	/* optional element of type ns1:HostScsiTopologyLun */
public:
	virtual int soap_type() const { return 2188; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostScsiTopologyLun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostScsiTopologyLun() { ns1__ArrayOfHostScsiTopologyLun::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostScsiTopologyLun() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostService
#define SOAP_TYPE_ns1__ArrayOfHostService (2192)
/* ns1:ArrayOfHostService */
class SOAP_CMAC ns1__ArrayOfHostService : public xsd__anyType
{
public:
	std::vector<class ns1__HostService * >HostService;	/* optional element of type ns1:HostService */
public:
	virtual int soap_type() const { return 2192; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostService() { ns1__ArrayOfHostService::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostServiceConfig
#define SOAP_TYPE_ns1__ArrayOfHostServiceConfig (2194)
/* ns1:ArrayOfHostServiceConfig */
class SOAP_CMAC ns1__ArrayOfHostServiceConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostServiceConfig * >HostServiceConfig;	/* optional element of type ns1:HostServiceConfig */
public:
	virtual int soap_type() const { return 2194; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostServiceConfig() { ns1__ArrayOfHostServiceConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostSnmpDestination
#define SOAP_TYPE_ns1__ArrayOfHostSnmpDestination (2197)
/* ns1:ArrayOfHostSnmpDestination */
class SOAP_CMAC ns1__ArrayOfHostSnmpDestination : public xsd__anyType
{
public:
	std::vector<class ns1__HostSnmpDestination * >HostSnmpDestination;	/* optional element of type ns1:HostSnmpDestination */
public:
	virtual int soap_type() const { return 2197; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostSnmpDestination */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostSnmpDestination() { ns1__ArrayOfHostSnmpDestination::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostSnmpDestination() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostStorageArrayTypePolicyOption
#define SOAP_TYPE_ns1__ArrayOfHostStorageArrayTypePolicyOption (2202)
/* ns1:ArrayOfHostStorageArrayTypePolicyOption */
class SOAP_CMAC ns1__ArrayOfHostStorageArrayTypePolicyOption : public xsd__anyType
{
public:
	std::vector<class ns1__HostStorageArrayTypePolicyOption * >HostStorageArrayTypePolicyOption;	/* optional element of type ns1:HostStorageArrayTypePolicyOption */
public:
	virtual int soap_type() const { return 2202; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostStorageArrayTypePolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostStorageArrayTypePolicyOption() { ns1__ArrayOfHostStorageArrayTypePolicyOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostStorageArrayTypePolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostSystemIdentificationInfo
#define SOAP_TYPE_ns1__ArrayOfHostSystemIdentificationInfo (2210)
/* ns1:ArrayOfHostSystemIdentificationInfo */
class SOAP_CMAC ns1__ArrayOfHostSystemIdentificationInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostSystemIdentificationInfo * >HostSystemIdentificationInfo;	/* optional element of type ns1:HostSystemIdentificationInfo */
public:
	virtual int soap_type() const { return 2210; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostSystemIdentificationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostSystemIdentificationInfo() { ns1__ArrayOfHostSystemIdentificationInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostSystemIdentificationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostSystemResourceInfo
#define SOAP_TYPE_ns1__ArrayOfHostSystemResourceInfo (2212)
/* ns1:ArrayOfHostSystemResourceInfo */
class SOAP_CMAC ns1__ArrayOfHostSystemResourceInfo : public xsd__anyType
{
public:
	std::vector<ns1__HostSystemResourceInfo * >HostSystemResourceInfo;	/* optional element of type ns1:HostSystemResourceInfo */
public:
	virtual int soap_type() const { return 2212; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostSystemResourceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostSystemResourceInfo() { ns1__ArrayOfHostSystemResourceInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostSystemResourceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostTpmDigestInfo
#define SOAP_TYPE_ns1__ArrayOfHostTpmDigestInfo (2220)
/* ns1:ArrayOfHostTpmDigestInfo */
class SOAP_CMAC ns1__ArrayOfHostTpmDigestInfo : public xsd__anyType
{
public:
	std::vector<class ns1__HostTpmDigestInfo * >HostTpmDigestInfo;	/* optional element of type ns1:HostTpmDigestInfo */
public:
	virtual int soap_type() const { return 2220; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostTpmDigestInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostTpmDigestInfo() { ns1__ArrayOfHostTpmDigestInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostTpmDigestInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsExtent
#define SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsExtent (2222)
/* ns1:ArrayOfHostUnresolvedVmfsExtent */
class SOAP_CMAC ns1__ArrayOfHostUnresolvedVmfsExtent : public xsd__anyType
{
public:
	std::vector<class ns1__HostUnresolvedVmfsExtent * >HostUnresolvedVmfsExtent;	/* optional element of type ns1:HostUnresolvedVmfsExtent */
public:
	virtual int soap_type() const { return 2222; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsExtent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostUnresolvedVmfsExtent() { ns1__ArrayOfHostUnresolvedVmfsExtent::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostUnresolvedVmfsExtent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionResult
#define SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionResult (2225)
/* ns1:ArrayOfHostUnresolvedVmfsResolutionResult */
class SOAP_CMAC ns1__ArrayOfHostUnresolvedVmfsResolutionResult : public xsd__anyType
{
public:
	std::vector<class ns1__HostUnresolvedVmfsResolutionResult * >HostUnresolvedVmfsResolutionResult;	/* optional element of type ns1:HostUnresolvedVmfsResolutionResult */
public:
	virtual int soap_type() const { return 2225; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostUnresolvedVmfsResolutionResult() { ns1__ArrayOfHostUnresolvedVmfsResolutionResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostUnresolvedVmfsResolutionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionSpec
#define SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionSpec (2227)
/* ns1:ArrayOfHostUnresolvedVmfsResolutionSpec */
class SOAP_CMAC ns1__ArrayOfHostUnresolvedVmfsResolutionSpec : public xsd__anyType
{
public:
	std::vector<ns1__HostUnresolvedVmfsResolutionSpec * >HostUnresolvedVmfsResolutionSpec;	/* optional element of type ns1:HostUnresolvedVmfsResolutionSpec */
public:
	virtual int soap_type() const { return 2227; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsResolutionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostUnresolvedVmfsResolutionSpec() { ns1__ArrayOfHostUnresolvedVmfsResolutionSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostUnresolvedVmfsResolutionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsVolume
#define SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsVolume (2230)
/* ns1:ArrayOfHostUnresolvedVmfsVolume */
class SOAP_CMAC ns1__ArrayOfHostUnresolvedVmfsVolume : public xsd__anyType
{
public:
	std::vector<class ns1__HostUnresolvedVmfsVolume * >HostUnresolvedVmfsVolume;	/* optional element of type ns1:HostUnresolvedVmfsVolume */
public:
	virtual int soap_type() const { return 2230; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostUnresolvedVmfsVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostUnresolvedVmfsVolume() { ns1__ArrayOfHostUnresolvedVmfsVolume::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostUnresolvedVmfsVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVirtualNicConfig
#define SOAP_TYPE_ns1__ArrayOfHostVirtualNicConfig (2236)
/* ns1:ArrayOfHostVirtualNicConfig */
class SOAP_CMAC ns1__ArrayOfHostVirtualNicConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostVirtualNicConfig * >HostVirtualNicConfig;	/* optional element of type ns1:HostVirtualNicConfig */
public:
	virtual int soap_type() const { return 2236; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVirtualNicConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVirtualNicConfig() { ns1__ArrayOfHostVirtualNicConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVirtualNicConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVirtualNic
#define SOAP_TYPE_ns1__ArrayOfHostVirtualNic (2238)
/* ns1:ArrayOfHostVirtualNic */
class SOAP_CMAC ns1__ArrayOfHostVirtualNic : public xsd__anyType
{
public:
	std::vector<class ns1__HostVirtualNic * >HostVirtualNic;	/* optional element of type ns1:HostVirtualNic */
public:
	virtual int soap_type() const { return 2238; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVirtualNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVirtualNic() { ns1__ArrayOfHostVirtualNic::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVirtualNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVirtualNicManagerNicTypeSelection
#define SOAP_TYPE_ns1__ArrayOfHostVirtualNicManagerNicTypeSelection (2241)
/* ns1:ArrayOfHostVirtualNicManagerNicTypeSelection */
class SOAP_CMAC ns1__ArrayOfHostVirtualNicManagerNicTypeSelection : public xsd__anyType
{
public:
	std::vector<class ns1__HostVirtualNicManagerNicTypeSelection * >HostVirtualNicManagerNicTypeSelection;	/* optional element of type ns1:HostVirtualNicManagerNicTypeSelection */
public:
	virtual int soap_type() const { return 2241; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVirtualNicManagerNicTypeSelection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVirtualNicManagerNicTypeSelection() { ns1__ArrayOfHostVirtualNicManagerNicTypeSelection::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVirtualNicManagerNicTypeSelection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualNicManagerNetConfig
#define SOAP_TYPE_ns1__ArrayOfVirtualNicManagerNetConfig (2243)
/* ns1:ArrayOfVirtualNicManagerNetConfig */
class SOAP_CMAC ns1__ArrayOfVirtualNicManagerNetConfig : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualNicManagerNetConfig * >VirtualNicManagerNetConfig;	/* optional element of type ns1:VirtualNicManagerNetConfig */
public:
	virtual int soap_type() const { return 2243; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualNicManagerNetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualNicManagerNetConfig() { ns1__ArrayOfVirtualNicManagerNetConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualNicManagerNetConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVirtualSwitchConfig
#define SOAP_TYPE_ns1__ArrayOfHostVirtualSwitchConfig (2252)
/* ns1:ArrayOfHostVirtualSwitchConfig */
class SOAP_CMAC ns1__ArrayOfHostVirtualSwitchConfig : public xsd__anyType
{
public:
	std::vector<class ns1__HostVirtualSwitchConfig * >HostVirtualSwitchConfig;	/* optional element of type ns1:HostVirtualSwitchConfig */
public:
	virtual int soap_type() const { return 2252; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVirtualSwitchConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVirtualSwitchConfig() { ns1__ArrayOfHostVirtualSwitchConfig::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVirtualSwitchConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVirtualSwitch
#define SOAP_TYPE_ns1__ArrayOfHostVirtualSwitch (2254)
/* ns1:ArrayOfHostVirtualSwitch */
class SOAP_CMAC ns1__ArrayOfHostVirtualSwitch : public xsd__anyType
{
public:
	std::vector<class ns1__HostVirtualSwitch * >HostVirtualSwitch;	/* optional element of type ns1:HostVirtualSwitch */
public:
	virtual int soap_type() const { return 2254; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVirtualSwitch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVirtualSwitch() { ns1__ArrayOfHostVirtualSwitch::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVirtualSwitch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostVmfsRescanResult
#define SOAP_TYPE_ns1__ArrayOfHostVmfsRescanResult (2256)
/* ns1:ArrayOfHostVmfsRescanResult */
class SOAP_CMAC ns1__ArrayOfHostVmfsRescanResult : public xsd__anyType
{
public:
	std::vector<class ns1__HostVmfsRescanResult * >HostVmfsRescanResult;	/* optional element of type ns1:HostVmfsRescanResult */
public:
	virtual int soap_type() const { return 2256; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostVmfsRescanResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostVmfsRescanResult() { ns1__ArrayOfHostVmfsRescanResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostVmfsRescanResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpConfigInfoIpAddress
#define SOAP_TYPE_ns1__ArrayOfNetIpConfigInfoIpAddress (2266)
/* ns1:ArrayOfNetIpConfigInfoIpAddress */
class SOAP_CMAC ns1__ArrayOfNetIpConfigInfoIpAddress : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpConfigInfoIpAddress * >NetIpConfigInfoIpAddress;	/* optional element of type ns1:NetIpConfigInfoIpAddress */
public:
	virtual int soap_type() const { return 2266; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpConfigInfoIpAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpConfigInfoIpAddress() { ns1__ArrayOfNetIpConfigInfoIpAddress::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpConfigInfoIpAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpConfigSpecIpAddressSpec
#define SOAP_TYPE_ns1__ArrayOfNetIpConfigSpecIpAddressSpec (2269)
/* ns1:ArrayOfNetIpConfigSpecIpAddressSpec */
class SOAP_CMAC ns1__ArrayOfNetIpConfigSpecIpAddressSpec : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpConfigSpecIpAddressSpec * >NetIpConfigSpecIpAddressSpec;	/* optional element of type ns1:NetIpConfigSpecIpAddressSpec */
public:
	virtual int soap_type() const { return 2269; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpConfigSpecIpAddressSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpConfigSpecIpAddressSpec() { ns1__ArrayOfNetIpConfigSpecIpAddressSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpConfigSpecIpAddressSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigInfoIpRoute
#define SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigInfoIpRoute (2273)
/* ns1:ArrayOfNetIpRouteConfigInfoIpRoute */
class SOAP_CMAC ns1__ArrayOfNetIpRouteConfigInfoIpRoute : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpRouteConfigInfoIpRoute * >NetIpRouteConfigInfoIpRoute;	/* optional element of type ns1:NetIpRouteConfigInfoIpRoute */
public:
	virtual int soap_type() const { return 2273; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigInfoIpRoute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpRouteConfigInfoIpRoute() { ns1__ArrayOfNetIpRouteConfigInfoIpRoute::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpRouteConfigInfoIpRoute() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec
#define SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec (2277)
/* ns1:ArrayOfNetIpRouteConfigSpecIpRouteSpec */
class SOAP_CMAC ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpRouteConfigSpecIpRouteSpec * >NetIpRouteConfigSpecIpRouteSpec;	/* optional element of type ns1:NetIpRouteConfigSpecIpRouteSpec */
public:
	virtual int soap_type() const { return 2277; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec() { ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpRouteConfigSpecIpRouteSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpStackInfoNetToMedia
#define SOAP_TYPE_ns1__ArrayOfNetIpStackInfoNetToMedia (2280)
/* ns1:ArrayOfNetIpStackInfoNetToMedia */
class SOAP_CMAC ns1__ArrayOfNetIpStackInfoNetToMedia : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpStackInfoNetToMedia * >NetIpStackInfoNetToMedia;	/* optional element of type ns1:NetIpStackInfoNetToMedia */
public:
	virtual int soap_type() const { return 2280; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpStackInfoNetToMedia */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpStackInfoNetToMedia() { ns1__ArrayOfNetIpStackInfoNetToMedia::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpStackInfoNetToMedia() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNetIpStackInfoDefaultRouter
#define SOAP_TYPE_ns1__ArrayOfNetIpStackInfoDefaultRouter (2282)
/* ns1:ArrayOfNetIpStackInfoDefaultRouter */
class SOAP_CMAC ns1__ArrayOfNetIpStackInfoDefaultRouter : public xsd__anyType
{
public:
	std::vector<class ns1__NetIpStackInfoDefaultRouter * >NetIpStackInfoDefaultRouter;	/* optional element of type ns1:NetIpStackInfoDefaultRouter */
public:
	virtual int soap_type() const { return 2282; } /* = unique id SOAP_TYPE_ns1__ArrayOfNetIpStackInfoDefaultRouter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNetIpStackInfoDefaultRouter() { ns1__ArrayOfNetIpStackInfoDefaultRouter::soap_default(NULL); }
	virtual ~ns1__ArrayOfNetIpStackInfoDefaultRouter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOptionDef
#define SOAP_TYPE_ns1__ArrayOfOptionDef (2293)
/* ns1:ArrayOfOptionDef */
class SOAP_CMAC ns1__ArrayOfOptionDef : public xsd__anyType
{
public:
	std::vector<class ns1__OptionDef * >OptionDef;	/* optional element of type ns1:OptionDef */
public:
	virtual int soap_type() const { return 2293; } /* = unique id SOAP_TYPE_ns1__ArrayOfOptionDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOptionDef() { ns1__ArrayOfOptionDef::soap_default(NULL); }
	virtual ~ns1__ArrayOfOptionDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOptionValue
#define SOAP_TYPE_ns1__ArrayOfOptionValue (2296)
/* ns1:ArrayOfOptionValue */
class SOAP_CMAC ns1__ArrayOfOptionValue : public xsd__anyType
{
public:
	std::vector<ns1__OptionValue * >OptionValue;	/* optional element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 2296; } /* = unique id SOAP_TYPE_ns1__ArrayOfOptionValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOptionValue() { ns1__ArrayOfOptionValue::soap_default(NULL); }
	virtual ~ns1__ArrayOfOptionValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfComplianceLocator
#define SOAP_TYPE_ns1__ArrayOfComplianceLocator (2300)
/* ns1:ArrayOfComplianceLocator */
class SOAP_CMAC ns1__ArrayOfComplianceLocator : public xsd__anyType
{
public:
	std::vector<class ns1__ComplianceLocator * >ComplianceLocator;	/* optional element of type ns1:ComplianceLocator */
public:
	virtual int soap_type() const { return 2300; } /* = unique id SOAP_TYPE_ns1__ArrayOfComplianceLocator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfComplianceLocator() { ns1__ArrayOfComplianceLocator::soap_default(NULL); }
	virtual ~ns1__ArrayOfComplianceLocator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfComplianceFailure
#define SOAP_TYPE_ns1__ArrayOfComplianceFailure (2303)
/* ns1:ArrayOfComplianceFailure */
class SOAP_CMAC ns1__ArrayOfComplianceFailure : public xsd__anyType
{
public:
	std::vector<class ns1__ComplianceFailure * >ComplianceFailure;	/* optional element of type ns1:ComplianceFailure */
public:
	virtual int soap_type() const { return 2303; } /* = unique id SOAP_TYPE_ns1__ArrayOfComplianceFailure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfComplianceFailure() { ns1__ArrayOfComplianceFailure::soap_default(NULL); }
	virtual ~ns1__ArrayOfComplianceFailure() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfComplianceResult
#define SOAP_TYPE_ns1__ArrayOfComplianceResult (2305)
/* ns1:ArrayOfComplianceResult */
class SOAP_CMAC ns1__ArrayOfComplianceResult : public xsd__anyType
{
public:
	std::vector<class ns1__ComplianceResult * >ComplianceResult;	/* optional element of type ns1:ComplianceResult */
public:
	virtual int soap_type() const { return 2305; } /* = unique id SOAP_TYPE_ns1__ArrayOfComplianceResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfComplianceResult() { ns1__ArrayOfComplianceResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfComplianceResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileDeferredPolicyOptionParameter
#define SOAP_TYPE_ns1__ArrayOfProfileDeferredPolicyOptionParameter (2307)
/* ns1:ArrayOfProfileDeferredPolicyOptionParameter */
class SOAP_CMAC ns1__ArrayOfProfileDeferredPolicyOptionParameter : public xsd__anyType
{
public:
	std::vector<ns1__ProfileDeferredPolicyOptionParameter * >ProfileDeferredPolicyOptionParameter;	/* optional element of type ns1:ProfileDeferredPolicyOptionParameter */
public:
	virtual int soap_type() const { return 2307; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileDeferredPolicyOptionParameter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileDeferredPolicyOptionParameter() { ns1__ArrayOfProfileDeferredPolicyOptionParameter::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileDeferredPolicyOptionParameter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileExpression
#define SOAP_TYPE_ns1__ArrayOfProfileExpression (2309)
/* ns1:ArrayOfProfileExpression */
class SOAP_CMAC ns1__ArrayOfProfileExpression : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileExpression * >ProfileExpression;	/* optional element of type ns1:ProfileExpression */
public:
	virtual int soap_type() const { return 2309; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileExpression() { ns1__ArrayOfProfileExpression::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileExpressionMetadata
#define SOAP_TYPE_ns1__ArrayOfProfileExpressionMetadata (2313)
/* ns1:ArrayOfProfileExpressionMetadata */
class SOAP_CMAC ns1__ArrayOfProfileExpressionMetadata : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileExpressionMetadata * >ProfileExpressionMetadata;	/* optional element of type ns1:ProfileExpressionMetadata */
public:
	virtual int soap_type() const { return 2313; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileExpressionMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileExpressionMetadata() { ns1__ArrayOfProfileExpressionMetadata::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileExpressionMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileParameterMetadata
#define SOAP_TYPE_ns1__ArrayOfProfileParameterMetadata (2315)
/* ns1:ArrayOfProfileParameterMetadata */
class SOAP_CMAC ns1__ArrayOfProfileParameterMetadata : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileParameterMetadata * >ProfileParameterMetadata;	/* optional element of type ns1:ProfileParameterMetadata */
public:
	virtual int soap_type() const { return 2315; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileParameterMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileParameterMetadata() { ns1__ArrayOfProfileParameterMetadata::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileParameterMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfilePolicy
#define SOAP_TYPE_ns1__ArrayOfProfilePolicy (2317)
/* ns1:ArrayOfProfilePolicy */
class SOAP_CMAC ns1__ArrayOfProfilePolicy : public xsd__anyType
{
public:
	std::vector<class ns1__ProfilePolicy * >ProfilePolicy;	/* optional element of type ns1:ProfilePolicy */
public:
	virtual int soap_type() const { return 2317; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfilePolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfilePolicy() { ns1__ArrayOfProfilePolicy::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfilePolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfilePolicyOptionMetadata
#define SOAP_TYPE_ns1__ArrayOfProfilePolicyOptionMetadata (2319)
/* ns1:ArrayOfProfilePolicyOptionMetadata */
class SOAP_CMAC ns1__ArrayOfProfilePolicyOptionMetadata : public xsd__anyType
{
public:
	std::vector<class ns1__ProfilePolicyOptionMetadata * >ProfilePolicyOptionMetadata;	/* optional element of type ns1:ProfilePolicyOptionMetadata */
public:
	virtual int soap_type() const { return 2319; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfilePolicyOptionMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfilePolicyOptionMetadata() { ns1__ArrayOfProfilePolicyOptionMetadata::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfilePolicyOptionMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfilePolicyMetadata
#define SOAP_TYPE_ns1__ArrayOfProfilePolicyMetadata (2323)
/* ns1:ArrayOfProfilePolicyMetadata */
class SOAP_CMAC ns1__ArrayOfProfilePolicyMetadata : public xsd__anyType
{
public:
	std::vector<class ns1__ProfilePolicyMetadata * >ProfilePolicyMetadata;	/* optional element of type ns1:ProfilePolicyMetadata */
public:
	virtual int soap_type() const { return 2323; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfilePolicyMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfilePolicyMetadata() { ns1__ArrayOfProfilePolicyMetadata::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfilePolicyMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPolicyOption
#define SOAP_TYPE_ns1__ArrayOfPolicyOption (2325)
/* ns1:ArrayOfPolicyOption */
class SOAP_CMAC ns1__ArrayOfPolicyOption : public xsd__anyType
{
public:
	std::vector<class ns1__PolicyOption * >PolicyOption;	/* optional element of type ns1:PolicyOption */
public:
	virtual int soap_type() const { return 2325; } /* = unique id SOAP_TYPE_ns1__ArrayOfPolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPolicyOption() { ns1__ArrayOfPolicyOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfPolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileDescriptionSection
#define SOAP_TYPE_ns1__ArrayOfProfileDescriptionSection (2331)
/* ns1:ArrayOfProfileDescriptionSection */
class SOAP_CMAC ns1__ArrayOfProfileDescriptionSection : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileDescriptionSection * >ProfileDescriptionSection;	/* optional element of type ns1:ProfileDescriptionSection */
public:
	virtual int soap_type() const { return 2331; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileDescriptionSection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileDescriptionSection() { ns1__ArrayOfProfileDescriptionSection::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileDescriptionSection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileMetadata
#define SOAP_TYPE_ns1__ArrayOfProfileMetadata (2334)
/* ns1:ArrayOfProfileMetadata */
class SOAP_CMAC ns1__ArrayOfProfileMetadata : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileMetadata * >ProfileMetadata;	/* optional element of type ns1:ProfileMetadata */
public:
	virtual int soap_type() const { return 2334; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileMetadata() { ns1__ArrayOfProfileMetadata::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfProfileExecuteError
#define SOAP_TYPE_ns1__ArrayOfProfileExecuteError (2342)
/* ns1:ArrayOfProfileExecuteError */
class SOAP_CMAC ns1__ArrayOfProfileExecuteError : public xsd__anyType
{
public:
	std::vector<class ns1__ProfileExecuteError * >ProfileExecuteError;	/* optional element of type ns1:ProfileExecuteError */
public:
	virtual int soap_type() const { return 2342; } /* = unique id SOAP_TYPE_ns1__ArrayOfProfileExecuteError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfProfileExecuteError() { ns1__ArrayOfProfileExecuteError::soap_default(NULL); }
	virtual ~ns1__ArrayOfProfileExecuteError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPhysicalNicProfile
#define SOAP_TYPE_ns1__ArrayOfPhysicalNicProfile (2346)
/* ns1:ArrayOfPhysicalNicProfile */
class SOAP_CMAC ns1__ArrayOfPhysicalNicProfile : public xsd__anyType
{
public:
	std::vector<class ns1__PhysicalNicProfile * >PhysicalNicProfile;	/* optional element of type ns1:PhysicalNicProfile */
public:
	virtual int soap_type() const { return 2346; } /* = unique id SOAP_TYPE_ns1__ArrayOfPhysicalNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPhysicalNicProfile() { ns1__ArrayOfPhysicalNicProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfPhysicalNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUserProfile
#define SOAP_TYPE_ns1__ArrayOfUserProfile (2349)
/* ns1:ArrayOfUserProfile */
class SOAP_CMAC ns1__ArrayOfUserProfile : public xsd__anyType
{
public:
	std::vector<class ns1__UserProfile * >UserProfile;	/* optional element of type ns1:UserProfile */
public:
	virtual int soap_type() const { return 2349; } /* = unique id SOAP_TYPE_ns1__ArrayOfUserProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUserProfile() { ns1__ArrayOfUserProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfUserProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfUserGroupProfile
#define SOAP_TYPE_ns1__ArrayOfUserGroupProfile (2351)
/* ns1:ArrayOfUserGroupProfile */
class SOAP_CMAC ns1__ArrayOfUserGroupProfile : public xsd__anyType
{
public:
	std::vector<class ns1__UserGroupProfile * >UserGroupProfile;	/* optional element of type ns1:UserGroupProfile */
public:
	virtual int soap_type() const { return 2351; } /* = unique id SOAP_TYPE_ns1__ArrayOfUserGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfUserGroupProfile() { ns1__ArrayOfUserGroupProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfUserGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfOptionProfile
#define SOAP_TYPE_ns1__ArrayOfOptionProfile (2354)
/* ns1:ArrayOfOptionProfile */
class SOAP_CMAC ns1__ArrayOfOptionProfile : public xsd__anyType
{
public:
	std::vector<class ns1__OptionProfile * >OptionProfile;	/* optional element of type ns1:OptionProfile */
public:
	virtual int soap_type() const { return 2354; } /* = unique id SOAP_TYPE_ns1__ArrayOfOptionProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfOptionProfile() { ns1__ArrayOfOptionProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfOptionProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfServiceProfile
#define SOAP_TYPE_ns1__ArrayOfServiceProfile (2357)
/* ns1:ArrayOfServiceProfile */
class SOAP_CMAC ns1__ArrayOfServiceProfile : public xsd__anyType
{
public:
	std::vector<class ns1__ServiceProfile * >ServiceProfile;	/* optional element of type ns1:ServiceProfile */
public:
	virtual int soap_type() const { return 2357; } /* = unique id SOAP_TYPE_ns1__ArrayOfServiceProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfServiceProfile() { ns1__ArrayOfServiceProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfServiceProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfFirewallProfileRulesetProfile
#define SOAP_TYPE_ns1__ArrayOfFirewallProfileRulesetProfile (2359)
/* ns1:ArrayOfFirewallProfileRulesetProfile */
class SOAP_CMAC ns1__ArrayOfFirewallProfileRulesetProfile : public xsd__anyType
{
public:
	std::vector<class ns1__FirewallProfileRulesetProfile * >FirewallProfileRulesetProfile;	/* optional element of type ns1:FirewallProfileRulesetProfile */
public:
	virtual int soap_type() const { return 2359; } /* = unique id SOAP_TYPE_ns1__ArrayOfFirewallProfileRulesetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfFirewallProfileRulesetProfile() { ns1__ArrayOfFirewallProfileRulesetProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfFirewallProfileRulesetProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfNasStorageProfile
#define SOAP_TYPE_ns1__ArrayOfNasStorageProfile (2362)
/* ns1:ArrayOfNasStorageProfile */
class SOAP_CMAC ns1__ArrayOfNasStorageProfile : public xsd__anyType
{
public:
	std::vector<class ns1__NasStorageProfile * >NasStorageProfile;	/* optional element of type ns1:NasStorageProfile */
public:
	virtual int soap_type() const { return 2362; } /* = unique id SOAP_TYPE_ns1__ArrayOfNasStorageProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfNasStorageProfile() { ns1__ArrayOfNasStorageProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfNasStorageProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDvsServiceConsoleVNicProfile
#define SOAP_TYPE_ns1__ArrayOfDvsServiceConsoleVNicProfile (2368)
/* ns1:ArrayOfDvsServiceConsoleVNicProfile */
class SOAP_CMAC ns1__ArrayOfDvsServiceConsoleVNicProfile : public xsd__anyType
{
public:
	std::vector<class ns1__DvsServiceConsoleVNicProfile * >DvsServiceConsoleVNicProfile;	/* optional element of type ns1:DvsServiceConsoleVNicProfile */
public:
	virtual int soap_type() const { return 2368; } /* = unique id SOAP_TYPE_ns1__ArrayOfDvsServiceConsoleVNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDvsServiceConsoleVNicProfile() { ns1__ArrayOfDvsServiceConsoleVNicProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfDvsServiceConsoleVNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDvsHostVNicProfile
#define SOAP_TYPE_ns1__ArrayOfDvsHostVNicProfile (2370)
/* ns1:ArrayOfDvsHostVNicProfile */
class SOAP_CMAC ns1__ArrayOfDvsHostVNicProfile : public xsd__anyType
{
public:
	std::vector<class ns1__DvsHostVNicProfile * >DvsHostVNicProfile;	/* optional element of type ns1:DvsHostVNicProfile */
public:
	virtual int soap_type() const { return 2370; } /* = unique id SOAP_TYPE_ns1__ArrayOfDvsHostVNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDvsHostVNicProfile() { ns1__ArrayOfDvsHostVNicProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfDvsHostVNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDvsProfile
#define SOAP_TYPE_ns1__ArrayOfDvsProfile (2372)
/* ns1:ArrayOfDvsProfile */
class SOAP_CMAC ns1__ArrayOfDvsProfile : public xsd__anyType
{
public:
	std::vector<class ns1__DvsProfile * >DvsProfile;	/* optional element of type ns1:DvsProfile */
public:
	virtual int soap_type() const { return 2372; } /* = unique id SOAP_TYPE_ns1__ArrayOfDvsProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfDvsProfile() { ns1__ArrayOfDvsProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfDvsProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPnicUplinkProfile
#define SOAP_TYPE_ns1__ArrayOfPnicUplinkProfile (2374)
/* ns1:ArrayOfPnicUplinkProfile */
class SOAP_CMAC ns1__ArrayOfPnicUplinkProfile : public xsd__anyType
{
public:
	std::vector<class ns1__PnicUplinkProfile * >PnicUplinkProfile;	/* optional element of type ns1:PnicUplinkProfile */
public:
	virtual int soap_type() const { return 2374; } /* = unique id SOAP_TYPE_ns1__ArrayOfPnicUplinkProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPnicUplinkProfile() { ns1__ArrayOfPnicUplinkProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfPnicUplinkProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfStaticRouteProfile
#define SOAP_TYPE_ns1__ArrayOfStaticRouteProfile (2377)
/* ns1:ArrayOfStaticRouteProfile */
class SOAP_CMAC ns1__ArrayOfStaticRouteProfile : public xsd__anyType
{
public:
	std::vector<class ns1__StaticRouteProfile * >StaticRouteProfile;	/* optional element of type ns1:StaticRouteProfile */
public:
	virtual int soap_type() const { return 2377; } /* = unique id SOAP_TYPE_ns1__ArrayOfStaticRouteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfStaticRouteProfile() { ns1__ArrayOfStaticRouteProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfStaticRouteProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualSwitchProfile
#define SOAP_TYPE_ns1__ArrayOfVirtualSwitchProfile (2381)
/* ns1:ArrayOfVirtualSwitchProfile */
class SOAP_CMAC ns1__ArrayOfVirtualSwitchProfile : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualSwitchProfile * >VirtualSwitchProfile;	/* optional element of type ns1:VirtualSwitchProfile */
public:
	virtual int soap_type() const { return 2381; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualSwitchProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualSwitchProfile() { ns1__ArrayOfVirtualSwitchProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualSwitchProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVmPortGroupProfile
#define SOAP_TYPE_ns1__ArrayOfVmPortGroupProfile (2386)
/* ns1:ArrayOfVmPortGroupProfile */
class SOAP_CMAC ns1__ArrayOfVmPortGroupProfile : public xsd__anyType
{
public:
	std::vector<class ns1__VmPortGroupProfile * >VmPortGroupProfile;	/* optional element of type ns1:VmPortGroupProfile */
public:
	virtual int soap_type() const { return 2386; } /* = unique id SOAP_TYPE_ns1__ArrayOfVmPortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVmPortGroupProfile() { ns1__ArrayOfVmPortGroupProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfVmPortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostPortGroupProfile
#define SOAP_TYPE_ns1__ArrayOfHostPortGroupProfile (2388)
/* ns1:ArrayOfHostPortGroupProfile */
class SOAP_CMAC ns1__ArrayOfHostPortGroupProfile : public xsd__anyType
{
public:
	std::vector<class ns1__HostPortGroupProfile * >HostPortGroupProfile;	/* optional element of type ns1:HostPortGroupProfile */
public:
	virtual int soap_type() const { return 2388; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostPortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostPortGroupProfile() { ns1__ArrayOfHostPortGroupProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostPortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfServiceConsolePortGroupProfile
#define SOAP_TYPE_ns1__ArrayOfServiceConsolePortGroupProfile (2390)
/* ns1:ArrayOfServiceConsolePortGroupProfile */
class SOAP_CMAC ns1__ArrayOfServiceConsolePortGroupProfile : public xsd__anyType
{
public:
	std::vector<class ns1__ServiceConsolePortGroupProfile * >ServiceConsolePortGroupProfile;	/* optional element of type ns1:ServiceConsolePortGroupProfile */
public:
	virtual int soap_type() const { return 2390; } /* = unique id SOAP_TYPE_ns1__ArrayOfServiceConsolePortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfServiceConsolePortGroupProfile() { ns1__ArrayOfServiceConsolePortGroupProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfServiceConsolePortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPermissionProfile
#define SOAP_TYPE_ns1__ArrayOfPermissionProfile (2396)
/* ns1:ArrayOfPermissionProfile */
class SOAP_CMAC ns1__ArrayOfPermissionProfile : public xsd__anyType
{
public:
	std::vector<class ns1__PermissionProfile * >PermissionProfile;	/* optional element of type ns1:PermissionProfile */
public:
	virtual int soap_type() const { return 2396; } /* = unique id SOAP_TYPE_ns1__ArrayOfPermissionProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPermissionProfile() { ns1__ArrayOfPermissionProfile::soap_default(NULL); }
	virtual ~ns1__ArrayOfPermissionProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfScheduledTaskDetail
#define SOAP_TYPE_ns1__ArrayOfScheduledTaskDetail (2403)
/* ns1:ArrayOfScheduledTaskDetail */
class SOAP_CMAC ns1__ArrayOfScheduledTaskDetail : public xsd__anyType
{
public:
	std::vector<class ns1__ScheduledTaskDetail * >ScheduledTaskDetail;	/* optional element of type ns1:ScheduledTaskDetail */
public:
	virtual int soap_type() const { return 2403; } /* = unique id SOAP_TYPE_ns1__ArrayOfScheduledTaskDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfScheduledTaskDetail() { ns1__ArrayOfScheduledTaskDetail::soap_default(NULL); }
	virtual ~ns1__ArrayOfScheduledTaskDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppCloneSpecNetworkMappingPair
#define SOAP_TYPE_ns1__ArrayOfVAppCloneSpecNetworkMappingPair (2418)
/* ns1:ArrayOfVAppCloneSpecNetworkMappingPair */
class SOAP_CMAC ns1__ArrayOfVAppCloneSpecNetworkMappingPair : public xsd__anyType
{
public:
	std::vector<class ns1__VAppCloneSpecNetworkMappingPair * >VAppCloneSpecNetworkMappingPair;	/* optional element of type ns1:VAppCloneSpecNetworkMappingPair */
public:
	virtual int soap_type() const { return 2418; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppCloneSpecNetworkMappingPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppCloneSpecNetworkMappingPair() { ns1__ArrayOfVAppCloneSpecNetworkMappingPair::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppCloneSpecNetworkMappingPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppCloneSpecResourceMap
#define SOAP_TYPE_ns1__ArrayOfVAppCloneSpecResourceMap (2420)
/* ns1:ArrayOfVAppCloneSpecResourceMap */
class SOAP_CMAC ns1__ArrayOfVAppCloneSpecResourceMap : public xsd__anyType
{
public:
	std::vector<class ns1__VAppCloneSpecResourceMap * >VAppCloneSpecResourceMap;	/* optional element of type ns1:VAppCloneSpecResourceMap */
public:
	virtual int soap_type() const { return 2420; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppCloneSpecResourceMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppCloneSpecResourceMap() { ns1__ArrayOfVAppCloneSpecResourceMap::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppCloneSpecResourceMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppEntityConfigInfo
#define SOAP_TYPE_ns1__ArrayOfVAppEntityConfigInfo (2423)
/* ns1:ArrayOfVAppEntityConfigInfo */
class SOAP_CMAC ns1__ArrayOfVAppEntityConfigInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VAppEntityConfigInfo * >VAppEntityConfigInfo;	/* optional element of type ns1:VAppEntityConfigInfo */
public:
	virtual int soap_type() const { return 2423; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppEntityConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppEntityConfigInfo() { ns1__ArrayOfVAppEntityConfigInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppEntityConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfIpPoolAssociation
#define SOAP_TYPE_ns1__ArrayOfIpPoolAssociation (2427)
/* ns1:ArrayOfIpPoolAssociation */
class SOAP_CMAC ns1__ArrayOfIpPoolAssociation : public xsd__anyType
{
public:
	std::vector<class ns1__IpPoolAssociation * >IpPoolAssociation;	/* optional element of type ns1:IpPoolAssociation */
public:
	virtual int soap_type() const { return 2427; } /* = unique id SOAP_TYPE_ns1__ArrayOfIpPoolAssociation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfIpPoolAssociation() { ns1__ArrayOfIpPoolAssociation::soap_default(NULL); }
	virtual ~ns1__ArrayOfIpPoolAssociation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfIpPool
#define SOAP_TYPE_ns1__ArrayOfIpPool (2429)
/* ns1:ArrayOfIpPool */
class SOAP_CMAC ns1__ArrayOfIpPool : public xsd__anyType
{
public:
	std::vector<ns1__IpPool * >IpPool;	/* optional element of type ns1:IpPool */
public:
	virtual int soap_type() const { return 2429; } /* = unique id SOAP_TYPE_ns1__ArrayOfIpPool */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfIpPool() { ns1__ArrayOfIpPool::soap_default(NULL); }
	virtual ~ns1__ArrayOfIpPool() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppOvfSectionInfo
#define SOAP_TYPE_ns1__ArrayOfVAppOvfSectionInfo (2431)
/* ns1:ArrayOfVAppOvfSectionInfo */
class SOAP_CMAC ns1__ArrayOfVAppOvfSectionInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VAppOvfSectionInfo * >VAppOvfSectionInfo;	/* optional element of type ns1:VAppOvfSectionInfo */
public:
	virtual int soap_type() const { return 2431; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppOvfSectionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppOvfSectionInfo() { ns1__ArrayOfVAppOvfSectionInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppOvfSectionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppProductInfo
#define SOAP_TYPE_ns1__ArrayOfVAppProductInfo (2433)
/* ns1:ArrayOfVAppProductInfo */
class SOAP_CMAC ns1__ArrayOfVAppProductInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VAppProductInfo * >VAppProductInfo;	/* optional element of type ns1:VAppProductInfo */
public:
	virtual int soap_type() const { return 2433; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppProductInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppProductInfo() { ns1__ArrayOfVAppProductInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppProductInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppPropertyInfo
#define SOAP_TYPE_ns1__ArrayOfVAppPropertyInfo (2435)
/* ns1:ArrayOfVAppPropertyInfo */
class SOAP_CMAC ns1__ArrayOfVAppPropertyInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VAppPropertyInfo * >VAppPropertyInfo;	/* optional element of type ns1:VAppPropertyInfo */
public:
	virtual int soap_type() const { return 2435; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppPropertyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppPropertyInfo() { ns1__ArrayOfVAppPropertyInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppPropertyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppProductSpec
#define SOAP_TYPE_ns1__ArrayOfVAppProductSpec (2442)
/* ns1:ArrayOfVAppProductSpec */
class SOAP_CMAC ns1__ArrayOfVAppProductSpec : public xsd__anyType
{
public:
	std::vector<class ns1__VAppProductSpec * >VAppProductSpec;	/* optional element of type ns1:VAppProductSpec */
public:
	virtual int soap_type() const { return 2442; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppProductSpec() { ns1__ArrayOfVAppProductSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppPropertySpec
#define SOAP_TYPE_ns1__ArrayOfVAppPropertySpec (2444)
/* ns1:ArrayOfVAppPropertySpec */
class SOAP_CMAC ns1__ArrayOfVAppPropertySpec : public xsd__anyType
{
public:
	std::vector<class ns1__VAppPropertySpec * >VAppPropertySpec;	/* optional element of type ns1:VAppPropertySpec */
public:
	virtual int soap_type() const { return 2444; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppPropertySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppPropertySpec() { ns1__ArrayOfVAppPropertySpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppPropertySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVAppOvfSectionSpec
#define SOAP_TYPE_ns1__ArrayOfVAppOvfSectionSpec (2446)
/* ns1:ArrayOfVAppOvfSectionSpec */
class SOAP_CMAC ns1__ArrayOfVAppOvfSectionSpec : public xsd__anyType
{
public:
	std::vector<class ns1__VAppOvfSectionSpec * >VAppOvfSectionSpec;	/* optional element of type ns1:VAppOvfSectionSpec */
public:
	virtual int soap_type() const { return 2446; } /* = unique id SOAP_TYPE_ns1__ArrayOfVAppOvfSectionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVAppOvfSectionSpec() { ns1__ArrayOfVAppOvfSectionSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVAppOvfSectionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineCdromInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineCdromInfo (2451)
/* ns1:ArrayOfVirtualMachineCdromInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineCdromInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineCdromInfo * >VirtualMachineCdromInfo;	/* optional element of type ns1:VirtualMachineCdromInfo */
public:
	virtual int soap_type() const { return 2451; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineCdromInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineCdromInfo() { ns1__ArrayOfVirtualMachineCdromInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineCdromInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair (2454)
/* ns1:ArrayOfVirtualMachineConfigInfoDatastoreUrlPair */
class SOAP_CMAC ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineConfigInfoDatastoreUrlPair * >VirtualMachineConfigInfoDatastoreUrlPair;	/* optional element of type ns1:VirtualMachineConfigInfoDatastoreUrlPair */
public:
	virtual int soap_type() const { return 2454; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair() { ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineConfigInfoDatastoreUrlPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigOptionDescriptor
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigOptionDescriptor (2458)
/* ns1:ArrayOfVirtualMachineConfigOptionDescriptor */
class SOAP_CMAC ns1__ArrayOfVirtualMachineConfigOptionDescriptor : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineConfigOptionDescriptor * >VirtualMachineConfigOptionDescriptor;	/* optional element of type ns1:VirtualMachineConfigOptionDescriptor */
public:
	virtual int soap_type() const { return 2458; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineConfigOptionDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineConfigOptionDescriptor() { ns1__ArrayOfVirtualMachineConfigOptionDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineConfigOptionDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineCpuIdInfoSpec
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineCpuIdInfoSpec (2460)
/* ns1:ArrayOfVirtualMachineCpuIdInfoSpec */
class SOAP_CMAC ns1__ArrayOfVirtualMachineCpuIdInfoSpec : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineCpuIdInfoSpec * >VirtualMachineCpuIdInfoSpec;	/* optional element of type ns1:VirtualMachineCpuIdInfoSpec */
public:
	virtual int soap_type() const { return 2460; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineCpuIdInfoSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineCpuIdInfoSpec() { ns1__ArrayOfVirtualMachineCpuIdInfoSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineCpuIdInfoSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreInfo (2465)
/* ns1:ArrayOfVirtualMachineDatastoreInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineDatastoreInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineDatastoreInfo * >VirtualMachineDatastoreInfo;	/* optional element of type ns1:VirtualMachineDatastoreInfo */
public:
	virtual int soap_type() const { return 2465; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineDatastoreInfo() { ns1__ArrayOfVirtualMachineDatastoreInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineDatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreVolumeOption
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreVolumeOption (2467)
/* ns1:ArrayOfVirtualMachineDatastoreVolumeOption */
class SOAP_CMAC ns1__ArrayOfVirtualMachineDatastoreVolumeOption : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineDatastoreVolumeOption * >VirtualMachineDatastoreVolumeOption;	/* optional element of type ns1:VirtualMachineDatastoreVolumeOption */
public:
	virtual int soap_type() const { return 2467; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineDatastoreVolumeOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineDatastoreVolumeOption() { ns1__ArrayOfVirtualMachineDatastoreVolumeOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineDatastoreVolumeOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineDeviceRuntimeInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineDeviceRuntimeInfo (2473)
/* ns1:ArrayOfVirtualMachineDeviceRuntimeInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineDeviceRuntimeInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineDeviceRuntimeInfo * >VirtualMachineDeviceRuntimeInfo;	/* optional element of type ns1:VirtualMachineDeviceRuntimeInfo */
public:
	virtual int soap_type() const { return 2473; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineDeviceRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineDeviceRuntimeInfo() { ns1__ArrayOfVirtualMachineDeviceRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineDeviceRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutDiskLayout
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutDiskLayout (2481)
/* ns1:ArrayOfVirtualMachineFileLayoutDiskLayout */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutDiskLayout : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutDiskLayout * >VirtualMachineFileLayoutDiskLayout;	/* optional element of type ns1:VirtualMachineFileLayoutDiskLayout */
public:
	virtual int soap_type() const { return 2481; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutDiskLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutDiskLayout() { ns1__ArrayOfVirtualMachineFileLayoutDiskLayout::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutDiskLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout (2483)
/* ns1:ArrayOfVirtualMachineFileLayoutSnapshotLayout */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutSnapshotLayout * >VirtualMachineFileLayoutSnapshotLayout;	/* optional element of type ns1:VirtualMachineFileLayoutSnapshotLayout */
public:
	virtual int soap_type() const { return 2483; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout() { ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutSnapshotLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExFileInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExFileInfo (2486)
/* ns1:ArrayOfVirtualMachineFileLayoutExFileInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutExFileInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutExFileInfo * >VirtualMachineFileLayoutExFileInfo;	/* optional element of type ns1:VirtualMachineFileLayoutExFileInfo */
public:
	virtual int soap_type() const { return 2486; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutExFileInfo() { ns1__ArrayOfVirtualMachineFileLayoutExFileInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutExFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit (2488)
/* ns1:ArrayOfVirtualMachineFileLayoutExDiskUnit */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutExDiskUnit * >VirtualMachineFileLayoutExDiskUnit;	/* optional element of type ns1:VirtualMachineFileLayoutExDiskUnit */
public:
	virtual int soap_type() const { return 2488; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit() { ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutExDiskUnit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout (2490)
/* ns1:ArrayOfVirtualMachineFileLayoutExDiskLayout */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutExDiskLayout * >VirtualMachineFileLayoutExDiskLayout;	/* optional element of type ns1:VirtualMachineFileLayoutExDiskLayout */
public:
	virtual int soap_type() const { return 2490; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout() { ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutExDiskLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout (2492)
/* ns1:ArrayOfVirtualMachineFileLayoutExSnapshotLayout */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFileLayoutExSnapshotLayout * >VirtualMachineFileLayoutExSnapshotLayout;	/* optional element of type ns1:VirtualMachineFileLayoutExSnapshotLayout */
public:
	virtual int soap_type() const { return 2492; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout() { ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFileLayoutExSnapshotLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineFloppyInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineFloppyInfo (2496)
/* ns1:ArrayOfVirtualMachineFloppyInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineFloppyInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineFloppyInfo * >VirtualMachineFloppyInfo;	/* optional element of type ns1:VirtualMachineFloppyInfo */
public:
	virtual int soap_type() const { return 2496; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineFloppyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineFloppyInfo() { ns1__ArrayOfVirtualMachineFloppyInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineFloppyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfGuestDiskInfo
#define SOAP_TYPE_ns1__ArrayOfGuestDiskInfo (2498)
/* ns1:ArrayOfGuestDiskInfo */
class SOAP_CMAC ns1__ArrayOfGuestDiskInfo : public xsd__anyType
{
public:
	std::vector<class ns1__GuestDiskInfo * >GuestDiskInfo;	/* optional element of type ns1:GuestDiskInfo */
public:
	virtual int soap_type() const { return 2498; } /* = unique id SOAP_TYPE_ns1__ArrayOfGuestDiskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfGuestDiskInfo() { ns1__ArrayOfGuestDiskInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfGuestDiskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfGuestNicInfo
#define SOAP_TYPE_ns1__ArrayOfGuestNicInfo (2500)
/* ns1:ArrayOfGuestNicInfo */
class SOAP_CMAC ns1__ArrayOfGuestNicInfo : public xsd__anyType
{
public:
	std::vector<class ns1__GuestNicInfo * >GuestNicInfo;	/* optional element of type ns1:GuestNicInfo */
public:
	virtual int soap_type() const { return 2500; } /* = unique id SOAP_TYPE_ns1__ArrayOfGuestNicInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfGuestNicInfo() { ns1__ArrayOfGuestNicInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfGuestNicInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfGuestStackInfo
#define SOAP_TYPE_ns1__ArrayOfGuestStackInfo (2502)
/* ns1:ArrayOfGuestStackInfo */
class SOAP_CMAC ns1__ArrayOfGuestStackInfo : public xsd__anyType
{
public:
	std::vector<class ns1__GuestStackInfo * >GuestStackInfo;	/* optional element of type ns1:GuestStackInfo */
public:
	virtual int soap_type() const { return 2502; } /* = unique id SOAP_TYPE_ns1__ArrayOfGuestStackInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfGuestStackInfo() { ns1__ArrayOfGuestStackInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfGuestStackInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfGuestOsDescriptor
#define SOAP_TYPE_ns1__ArrayOfGuestOsDescriptor (2506)
/* ns1:ArrayOfGuestOsDescriptor */
class SOAP_CMAC ns1__ArrayOfGuestOsDescriptor : public xsd__anyType
{
public:
	std::vector<class ns1__GuestOsDescriptor * >GuestOsDescriptor;	/* optional element of type ns1:GuestOsDescriptor */
public:
	virtual int soap_type() const { return 2506; } /* = unique id SOAP_TYPE_ns1__ArrayOfGuestOsDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfGuestOsDescriptor() { ns1__ArrayOfGuestOsDescriptor::soap_default(NULL); }
	virtual ~ns1__ArrayOfGuestOsDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo (2508)
/* ns1:ArrayOfVirtualMachineIdeDiskDevicePartitionInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineIdeDiskDevicePartitionInfo * >VirtualMachineIdeDiskDevicePartitionInfo;	/* optional element of type ns1:VirtualMachineIdeDiskDevicePartitionInfo */
public:
	virtual int soap_type() const { return 2508; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo() { ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineIdeDiskDevicePartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo (2510)
/* ns1:ArrayOfVirtualMachineIdeDiskDeviceInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineIdeDiskDeviceInfo * >VirtualMachineIdeDiskDeviceInfo;	/* optional element of type ns1:VirtualMachineIdeDiskDeviceInfo */
public:
	virtual int soap_type() const { return 2510; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo() { ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineIdeDiskDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo (2512)
/* ns1:ArrayOfVirtualMachineLegacyNetworkSwitchInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineLegacyNetworkSwitchInfo * >VirtualMachineLegacyNetworkSwitchInfo;	/* optional element of type ns1:VirtualMachineLegacyNetworkSwitchInfo */
public:
	virtual int soap_type() const { return 2512; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo() { ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineLegacyNetworkSwitchInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineMessage
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineMessage (2514)
/* ns1:ArrayOfVirtualMachineMessage */
class SOAP_CMAC ns1__ArrayOfVirtualMachineMessage : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineMessage * >VirtualMachineMessage;	/* optional element of type ns1:VirtualMachineMessage */
public:
	virtual int soap_type() const { return 2514; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineMessage() { ns1__ArrayOfVirtualMachineMessage::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineNetworkInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineNetworkInfo (2516)
/* ns1:ArrayOfVirtualMachineNetworkInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineNetworkInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineNetworkInfo * >VirtualMachineNetworkInfo;	/* optional element of type ns1:VirtualMachineNetworkInfo */
public:
	virtual int soap_type() const { return 2516; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineNetworkInfo() { ns1__ArrayOfVirtualMachineNetworkInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineParallelInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineParallelInfo (2519)
/* ns1:ArrayOfVirtualMachineParallelInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineParallelInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineParallelInfo * >VirtualMachineParallelInfo;	/* optional element of type ns1:VirtualMachineParallelInfo */
public:
	virtual int soap_type() const { return 2519; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineParallelInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineParallelInfo() { ns1__ArrayOfVirtualMachineParallelInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineParallelInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachinePciPassthroughInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachinePciPassthroughInfo (2521)
/* ns1:ArrayOfVirtualMachinePciPassthroughInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachinePciPassthroughInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachinePciPassthroughInfo * >VirtualMachinePciPassthroughInfo;	/* optional element of type ns1:VirtualMachinePciPassthroughInfo */
public:
	virtual int soap_type() const { return 2521; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachinePciPassthroughInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachinePciPassthroughInfo() { ns1__ArrayOfVirtualMachinePciPassthroughInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachinePciPassthroughInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator (2524)
/* ns1:ArrayOfVirtualMachineRelocateSpecDiskLocator */
class SOAP_CMAC ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineRelocateSpecDiskLocator * >VirtualMachineRelocateSpecDiskLocator;	/* optional element of type ns1:VirtualMachineRelocateSpecDiskLocator */
public:
	virtual int soap_type() const { return 2524; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator() { ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineRelocateSpecDiskLocator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo (2528)
/* ns1:ArrayOfVirtualMachineScsiDiskDeviceInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineScsiDiskDeviceInfo * >VirtualMachineScsiDiskDeviceInfo;	/* optional element of type ns1:VirtualMachineScsiDiskDeviceInfo */
public:
	virtual int soap_type() const { return 2528; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo() { ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineScsiDiskDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiPassthroughInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiPassthroughInfo (2530)
/* ns1:ArrayOfVirtualMachineScsiPassthroughInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineScsiPassthroughInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineScsiPassthroughInfo * >VirtualMachineScsiPassthroughInfo;	/* optional element of type ns1:VirtualMachineScsiPassthroughInfo */
public:
	virtual int soap_type() const { return 2530; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineScsiPassthroughInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineScsiPassthroughInfo() { ns1__ArrayOfVirtualMachineScsiPassthroughInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineScsiPassthroughInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineSerialInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineSerialInfo (2532)
/* ns1:ArrayOfVirtualMachineSerialInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineSerialInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineSerialInfo * >VirtualMachineSerialInfo;	/* optional element of type ns1:VirtualMachineSerialInfo */
public:
	virtual int soap_type() const { return 2532; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineSerialInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineSerialInfo() { ns1__ArrayOfVirtualMachineSerialInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineSerialInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineSnapshotTree
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineSnapshotTree (2535)
/* ns1:ArrayOfVirtualMachineSnapshotTree */
class SOAP_CMAC ns1__ArrayOfVirtualMachineSnapshotTree : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineSnapshotTree * >VirtualMachineSnapshotTree;	/* optional element of type ns1:VirtualMachineSnapshotTree */
public:
	virtual int soap_type() const { return 2535; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineSnapshotTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineSnapshotTree() { ns1__ArrayOfVirtualMachineSnapshotTree::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineSnapshotTree() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineSoundInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineSoundInfo (2537)
/* ns1:ArrayOfVirtualMachineSoundInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineSoundInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineSoundInfo * >VirtualMachineSoundInfo;	/* optional element of type ns1:VirtualMachineSoundInfo */
public:
	virtual int soap_type() const { return 2537; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineSoundInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineSoundInfo() { ns1__ArrayOfVirtualMachineSoundInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineSoundInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineUsageOnDatastore
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineUsageOnDatastore (2539)
/* ns1:ArrayOfVirtualMachineUsageOnDatastore */
class SOAP_CMAC ns1__ArrayOfVirtualMachineUsageOnDatastore : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineUsageOnDatastore * >VirtualMachineUsageOnDatastore;	/* optional element of type ns1:VirtualMachineUsageOnDatastore */
public:
	virtual int soap_type() const { return 2539; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineUsageOnDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineUsageOnDatastore() { ns1__ArrayOfVirtualMachineUsageOnDatastore::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineUsageOnDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineSummary
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineSummary (2546)
/* ns1:ArrayOfVirtualMachineSummary */
class SOAP_CMAC ns1__ArrayOfVirtualMachineSummary : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineSummary * >VirtualMachineSummary;	/* optional element of type ns1:VirtualMachineSummary */
public:
	virtual int soap_type() const { return 2546; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineSummary() { ns1__ArrayOfVirtualMachineSummary::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualMachineUsbInfo
#define SOAP_TYPE_ns1__ArrayOfVirtualMachineUsbInfo (2550)
/* ns1:ArrayOfVirtualMachineUsbInfo */
class SOAP_CMAC ns1__ArrayOfVirtualMachineUsbInfo : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualMachineUsbInfo * >VirtualMachineUsbInfo;	/* optional element of type ns1:VirtualMachineUsbInfo */
public:
	virtual int soap_type() const { return 2550; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualMachineUsbInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualMachineUsbInfo() { ns1__ArrayOfVirtualMachineUsbInfo::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualMachineUsbInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCheckResult
#define SOAP_TYPE_ns1__ArrayOfCheckResult (2555)
/* ns1:ArrayOfCheckResult */
class SOAP_CMAC ns1__ArrayOfCheckResult : public xsd__anyType
{
public:
	std::vector<class ns1__CheckResult * >CheckResult;	/* optional element of type ns1:CheckResult */
public:
	virtual int soap_type() const { return 2555; } /* = unique id SOAP_TYPE_ns1__ArrayOfCheckResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCheckResult() { ns1__ArrayOfCheckResult::soap_default(NULL); }
	virtual ~ns1__ArrayOfCheckResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCustomizationIpV6Generator
#define SOAP_TYPE_ns1__ArrayOfCustomizationIpV6Generator (2585)
/* ns1:ArrayOfCustomizationIpV6Generator */
class SOAP_CMAC ns1__ArrayOfCustomizationIpV6Generator : public xsd__anyType
{
public:
	std::vector<class ns1__CustomizationIpV6Generator * >CustomizationIpV6Generator;	/* optional element of type ns1:CustomizationIpV6Generator */
public:
	virtual int soap_type() const { return 2585; } /* = unique id SOAP_TYPE_ns1__ArrayOfCustomizationIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCustomizationIpV6Generator() { ns1__ArrayOfCustomizationIpV6Generator::soap_default(NULL); }
	virtual ~ns1__ArrayOfCustomizationIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfCustomizationAdapterMapping
#define SOAP_TYPE_ns1__ArrayOfCustomizationAdapterMapping (2593)
/* ns1:ArrayOfCustomizationAdapterMapping */
class SOAP_CMAC ns1__ArrayOfCustomizationAdapterMapping : public xsd__anyType
{
public:
	std::vector<class ns1__CustomizationAdapterMapping * >CustomizationAdapterMapping;	/* optional element of type ns1:CustomizationAdapterMapping */
public:
	virtual int soap_type() const { return 2593; } /* = unique id SOAP_TYPE_ns1__ArrayOfCustomizationAdapterMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfCustomizationAdapterMapping() { ns1__ArrayOfCustomizationAdapterMapping::soap_default(NULL); }
	virtual ~ns1__ArrayOfCustomizationAdapterMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfHostDiskMappingPartitionOption
#define SOAP_TYPE_ns1__ArrayOfHostDiskMappingPartitionOption (2597)
/* ns1:ArrayOfHostDiskMappingPartitionOption */
class SOAP_CMAC ns1__ArrayOfHostDiskMappingPartitionOption : public xsd__anyType
{
public:
	std::vector<class ns1__HostDiskMappingPartitionOption * >HostDiskMappingPartitionOption;	/* optional element of type ns1:HostDiskMappingPartitionOption */
public:
	virtual int soap_type() const { return 2597; } /* = unique id SOAP_TYPE_ns1__ArrayOfHostDiskMappingPartitionOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfHostDiskMappingPartitionOption() { ns1__ArrayOfHostDiskMappingPartitionOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfHostDiskMappingPartitionOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualDevice
#define SOAP_TYPE_ns1__ArrayOfVirtualDevice (2625)
/* ns1:ArrayOfVirtualDevice */
class SOAP_CMAC ns1__ArrayOfVirtualDevice : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualDevice * >VirtualDevice;	/* optional element of type ns1:VirtualDevice */
public:
	virtual int soap_type() const { return 2625; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualDevice() { ns1__ArrayOfVirtualDevice::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualDeviceBackingOption
#define SOAP_TYPE_ns1__ArrayOfVirtualDeviceBackingOption (2627)
/* ns1:ArrayOfVirtualDeviceBackingOption */
class SOAP_CMAC ns1__ArrayOfVirtualDeviceBackingOption : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualDeviceBackingOption * >VirtualDeviceBackingOption;	/* optional element of type ns1:VirtualDeviceBackingOption */
public:
	virtual int soap_type() const { return 2627; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualDeviceBackingOption() { ns1__ArrayOfVirtualDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualDeviceOption
#define SOAP_TYPE_ns1__ArrayOfVirtualDeviceOption (2635)
/* ns1:ArrayOfVirtualDeviceOption */
class SOAP_CMAC ns1__ArrayOfVirtualDeviceOption : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualDeviceOption * >VirtualDeviceOption;	/* optional element of type ns1:VirtualDeviceOption */
public:
	virtual int soap_type() const { return 2635; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualDeviceOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualDeviceOption() { ns1__ArrayOfVirtualDeviceOption::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualDeviceOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualDeviceConfigSpec
#define SOAP_TYPE_ns1__ArrayOfVirtualDeviceConfigSpec (2637)
/* ns1:ArrayOfVirtualDeviceConfigSpec */
class SOAP_CMAC ns1__ArrayOfVirtualDeviceConfigSpec : public xsd__anyType
{
public:
	std::vector<class ns1__VirtualDeviceConfigSpec * >VirtualDeviceConfigSpec;	/* optional element of type ns1:VirtualDeviceConfigSpec */
public:
	virtual int soap_type() const { return 2637; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualDeviceConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualDeviceConfigSpec() { ns1__ArrayOfVirtualDeviceConfigSpec::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualDeviceConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualDisk
#define SOAP_TYPE_ns1__ArrayOfVirtualDisk (2646)
/* ns1:ArrayOfVirtualDisk */
class SOAP_CMAC ns1__ArrayOfVirtualDisk : public xsd__anyType
{
public:
	std::vector<ns1__VirtualDisk * >VirtualDisk;	/* optional element of type ns1:VirtualDisk */
public:
	virtual int soap_type() const { return 2646; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualDisk() { ns1__ArrayOfVirtualDisk::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfVirtualSCSISharing
#define SOAP_TYPE_ns1__ArrayOfVirtualSCSISharing (2703)
/* ns1:ArrayOfVirtualSCSISharing */
class SOAP_CMAC ns1__ArrayOfVirtualSCSISharing : public xsd__anyType
{
public:
	std::vector<enum ns1__VirtualSCSISharing >VirtualSCSISharing;	/* optional element of type ns1:VirtualSCSISharing */
public:
	virtual int soap_type() const { return 2703; } /* = unique id SOAP_TYPE_ns1__ArrayOfVirtualSCSISharing */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfVirtualSCSISharing() { ns1__ArrayOfVirtualSCSISharing::soap_default(NULL); }
	virtual ~ns1__ArrayOfVirtualSCSISharing() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddAuthorizationRoleResponse
#define SOAP_TYPE__ns1__AddAuthorizationRoleResponse (2748)
/* ns1:AddAuthorizationRoleResponse */
class SOAP_CMAC _ns1__AddAuthorizationRoleResponse
{
public:
	int returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2748; } /* = unique id SOAP_TYPE__ns1__AddAuthorizationRoleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddAuthorizationRoleResponse() { _ns1__AddAuthorizationRoleResponse::soap_default(NULL); }
	virtual ~_ns1__AddAuthorizationRoleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveAuthorizationRoleResponse
#define SOAP_TYPE__ns1__RemoveAuthorizationRoleResponse (2749)
/* ns1:RemoveAuthorizationRoleResponse */
class SOAP_CMAC _ns1__RemoveAuthorizationRoleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2749; } /* = unique id SOAP_TYPE__ns1__RemoveAuthorizationRoleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveAuthorizationRoleResponse() { _ns1__RemoveAuthorizationRoleResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveAuthorizationRoleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateAuthorizationRoleResponse
#define SOAP_TYPE__ns1__UpdateAuthorizationRoleResponse (2750)
/* ns1:UpdateAuthorizationRoleResponse */
class SOAP_CMAC _ns1__UpdateAuthorizationRoleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2750; } /* = unique id SOAP_TYPE__ns1__UpdateAuthorizationRoleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateAuthorizationRoleResponse() { _ns1__UpdateAuthorizationRoleResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateAuthorizationRoleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MergePermissionsResponse
#define SOAP_TYPE__ns1__MergePermissionsResponse (2751)
/* ns1:MergePermissionsResponse */
class SOAP_CMAC _ns1__MergePermissionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2751; } /* = unique id SOAP_TYPE__ns1__MergePermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MergePermissionsResponse() { _ns1__MergePermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__MergePermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveRolePermissionsResponse
#define SOAP_TYPE__ns1__RetrieveRolePermissionsResponse (2752)
/* ns1:RetrieveRolePermissionsResponse */
class SOAP_CMAC _ns1__RetrieveRolePermissionsResponse
{
public:
	std::vector<ns1__Permission * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Permission */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2752; } /* = unique id SOAP_TYPE__ns1__RetrieveRolePermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveRolePermissionsResponse() { _ns1__RetrieveRolePermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveRolePermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveEntityPermissionsResponse
#define SOAP_TYPE__ns1__RetrieveEntityPermissionsResponse (2753)
/* ns1:RetrieveEntityPermissionsResponse */
class SOAP_CMAC _ns1__RetrieveEntityPermissionsResponse
{
public:
	std::vector<ns1__Permission * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Permission */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2753; } /* = unique id SOAP_TYPE__ns1__RetrieveEntityPermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveEntityPermissionsResponse() { _ns1__RetrieveEntityPermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveEntityPermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveAllPermissionsResponse
#define SOAP_TYPE__ns1__RetrieveAllPermissionsResponse (2754)
/* ns1:RetrieveAllPermissionsResponse */
class SOAP_CMAC _ns1__RetrieveAllPermissionsResponse
{
public:
	std::vector<ns1__Permission * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Permission */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2754; } /* = unique id SOAP_TYPE__ns1__RetrieveAllPermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveAllPermissionsResponse() { _ns1__RetrieveAllPermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveAllPermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEntityPermissionsResponse
#define SOAP_TYPE__ns1__SetEntityPermissionsResponse (2755)
/* ns1:SetEntityPermissionsResponse */
class SOAP_CMAC _ns1__SetEntityPermissionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2755; } /* = unique id SOAP_TYPE__ns1__SetEntityPermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEntityPermissionsResponse() { _ns1__SetEntityPermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__SetEntityPermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetEntityPermissionsResponse
#define SOAP_TYPE__ns1__ResetEntityPermissionsResponse (2756)
/* ns1:ResetEntityPermissionsResponse */
class SOAP_CMAC _ns1__ResetEntityPermissionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2756; } /* = unique id SOAP_TYPE__ns1__ResetEntityPermissionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetEntityPermissionsResponse() { _ns1__ResetEntityPermissionsResponse::soap_default(NULL); }
	virtual ~_ns1__ResetEntityPermissionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveEntityPermissionResponse
#define SOAP_TYPE__ns1__RemoveEntityPermissionResponse (2757)
/* ns1:RemoveEntityPermissionResponse */
class SOAP_CMAC _ns1__RemoveEntityPermissionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2757; } /* = unique id SOAP_TYPE__ns1__RemoveEntityPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveEntityPermissionResponse() { _ns1__RemoveEntityPermissionResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveEntityPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureCluster_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureCluster_USCORETaskResponse (2758)
/* ns1:ReconfigureCluster_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureCluster_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2758; } /* = unique id SOAP_TYPE__ns1__ReconfigureCluster_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureCluster_USCORETaskResponse() { _ns1__ReconfigureCluster_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureCluster_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ApplyRecommendationResponse
#define SOAP_TYPE__ns1__ApplyRecommendationResponse (2759)
/* ns1:ApplyRecommendationResponse */
class SOAP_CMAC _ns1__ApplyRecommendationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2759; } /* = unique id SOAP_TYPE__ns1__ApplyRecommendationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ApplyRecommendationResponse() { _ns1__ApplyRecommendationResponse::soap_default(NULL); }
	virtual ~_ns1__ApplyRecommendationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CancelRecommendationResponse
#define SOAP_TYPE__ns1__CancelRecommendationResponse (2760)
/* ns1:CancelRecommendationResponse */
class SOAP_CMAC _ns1__CancelRecommendationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2760; } /* = unique id SOAP_TYPE__ns1__CancelRecommendationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CancelRecommendationResponse() { _ns1__CancelRecommendationResponse::soap_default(NULL); }
	virtual ~_ns1__CancelRecommendationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RecommendHostsForVmResponse
#define SOAP_TYPE__ns1__RecommendHostsForVmResponse (2761)
/* ns1:RecommendHostsForVmResponse */
class SOAP_CMAC _ns1__RecommendHostsForVmResponse
{
public:
	std::vector<ns1__ClusterHostRecommendation * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ClusterHostRecommendation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2761; } /* = unique id SOAP_TYPE__ns1__RecommendHostsForVmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RecommendHostsForVmResponse() { _ns1__RecommendHostsForVmResponse::soap_default(NULL); }
	virtual ~_ns1__RecommendHostsForVmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddHost_USCORETaskResponse
#define SOAP_TYPE__ns1__AddHost_USCORETaskResponse (2762)
/* ns1:AddHost_TaskResponse */
class SOAP_CMAC _ns1__AddHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2762; } /* = unique id SOAP_TYPE__ns1__AddHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddHost_USCORETaskResponse() { _ns1__AddHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__AddHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveInto_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveInto_USCORETaskResponse (2763)
/* ns1:MoveInto_TaskResponse */
class SOAP_CMAC _ns1__MoveInto_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2763; } /* = unique id SOAP_TYPE__ns1__MoveInto_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveInto_USCORETaskResponse() { _ns1__MoveInto_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveInto_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveHostInto_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveHostInto_USCORETaskResponse (2764)
/* ns1:MoveHostInto_TaskResponse */
class SOAP_CMAC _ns1__MoveHostInto_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2764; } /* = unique id SOAP_TYPE__ns1__MoveHostInto_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveHostInto_USCORETaskResponse() { _ns1__MoveHostInto_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveHostInto_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshRecommendationResponse
#define SOAP_TYPE__ns1__RefreshRecommendationResponse (2765)
/* ns1:RefreshRecommendationResponse */
class SOAP_CMAC _ns1__RefreshRecommendationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2765; } /* = unique id SOAP_TYPE__ns1__RefreshRecommendationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshRecommendationResponse() { _ns1__RefreshRecommendationResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshRecommendationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveDasAdvancedRuntimeInfoResponse
#define SOAP_TYPE__ns1__RetrieveDasAdvancedRuntimeInfoResponse (2766)
/* ns1:RetrieveDasAdvancedRuntimeInfoResponse */
class SOAP_CMAC _ns1__RetrieveDasAdvancedRuntimeInfoResponse
{
public:
	class ns1__ClusterDasAdvancedRuntimeInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ClusterDasAdvancedRuntimeInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2766; } /* = unique id SOAP_TYPE__ns1__RetrieveDasAdvancedRuntimeInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveDasAdvancedRuntimeInfoResponse() { _ns1__RetrieveDasAdvancedRuntimeInfoResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveDasAdvancedRuntimeInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureComputeResource_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureComputeResource_USCORETaskResponse (2767)
/* ns1:ReconfigureComputeResource_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureComputeResource_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2767; } /* = unique id SOAP_TYPE__ns1__ReconfigureComputeResource_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureComputeResource_USCORETaskResponse() { _ns1__ReconfigureComputeResource_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureComputeResource_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddCustomFieldDefResponse
#define SOAP_TYPE__ns1__AddCustomFieldDefResponse (2768)
/* ns1:AddCustomFieldDefResponse */
class SOAP_CMAC _ns1__AddCustomFieldDefResponse
{
public:
	ns1__CustomFieldDef *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:CustomFieldDef */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2768; } /* = unique id SOAP_TYPE__ns1__AddCustomFieldDefResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddCustomFieldDefResponse() { _ns1__AddCustomFieldDefResponse::soap_default(NULL); }
	virtual ~_ns1__AddCustomFieldDefResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveCustomFieldDefResponse
#define SOAP_TYPE__ns1__RemoveCustomFieldDefResponse (2769)
/* ns1:RemoveCustomFieldDefResponse */
class SOAP_CMAC _ns1__RemoveCustomFieldDefResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2769; } /* = unique id SOAP_TYPE__ns1__RemoveCustomFieldDefResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveCustomFieldDefResponse() { _ns1__RemoveCustomFieldDefResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveCustomFieldDefResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RenameCustomFieldDefResponse
#define SOAP_TYPE__ns1__RenameCustomFieldDefResponse (2770)
/* ns1:RenameCustomFieldDefResponse */
class SOAP_CMAC _ns1__RenameCustomFieldDefResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2770; } /* = unique id SOAP_TYPE__ns1__RenameCustomFieldDefResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RenameCustomFieldDefResponse() { _ns1__RenameCustomFieldDefResponse::soap_default(NULL); }
	virtual ~_ns1__RenameCustomFieldDefResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetFieldResponse
#define SOAP_TYPE__ns1__SetFieldResponse (2771)
/* ns1:SetFieldResponse */
class SOAP_CMAC _ns1__SetFieldResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2771; } /* = unique id SOAP_TYPE__ns1__SetFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetFieldResponse() { _ns1__SetFieldResponse::soap_default(NULL); }
	virtual ~_ns1__SetFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DoesCustomizationSpecExistResponse
#define SOAP_TYPE__ns1__DoesCustomizationSpecExistResponse (2772)
/* ns1:DoesCustomizationSpecExistResponse */
class SOAP_CMAC _ns1__DoesCustomizationSpecExistResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2772; } /* = unique id SOAP_TYPE__ns1__DoesCustomizationSpecExistResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DoesCustomizationSpecExistResponse() { _ns1__DoesCustomizationSpecExistResponse::soap_default(NULL); }
	virtual ~_ns1__DoesCustomizationSpecExistResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetCustomizationSpecResponse
#define SOAP_TYPE__ns1__GetCustomizationSpecResponse (2773)
/* ns1:GetCustomizationSpecResponse */
class SOAP_CMAC _ns1__GetCustomizationSpecResponse
{
public:
	ns1__CustomizationSpecItem *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:CustomizationSpecItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2773; } /* = unique id SOAP_TYPE__ns1__GetCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetCustomizationSpecResponse() { _ns1__GetCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__GetCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateCustomizationSpecResponse
#define SOAP_TYPE__ns1__CreateCustomizationSpecResponse (2774)
/* ns1:CreateCustomizationSpecResponse */
class SOAP_CMAC _ns1__CreateCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2774; } /* = unique id SOAP_TYPE__ns1__CreateCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateCustomizationSpecResponse() { _ns1__CreateCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__CreateCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OverwriteCustomizationSpecResponse
#define SOAP_TYPE__ns1__OverwriteCustomizationSpecResponse (2775)
/* ns1:OverwriteCustomizationSpecResponse */
class SOAP_CMAC _ns1__OverwriteCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2775; } /* = unique id SOAP_TYPE__ns1__OverwriteCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OverwriteCustomizationSpecResponse() { _ns1__OverwriteCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__OverwriteCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteCustomizationSpecResponse
#define SOAP_TYPE__ns1__DeleteCustomizationSpecResponse (2776)
/* ns1:DeleteCustomizationSpecResponse */
class SOAP_CMAC _ns1__DeleteCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2776; } /* = unique id SOAP_TYPE__ns1__DeleteCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteCustomizationSpecResponse() { _ns1__DeleteCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DuplicateCustomizationSpecResponse
#define SOAP_TYPE__ns1__DuplicateCustomizationSpecResponse (2777)
/* ns1:DuplicateCustomizationSpecResponse */
class SOAP_CMAC _ns1__DuplicateCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2777; } /* = unique id SOAP_TYPE__ns1__DuplicateCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DuplicateCustomizationSpecResponse() { _ns1__DuplicateCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__DuplicateCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RenameCustomizationSpecResponse
#define SOAP_TYPE__ns1__RenameCustomizationSpecResponse (2778)
/* ns1:RenameCustomizationSpecResponse */
class SOAP_CMAC _ns1__RenameCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2778; } /* = unique id SOAP_TYPE__ns1__RenameCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RenameCustomizationSpecResponse() { _ns1__RenameCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__RenameCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CustomizationSpecItemToXmlResponse
#define SOAP_TYPE__ns1__CustomizationSpecItemToXmlResponse (2779)
/* ns1:CustomizationSpecItemToXmlResponse */
class SOAP_CMAC _ns1__CustomizationSpecItemToXmlResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2779; } /* = unique id SOAP_TYPE__ns1__CustomizationSpecItemToXmlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CustomizationSpecItemToXmlResponse() { _ns1__CustomizationSpecItemToXmlResponse::soap_default(NULL); }
	virtual ~_ns1__CustomizationSpecItemToXmlResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__XmlToCustomizationSpecItemResponse
#define SOAP_TYPE__ns1__XmlToCustomizationSpecItemResponse (2780)
/* ns1:XmlToCustomizationSpecItemResponse */
class SOAP_CMAC _ns1__XmlToCustomizationSpecItemResponse
{
public:
	ns1__CustomizationSpecItem *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:CustomizationSpecItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2780; } /* = unique id SOAP_TYPE__ns1__XmlToCustomizationSpecItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__XmlToCustomizationSpecItemResponse() { _ns1__XmlToCustomizationSpecItemResponse::soap_default(NULL); }
	virtual ~_ns1__XmlToCustomizationSpecItemResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckCustomizationResourcesResponse
#define SOAP_TYPE__ns1__CheckCustomizationResourcesResponse (2781)
/* ns1:CheckCustomizationResourcesResponse */
class SOAP_CMAC _ns1__CheckCustomizationResourcesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2781; } /* = unique id SOAP_TYPE__ns1__CheckCustomizationResourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckCustomizationResourcesResponse() { _ns1__CheckCustomizationResourcesResponse::soap_default(NULL); }
	virtual ~_ns1__CheckCustomizationResourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryConnectionInfoResponse
#define SOAP_TYPE__ns1__QueryConnectionInfoResponse (2782)
/* ns1:QueryConnectionInfoResponse */
class SOAP_CMAC _ns1__QueryConnectionInfoResponse
{
public:
	class ns1__HostConnectInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostConnectInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2782; } /* = unique id SOAP_TYPE__ns1__QueryConnectionInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryConnectionInfoResponse() { _ns1__QueryConnectionInfoResponse::soap_default(NULL); }
	virtual ~_ns1__QueryConnectionInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerOnMultiVM_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerOnMultiVM_USCORETaskResponse (2783)
/* ns1:PowerOnMultiVM_TaskResponse */
class SOAP_CMAC _ns1__PowerOnMultiVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2783; } /* = unique id SOAP_TYPE__ns1__PowerOnMultiVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerOnMultiVM_USCORETaskResponse() { _ns1__PowerOnMultiVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerOnMultiVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshDatastoreResponse
#define SOAP_TYPE__ns1__RefreshDatastoreResponse (2784)
/* ns1:RefreshDatastoreResponse */
class SOAP_CMAC _ns1__RefreshDatastoreResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2784; } /* = unique id SOAP_TYPE__ns1__RefreshDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshDatastoreResponse() { _ns1__RefreshDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshDatastoreStorageInfoResponse
#define SOAP_TYPE__ns1__RefreshDatastoreStorageInfoResponse (2785)
/* ns1:RefreshDatastoreStorageInfoResponse */
class SOAP_CMAC _ns1__RefreshDatastoreStorageInfoResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2785; } /* = unique id SOAP_TYPE__ns1__RefreshDatastoreStorageInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshDatastoreStorageInfoResponse() { _ns1__RefreshDatastoreStorageInfoResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshDatastoreStorageInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateVirtualMachineFiles_USCORETaskResponse
#define SOAP_TYPE__ns1__UpdateVirtualMachineFiles_USCORETaskResponse (2786)
/* ns1:UpdateVirtualMachineFiles_TaskResponse */
class SOAP_CMAC _ns1__UpdateVirtualMachineFiles_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2786; } /* = unique id SOAP_TYPE__ns1__UpdateVirtualMachineFiles_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateVirtualMachineFiles_USCORETaskResponse() { _ns1__UpdateVirtualMachineFiles_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateVirtualMachineFiles_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RenameDatastoreResponse
#define SOAP_TYPE__ns1__RenameDatastoreResponse (2787)
/* ns1:RenameDatastoreResponse */
class SOAP_CMAC _ns1__RenameDatastoreResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2787; } /* = unique id SOAP_TYPE__ns1__RenameDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RenameDatastoreResponse() { _ns1__RenameDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__RenameDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyDatastoreResponse
#define SOAP_TYPE__ns1__DestroyDatastoreResponse (2788)
/* ns1:DestroyDatastoreResponse */
class SOAP_CMAC _ns1__DestroyDatastoreResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2788; } /* = unique id SOAP_TYPE__ns1__DestroyDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyDatastoreResponse() { _ns1__DestroyDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDescriptionsResponse
#define SOAP_TYPE__ns1__QueryDescriptionsResponse (2789)
/* ns1:QueryDescriptionsResponse */
class SOAP_CMAC _ns1__QueryDescriptionsResponse
{
public:
	std::vector<ns1__DiagnosticManagerLogDescriptor * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DiagnosticManagerLogDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2789; } /* = unique id SOAP_TYPE__ns1__QueryDescriptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDescriptionsResponse() { _ns1__QueryDescriptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDescriptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__BrowseDiagnosticLogResponse
#define SOAP_TYPE__ns1__BrowseDiagnosticLogResponse (2790)
/* ns1:BrowseDiagnosticLogResponse */
class SOAP_CMAC _ns1__BrowseDiagnosticLogResponse
{
public:
	class ns1__DiagnosticManagerLogHeader *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:DiagnosticManagerLogHeader */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2790; } /* = unique id SOAP_TYPE__ns1__BrowseDiagnosticLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__BrowseDiagnosticLogResponse() { _ns1__BrowseDiagnosticLogResponse::soap_default(NULL); }
	virtual ~_ns1__BrowseDiagnosticLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GenerateLogBundles_USCORETaskResponse
#define SOAP_TYPE__ns1__GenerateLogBundles_USCORETaskResponse (2791)
/* ns1:GenerateLogBundles_TaskResponse */
class SOAP_CMAC _ns1__GenerateLogBundles_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2791; } /* = unique id SOAP_TYPE__ns1__GenerateLogBundles_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GenerateLogBundles_USCORETaskResponse() { _ns1__GenerateLogBundles_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__GenerateLogBundles_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FetchDVPortKeysResponse
#define SOAP_TYPE__ns1__FetchDVPortKeysResponse (2792)
/* ns1:FetchDVPortKeysResponse */
class SOAP_CMAC _ns1__FetchDVPortKeysResponse
{
public:
	std::vector<std::string >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2792; } /* = unique id SOAP_TYPE__ns1__FetchDVPortKeysResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FetchDVPortKeysResponse() { _ns1__FetchDVPortKeysResponse::soap_default(NULL); }
	virtual ~_ns1__FetchDVPortKeysResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FetchDVPortsResponse
#define SOAP_TYPE__ns1__FetchDVPortsResponse (2793)
/* ns1:FetchDVPortsResponse */
class SOAP_CMAC _ns1__FetchDVPortsResponse
{
public:
	std::vector<ns1__DistributedVirtualPort * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DistributedVirtualPort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2793; } /* = unique id SOAP_TYPE__ns1__FetchDVPortsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FetchDVPortsResponse() { _ns1__FetchDVPortsResponse::soap_default(NULL); }
	virtual ~_ns1__FetchDVPortsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUsedVlanIdInDvsResponse
#define SOAP_TYPE__ns1__QueryUsedVlanIdInDvsResponse (2794)
/* ns1:QueryUsedVlanIdInDvsResponse */
class SOAP_CMAC _ns1__QueryUsedVlanIdInDvsResponse
{
public:
	std::vector<int >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2794; } /* = unique id SOAP_TYPE__ns1__QueryUsedVlanIdInDvsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUsedVlanIdInDvsResponse() { _ns1__QueryUsedVlanIdInDvsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryUsedVlanIdInDvsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureDvs_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureDvs_USCORETaskResponse (2795)
/* ns1:ReconfigureDvs_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureDvs_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2795; } /* = unique id SOAP_TYPE__ns1__ReconfigureDvs_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureDvs_USCORETaskResponse() { _ns1__ReconfigureDvs_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureDvs_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PerformDvsProductSpecOperation_USCORETaskResponse
#define SOAP_TYPE__ns1__PerformDvsProductSpecOperation_USCORETaskResponse (2796)
/* ns1:PerformDvsProductSpecOperation_TaskResponse */
class SOAP_CMAC _ns1__PerformDvsProductSpecOperation_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2796; } /* = unique id SOAP_TYPE__ns1__PerformDvsProductSpecOperation_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PerformDvsProductSpecOperation_USCORETaskResponse() { _ns1__PerformDvsProductSpecOperation_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PerformDvsProductSpecOperation_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MergeDvs_USCORETaskResponse
#define SOAP_TYPE__ns1__MergeDvs_USCORETaskResponse (2797)
/* ns1:MergeDvs_TaskResponse */
class SOAP_CMAC _ns1__MergeDvs_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2797; } /* = unique id SOAP_TYPE__ns1__MergeDvs_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MergeDvs_USCORETaskResponse() { _ns1__MergeDvs_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MergeDvs_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddDVPortgroup_USCORETaskResponse
#define SOAP_TYPE__ns1__AddDVPortgroup_USCORETaskResponse (2798)
/* ns1:AddDVPortgroup_TaskResponse */
class SOAP_CMAC _ns1__AddDVPortgroup_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2798; } /* = unique id SOAP_TYPE__ns1__AddDVPortgroup_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddDVPortgroup_USCORETaskResponse() { _ns1__AddDVPortgroup_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__AddDVPortgroup_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveDVPort_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveDVPort_USCORETaskResponse (2799)
/* ns1:MoveDVPort_TaskResponse */
class SOAP_CMAC _ns1__MoveDVPort_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2799; } /* = unique id SOAP_TYPE__ns1__MoveDVPort_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveDVPort_USCORETaskResponse() { _ns1__MoveDVPort_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveDVPort_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDvsCapabilityResponse
#define SOAP_TYPE__ns1__UpdateDvsCapabilityResponse (2800)
/* ns1:UpdateDvsCapabilityResponse */
class SOAP_CMAC _ns1__UpdateDvsCapabilityResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2800; } /* = unique id SOAP_TYPE__ns1__UpdateDvsCapabilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDvsCapabilityResponse() { _ns1__UpdateDvsCapabilityResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDvsCapabilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureDVPort_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureDVPort_USCORETaskResponse (2801)
/* ns1:ReconfigureDVPort_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureDVPort_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2801; } /* = unique id SOAP_TYPE__ns1__ReconfigureDVPort_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureDVPort_USCORETaskResponse() { _ns1__ReconfigureDVPort_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureDVPort_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshDVPortStateResponse
#define SOAP_TYPE__ns1__RefreshDVPortStateResponse (2802)
/* ns1:RefreshDVPortStateResponse */
class SOAP_CMAC _ns1__RefreshDVPortStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2802; } /* = unique id SOAP_TYPE__ns1__RefreshDVPortStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshDVPortStateResponse() { _ns1__RefreshDVPortStateResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshDVPortStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RectifyDvsHost_USCORETaskResponse
#define SOAP_TYPE__ns1__RectifyDvsHost_USCORETaskResponse (2803)
/* ns1:RectifyDvsHost_TaskResponse */
class SOAP_CMAC _ns1__RectifyDvsHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2803; } /* = unique id SOAP_TYPE__ns1__RectifyDvsHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RectifyDvsHost_USCORETaskResponse() { _ns1__RectifyDvsHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RectifyDvsHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateNetworkResourcePoolResponse
#define SOAP_TYPE__ns1__UpdateNetworkResourcePoolResponse (2804)
/* ns1:UpdateNetworkResourcePoolResponse */
class SOAP_CMAC _ns1__UpdateNetworkResourcePoolResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2804; } /* = unique id SOAP_TYPE__ns1__UpdateNetworkResourcePoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateNetworkResourcePoolResponse() { _ns1__UpdateNetworkResourcePoolResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateNetworkResourcePoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableNetworkResourceManagementResponse
#define SOAP_TYPE__ns1__EnableNetworkResourceManagementResponse (2805)
/* ns1:EnableNetworkResourceManagementResponse */
class SOAP_CMAC _ns1__EnableNetworkResourceManagementResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2805; } /* = unique id SOAP_TYPE__ns1__EnableNetworkResourceManagementResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableNetworkResourceManagementResponse() { _ns1__EnableNetworkResourceManagementResponse::soap_default(NULL); }
	virtual ~_ns1__EnableNetworkResourceManagementResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryConfigOptionDescriptorResponse
#define SOAP_TYPE__ns1__QueryConfigOptionDescriptorResponse (2806)
/* ns1:QueryConfigOptionDescriptorResponse */
class SOAP_CMAC _ns1__QueryConfigOptionDescriptorResponse
{
public:
	std::vector<ns1__VirtualMachineConfigOptionDescriptor * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VirtualMachineConfigOptionDescriptor */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2806; } /* = unique id SOAP_TYPE__ns1__QueryConfigOptionDescriptorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryConfigOptionDescriptorResponse() { _ns1__QueryConfigOptionDescriptorResponse::soap_default(NULL); }
	virtual ~_ns1__QueryConfigOptionDescriptorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryConfigOptionResponse
#define SOAP_TYPE__ns1__QueryConfigOptionResponse (2807)
/* ns1:QueryConfigOptionResponse */
class SOAP_CMAC _ns1__QueryConfigOptionResponse
{
public:
	class ns1__VirtualMachineConfigOption *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VirtualMachineConfigOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2807; } /* = unique id SOAP_TYPE__ns1__QueryConfigOptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryConfigOptionResponse() { _ns1__QueryConfigOptionResponse::soap_default(NULL); }
	virtual ~_ns1__QueryConfigOptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryConfigTargetResponse
#define SOAP_TYPE__ns1__QueryConfigTargetResponse (2808)
/* ns1:QueryConfigTargetResponse */
class SOAP_CMAC _ns1__QueryConfigTargetResponse
{
public:
	class ns1__ConfigTarget *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ConfigTarget */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2808; } /* = unique id SOAP_TYPE__ns1__QueryConfigTargetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryConfigTargetResponse() { _ns1__QueryConfigTargetResponse::soap_default(NULL); }
	virtual ~_ns1__QueryConfigTargetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryTargetCapabilitiesResponse
#define SOAP_TYPE__ns1__QueryTargetCapabilitiesResponse (2809)
/* ns1:QueryTargetCapabilitiesResponse */
class SOAP_CMAC _ns1__QueryTargetCapabilitiesResponse
{
public:
	class ns1__HostCapability *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostCapability */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2809; } /* = unique id SOAP_TYPE__ns1__QueryTargetCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryTargetCapabilitiesResponse() { _ns1__QueryTargetCapabilitiesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryTargetCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__setCustomValueResponse
#define SOAP_TYPE__ns1__setCustomValueResponse (2810)
/* ns1:setCustomValueResponse */
class SOAP_CMAC _ns1__setCustomValueResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2810; } /* = unique id SOAP_TYPE__ns1__setCustomValueResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__setCustomValueResponse() { _ns1__setCustomValueResponse::soap_default(NULL); }
	virtual ~_ns1__setCustomValueResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnregisterExtensionResponse
#define SOAP_TYPE__ns1__UnregisterExtensionResponse (2811)
/* ns1:UnregisterExtensionResponse */
class SOAP_CMAC _ns1__UnregisterExtensionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2811; } /* = unique id SOAP_TYPE__ns1__UnregisterExtensionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnregisterExtensionResponse() { _ns1__UnregisterExtensionResponse::soap_default(NULL); }
	virtual ~_ns1__UnregisterExtensionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindExtensionResponse
#define SOAP_TYPE__ns1__FindExtensionResponse (2812)
/* ns1:FindExtensionResponse */
class SOAP_CMAC _ns1__FindExtensionResponse
{
public:
	ns1__Extension *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2812; } /* = unique id SOAP_TYPE__ns1__FindExtensionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindExtensionResponse() { _ns1__FindExtensionResponse::soap_default(NULL); }
	virtual ~_ns1__FindExtensionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RegisterExtensionResponse
#define SOAP_TYPE__ns1__RegisterExtensionResponse (2813)
/* ns1:RegisterExtensionResponse */
class SOAP_CMAC _ns1__RegisterExtensionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2813; } /* = unique id SOAP_TYPE__ns1__RegisterExtensionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RegisterExtensionResponse() { _ns1__RegisterExtensionResponse::soap_default(NULL); }
	virtual ~_ns1__RegisterExtensionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateExtensionResponse
#define SOAP_TYPE__ns1__UpdateExtensionResponse (2814)
/* ns1:UpdateExtensionResponse */
class SOAP_CMAC _ns1__UpdateExtensionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2814; } /* = unique id SOAP_TYPE__ns1__UpdateExtensionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateExtensionResponse() { _ns1__UpdateExtensionResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateExtensionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetPublicKeyResponse
#define SOAP_TYPE__ns1__GetPublicKeyResponse (2815)
/* ns1:GetPublicKeyResponse */
class SOAP_CMAC _ns1__GetPublicKeyResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2815; } /* = unique id SOAP_TYPE__ns1__GetPublicKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetPublicKeyResponse() { _ns1__GetPublicKeyResponse::soap_default(NULL); }
	virtual ~_ns1__GetPublicKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetPublicKeyResponse
#define SOAP_TYPE__ns1__SetPublicKeyResponse (2816)
/* ns1:SetPublicKeyResponse */
class SOAP_CMAC _ns1__SetPublicKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2816; } /* = unique id SOAP_TYPE__ns1__SetPublicKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetPublicKeyResponse() { _ns1__SetPublicKeyResponse::soap_default(NULL); }
	virtual ~_ns1__SetPublicKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetExtensionCertificateResponse
#define SOAP_TYPE__ns1__SetExtensionCertificateResponse (2817)
/* ns1:SetExtensionCertificateResponse */
class SOAP_CMAC _ns1__SetExtensionCertificateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2817; } /* = unique id SOAP_TYPE__ns1__SetExtensionCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetExtensionCertificateResponse() { _ns1__SetExtensionCertificateResponse::soap_default(NULL); }
	virtual ~_ns1__SetExtensionCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveDatastoreFile_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveDatastoreFile_USCORETaskResponse (2818)
/* ns1:MoveDatastoreFile_TaskResponse */
class SOAP_CMAC _ns1__MoveDatastoreFile_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2818; } /* = unique id SOAP_TYPE__ns1__MoveDatastoreFile_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveDatastoreFile_USCORETaskResponse() { _ns1__MoveDatastoreFile_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveDatastoreFile_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CopyDatastoreFile_USCORETaskResponse
#define SOAP_TYPE__ns1__CopyDatastoreFile_USCORETaskResponse (2819)
/* ns1:CopyDatastoreFile_TaskResponse */
class SOAP_CMAC _ns1__CopyDatastoreFile_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2819; } /* = unique id SOAP_TYPE__ns1__CopyDatastoreFile_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CopyDatastoreFile_USCORETaskResponse() { _ns1__CopyDatastoreFile_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CopyDatastoreFile_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteDatastoreFile_USCORETaskResponse
#define SOAP_TYPE__ns1__DeleteDatastoreFile_USCORETaskResponse (2820)
/* ns1:DeleteDatastoreFile_TaskResponse */
class SOAP_CMAC _ns1__DeleteDatastoreFile_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2820; } /* = unique id SOAP_TYPE__ns1__DeleteDatastoreFile_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteDatastoreFile_USCORETaskResponse() { _ns1__DeleteDatastoreFile_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteDatastoreFile_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MakeDirectoryResponse
#define SOAP_TYPE__ns1__MakeDirectoryResponse (2821)
/* ns1:MakeDirectoryResponse */
class SOAP_CMAC _ns1__MakeDirectoryResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2821; } /* = unique id SOAP_TYPE__ns1__MakeDirectoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MakeDirectoryResponse() { _ns1__MakeDirectoryResponse::soap_default(NULL); }
	virtual ~_ns1__MakeDirectoryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ChangeOwnerResponse
#define SOAP_TYPE__ns1__ChangeOwnerResponse (2822)
/* ns1:ChangeOwnerResponse */
class SOAP_CMAC _ns1__ChangeOwnerResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2822; } /* = unique id SOAP_TYPE__ns1__ChangeOwnerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ChangeOwnerResponse() { _ns1__ChangeOwnerResponse::soap_default(NULL); }
	virtual ~_ns1__ChangeOwnerResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateFolderResponse
#define SOAP_TYPE__ns1__CreateFolderResponse (2823)
/* ns1:CreateFolderResponse */
class SOAP_CMAC _ns1__CreateFolderResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2823; } /* = unique id SOAP_TYPE__ns1__CreateFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateFolderResponse() { _ns1__CreateFolderResponse::soap_default(NULL); }
	virtual ~_ns1__CreateFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveIntoFolder_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveIntoFolder_USCORETaskResponse (2824)
/* ns1:MoveIntoFolder_TaskResponse */
class SOAP_CMAC _ns1__MoveIntoFolder_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2824; } /* = unique id SOAP_TYPE__ns1__MoveIntoFolder_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveIntoFolder_USCORETaskResponse() { _ns1__MoveIntoFolder_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveIntoFolder_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateVM_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateVM_USCORETaskResponse (2825)
/* ns1:CreateVM_TaskResponse */
class SOAP_CMAC _ns1__CreateVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2825; } /* = unique id SOAP_TYPE__ns1__CreateVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateVM_USCORETaskResponse() { _ns1__CreateVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RegisterVM_USCORETaskResponse
#define SOAP_TYPE__ns1__RegisterVM_USCORETaskResponse (2826)
/* ns1:RegisterVM_TaskResponse */
class SOAP_CMAC _ns1__RegisterVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2826; } /* = unique id SOAP_TYPE__ns1__RegisterVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RegisterVM_USCORETaskResponse() { _ns1__RegisterVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RegisterVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateClusterResponse
#define SOAP_TYPE__ns1__CreateClusterResponse (2827)
/* ns1:CreateClusterResponse */
class SOAP_CMAC _ns1__CreateClusterResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2827; } /* = unique id SOAP_TYPE__ns1__CreateClusterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateClusterResponse() { _ns1__CreateClusterResponse::soap_default(NULL); }
	virtual ~_ns1__CreateClusterResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateClusterExResponse
#define SOAP_TYPE__ns1__CreateClusterExResponse (2828)
/* ns1:CreateClusterExResponse */
class SOAP_CMAC _ns1__CreateClusterExResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2828; } /* = unique id SOAP_TYPE__ns1__CreateClusterExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateClusterExResponse() { _ns1__CreateClusterExResponse::soap_default(NULL); }
	virtual ~_ns1__CreateClusterExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddStandaloneHost_USCORETaskResponse
#define SOAP_TYPE__ns1__AddStandaloneHost_USCORETaskResponse (2829)
/* ns1:AddStandaloneHost_TaskResponse */
class SOAP_CMAC _ns1__AddStandaloneHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2829; } /* = unique id SOAP_TYPE__ns1__AddStandaloneHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddStandaloneHost_USCORETaskResponse() { _ns1__AddStandaloneHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__AddStandaloneHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateDatacenterResponse
#define SOAP_TYPE__ns1__CreateDatacenterResponse (2830)
/* ns1:CreateDatacenterResponse */
class SOAP_CMAC _ns1__CreateDatacenterResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2830; } /* = unique id SOAP_TYPE__ns1__CreateDatacenterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateDatacenterResponse() { _ns1__CreateDatacenterResponse::soap_default(NULL); }
	virtual ~_ns1__CreateDatacenterResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnregisterAndDestroy_USCORETaskResponse
#define SOAP_TYPE__ns1__UnregisterAndDestroy_USCORETaskResponse (2831)
/* ns1:UnregisterAndDestroy_TaskResponse */
class SOAP_CMAC _ns1__UnregisterAndDestroy_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2831; } /* = unique id SOAP_TYPE__ns1__UnregisterAndDestroy_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnregisterAndDestroy_USCORETaskResponse() { _ns1__UnregisterAndDestroy_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__UnregisterAndDestroy_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateDVS_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateDVS_USCORETaskResponse (2832)
/* ns1:CreateDVS_TaskResponse */
class SOAP_CMAC _ns1__CreateDVS_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2832; } /* = unique id SOAP_TYPE__ns1__CreateDVS_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateDVS_USCORETaskResponse() { _ns1__CreateDVS_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateDVS_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetCollectorPageSizeResponse
#define SOAP_TYPE__ns1__SetCollectorPageSizeResponse (2833)
/* ns1:SetCollectorPageSizeResponse */
class SOAP_CMAC _ns1__SetCollectorPageSizeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2833; } /* = unique id SOAP_TYPE__ns1__SetCollectorPageSizeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetCollectorPageSizeResponse() { _ns1__SetCollectorPageSizeResponse::soap_default(NULL); }
	virtual ~_ns1__SetCollectorPageSizeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RewindCollectorResponse
#define SOAP_TYPE__ns1__RewindCollectorResponse (2834)
/* ns1:RewindCollectorResponse */
class SOAP_CMAC _ns1__RewindCollectorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2834; } /* = unique id SOAP_TYPE__ns1__RewindCollectorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RewindCollectorResponse() { _ns1__RewindCollectorResponse::soap_default(NULL); }
	virtual ~_ns1__RewindCollectorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetCollectorResponse
#define SOAP_TYPE__ns1__ResetCollectorResponse (2835)
/* ns1:ResetCollectorResponse */
class SOAP_CMAC _ns1__ResetCollectorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2835; } /* = unique id SOAP_TYPE__ns1__ResetCollectorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetCollectorResponse() { _ns1__ResetCollectorResponse::soap_default(NULL); }
	virtual ~_ns1__ResetCollectorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyCollectorResponse
#define SOAP_TYPE__ns1__DestroyCollectorResponse (2836)
/* ns1:DestroyCollectorResponse */
class SOAP_CMAC _ns1__DestroyCollectorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2836; } /* = unique id SOAP_TYPE__ns1__DestroyCollectorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyCollectorResponse() { _ns1__DestroyCollectorResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyCollectorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryHostConnectionInfoResponse
#define SOAP_TYPE__ns1__QueryHostConnectionInfoResponse (2837)
/* ns1:QueryHostConnectionInfoResponse */
class SOAP_CMAC _ns1__QueryHostConnectionInfoResponse
{
public:
	ns1__HostConnectInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostConnectInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2837; } /* = unique id SOAP_TYPE__ns1__QueryHostConnectionInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryHostConnectionInfoResponse() { _ns1__QueryHostConnectionInfoResponse::soap_default(NULL); }
	virtual ~_ns1__QueryHostConnectionInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateSystemResourcesResponse
#define SOAP_TYPE__ns1__UpdateSystemResourcesResponse (2838)
/* ns1:UpdateSystemResourcesResponse */
class SOAP_CMAC _ns1__UpdateSystemResourcesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2838; } /* = unique id SOAP_TYPE__ns1__UpdateSystemResourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateSystemResourcesResponse() { _ns1__UpdateSystemResourcesResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateSystemResourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconnectHost_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconnectHost_USCORETaskResponse (2839)
/* ns1:ReconnectHost_TaskResponse */
class SOAP_CMAC _ns1__ReconnectHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2839; } /* = unique id SOAP_TYPE__ns1__ReconnectHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconnectHost_USCORETaskResponse() { _ns1__ReconnectHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconnectHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisconnectHost_USCORETaskResponse
#define SOAP_TYPE__ns1__DisconnectHost_USCORETaskResponse (2840)
/* ns1:DisconnectHost_TaskResponse */
class SOAP_CMAC _ns1__DisconnectHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2840; } /* = unique id SOAP_TYPE__ns1__DisconnectHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisconnectHost_USCORETaskResponse() { _ns1__DisconnectHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__DisconnectHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnterMaintenanceMode_USCORETaskResponse
#define SOAP_TYPE__ns1__EnterMaintenanceMode_USCORETaskResponse (2841)
/* ns1:EnterMaintenanceMode_TaskResponse */
class SOAP_CMAC _ns1__EnterMaintenanceMode_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2841; } /* = unique id SOAP_TYPE__ns1__EnterMaintenanceMode_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnterMaintenanceMode_USCORETaskResponse() { _ns1__EnterMaintenanceMode_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__EnterMaintenanceMode_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExitMaintenanceMode_USCORETaskResponse
#define SOAP_TYPE__ns1__ExitMaintenanceMode_USCORETaskResponse (2842)
/* ns1:ExitMaintenanceMode_TaskResponse */
class SOAP_CMAC _ns1__ExitMaintenanceMode_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2842; } /* = unique id SOAP_TYPE__ns1__ExitMaintenanceMode_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExitMaintenanceMode_USCORETaskResponse() { _ns1__ExitMaintenanceMode_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ExitMaintenanceMode_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RebootHost_USCORETaskResponse
#define SOAP_TYPE__ns1__RebootHost_USCORETaskResponse (2843)
/* ns1:RebootHost_TaskResponse */
class SOAP_CMAC _ns1__RebootHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2843; } /* = unique id SOAP_TYPE__ns1__RebootHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RebootHost_USCORETaskResponse() { _ns1__RebootHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RebootHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ShutdownHost_USCORETaskResponse
#define SOAP_TYPE__ns1__ShutdownHost_USCORETaskResponse (2844)
/* ns1:ShutdownHost_TaskResponse */
class SOAP_CMAC _ns1__ShutdownHost_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2844; } /* = unique id SOAP_TYPE__ns1__ShutdownHost_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ShutdownHost_USCORETaskResponse() { _ns1__ShutdownHost_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ShutdownHost_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerDownHostToStandBy_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerDownHostToStandBy_USCORETaskResponse (2845)
/* ns1:PowerDownHostToStandBy_TaskResponse */
class SOAP_CMAC _ns1__PowerDownHostToStandBy_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2845; } /* = unique id SOAP_TYPE__ns1__PowerDownHostToStandBy_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerDownHostToStandBy_USCORETaskResponse() { _ns1__PowerDownHostToStandBy_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerDownHostToStandBy_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerUpHostFromStandBy_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerUpHostFromStandBy_USCORETaskResponse (2846)
/* ns1:PowerUpHostFromStandBy_TaskResponse */
class SOAP_CMAC _ns1__PowerUpHostFromStandBy_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2846; } /* = unique id SOAP_TYPE__ns1__PowerUpHostFromStandBy_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerUpHostFromStandBy_USCORETaskResponse() { _ns1__PowerUpHostFromStandBy_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerUpHostFromStandBy_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryMemoryOverheadResponse
#define SOAP_TYPE__ns1__QueryMemoryOverheadResponse (2847)
/* ns1:QueryMemoryOverheadResponse */
class SOAP_CMAC _ns1__QueryMemoryOverheadResponse
{
public:
	LONG64 returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2847; } /* = unique id SOAP_TYPE__ns1__QueryMemoryOverheadResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryMemoryOverheadResponse() { _ns1__QueryMemoryOverheadResponse::soap_default(NULL); }
	virtual ~_ns1__QueryMemoryOverheadResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryMemoryOverheadExResponse
#define SOAP_TYPE__ns1__QueryMemoryOverheadExResponse (2848)
/* ns1:QueryMemoryOverheadExResponse */
class SOAP_CMAC _ns1__QueryMemoryOverheadExResponse
{
public:
	LONG64 returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2848; } /* = unique id SOAP_TYPE__ns1__QueryMemoryOverheadExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryMemoryOverheadExResponse() { _ns1__QueryMemoryOverheadExResponse::soap_default(NULL); }
	virtual ~_ns1__QueryMemoryOverheadExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureHostForDAS_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureHostForDAS_USCORETaskResponse (2849)
/* ns1:ReconfigureHostForDAS_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureHostForDAS_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2849; } /* = unique id SOAP_TYPE__ns1__ReconfigureHostForDAS_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureHostForDAS_USCORETaskResponse() { _ns1__ReconfigureHostForDAS_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureHostForDAS_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateFlagsResponse
#define SOAP_TYPE__ns1__UpdateFlagsResponse (2850)
/* ns1:UpdateFlagsResponse */
class SOAP_CMAC _ns1__UpdateFlagsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2850; } /* = unique id SOAP_TYPE__ns1__UpdateFlagsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateFlagsResponse() { _ns1__UpdateFlagsResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateFlagsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnterLockdownModeResponse
#define SOAP_TYPE__ns1__EnterLockdownModeResponse (2851)
/* ns1:EnterLockdownModeResponse */
class SOAP_CMAC _ns1__EnterLockdownModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2851; } /* = unique id SOAP_TYPE__ns1__EnterLockdownModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnterLockdownModeResponse() { _ns1__EnterLockdownModeResponse::soap_default(NULL); }
	virtual ~_ns1__EnterLockdownModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExitLockdownModeResponse
#define SOAP_TYPE__ns1__ExitLockdownModeResponse (2852)
/* ns1:ExitLockdownModeResponse */
class SOAP_CMAC _ns1__ExitLockdownModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2852; } /* = unique id SOAP_TYPE__ns1__ExitLockdownModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExitLockdownModeResponse() { _ns1__ExitLockdownModeResponse::soap_default(NULL); }
	virtual ~_ns1__ExitLockdownModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcquireCimServicesTicketResponse
#define SOAP_TYPE__ns1__AcquireCimServicesTicketResponse (2853)
/* ns1:AcquireCimServicesTicketResponse */
class SOAP_CMAC _ns1__AcquireCimServicesTicketResponse
{
public:
	class ns1__HostServiceTicket *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostServiceTicket */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2853; } /* = unique id SOAP_TYPE__ns1__AcquireCimServicesTicketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcquireCimServicesTicketResponse() { _ns1__AcquireCimServicesTicketResponse::soap_default(NULL); }
	virtual ~_ns1__AcquireCimServicesTicketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateIpmiResponse
#define SOAP_TYPE__ns1__UpdateIpmiResponse (2854)
/* ns1:UpdateIpmiResponse */
class SOAP_CMAC _ns1__UpdateIpmiResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2854; } /* = unique id SOAP_TYPE__ns1__UpdateIpmiResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateIpmiResponse() { _ns1__UpdateIpmiResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateIpmiResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveHardwareUptimeResponse
#define SOAP_TYPE__ns1__RetrieveHardwareUptimeResponse (2855)
/* ns1:RetrieveHardwareUptimeResponse */
class SOAP_CMAC _ns1__RetrieveHardwareUptimeResponse
{
public:
	LONG64 returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2855; } /* = unique id SOAP_TYPE__ns1__RetrieveHardwareUptimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveHardwareUptimeResponse() { _ns1__RetrieveHardwareUptimeResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveHardwareUptimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HttpNfcLeaseGetManifestResponse
#define SOAP_TYPE__ns1__HttpNfcLeaseGetManifestResponse (2856)
/* ns1:HttpNfcLeaseGetManifestResponse */
class SOAP_CMAC _ns1__HttpNfcLeaseGetManifestResponse
{
public:
	std::vector<ns1__HttpNfcLeaseManifestEntry * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HttpNfcLeaseManifestEntry */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2856; } /* = unique id SOAP_TYPE__ns1__HttpNfcLeaseGetManifestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HttpNfcLeaseGetManifestResponse() { _ns1__HttpNfcLeaseGetManifestResponse::soap_default(NULL); }
	virtual ~_ns1__HttpNfcLeaseGetManifestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HttpNfcLeaseCompleteResponse
#define SOAP_TYPE__ns1__HttpNfcLeaseCompleteResponse (2857)
/* ns1:HttpNfcLeaseCompleteResponse */
class SOAP_CMAC _ns1__HttpNfcLeaseCompleteResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2857; } /* = unique id SOAP_TYPE__ns1__HttpNfcLeaseCompleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HttpNfcLeaseCompleteResponse() { _ns1__HttpNfcLeaseCompleteResponse::soap_default(NULL); }
	virtual ~_ns1__HttpNfcLeaseCompleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HttpNfcLeaseAbortResponse
#define SOAP_TYPE__ns1__HttpNfcLeaseAbortResponse (2858)
/* ns1:HttpNfcLeaseAbortResponse */
class SOAP_CMAC _ns1__HttpNfcLeaseAbortResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2858; } /* = unique id SOAP_TYPE__ns1__HttpNfcLeaseAbortResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HttpNfcLeaseAbortResponse() { _ns1__HttpNfcLeaseAbortResponse::soap_default(NULL); }
	virtual ~_ns1__HttpNfcLeaseAbortResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__HttpNfcLeaseProgressResponse
#define SOAP_TYPE__ns1__HttpNfcLeaseProgressResponse (2859)
/* ns1:HttpNfcLeaseProgressResponse */
class SOAP_CMAC _ns1__HttpNfcLeaseProgressResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2859; } /* = unique id SOAP_TYPE__ns1__HttpNfcLeaseProgressResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__HttpNfcLeaseProgressResponse() { _ns1__HttpNfcLeaseProgressResponse::soap_default(NULL); }
	virtual ~_ns1__HttpNfcLeaseProgressResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryIpPoolsResponse
#define SOAP_TYPE__ns1__QueryIpPoolsResponse (2860)
/* ns1:QueryIpPoolsResponse */
class SOAP_CMAC _ns1__QueryIpPoolsResponse
{
public:
	std::vector<ns1__IpPool * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:IpPool */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2860; } /* = unique id SOAP_TYPE__ns1__QueryIpPoolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryIpPoolsResponse() { _ns1__QueryIpPoolsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryIpPoolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateIpPoolResponse
#define SOAP_TYPE__ns1__CreateIpPoolResponse (2861)
/* ns1:CreateIpPoolResponse */
class SOAP_CMAC _ns1__CreateIpPoolResponse
{
public:
	int returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2861; } /* = unique id SOAP_TYPE__ns1__CreateIpPoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateIpPoolResponse() { _ns1__CreateIpPoolResponse::soap_default(NULL); }
	virtual ~_ns1__CreateIpPoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateIpPoolResponse
#define SOAP_TYPE__ns1__UpdateIpPoolResponse (2862)
/* ns1:UpdateIpPoolResponse */
class SOAP_CMAC _ns1__UpdateIpPoolResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2862; } /* = unique id SOAP_TYPE__ns1__UpdateIpPoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateIpPoolResponse() { _ns1__UpdateIpPoolResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateIpPoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyIpPoolResponse
#define SOAP_TYPE__ns1__DestroyIpPoolResponse (2863)
/* ns1:DestroyIpPoolResponse */
class SOAP_CMAC _ns1__DestroyIpPoolResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2863; } /* = unique id SOAP_TYPE__ns1__DestroyIpPoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyIpPoolResponse() { _ns1__DestroyIpPoolResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyIpPoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateAssignedLicenseResponse
#define SOAP_TYPE__ns1__UpdateAssignedLicenseResponse (2864)
/* ns1:UpdateAssignedLicenseResponse */
class SOAP_CMAC _ns1__UpdateAssignedLicenseResponse
{
public:
	ns1__LicenseManagerLicenseInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseManagerLicenseInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2864; } /* = unique id SOAP_TYPE__ns1__UpdateAssignedLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateAssignedLicenseResponse() { _ns1__UpdateAssignedLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateAssignedLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveAssignedLicenseResponse
#define SOAP_TYPE__ns1__RemoveAssignedLicenseResponse (2865)
/* ns1:RemoveAssignedLicenseResponse */
class SOAP_CMAC _ns1__RemoveAssignedLicenseResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2865; } /* = unique id SOAP_TYPE__ns1__RemoveAssignedLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveAssignedLicenseResponse() { _ns1__RemoveAssignedLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveAssignedLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAssignedLicensesResponse
#define SOAP_TYPE__ns1__QueryAssignedLicensesResponse (2866)
/* ns1:QueryAssignedLicensesResponse */
class SOAP_CMAC _ns1__QueryAssignedLicensesResponse
{
public:
	std::vector<ns1__LicenseAssignmentManagerLicenseAssignment * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseAssignmentManagerLicenseAssignment */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2866; } /* = unique id SOAP_TYPE__ns1__QueryAssignedLicensesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAssignedLicensesResponse() { _ns1__QueryAssignedLicensesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAssignedLicensesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QuerySupportedFeaturesResponse
#define SOAP_TYPE__ns1__QuerySupportedFeaturesResponse (2867)
/* ns1:QuerySupportedFeaturesResponse */
class SOAP_CMAC _ns1__QuerySupportedFeaturesResponse
{
public:
	std::vector<ns1__LicenseFeatureInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:LicenseFeatureInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2867; } /* = unique id SOAP_TYPE__ns1__QuerySupportedFeaturesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QuerySupportedFeaturesResponse() { _ns1__QuerySupportedFeaturesResponse::soap_default(NULL); }
	virtual ~_ns1__QuerySupportedFeaturesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryLicenseSourceAvailabilityResponse
#define SOAP_TYPE__ns1__QueryLicenseSourceAvailabilityResponse (2868)
/* ns1:QueryLicenseSourceAvailabilityResponse */
class SOAP_CMAC _ns1__QueryLicenseSourceAvailabilityResponse
{
public:
	std::vector<ns1__LicenseAvailabilityInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:LicenseAvailabilityInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2868; } /* = unique id SOAP_TYPE__ns1__QueryLicenseSourceAvailabilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryLicenseSourceAvailabilityResponse() { _ns1__QueryLicenseSourceAvailabilityResponse::soap_default(NULL); }
	virtual ~_ns1__QueryLicenseSourceAvailabilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryLicenseUsageResponse
#define SOAP_TYPE__ns1__QueryLicenseUsageResponse (2869)
/* ns1:QueryLicenseUsageResponse */
class SOAP_CMAC _ns1__QueryLicenseUsageResponse
{
public:
	class ns1__LicenseUsageInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseUsageInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2869; } /* = unique id SOAP_TYPE__ns1__QueryLicenseUsageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryLicenseUsageResponse() { _ns1__QueryLicenseUsageResponse::soap_default(NULL); }
	virtual ~_ns1__QueryLicenseUsageResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetLicenseEditionResponse
#define SOAP_TYPE__ns1__SetLicenseEditionResponse (2870)
/* ns1:SetLicenseEditionResponse */
class SOAP_CMAC _ns1__SetLicenseEditionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2870; } /* = unique id SOAP_TYPE__ns1__SetLicenseEditionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetLicenseEditionResponse() { _ns1__SetLicenseEditionResponse::soap_default(NULL); }
	virtual ~_ns1__SetLicenseEditionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckLicenseFeatureResponse
#define SOAP_TYPE__ns1__CheckLicenseFeatureResponse (2871)
/* ns1:CheckLicenseFeatureResponse */
class SOAP_CMAC _ns1__CheckLicenseFeatureResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2871; } /* = unique id SOAP_TYPE__ns1__CheckLicenseFeatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckLicenseFeatureResponse() { _ns1__CheckLicenseFeatureResponse::soap_default(NULL); }
	virtual ~_ns1__CheckLicenseFeatureResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableFeatureResponse
#define SOAP_TYPE__ns1__EnableFeatureResponse (2872)
/* ns1:EnableFeatureResponse */
class SOAP_CMAC _ns1__EnableFeatureResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2872; } /* = unique id SOAP_TYPE__ns1__EnableFeatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableFeatureResponse() { _ns1__EnableFeatureResponse::soap_default(NULL); }
	virtual ~_ns1__EnableFeatureResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableFeatureResponse
#define SOAP_TYPE__ns1__DisableFeatureResponse (2873)
/* ns1:DisableFeatureResponse */
class SOAP_CMAC _ns1__DisableFeatureResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2873; } /* = unique id SOAP_TYPE__ns1__DisableFeatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableFeatureResponse() { _ns1__DisableFeatureResponse::soap_default(NULL); }
	virtual ~_ns1__DisableFeatureResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ConfigureLicenseSourceResponse
#define SOAP_TYPE__ns1__ConfigureLicenseSourceResponse (2874)
/* ns1:ConfigureLicenseSourceResponse */
class SOAP_CMAC _ns1__ConfigureLicenseSourceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2874; } /* = unique id SOAP_TYPE__ns1__ConfigureLicenseSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ConfigureLicenseSourceResponse() { _ns1__ConfigureLicenseSourceResponse::soap_default(NULL); }
	virtual ~_ns1__ConfigureLicenseSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateLicenseResponse
#define SOAP_TYPE__ns1__UpdateLicenseResponse (2875)
/* ns1:UpdateLicenseResponse */
class SOAP_CMAC _ns1__UpdateLicenseResponse
{
public:
	ns1__LicenseManagerLicenseInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseManagerLicenseInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2875; } /* = unique id SOAP_TYPE__ns1__UpdateLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateLicenseResponse() { _ns1__UpdateLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddLicenseResponse
#define SOAP_TYPE__ns1__AddLicenseResponse (2876)
/* ns1:AddLicenseResponse */
class SOAP_CMAC _ns1__AddLicenseResponse
{
public:
	ns1__LicenseManagerLicenseInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseManagerLicenseInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2876; } /* = unique id SOAP_TYPE__ns1__AddLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddLicenseResponse() { _ns1__AddLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__AddLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveLicenseResponse
#define SOAP_TYPE__ns1__RemoveLicenseResponse (2877)
/* ns1:RemoveLicenseResponse */
class SOAP_CMAC _ns1__RemoveLicenseResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2877; } /* = unique id SOAP_TYPE__ns1__RemoveLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveLicenseResponse() { _ns1__RemoveLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DecodeLicenseResponse
#define SOAP_TYPE__ns1__DecodeLicenseResponse (2878)
/* ns1:DecodeLicenseResponse */
class SOAP_CMAC _ns1__DecodeLicenseResponse
{
public:
	ns1__LicenseManagerLicenseInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:LicenseManagerLicenseInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2878; } /* = unique id SOAP_TYPE__ns1__DecodeLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DecodeLicenseResponse() { _ns1__DecodeLicenseResponse::soap_default(NULL); }
	virtual ~_ns1__DecodeLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateLicenseLabelResponse
#define SOAP_TYPE__ns1__UpdateLicenseLabelResponse (2879)
/* ns1:UpdateLicenseLabelResponse */
class SOAP_CMAC _ns1__UpdateLicenseLabelResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2879; } /* = unique id SOAP_TYPE__ns1__UpdateLicenseLabelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateLicenseLabelResponse() { _ns1__UpdateLicenseLabelResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateLicenseLabelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveLicenseLabelResponse
#define SOAP_TYPE__ns1__RemoveLicenseLabelResponse (2880)
/* ns1:RemoveLicenseLabelResponse */
class SOAP_CMAC _ns1__RemoveLicenseLabelResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2880; } /* = unique id SOAP_TYPE__ns1__RemoveLicenseLabelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveLicenseLabelResponse() { _ns1__RemoveLicenseLabelResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveLicenseLabelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReloadResponse
#define SOAP_TYPE__ns1__ReloadResponse (2881)
/* ns1:ReloadResponse */
class SOAP_CMAC _ns1__ReloadResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2881; } /* = unique id SOAP_TYPE__ns1__ReloadResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReloadResponse() { _ns1__ReloadResponse::soap_default(NULL); }
	virtual ~_ns1__ReloadResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Rename_USCORETaskResponse
#define SOAP_TYPE__ns1__Rename_USCORETaskResponse (2882)
/* ns1:Rename_TaskResponse */
class SOAP_CMAC _ns1__Rename_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2882; } /* = unique id SOAP_TYPE__ns1__Rename_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Rename_USCORETaskResponse() { _ns1__Rename_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__Rename_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Destroy_USCORETaskResponse
#define SOAP_TYPE__ns1__Destroy_USCORETaskResponse (2883)
/* ns1:Destroy_TaskResponse */
class SOAP_CMAC _ns1__Destroy_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2883; } /* = unique id SOAP_TYPE__ns1__Destroy_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Destroy_USCORETaskResponse() { _ns1__Destroy_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__Destroy_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyNetworkResponse
#define SOAP_TYPE__ns1__DestroyNetworkResponse (2884)
/* ns1:DestroyNetworkResponse */
class SOAP_CMAC _ns1__DestroyNetworkResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2884; } /* = unique id SOAP_TYPE__ns1__DestroyNetworkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyNetworkResponse() { _ns1__DestroyNetworkResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyNetworkResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ValidateHostResponse
#define SOAP_TYPE__ns1__ValidateHostResponse (2885)
/* ns1:ValidateHostResponse */
class SOAP_CMAC _ns1__ValidateHostResponse
{
public:
	class ns1__OvfValidateHostResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:OvfValidateHostResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2885; } /* = unique id SOAP_TYPE__ns1__ValidateHostResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ValidateHostResponse() { _ns1__ValidateHostResponse::soap_default(NULL); }
	virtual ~_ns1__ValidateHostResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ParseDescriptorResponse
#define SOAP_TYPE__ns1__ParseDescriptorResponse (2886)
/* ns1:ParseDescriptorResponse */
class SOAP_CMAC _ns1__ParseDescriptorResponse
{
public:
	class ns1__OvfParseDescriptorResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:OvfParseDescriptorResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2886; } /* = unique id SOAP_TYPE__ns1__ParseDescriptorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ParseDescriptorResponse() { _ns1__ParseDescriptorResponse::soap_default(NULL); }
	virtual ~_ns1__ParseDescriptorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateImportSpecResponse
#define SOAP_TYPE__ns1__CreateImportSpecResponse (2887)
/* ns1:CreateImportSpecResponse */
class SOAP_CMAC _ns1__CreateImportSpecResponse
{
public:
	class ns1__OvfCreateImportSpecResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:OvfCreateImportSpecResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2887; } /* = unique id SOAP_TYPE__ns1__CreateImportSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateImportSpecResponse() { _ns1__CreateImportSpecResponse::soap_default(NULL); }
	virtual ~_ns1__CreateImportSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateDescriptorResponse
#define SOAP_TYPE__ns1__CreateDescriptorResponse (2888)
/* ns1:CreateDescriptorResponse */
class SOAP_CMAC _ns1__CreateDescriptorResponse
{
public:
	class ns1__OvfCreateDescriptorResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:OvfCreateDescriptorResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2888; } /* = unique id SOAP_TYPE__ns1__CreateDescriptorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateDescriptorResponse() { _ns1__CreateDescriptorResponse::soap_default(NULL); }
	virtual ~_ns1__CreateDescriptorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPerfProviderSummaryResponse
#define SOAP_TYPE__ns1__QueryPerfProviderSummaryResponse (2889)
/* ns1:QueryPerfProviderSummaryResponse */
class SOAP_CMAC _ns1__QueryPerfProviderSummaryResponse
{
public:
	class ns1__PerfProviderSummary *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:PerfProviderSummary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2889; } /* = unique id SOAP_TYPE__ns1__QueryPerfProviderSummaryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPerfProviderSummaryResponse() { _ns1__QueryPerfProviderSummaryResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPerfProviderSummaryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAvailablePerfMetricResponse
#define SOAP_TYPE__ns1__QueryAvailablePerfMetricResponse (2890)
/* ns1:QueryAvailablePerfMetricResponse */
class SOAP_CMAC _ns1__QueryAvailablePerfMetricResponse
{
public:
	std::vector<ns1__PerfMetricId * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:PerfMetricId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2890; } /* = unique id SOAP_TYPE__ns1__QueryAvailablePerfMetricResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAvailablePerfMetricResponse() { _ns1__QueryAvailablePerfMetricResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAvailablePerfMetricResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPerfCounterResponse
#define SOAP_TYPE__ns1__QueryPerfCounterResponse (2891)
/* ns1:QueryPerfCounterResponse */
class SOAP_CMAC _ns1__QueryPerfCounterResponse
{
public:
	std::vector<ns1__PerfCounterInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:PerfCounterInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2891; } /* = unique id SOAP_TYPE__ns1__QueryPerfCounterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPerfCounterResponse() { _ns1__QueryPerfCounterResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPerfCounterResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPerfCounterByLevelResponse
#define SOAP_TYPE__ns1__QueryPerfCounterByLevelResponse (2892)
/* ns1:QueryPerfCounterByLevelResponse */
class SOAP_CMAC _ns1__QueryPerfCounterByLevelResponse
{
public:
	std::vector<ns1__PerfCounterInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:PerfCounterInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2892; } /* = unique id SOAP_TYPE__ns1__QueryPerfCounterByLevelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPerfCounterByLevelResponse() { _ns1__QueryPerfCounterByLevelResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPerfCounterByLevelResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPerfResponse
#define SOAP_TYPE__ns1__QueryPerfResponse (2893)
/* ns1:QueryPerfResponse */
class SOAP_CMAC _ns1__QueryPerfResponse
{
public:
	std::vector<ns1__PerfEntityMetricBase * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:PerfEntityMetricBase */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2893; } /* = unique id SOAP_TYPE__ns1__QueryPerfResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPerfResponse() { _ns1__QueryPerfResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPerfResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPerfCompositeResponse
#define SOAP_TYPE__ns1__QueryPerfCompositeResponse (2894)
/* ns1:QueryPerfCompositeResponse */
class SOAP_CMAC _ns1__QueryPerfCompositeResponse
{
public:
	class ns1__PerfCompositeMetric *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:PerfCompositeMetric */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2894; } /* = unique id SOAP_TYPE__ns1__QueryPerfCompositeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPerfCompositeResponse() { _ns1__QueryPerfCompositeResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPerfCompositeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreatePerfIntervalResponse
#define SOAP_TYPE__ns1__CreatePerfIntervalResponse (2895)
/* ns1:CreatePerfIntervalResponse */
class SOAP_CMAC _ns1__CreatePerfIntervalResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2895; } /* = unique id SOAP_TYPE__ns1__CreatePerfIntervalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreatePerfIntervalResponse() { _ns1__CreatePerfIntervalResponse::soap_default(NULL); }
	virtual ~_ns1__CreatePerfIntervalResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemovePerfIntervalResponse
#define SOAP_TYPE__ns1__RemovePerfIntervalResponse (2896)
/* ns1:RemovePerfIntervalResponse */
class SOAP_CMAC _ns1__RemovePerfIntervalResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2896; } /* = unique id SOAP_TYPE__ns1__RemovePerfIntervalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemovePerfIntervalResponse() { _ns1__RemovePerfIntervalResponse::soap_default(NULL); }
	virtual ~_ns1__RemovePerfIntervalResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdatePerfIntervalResponse
#define SOAP_TYPE__ns1__UpdatePerfIntervalResponse (2897)
/* ns1:UpdatePerfIntervalResponse */
class SOAP_CMAC _ns1__UpdatePerfIntervalResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2897; } /* = unique id SOAP_TYPE__ns1__UpdatePerfIntervalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdatePerfIntervalResponse() { _ns1__UpdatePerfIntervalResponse::soap_default(NULL); }
	virtual ~_ns1__UpdatePerfIntervalResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EstimateDatabaseSizeResponse
#define SOAP_TYPE__ns1__EstimateDatabaseSizeResponse (2898)
/* ns1:EstimateDatabaseSizeResponse */
class SOAP_CMAC _ns1__EstimateDatabaseSizeResponse
{
public:
	class ns1__DatabaseSizeEstimate *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:DatabaseSizeEstimate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2898; } /* = unique id SOAP_TYPE__ns1__EstimateDatabaseSizeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EstimateDatabaseSizeResponse() { _ns1__EstimateDatabaseSizeResponse::soap_default(NULL); }
	virtual ~_ns1__EstimateDatabaseSizeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateConfigResponse
#define SOAP_TYPE__ns1__UpdateConfigResponse (2899)
/* ns1:UpdateConfigResponse */
class SOAP_CMAC _ns1__UpdateConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2899; } /* = unique id SOAP_TYPE__ns1__UpdateConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateConfigResponse() { _ns1__UpdateConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveIntoResourcePoolResponse
#define SOAP_TYPE__ns1__MoveIntoResourcePoolResponse (2900)
/* ns1:MoveIntoResourcePoolResponse */
class SOAP_CMAC _ns1__MoveIntoResourcePoolResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2900; } /* = unique id SOAP_TYPE__ns1__MoveIntoResourcePoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveIntoResourcePoolResponse() { _ns1__MoveIntoResourcePoolResponse::soap_default(NULL); }
	virtual ~_ns1__MoveIntoResourcePoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateChildResourceConfigurationResponse
#define SOAP_TYPE__ns1__UpdateChildResourceConfigurationResponse (2901)
/* ns1:UpdateChildResourceConfigurationResponse */
class SOAP_CMAC _ns1__UpdateChildResourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2901; } /* = unique id SOAP_TYPE__ns1__UpdateChildResourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateChildResourceConfigurationResponse() { _ns1__UpdateChildResourceConfigurationResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateChildResourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateResourcePoolResponse
#define SOAP_TYPE__ns1__CreateResourcePoolResponse (2902)
/* ns1:CreateResourcePoolResponse */
class SOAP_CMAC _ns1__CreateResourcePoolResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2902; } /* = unique id SOAP_TYPE__ns1__CreateResourcePoolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateResourcePoolResponse() { _ns1__CreateResourcePoolResponse::soap_default(NULL); }
	virtual ~_ns1__CreateResourcePoolResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyChildrenResponse
#define SOAP_TYPE__ns1__DestroyChildrenResponse (2903)
/* ns1:DestroyChildrenResponse */
class SOAP_CMAC _ns1__DestroyChildrenResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2903; } /* = unique id SOAP_TYPE__ns1__DestroyChildrenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyChildrenResponse() { _ns1__DestroyChildrenResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyChildrenResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateVAppResponse
#define SOAP_TYPE__ns1__CreateVAppResponse (2904)
/* ns1:CreateVAppResponse */
class SOAP_CMAC _ns1__CreateVAppResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2904; } /* = unique id SOAP_TYPE__ns1__CreateVAppResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateVAppResponse() { _ns1__CreateVAppResponse::soap_default(NULL); }
	virtual ~_ns1__CreateVAppResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateChildVM_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateChildVM_USCORETaskResponse (2905)
/* ns1:CreateChildVM_TaskResponse */
class SOAP_CMAC _ns1__CreateChildVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2905; } /* = unique id SOAP_TYPE__ns1__CreateChildVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateChildVM_USCORETaskResponse() { _ns1__CreateChildVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateChildVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RegisterChildVM_USCORETaskResponse
#define SOAP_TYPE__ns1__RegisterChildVM_USCORETaskResponse (2906)
/* ns1:RegisterChildVM_TaskResponse */
class SOAP_CMAC _ns1__RegisterChildVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2906; } /* = unique id SOAP_TYPE__ns1__RegisterChildVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RegisterChildVM_USCORETaskResponse() { _ns1__RegisterChildVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RegisterChildVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ImportVAppResponse
#define SOAP_TYPE__ns1__ImportVAppResponse (2907)
/* ns1:ImportVAppResponse */
class SOAP_CMAC _ns1__ImportVAppResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2907; } /* = unique id SOAP_TYPE__ns1__ImportVAppResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ImportVAppResponse() { _ns1__ImportVAppResponse::soap_default(NULL); }
	virtual ~_ns1__ImportVAppResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryResourceConfigOptionResponse
#define SOAP_TYPE__ns1__QueryResourceConfigOptionResponse (2908)
/* ns1:QueryResourceConfigOptionResponse */
class SOAP_CMAC _ns1__QueryResourceConfigOptionResponse
{
public:
	class ns1__ResourceConfigOption *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ResourceConfigOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2908; } /* = unique id SOAP_TYPE__ns1__QueryResourceConfigOptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryResourceConfigOptionResponse() { _ns1__QueryResourceConfigOptionResponse::soap_default(NULL); }
	virtual ~_ns1__QueryResourceConfigOptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshRuntimeResponse
#define SOAP_TYPE__ns1__RefreshRuntimeResponse (2909)
/* ns1:RefreshRuntimeResponse */
class SOAP_CMAC _ns1__RefreshRuntimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2909; } /* = unique id SOAP_TYPE__ns1__RefreshRuntimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshRuntimeResponse() { _ns1__RefreshRuntimeResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshRuntimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindByUuidResponse
#define SOAP_TYPE__ns1__FindByUuidResponse (2910)
/* ns1:FindByUuidResponse */
class SOAP_CMAC _ns1__FindByUuidResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2910; } /* = unique id SOAP_TYPE__ns1__FindByUuidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindByUuidResponse() { _ns1__FindByUuidResponse::soap_default(NULL); }
	virtual ~_ns1__FindByUuidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindByDatastorePathResponse
#define SOAP_TYPE__ns1__FindByDatastorePathResponse (2911)
/* ns1:FindByDatastorePathResponse */
class SOAP_CMAC _ns1__FindByDatastorePathResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2911; } /* = unique id SOAP_TYPE__ns1__FindByDatastorePathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindByDatastorePathResponse() { _ns1__FindByDatastorePathResponse::soap_default(NULL); }
	virtual ~_ns1__FindByDatastorePathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindByDnsNameResponse
#define SOAP_TYPE__ns1__FindByDnsNameResponse (2912)
/* ns1:FindByDnsNameResponse */
class SOAP_CMAC _ns1__FindByDnsNameResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2912; } /* = unique id SOAP_TYPE__ns1__FindByDnsNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindByDnsNameResponse() { _ns1__FindByDnsNameResponse::soap_default(NULL); }
	virtual ~_ns1__FindByDnsNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindByIpResponse
#define SOAP_TYPE__ns1__FindByIpResponse (2913)
/* ns1:FindByIpResponse */
class SOAP_CMAC _ns1__FindByIpResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2913; } /* = unique id SOAP_TYPE__ns1__FindByIpResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindByIpResponse() { _ns1__FindByIpResponse::soap_default(NULL); }
	virtual ~_ns1__FindByIpResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindByInventoryPathResponse
#define SOAP_TYPE__ns1__FindByInventoryPathResponse (2914)
/* ns1:FindByInventoryPathResponse */
class SOAP_CMAC _ns1__FindByInventoryPathResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2914; } /* = unique id SOAP_TYPE__ns1__FindByInventoryPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindByInventoryPathResponse() { _ns1__FindByInventoryPathResponse::soap_default(NULL); }
	virtual ~_ns1__FindByInventoryPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindChildResponse
#define SOAP_TYPE__ns1__FindChildResponse (2915)
/* ns1:FindChildResponse */
class SOAP_CMAC _ns1__FindChildResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2915; } /* = unique id SOAP_TYPE__ns1__FindChildResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindChildResponse() { _ns1__FindChildResponse::soap_default(NULL); }
	virtual ~_ns1__FindChildResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindAllByUuidResponse
#define SOAP_TYPE__ns1__FindAllByUuidResponse (2916)
/* ns1:FindAllByUuidResponse */
class SOAP_CMAC _ns1__FindAllByUuidResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2916; } /* = unique id SOAP_TYPE__ns1__FindAllByUuidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindAllByUuidResponse() { _ns1__FindAllByUuidResponse::soap_default(NULL); }
	virtual ~_ns1__FindAllByUuidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindAllByDnsNameResponse
#define SOAP_TYPE__ns1__FindAllByDnsNameResponse (2917)
/* ns1:FindAllByDnsNameResponse */
class SOAP_CMAC _ns1__FindAllByDnsNameResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2917; } /* = unique id SOAP_TYPE__ns1__FindAllByDnsNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindAllByDnsNameResponse() { _ns1__FindAllByDnsNameResponse::soap_default(NULL); }
	virtual ~_ns1__FindAllByDnsNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindAllByIpResponse
#define SOAP_TYPE__ns1__FindAllByIpResponse (2918)
/* ns1:FindAllByIpResponse */
class SOAP_CMAC _ns1__FindAllByIpResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2918; } /* = unique id SOAP_TYPE__ns1__FindAllByIpResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindAllByIpResponse() { _ns1__FindAllByIpResponse::soap_default(NULL); }
	virtual ~_ns1__FindAllByIpResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CurrentTimeResponse
#define SOAP_TYPE__ns1__CurrentTimeResponse (2919)
/* ns1:CurrentTimeResponse */
class SOAP_CMAC _ns1__CurrentTimeResponse
{
public:
	time_t returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2919; } /* = unique id SOAP_TYPE__ns1__CurrentTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CurrentTimeResponse() { _ns1__CurrentTimeResponse::soap_default(NULL); }
	virtual ~_ns1__CurrentTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveServiceContentResponse
#define SOAP_TYPE__ns1__RetrieveServiceContentResponse (2920)
/* ns1:RetrieveServiceContentResponse */
class SOAP_CMAC _ns1__RetrieveServiceContentResponse
{
public:
	class ns1__ServiceContent *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ServiceContent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2920; } /* = unique id SOAP_TYPE__ns1__RetrieveServiceContentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveServiceContentResponse() { _ns1__RetrieveServiceContentResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveServiceContentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ValidateMigrationResponse
#define SOAP_TYPE__ns1__ValidateMigrationResponse (2921)
/* ns1:ValidateMigrationResponse */
class SOAP_CMAC _ns1__ValidateMigrationResponse
{
public:
	std::vector<ns1__Event * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Event */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2921; } /* = unique id SOAP_TYPE__ns1__ValidateMigrationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ValidateMigrationResponse() { _ns1__ValidateMigrationResponse::soap_default(NULL); }
	virtual ~_ns1__ValidateMigrationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVMotionCompatibilityResponse
#define SOAP_TYPE__ns1__QueryVMotionCompatibilityResponse (2922)
/* ns1:QueryVMotionCompatibilityResponse */
class SOAP_CMAC _ns1__QueryVMotionCompatibilityResponse
{
public:
	std::vector<ns1__HostVMotionCompatibility * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostVMotionCompatibility */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2922; } /* = unique id SOAP_TYPE__ns1__QueryVMotionCompatibilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVMotionCompatibilityResponse() { _ns1__QueryVMotionCompatibilityResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVMotionCompatibilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveProductComponentsResponse
#define SOAP_TYPE__ns1__RetrieveProductComponentsResponse (2923)
/* ns1:RetrieveProductComponentsResponse */
class SOAP_CMAC _ns1__RetrieveProductComponentsResponse
{
public:
	std::vector<ns1__ProductComponentInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProductComponentInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2923; } /* = unique id SOAP_TYPE__ns1__RetrieveProductComponentsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveProductComponentsResponse() { _ns1__RetrieveProductComponentsResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveProductComponentsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateServiceMessageResponse
#define SOAP_TYPE__ns1__UpdateServiceMessageResponse (2924)
/* ns1:UpdateServiceMessageResponse */
class SOAP_CMAC _ns1__UpdateServiceMessageResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2924; } /* = unique id SOAP_TYPE__ns1__UpdateServiceMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateServiceMessageResponse() { _ns1__UpdateServiceMessageResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateServiceMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LoginResponse
#define SOAP_TYPE__ns1__LoginResponse (2925)
/* ns1:LoginResponse */
class SOAP_CMAC _ns1__LoginResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2925; } /* = unique id SOAP_TYPE__ns1__LoginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LoginResponse() { _ns1__LoginResponse::soap_default(NULL); }
	virtual ~_ns1__LoginResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LoginBySSPIResponse
#define SOAP_TYPE__ns1__LoginBySSPIResponse (2926)
/* ns1:LoginBySSPIResponse */
class SOAP_CMAC _ns1__LoginBySSPIResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2926; } /* = unique id SOAP_TYPE__ns1__LoginBySSPIResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LoginBySSPIResponse() { _ns1__LoginBySSPIResponse::soap_default(NULL); }
	virtual ~_ns1__LoginBySSPIResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LogoutResponse
#define SOAP_TYPE__ns1__LogoutResponse (2927)
/* ns1:LogoutResponse */
class SOAP_CMAC _ns1__LogoutResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2927; } /* = unique id SOAP_TYPE__ns1__LogoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LogoutResponse() { _ns1__LogoutResponse::soap_default(NULL); }
	virtual ~_ns1__LogoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcquireLocalTicketResponse
#define SOAP_TYPE__ns1__AcquireLocalTicketResponse (2928)
/* ns1:AcquireLocalTicketResponse */
class SOAP_CMAC _ns1__AcquireLocalTicketResponse
{
public:
	class ns1__SessionManagerLocalTicket *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:SessionManagerLocalTicket */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2928; } /* = unique id SOAP_TYPE__ns1__AcquireLocalTicketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcquireLocalTicketResponse() { _ns1__AcquireLocalTicketResponse::soap_default(NULL); }
	virtual ~_ns1__AcquireLocalTicketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__TerminateSessionResponse
#define SOAP_TYPE__ns1__TerminateSessionResponse (2929)
/* ns1:TerminateSessionResponse */
class SOAP_CMAC _ns1__TerminateSessionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2929; } /* = unique id SOAP_TYPE__ns1__TerminateSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__TerminateSessionResponse() { _ns1__TerminateSessionResponse::soap_default(NULL); }
	virtual ~_ns1__TerminateSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetLocaleResponse
#define SOAP_TYPE__ns1__SetLocaleResponse (2930)
/* ns1:SetLocaleResponse */
class SOAP_CMAC _ns1__SetLocaleResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2930; } /* = unique id SOAP_TYPE__ns1__SetLocaleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetLocaleResponse() { _ns1__SetLocaleResponse::soap_default(NULL); }
	virtual ~_ns1__SetLocaleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LoginExtensionBySubjectNameResponse
#define SOAP_TYPE__ns1__LoginExtensionBySubjectNameResponse (2931)
/* ns1:LoginExtensionBySubjectNameResponse */
class SOAP_CMAC _ns1__LoginExtensionBySubjectNameResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2931; } /* = unique id SOAP_TYPE__ns1__LoginExtensionBySubjectNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LoginExtensionBySubjectNameResponse() { _ns1__LoginExtensionBySubjectNameResponse::soap_default(NULL); }
	virtual ~_ns1__LoginExtensionBySubjectNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LoginExtensionByCertificateResponse
#define SOAP_TYPE__ns1__LoginExtensionByCertificateResponse (2932)
/* ns1:LoginExtensionByCertificateResponse */
class SOAP_CMAC _ns1__LoginExtensionByCertificateResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2932; } /* = unique id SOAP_TYPE__ns1__LoginExtensionByCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LoginExtensionByCertificateResponse() { _ns1__LoginExtensionByCertificateResponse::soap_default(NULL); }
	virtual ~_ns1__LoginExtensionByCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ImpersonateUserResponse
#define SOAP_TYPE__ns1__ImpersonateUserResponse (2933)
/* ns1:ImpersonateUserResponse */
class SOAP_CMAC _ns1__ImpersonateUserResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2933; } /* = unique id SOAP_TYPE__ns1__ImpersonateUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ImpersonateUserResponse() { _ns1__ImpersonateUserResponse::soap_default(NULL); }
	virtual ~_ns1__ImpersonateUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SessionIsActiveResponse
#define SOAP_TYPE__ns1__SessionIsActiveResponse (2934)
/* ns1:SessionIsActiveResponse */
class SOAP_CMAC _ns1__SessionIsActiveResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2934; } /* = unique id SOAP_TYPE__ns1__SessionIsActiveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SessionIsActiveResponse() { _ns1__SessionIsActiveResponse::soap_default(NULL); }
	virtual ~_ns1__SessionIsActiveResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcquireCloneTicketResponse
#define SOAP_TYPE__ns1__AcquireCloneTicketResponse (2935)
/* ns1:AcquireCloneTicketResponse */
class SOAP_CMAC _ns1__AcquireCloneTicketResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2935; } /* = unique id SOAP_TYPE__ns1__AcquireCloneTicketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcquireCloneTicketResponse() { _ns1__AcquireCloneTicketResponse::soap_default(NULL); }
	virtual ~_ns1__AcquireCloneTicketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloneSessionResponse
#define SOAP_TYPE__ns1__CloneSessionResponse (2936)
/* ns1:CloneSessionResponse */
class SOAP_CMAC _ns1__CloneSessionResponse
{
public:
	ns1__UserSession *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UserSession */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2936; } /* = unique id SOAP_TYPE__ns1__CloneSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloneSessionResponse() { _ns1__CloneSessionResponse::soap_default(NULL); }
	virtual ~_ns1__CloneSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ConfigureDatastoreIORM_USCORETaskResponse
#define SOAP_TYPE__ns1__ConfigureDatastoreIORM_USCORETaskResponse (2937)
/* ns1:ConfigureDatastoreIORM_TaskResponse */
class SOAP_CMAC _ns1__ConfigureDatastoreIORM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2937; } /* = unique id SOAP_TYPE__ns1__ConfigureDatastoreIORM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ConfigureDatastoreIORM_USCORETaskResponse() { _ns1__ConfigureDatastoreIORM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ConfigureDatastoreIORM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryIORMConfigOptionResponse
#define SOAP_TYPE__ns1__QueryIORMConfigOptionResponse (2938)
/* ns1:QueryIORMConfigOptionResponse */
class SOAP_CMAC _ns1__QueryIORMConfigOptionResponse
{
public:
	class ns1__StorageIORMConfigOption *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:StorageIORMConfigOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2938; } /* = unique id SOAP_TYPE__ns1__QueryIORMConfigOptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryIORMConfigOptionResponse() { _ns1__QueryIORMConfigOptionResponse::soap_default(NULL); }
	virtual ~_ns1__QueryIORMConfigOptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CancelTaskResponse
#define SOAP_TYPE__ns1__CancelTaskResponse (2939)
/* ns1:CancelTaskResponse */
class SOAP_CMAC _ns1__CancelTaskResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2939; } /* = unique id SOAP_TYPE__ns1__CancelTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CancelTaskResponse() { _ns1__CancelTaskResponse::soap_default(NULL); }
	virtual ~_ns1__CancelTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateProgressResponse
#define SOAP_TYPE__ns1__UpdateProgressResponse (2940)
/* ns1:UpdateProgressResponse */
class SOAP_CMAC _ns1__UpdateProgressResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2940; } /* = unique id SOAP_TYPE__ns1__UpdateProgressResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateProgressResponse() { _ns1__UpdateProgressResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateProgressResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetTaskStateResponse
#define SOAP_TYPE__ns1__SetTaskStateResponse (2941)
/* ns1:SetTaskStateResponse */
class SOAP_CMAC _ns1__SetTaskStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2941; } /* = unique id SOAP_TYPE__ns1__SetTaskStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetTaskStateResponse() { _ns1__SetTaskStateResponse::soap_default(NULL); }
	virtual ~_ns1__SetTaskStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetTaskDescriptionResponse
#define SOAP_TYPE__ns1__SetTaskDescriptionResponse (2942)
/* ns1:SetTaskDescriptionResponse */
class SOAP_CMAC _ns1__SetTaskDescriptionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2942; } /* = unique id SOAP_TYPE__ns1__SetTaskDescriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetTaskDescriptionResponse() { _ns1__SetTaskDescriptionResponse::soap_default(NULL); }
	virtual ~_ns1__SetTaskDescriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReadNextTasksResponse
#define SOAP_TYPE__ns1__ReadNextTasksResponse (2943)
/* ns1:ReadNextTasksResponse */
class SOAP_CMAC _ns1__ReadNextTasksResponse
{
public:
	std::vector<ns1__TaskInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:TaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2943; } /* = unique id SOAP_TYPE__ns1__ReadNextTasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReadNextTasksResponse() { _ns1__ReadNextTasksResponse::soap_default(NULL); }
	virtual ~_ns1__ReadNextTasksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReadPreviousTasksResponse
#define SOAP_TYPE__ns1__ReadPreviousTasksResponse (2944)
/* ns1:ReadPreviousTasksResponse */
class SOAP_CMAC _ns1__ReadPreviousTasksResponse
{
public:
	std::vector<ns1__TaskInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:TaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2944; } /* = unique id SOAP_TYPE__ns1__ReadPreviousTasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReadPreviousTasksResponse() { _ns1__ReadPreviousTasksResponse::soap_default(NULL); }
	virtual ~_ns1__ReadPreviousTasksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateCollectorForTasksResponse
#define SOAP_TYPE__ns1__CreateCollectorForTasksResponse (2945)
/* ns1:CreateCollectorForTasksResponse */
class SOAP_CMAC _ns1__CreateCollectorForTasksResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2945; } /* = unique id SOAP_TYPE__ns1__CreateCollectorForTasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateCollectorForTasksResponse() { _ns1__CreateCollectorForTasksResponse::soap_default(NULL); }
	virtual ~_ns1__CreateCollectorForTasksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateTaskResponse
#define SOAP_TYPE__ns1__CreateTaskResponse (2946)
/* ns1:CreateTaskResponse */
class SOAP_CMAC _ns1__CreateTaskResponse
{
public:
	ns1__TaskInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:TaskInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2946; } /* = unique id SOAP_TYPE__ns1__CreateTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateTaskResponse() { _ns1__CreateTaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveUserGroupsResponse
#define SOAP_TYPE__ns1__RetrieveUserGroupsResponse (2947)
/* ns1:RetrieveUserGroupsResponse */
class SOAP_CMAC _ns1__RetrieveUserGroupsResponse
{
public:
	std::vector<ns1__UserSearchResult * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:UserSearchResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2947; } /* = unique id SOAP_TYPE__ns1__RetrieveUserGroupsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveUserGroupsResponse() { _ns1__RetrieveUserGroupsResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveUserGroupsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateVAppConfigResponse
#define SOAP_TYPE__ns1__UpdateVAppConfigResponse (2948)
/* ns1:UpdateVAppConfigResponse */
class SOAP_CMAC _ns1__UpdateVAppConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2948; } /* = unique id SOAP_TYPE__ns1__UpdateVAppConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateVAppConfigResponse() { _ns1__UpdateVAppConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateVAppConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateLinkedChildrenResponse
#define SOAP_TYPE__ns1__UpdateLinkedChildrenResponse (2949)
/* ns1:UpdateLinkedChildrenResponse */
class SOAP_CMAC _ns1__UpdateLinkedChildrenResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2949; } /* = unique id SOAP_TYPE__ns1__UpdateLinkedChildrenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateLinkedChildrenResponse() { _ns1__UpdateLinkedChildrenResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateLinkedChildrenResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloneVApp_USCORETaskResponse
#define SOAP_TYPE__ns1__CloneVApp_USCORETaskResponse (2950)
/* ns1:CloneVApp_TaskResponse */
class SOAP_CMAC _ns1__CloneVApp_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2950; } /* = unique id SOAP_TYPE__ns1__CloneVApp_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloneVApp_USCORETaskResponse() { _ns1__CloneVApp_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CloneVApp_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExportVAppResponse
#define SOAP_TYPE__ns1__ExportVAppResponse (2951)
/* ns1:ExportVAppResponse */
class SOAP_CMAC _ns1__ExportVAppResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2951; } /* = unique id SOAP_TYPE__ns1__ExportVAppResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExportVAppResponse() { _ns1__ExportVAppResponse::soap_default(NULL); }
	virtual ~_ns1__ExportVAppResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerOnVApp_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerOnVApp_USCORETaskResponse (2952)
/* ns1:PowerOnVApp_TaskResponse */
class SOAP_CMAC _ns1__PowerOnVApp_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2952; } /* = unique id SOAP_TYPE__ns1__PowerOnVApp_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerOnVApp_USCORETaskResponse() { _ns1__PowerOnVApp_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerOnVApp_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerOffVApp_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerOffVApp_USCORETaskResponse (2953)
/* ns1:PowerOffVApp_TaskResponse */
class SOAP_CMAC _ns1__PowerOffVApp_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2953; } /* = unique id SOAP_TYPE__ns1__PowerOffVApp_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerOffVApp_USCORETaskResponse() { _ns1__PowerOffVApp_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerOffVApp_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SuspendVApp_USCORETaskResponse
#define SOAP_TYPE__ns1__SuspendVApp_USCORETaskResponse (2954)
/* ns1:SuspendVApp_TaskResponse */
class SOAP_CMAC _ns1__SuspendVApp_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2954; } /* = unique id SOAP_TYPE__ns1__SuspendVApp_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SuspendVApp_USCORETaskResponse() { _ns1__SuspendVApp_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__SuspendVApp_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__unregisterVApp_USCORETaskResponse
#define SOAP_TYPE__ns1__unregisterVApp_USCORETaskResponse (2955)
/* ns1:unregisterVApp_TaskResponse */
class SOAP_CMAC _ns1__unregisterVApp_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2955; } /* = unique id SOAP_TYPE__ns1__unregisterVApp_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__unregisterVApp_USCORETaskResponse() { _ns1__unregisterVApp_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__unregisterVApp_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateVirtualDisk_USCORETaskResponse (2956)
/* ns1:CreateVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__CreateVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2956; } /* = unique id SOAP_TYPE__ns1__CreateVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateVirtualDisk_USCORETaskResponse() { _ns1__CreateVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__DeleteVirtualDisk_USCORETaskResponse (2957)
/* ns1:DeleteVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__DeleteVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2957; } /* = unique id SOAP_TYPE__ns1__DeleteVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteVirtualDisk_USCORETaskResponse() { _ns1__DeleteVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MoveVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__MoveVirtualDisk_USCORETaskResponse (2958)
/* ns1:MoveVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__MoveVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2958; } /* = unique id SOAP_TYPE__ns1__MoveVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MoveVirtualDisk_USCORETaskResponse() { _ns1__MoveVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MoveVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CopyVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__CopyVirtualDisk_USCORETaskResponse (2959)
/* ns1:CopyVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__CopyVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2959; } /* = unique id SOAP_TYPE__ns1__CopyVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CopyVirtualDisk_USCORETaskResponse() { _ns1__CopyVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CopyVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExtendVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__ExtendVirtualDisk_USCORETaskResponse (2960)
/* ns1:ExtendVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__ExtendVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2960; } /* = unique id SOAP_TYPE__ns1__ExtendVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExtendVirtualDisk_USCORETaskResponse() { _ns1__ExtendVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ExtendVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVirtualDiskFragmentationResponse
#define SOAP_TYPE__ns1__QueryVirtualDiskFragmentationResponse (2961)
/* ns1:QueryVirtualDiskFragmentationResponse */
class SOAP_CMAC _ns1__QueryVirtualDiskFragmentationResponse
{
public:
	int returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2961; } /* = unique id SOAP_TYPE__ns1__QueryVirtualDiskFragmentationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVirtualDiskFragmentationResponse() { _ns1__QueryVirtualDiskFragmentationResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVirtualDiskFragmentationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DefragmentVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__DefragmentVirtualDisk_USCORETaskResponse (2962)
/* ns1:DefragmentVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__DefragmentVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2962; } /* = unique id SOAP_TYPE__ns1__DefragmentVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DefragmentVirtualDisk_USCORETaskResponse() { _ns1__DefragmentVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__DefragmentVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ShrinkVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__ShrinkVirtualDisk_USCORETaskResponse (2963)
/* ns1:ShrinkVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__ShrinkVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2963; } /* = unique id SOAP_TYPE__ns1__ShrinkVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ShrinkVirtualDisk_USCORETaskResponse() { _ns1__ShrinkVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ShrinkVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InflateVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__InflateVirtualDisk_USCORETaskResponse (2964)
/* ns1:InflateVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__InflateVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2964; } /* = unique id SOAP_TYPE__ns1__InflateVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InflateVirtualDisk_USCORETaskResponse() { _ns1__InflateVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__InflateVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EagerZeroVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__EagerZeroVirtualDisk_USCORETaskResponse (2965)
/* ns1:EagerZeroVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__EagerZeroVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2965; } /* = unique id SOAP_TYPE__ns1__EagerZeroVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EagerZeroVirtualDisk_USCORETaskResponse() { _ns1__EagerZeroVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__EagerZeroVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ZeroFillVirtualDisk_USCORETaskResponse
#define SOAP_TYPE__ns1__ZeroFillVirtualDisk_USCORETaskResponse (2966)
/* ns1:ZeroFillVirtualDisk_TaskResponse */
class SOAP_CMAC _ns1__ZeroFillVirtualDisk_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2966; } /* = unique id SOAP_TYPE__ns1__ZeroFillVirtualDisk_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ZeroFillVirtualDisk_USCORETaskResponse() { _ns1__ZeroFillVirtualDisk_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ZeroFillVirtualDisk_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetVirtualDiskUuidResponse
#define SOAP_TYPE__ns1__SetVirtualDiskUuidResponse (2967)
/* ns1:SetVirtualDiskUuidResponse */
class SOAP_CMAC _ns1__SetVirtualDiskUuidResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2967; } /* = unique id SOAP_TYPE__ns1__SetVirtualDiskUuidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetVirtualDiskUuidResponse() { _ns1__SetVirtualDiskUuidResponse::soap_default(NULL); }
	virtual ~_ns1__SetVirtualDiskUuidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVirtualDiskUuidResponse
#define SOAP_TYPE__ns1__QueryVirtualDiskUuidResponse (2968)
/* ns1:QueryVirtualDiskUuidResponse */
class SOAP_CMAC _ns1__QueryVirtualDiskUuidResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2968; } /* = unique id SOAP_TYPE__ns1__QueryVirtualDiskUuidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVirtualDiskUuidResponse() { _ns1__QueryVirtualDiskUuidResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVirtualDiskUuidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVirtualDiskGeometryResponse
#define SOAP_TYPE__ns1__QueryVirtualDiskGeometryResponse (2969)
/* ns1:QueryVirtualDiskGeometryResponse */
class SOAP_CMAC _ns1__QueryVirtualDiskGeometryResponse
{
public:
	class ns1__HostDiskDimensionsChs *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostDiskDimensionsChs */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2969; } /* = unique id SOAP_TYPE__ns1__QueryVirtualDiskGeometryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVirtualDiskGeometryResponse() { _ns1__QueryVirtualDiskGeometryResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVirtualDiskGeometryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshStorageInfoResponse
#define SOAP_TYPE__ns1__RefreshStorageInfoResponse (2970)
/* ns1:RefreshStorageInfoResponse */
class SOAP_CMAC _ns1__RefreshStorageInfoResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2970; } /* = unique id SOAP_TYPE__ns1__RefreshStorageInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshStorageInfoResponse() { _ns1__RefreshStorageInfoResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshStorageInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateSnapshot_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateSnapshot_USCORETaskResponse (2971)
/* ns1:CreateSnapshot_TaskResponse */
class SOAP_CMAC _ns1__CreateSnapshot_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2971; } /* = unique id SOAP_TYPE__ns1__CreateSnapshot_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateSnapshot_USCORETaskResponse() { _ns1__CreateSnapshot_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateSnapshot_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RevertToCurrentSnapshot_USCORETaskResponse
#define SOAP_TYPE__ns1__RevertToCurrentSnapshot_USCORETaskResponse (2972)
/* ns1:RevertToCurrentSnapshot_TaskResponse */
class SOAP_CMAC _ns1__RevertToCurrentSnapshot_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2972; } /* = unique id SOAP_TYPE__ns1__RevertToCurrentSnapshot_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RevertToCurrentSnapshot_USCORETaskResponse() { _ns1__RevertToCurrentSnapshot_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RevertToCurrentSnapshot_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveAllSnapshots_USCORETaskResponse
#define SOAP_TYPE__ns1__RemoveAllSnapshots_USCORETaskResponse (2973)
/* ns1:RemoveAllSnapshots_TaskResponse */
class SOAP_CMAC _ns1__RemoveAllSnapshots_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2973; } /* = unique id SOAP_TYPE__ns1__RemoveAllSnapshots_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveAllSnapshots_USCORETaskResponse() { _ns1__RemoveAllSnapshots_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveAllSnapshots_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigVM_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigVM_USCORETaskResponse (2974)
/* ns1:ReconfigVM_TaskResponse */
class SOAP_CMAC _ns1__ReconfigVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2974; } /* = unique id SOAP_TYPE__ns1__ReconfigVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigVM_USCORETaskResponse() { _ns1__ReconfigVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpgradeVM_USCORETaskResponse
#define SOAP_TYPE__ns1__UpgradeVM_USCORETaskResponse (2975)
/* ns1:UpgradeVM_TaskResponse */
class SOAP_CMAC _ns1__UpgradeVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2975; } /* = unique id SOAP_TYPE__ns1__UpgradeVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpgradeVM_USCORETaskResponse() { _ns1__UpgradeVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__UpgradeVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExtractOvfEnvironmentResponse
#define SOAP_TYPE__ns1__ExtractOvfEnvironmentResponse (2976)
/* ns1:ExtractOvfEnvironmentResponse */
class SOAP_CMAC _ns1__ExtractOvfEnvironmentResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2976; } /* = unique id SOAP_TYPE__ns1__ExtractOvfEnvironmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExtractOvfEnvironmentResponse() { _ns1__ExtractOvfEnvironmentResponse::soap_default(NULL); }
	virtual ~_ns1__ExtractOvfEnvironmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerOnVM_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerOnVM_USCORETaskResponse (2977)
/* ns1:PowerOnVM_TaskResponse */
class SOAP_CMAC _ns1__PowerOnVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2977; } /* = unique id SOAP_TYPE__ns1__PowerOnVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerOnVM_USCORETaskResponse() { _ns1__PowerOnVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerOnVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PowerOffVM_USCORETaskResponse
#define SOAP_TYPE__ns1__PowerOffVM_USCORETaskResponse (2978)
/* ns1:PowerOffVM_TaskResponse */
class SOAP_CMAC _ns1__PowerOffVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2978; } /* = unique id SOAP_TYPE__ns1__PowerOffVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PowerOffVM_USCORETaskResponse() { _ns1__PowerOffVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PowerOffVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SuspendVM_USCORETaskResponse
#define SOAP_TYPE__ns1__SuspendVM_USCORETaskResponse (2979)
/* ns1:SuspendVM_TaskResponse */
class SOAP_CMAC _ns1__SuspendVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2979; } /* = unique id SOAP_TYPE__ns1__SuspendVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SuspendVM_USCORETaskResponse() { _ns1__SuspendVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__SuspendVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetVM_USCORETaskResponse
#define SOAP_TYPE__ns1__ResetVM_USCORETaskResponse (2980)
/* ns1:ResetVM_TaskResponse */
class SOAP_CMAC _ns1__ResetVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2980; } /* = unique id SOAP_TYPE__ns1__ResetVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetVM_USCORETaskResponse() { _ns1__ResetVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ResetVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ShutdownGuestResponse
#define SOAP_TYPE__ns1__ShutdownGuestResponse (2981)
/* ns1:ShutdownGuestResponse */
class SOAP_CMAC _ns1__ShutdownGuestResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2981; } /* = unique id SOAP_TYPE__ns1__ShutdownGuestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ShutdownGuestResponse() { _ns1__ShutdownGuestResponse::soap_default(NULL); }
	virtual ~_ns1__ShutdownGuestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RebootGuestResponse
#define SOAP_TYPE__ns1__RebootGuestResponse (2982)
/* ns1:RebootGuestResponse */
class SOAP_CMAC _ns1__RebootGuestResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2982; } /* = unique id SOAP_TYPE__ns1__RebootGuestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RebootGuestResponse() { _ns1__RebootGuestResponse::soap_default(NULL); }
	virtual ~_ns1__RebootGuestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StandbyGuestResponse
#define SOAP_TYPE__ns1__StandbyGuestResponse (2983)
/* ns1:StandbyGuestResponse */
class SOAP_CMAC _ns1__StandbyGuestResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2983; } /* = unique id SOAP_TYPE__ns1__StandbyGuestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StandbyGuestResponse() { _ns1__StandbyGuestResponse::soap_default(NULL); }
	virtual ~_ns1__StandbyGuestResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AnswerVMResponse
#define SOAP_TYPE__ns1__AnswerVMResponse (2984)
/* ns1:AnswerVMResponse */
class SOAP_CMAC _ns1__AnswerVMResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2984; } /* = unique id SOAP_TYPE__ns1__AnswerVMResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AnswerVMResponse() { _ns1__AnswerVMResponse::soap_default(NULL); }
	virtual ~_ns1__AnswerVMResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CustomizeVM_USCORETaskResponse
#define SOAP_TYPE__ns1__CustomizeVM_USCORETaskResponse (2985)
/* ns1:CustomizeVM_TaskResponse */
class SOAP_CMAC _ns1__CustomizeVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2985; } /* = unique id SOAP_TYPE__ns1__CustomizeVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CustomizeVM_USCORETaskResponse() { _ns1__CustomizeVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CustomizeVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckCustomizationSpecResponse
#define SOAP_TYPE__ns1__CheckCustomizationSpecResponse (2986)
/* ns1:CheckCustomizationSpecResponse */
class SOAP_CMAC _ns1__CheckCustomizationSpecResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2986; } /* = unique id SOAP_TYPE__ns1__CheckCustomizationSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckCustomizationSpecResponse() { _ns1__CheckCustomizationSpecResponse::soap_default(NULL); }
	virtual ~_ns1__CheckCustomizationSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MigrateVM_USCORETaskResponse
#define SOAP_TYPE__ns1__MigrateVM_USCORETaskResponse (2987)
/* ns1:MigrateVM_TaskResponse */
class SOAP_CMAC _ns1__MigrateVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2987; } /* = unique id SOAP_TYPE__ns1__MigrateVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MigrateVM_USCORETaskResponse() { _ns1__MigrateVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MigrateVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RelocateVM_USCORETaskResponse
#define SOAP_TYPE__ns1__RelocateVM_USCORETaskResponse (2988)
/* ns1:RelocateVM_TaskResponse */
class SOAP_CMAC _ns1__RelocateVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2988; } /* = unique id SOAP_TYPE__ns1__RelocateVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RelocateVM_USCORETaskResponse() { _ns1__RelocateVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RelocateVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloneVM_USCORETaskResponse
#define SOAP_TYPE__ns1__CloneVM_USCORETaskResponse (2989)
/* ns1:CloneVM_TaskResponse */
class SOAP_CMAC _ns1__CloneVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2989; } /* = unique id SOAP_TYPE__ns1__CloneVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloneVM_USCORETaskResponse() { _ns1__CloneVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CloneVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExportVmResponse
#define SOAP_TYPE__ns1__ExportVmResponse (2990)
/* ns1:ExportVmResponse */
class SOAP_CMAC _ns1__ExportVmResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2990; } /* = unique id SOAP_TYPE__ns1__ExportVmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExportVmResponse() { _ns1__ExportVmResponse::soap_default(NULL); }
	virtual ~_ns1__ExportVmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MarkAsTemplateResponse
#define SOAP_TYPE__ns1__MarkAsTemplateResponse (2991)
/* ns1:MarkAsTemplateResponse */
class SOAP_CMAC _ns1__MarkAsTemplateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2991; } /* = unique id SOAP_TYPE__ns1__MarkAsTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MarkAsTemplateResponse() { _ns1__MarkAsTemplateResponse::soap_default(NULL); }
	virtual ~_ns1__MarkAsTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MarkAsVirtualMachineResponse
#define SOAP_TYPE__ns1__MarkAsVirtualMachineResponse (2992)
/* ns1:MarkAsVirtualMachineResponse */
class SOAP_CMAC _ns1__MarkAsVirtualMachineResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2992; } /* = unique id SOAP_TYPE__ns1__MarkAsVirtualMachineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MarkAsVirtualMachineResponse() { _ns1__MarkAsVirtualMachineResponse::soap_default(NULL); }
	virtual ~_ns1__MarkAsVirtualMachineResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnregisterVMResponse
#define SOAP_TYPE__ns1__UnregisterVMResponse (2993)
/* ns1:UnregisterVMResponse */
class SOAP_CMAC _ns1__UnregisterVMResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2993; } /* = unique id SOAP_TYPE__ns1__UnregisterVMResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnregisterVMResponse() { _ns1__UnregisterVMResponse::soap_default(NULL); }
	virtual ~_ns1__UnregisterVMResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetGuestInformationResponse
#define SOAP_TYPE__ns1__ResetGuestInformationResponse (2994)
/* ns1:ResetGuestInformationResponse */
class SOAP_CMAC _ns1__ResetGuestInformationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2994; } /* = unique id SOAP_TYPE__ns1__ResetGuestInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetGuestInformationResponse() { _ns1__ResetGuestInformationResponse::soap_default(NULL); }
	virtual ~_ns1__ResetGuestInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MountToolsInstallerResponse
#define SOAP_TYPE__ns1__MountToolsInstallerResponse (2995)
/* ns1:MountToolsInstallerResponse */
class SOAP_CMAC _ns1__MountToolsInstallerResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2995; } /* = unique id SOAP_TYPE__ns1__MountToolsInstallerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MountToolsInstallerResponse() { _ns1__MountToolsInstallerResponse::soap_default(NULL); }
	virtual ~_ns1__MountToolsInstallerResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnmountToolsInstallerResponse
#define SOAP_TYPE__ns1__UnmountToolsInstallerResponse (2996)
/* ns1:UnmountToolsInstallerResponse */
class SOAP_CMAC _ns1__UnmountToolsInstallerResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2996; } /* = unique id SOAP_TYPE__ns1__UnmountToolsInstallerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnmountToolsInstallerResponse() { _ns1__UnmountToolsInstallerResponse::soap_default(NULL); }
	virtual ~_ns1__UnmountToolsInstallerResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpgradeTools_USCORETaskResponse
#define SOAP_TYPE__ns1__UpgradeTools_USCORETaskResponse (2997)
/* ns1:UpgradeTools_TaskResponse */
class SOAP_CMAC _ns1__UpgradeTools_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2997; } /* = unique id SOAP_TYPE__ns1__UpgradeTools_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpgradeTools_USCORETaskResponse() { _ns1__UpgradeTools_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__UpgradeTools_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcquireMksTicketResponse
#define SOAP_TYPE__ns1__AcquireMksTicketResponse (2998)
/* ns1:AcquireMksTicketResponse */
class SOAP_CMAC _ns1__AcquireMksTicketResponse
{
public:
	class ns1__VirtualMachineMksTicket *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:VirtualMachineMksTicket */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2998; } /* = unique id SOAP_TYPE__ns1__AcquireMksTicketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcquireMksTicketResponse() { _ns1__AcquireMksTicketResponse::soap_default(NULL); }
	virtual ~_ns1__AcquireMksTicketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcquireTicketResponse
#define SOAP_TYPE__ns1__AcquireTicketResponse (2999)
/* ns1:AcquireTicketResponse */
class SOAP_CMAC _ns1__AcquireTicketResponse
{
public:
	class ns1__VirtualMachineTicket *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:VirtualMachineTicket */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 2999; } /* = unique id SOAP_TYPE__ns1__AcquireTicketResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcquireTicketResponse() { _ns1__AcquireTicketResponse::soap_default(NULL); }
	virtual ~_ns1__AcquireTicketResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetScreenResolutionResponse
#define SOAP_TYPE__ns1__SetScreenResolutionResponse (3000)
/* ns1:SetScreenResolutionResponse */
class SOAP_CMAC _ns1__SetScreenResolutionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3000; } /* = unique id SOAP_TYPE__ns1__SetScreenResolutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetScreenResolutionResponse() { _ns1__SetScreenResolutionResponse::soap_default(NULL); }
	virtual ~_ns1__SetScreenResolutionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DefragmentAllDisksResponse
#define SOAP_TYPE__ns1__DefragmentAllDisksResponse (3001)
/* ns1:DefragmentAllDisksResponse */
class SOAP_CMAC _ns1__DefragmentAllDisksResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3001; } /* = unique id SOAP_TYPE__ns1__DefragmentAllDisksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DefragmentAllDisksResponse() { _ns1__DefragmentAllDisksResponse::soap_default(NULL); }
	virtual ~_ns1__DefragmentAllDisksResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateSecondaryVM_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateSecondaryVM_USCORETaskResponse (3002)
/* ns1:CreateSecondaryVM_TaskResponse */
class SOAP_CMAC _ns1__CreateSecondaryVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3002; } /* = unique id SOAP_TYPE__ns1__CreateSecondaryVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateSecondaryVM_USCORETaskResponse() { _ns1__CreateSecondaryVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateSecondaryVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__TurnOffFaultToleranceForVM_USCORETaskResponse
#define SOAP_TYPE__ns1__TurnOffFaultToleranceForVM_USCORETaskResponse (3003)
/* ns1:TurnOffFaultToleranceForVM_TaskResponse */
class SOAP_CMAC _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3003; } /* = unique id SOAP_TYPE__ns1__TurnOffFaultToleranceForVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse() { _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__TurnOffFaultToleranceForVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__MakePrimaryVM_USCORETaskResponse
#define SOAP_TYPE__ns1__MakePrimaryVM_USCORETaskResponse (3004)
/* ns1:MakePrimaryVM_TaskResponse */
class SOAP_CMAC _ns1__MakePrimaryVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3004; } /* = unique id SOAP_TYPE__ns1__MakePrimaryVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__MakePrimaryVM_USCORETaskResponse() { _ns1__MakePrimaryVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__MakePrimaryVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__TerminateFaultTolerantVM_USCORETaskResponse
#define SOAP_TYPE__ns1__TerminateFaultTolerantVM_USCORETaskResponse (3005)
/* ns1:TerminateFaultTolerantVM_TaskResponse */
class SOAP_CMAC _ns1__TerminateFaultTolerantVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3005; } /* = unique id SOAP_TYPE__ns1__TerminateFaultTolerantVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__TerminateFaultTolerantVM_USCORETaskResponse() { _ns1__TerminateFaultTolerantVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__TerminateFaultTolerantVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableSecondaryVM_USCORETaskResponse
#define SOAP_TYPE__ns1__DisableSecondaryVM_USCORETaskResponse (3006)
/* ns1:DisableSecondaryVM_TaskResponse */
class SOAP_CMAC _ns1__DisableSecondaryVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3006; } /* = unique id SOAP_TYPE__ns1__DisableSecondaryVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableSecondaryVM_USCORETaskResponse() { _ns1__DisableSecondaryVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__DisableSecondaryVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableSecondaryVM_USCORETaskResponse
#define SOAP_TYPE__ns1__EnableSecondaryVM_USCORETaskResponse (3007)
/* ns1:EnableSecondaryVM_TaskResponse */
class SOAP_CMAC _ns1__EnableSecondaryVM_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3007; } /* = unique id SOAP_TYPE__ns1__EnableSecondaryVM_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableSecondaryVM_USCORETaskResponse() { _ns1__EnableSecondaryVM_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__EnableSecondaryVM_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetDisplayTopologyResponse
#define SOAP_TYPE__ns1__SetDisplayTopologyResponse (3008)
/* ns1:SetDisplayTopologyResponse */
class SOAP_CMAC _ns1__SetDisplayTopologyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3008; } /* = unique id SOAP_TYPE__ns1__SetDisplayTopologyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetDisplayTopologyResponse() { _ns1__SetDisplayTopologyResponse::soap_default(NULL); }
	virtual ~_ns1__SetDisplayTopologyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartRecording_USCORETaskResponse
#define SOAP_TYPE__ns1__StartRecording_USCORETaskResponse (3009)
/* ns1:StartRecording_TaskResponse */
class SOAP_CMAC _ns1__StartRecording_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3009; } /* = unique id SOAP_TYPE__ns1__StartRecording_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartRecording_USCORETaskResponse() { _ns1__StartRecording_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__StartRecording_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopRecording_USCORETaskResponse
#define SOAP_TYPE__ns1__StopRecording_USCORETaskResponse (3010)
/* ns1:StopRecording_TaskResponse */
class SOAP_CMAC _ns1__StopRecording_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3010; } /* = unique id SOAP_TYPE__ns1__StopRecording_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopRecording_USCORETaskResponse() { _ns1__StopRecording_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__StopRecording_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartReplaying_USCORETaskResponse
#define SOAP_TYPE__ns1__StartReplaying_USCORETaskResponse (3011)
/* ns1:StartReplaying_TaskResponse */
class SOAP_CMAC _ns1__StartReplaying_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3011; } /* = unique id SOAP_TYPE__ns1__StartReplaying_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartReplaying_USCORETaskResponse() { _ns1__StartReplaying_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__StartReplaying_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopReplaying_USCORETaskResponse
#define SOAP_TYPE__ns1__StopReplaying_USCORETaskResponse (3012)
/* ns1:StopReplaying_TaskResponse */
class SOAP_CMAC _ns1__StopReplaying_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3012; } /* = unique id SOAP_TYPE__ns1__StopReplaying_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopReplaying_USCORETaskResponse() { _ns1__StopReplaying_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__StopReplaying_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PromoteDisks_USCORETaskResponse
#define SOAP_TYPE__ns1__PromoteDisks_USCORETaskResponse (3013)
/* ns1:PromoteDisks_TaskResponse */
class SOAP_CMAC _ns1__PromoteDisks_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3013; } /* = unique id SOAP_TYPE__ns1__PromoteDisks_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PromoteDisks_USCORETaskResponse() { _ns1__PromoteDisks_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__PromoteDisks_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateScreenshot_USCORETaskResponse
#define SOAP_TYPE__ns1__CreateScreenshot_USCORETaskResponse (3014)
/* ns1:CreateScreenshot_TaskResponse */
class SOAP_CMAC _ns1__CreateScreenshot_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3014; } /* = unique id SOAP_TYPE__ns1__CreateScreenshot_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateScreenshot_USCORETaskResponse() { _ns1__CreateScreenshot_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateScreenshot_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryChangedDiskAreasResponse
#define SOAP_TYPE__ns1__QueryChangedDiskAreasResponse (3015)
/* ns1:QueryChangedDiskAreasResponse */
class SOAP_CMAC _ns1__QueryChangedDiskAreasResponse
{
public:
	class ns1__DiskChangeInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:DiskChangeInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3015; } /* = unique id SOAP_TYPE__ns1__QueryChangedDiskAreasResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryChangedDiskAreasResponse() { _ns1__QueryChangedDiskAreasResponse::soap_default(NULL); }
	virtual ~_ns1__QueryChangedDiskAreasResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUnownedFilesResponse
#define SOAP_TYPE__ns1__QueryUnownedFilesResponse (3016)
/* ns1:QueryUnownedFilesResponse */
class SOAP_CMAC _ns1__QueryUnownedFilesResponse
{
public:
	std::vector<std::string >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3016; } /* = unique id SOAP_TYPE__ns1__QueryUnownedFilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUnownedFilesResponse() { _ns1__QueryUnownedFilesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryUnownedFilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__reloadVirtualMachineFromPath_USCORETaskResponse
#define SOAP_TYPE__ns1__reloadVirtualMachineFromPath_USCORETaskResponse (3017)
/* ns1:reloadVirtualMachineFromPath_TaskResponse */
class SOAP_CMAC _ns1__reloadVirtualMachineFromPath_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3017; } /* = unique id SOAP_TYPE__ns1__reloadVirtualMachineFromPath_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__reloadVirtualMachineFromPath_USCORETaskResponse() { _ns1__reloadVirtualMachineFromPath_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__reloadVirtualMachineFromPath_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryFaultToleranceCompatibilityResponse
#define SOAP_TYPE__ns1__QueryFaultToleranceCompatibilityResponse (3018)
/* ns1:QueryFaultToleranceCompatibilityResponse */
class SOAP_CMAC _ns1__QueryFaultToleranceCompatibilityResponse
{
public:
	std::vector<ns1__LocalizedMethodFault * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:LocalizedMethodFault */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3018; } /* = unique id SOAP_TYPE__ns1__QueryFaultToleranceCompatibilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryFaultToleranceCompatibilityResponse() { _ns1__QueryFaultToleranceCompatibilityResponse::soap_default(NULL); }
	virtual ~_ns1__QueryFaultToleranceCompatibilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveAlarmResponse
#define SOAP_TYPE__ns1__RemoveAlarmResponse (3019)
/* ns1:RemoveAlarmResponse */
class SOAP_CMAC _ns1__RemoveAlarmResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3019; } /* = unique id SOAP_TYPE__ns1__RemoveAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveAlarmResponse() { _ns1__RemoveAlarmResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureAlarmResponse
#define SOAP_TYPE__ns1__ReconfigureAlarmResponse (3020)
/* ns1:ReconfigureAlarmResponse */
class SOAP_CMAC _ns1__ReconfigureAlarmResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3020; } /* = unique id SOAP_TYPE__ns1__ReconfigureAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureAlarmResponse() { _ns1__ReconfigureAlarmResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateAlarmResponse
#define SOAP_TYPE__ns1__CreateAlarmResponse (3021)
/* ns1:CreateAlarmResponse */
class SOAP_CMAC _ns1__CreateAlarmResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3021; } /* = unique id SOAP_TYPE__ns1__CreateAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateAlarmResponse() { _ns1__CreateAlarmResponse::soap_default(NULL); }
	virtual ~_ns1__CreateAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAlarmResponse
#define SOAP_TYPE__ns1__GetAlarmResponse (3022)
/* ns1:GetAlarmResponse */
class SOAP_CMAC _ns1__GetAlarmResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3022; } /* = unique id SOAP_TYPE__ns1__GetAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAlarmResponse() { _ns1__GetAlarmResponse::soap_default(NULL); }
	virtual ~_ns1__GetAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AreAlarmActionsEnabledResponse
#define SOAP_TYPE__ns1__AreAlarmActionsEnabledResponse (3023)
/* ns1:AreAlarmActionsEnabledResponse */
class SOAP_CMAC _ns1__AreAlarmActionsEnabledResponse
{
public:
	bool returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3023; } /* = unique id SOAP_TYPE__ns1__AreAlarmActionsEnabledResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AreAlarmActionsEnabledResponse() { _ns1__AreAlarmActionsEnabledResponse::soap_default(NULL); }
	virtual ~_ns1__AreAlarmActionsEnabledResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableAlarmActionsResponse
#define SOAP_TYPE__ns1__EnableAlarmActionsResponse (3024)
/* ns1:EnableAlarmActionsResponse */
class SOAP_CMAC _ns1__EnableAlarmActionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3024; } /* = unique id SOAP_TYPE__ns1__EnableAlarmActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableAlarmActionsResponse() { _ns1__EnableAlarmActionsResponse::soap_default(NULL); }
	virtual ~_ns1__EnableAlarmActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAlarmStateResponse
#define SOAP_TYPE__ns1__GetAlarmStateResponse (3025)
/* ns1:GetAlarmStateResponse */
class SOAP_CMAC _ns1__GetAlarmStateResponse
{
public:
	std::vector<ns1__AlarmState * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AlarmState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3025; } /* = unique id SOAP_TYPE__ns1__GetAlarmStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAlarmStateResponse() { _ns1__GetAlarmStateResponse::soap_default(NULL); }
	virtual ~_ns1__GetAlarmStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AcknowledgeAlarmResponse
#define SOAP_TYPE__ns1__AcknowledgeAlarmResponse (3026)
/* ns1:AcknowledgeAlarmResponse */
class SOAP_CMAC _ns1__AcknowledgeAlarmResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3026; } /* = unique id SOAP_TYPE__ns1__AcknowledgeAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AcknowledgeAlarmResponse() { _ns1__AcknowledgeAlarmResponse::soap_default(NULL); }
	virtual ~_ns1__AcknowledgeAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureDVPortgroup_USCORETaskResponse
#define SOAP_TYPE__ns1__ReconfigureDVPortgroup_USCORETaskResponse (3027)
/* ns1:ReconfigureDVPortgroup_TaskResponse */
class SOAP_CMAC _ns1__ReconfigureDVPortgroup_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3027; } /* = unique id SOAP_TYPE__ns1__ReconfigureDVPortgroup_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureDVPortgroup_USCORETaskResponse() { _ns1__ReconfigureDVPortgroup_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureDVPortgroup_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAvailableDvsSpecResponse
#define SOAP_TYPE__ns1__QueryAvailableDvsSpecResponse (3028)
/* ns1:QueryAvailableDvsSpecResponse */
class SOAP_CMAC _ns1__QueryAvailableDvsSpecResponse
{
public:
	std::vector<ns1__DistributedVirtualSwitchProductSpec * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3028; } /* = unique id SOAP_TYPE__ns1__QueryAvailableDvsSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAvailableDvsSpecResponse() { _ns1__QueryAvailableDvsSpecResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAvailableDvsSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryCompatibleHostForNewDvsResponse
#define SOAP_TYPE__ns1__QueryCompatibleHostForNewDvsResponse (3029)
/* ns1:QueryCompatibleHostForNewDvsResponse */
class SOAP_CMAC _ns1__QueryCompatibleHostForNewDvsResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3029; } /* = unique id SOAP_TYPE__ns1__QueryCompatibleHostForNewDvsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryCompatibleHostForNewDvsResponse() { _ns1__QueryCompatibleHostForNewDvsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryCompatibleHostForNewDvsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryCompatibleHostForExistingDvsResponse
#define SOAP_TYPE__ns1__QueryCompatibleHostForExistingDvsResponse (3030)
/* ns1:QueryCompatibleHostForExistingDvsResponse */
class SOAP_CMAC _ns1__QueryCompatibleHostForExistingDvsResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3030; } /* = unique id SOAP_TYPE__ns1__QueryCompatibleHostForExistingDvsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryCompatibleHostForExistingDvsResponse() { _ns1__QueryCompatibleHostForExistingDvsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryCompatibleHostForExistingDvsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDvsCompatibleHostSpecResponse
#define SOAP_TYPE__ns1__QueryDvsCompatibleHostSpecResponse (3031)
/* ns1:QueryDvsCompatibleHostSpecResponse */
class SOAP_CMAC _ns1__QueryDvsCompatibleHostSpecResponse
{
public:
	std::vector<ns1__DistributedVirtualSwitchHostProductSpec * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DistributedVirtualSwitchHostProductSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3031; } /* = unique id SOAP_TYPE__ns1__QueryDvsCompatibleHostSpecResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDvsCompatibleHostSpecResponse() { _ns1__QueryDvsCompatibleHostSpecResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDvsCompatibleHostSpecResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDvsFeatureCapabilityResponse
#define SOAP_TYPE__ns1__QueryDvsFeatureCapabilityResponse (3032)
/* ns1:QueryDvsFeatureCapabilityResponse */
class SOAP_CMAC _ns1__QueryDvsFeatureCapabilityResponse
{
public:
	class ns1__DVSFeatureCapability *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DVSFeatureCapability */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3032; } /* = unique id SOAP_TYPE__ns1__QueryDvsFeatureCapabilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDvsFeatureCapabilityResponse() { _ns1__QueryDvsFeatureCapabilityResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDvsFeatureCapabilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDvsByUuidResponse
#define SOAP_TYPE__ns1__QueryDvsByUuidResponse (3033)
/* ns1:QueryDvsByUuidResponse */
class SOAP_CMAC _ns1__QueryDvsByUuidResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3033; } /* = unique id SOAP_TYPE__ns1__QueryDvsByUuidResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDvsByUuidResponse() { _ns1__QueryDvsByUuidResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDvsByUuidResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDvsConfigTargetResponse
#define SOAP_TYPE__ns1__QueryDvsConfigTargetResponse (3034)
/* ns1:QueryDvsConfigTargetResponse */
class SOAP_CMAC _ns1__QueryDvsConfigTargetResponse
{
public:
	class ns1__DVSManagerDvsConfigTarget *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:DVSManagerDvsConfigTarget */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3034; } /* = unique id SOAP_TYPE__ns1__QueryDvsConfigTargetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDvsConfigTargetResponse() { _ns1__QueryDvsConfigTargetResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDvsConfigTargetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDvsCheckCompatibilityResponse
#define SOAP_TYPE__ns1__QueryDvsCheckCompatibilityResponse (3035)
/* ns1:QueryDvsCheckCompatibilityResponse */
class SOAP_CMAC _ns1__QueryDvsCheckCompatibilityResponse
{
public:
	std::vector<ns1__DistributedVirtualSwitchManagerCompatibilityResult * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:DistributedVirtualSwitchManagerCompatibilityResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3035; } /* = unique id SOAP_TYPE__ns1__QueryDvsCheckCompatibilityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDvsCheckCompatibilityResponse() { _ns1__QueryDvsCheckCompatibilityResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDvsCheckCompatibilityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReadNextEventsResponse
#define SOAP_TYPE__ns1__ReadNextEventsResponse (3036)
/* ns1:ReadNextEventsResponse */
class SOAP_CMAC _ns1__ReadNextEventsResponse
{
public:
	std::vector<ns1__Event * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Event */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3036; } /* = unique id SOAP_TYPE__ns1__ReadNextEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReadNextEventsResponse() { _ns1__ReadNextEventsResponse::soap_default(NULL); }
	virtual ~_ns1__ReadNextEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReadPreviousEventsResponse
#define SOAP_TYPE__ns1__ReadPreviousEventsResponse (3037)
/* ns1:ReadPreviousEventsResponse */
class SOAP_CMAC _ns1__ReadPreviousEventsResponse
{
public:
	std::vector<ns1__Event * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Event */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3037; } /* = unique id SOAP_TYPE__ns1__ReadPreviousEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReadPreviousEventsResponse() { _ns1__ReadPreviousEventsResponse::soap_default(NULL); }
	virtual ~_ns1__ReadPreviousEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveArgumentDescriptionResponse
#define SOAP_TYPE__ns1__RetrieveArgumentDescriptionResponse (3038)
/* ns1:RetrieveArgumentDescriptionResponse */
class SOAP_CMAC _ns1__RetrieveArgumentDescriptionResponse
{
public:
	std::vector<ns1__EventArgDesc * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:EventArgDesc */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3038; } /* = unique id SOAP_TYPE__ns1__RetrieveArgumentDescriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveArgumentDescriptionResponse() { _ns1__RetrieveArgumentDescriptionResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveArgumentDescriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateCollectorForEventsResponse
#define SOAP_TYPE__ns1__CreateCollectorForEventsResponse (3039)
/* ns1:CreateCollectorForEventsResponse */
class SOAP_CMAC _ns1__CreateCollectorForEventsResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3039; } /* = unique id SOAP_TYPE__ns1__CreateCollectorForEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateCollectorForEventsResponse() { _ns1__CreateCollectorForEventsResponse::soap_default(NULL); }
	virtual ~_ns1__CreateCollectorForEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LogUserEventResponse
#define SOAP_TYPE__ns1__LogUserEventResponse (3040)
/* ns1:LogUserEventResponse */
class SOAP_CMAC _ns1__LogUserEventResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3040; } /* = unique id SOAP_TYPE__ns1__LogUserEventResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LogUserEventResponse() { _ns1__LogUserEventResponse::soap_default(NULL); }
	virtual ~_ns1__LogUserEventResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryEventsResponse
#define SOAP_TYPE__ns1__QueryEventsResponse (3041)
/* ns1:QueryEventsResponse */
class SOAP_CMAC _ns1__QueryEventsResponse
{
public:
	std::vector<ns1__Event * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:Event */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3041; } /* = unique id SOAP_TYPE__ns1__QueryEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryEventsResponse() { _ns1__QueryEventsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__PostEventResponse
#define SOAP_TYPE__ns1__PostEventResponse (3042)
/* ns1:PostEventResponse */
class SOAP_CMAC _ns1__PostEventResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3042; } /* = unique id SOAP_TYPE__ns1__PostEventResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__PostEventResponse() { _ns1__PostEventResponse::soap_default(NULL); }
	virtual ~_ns1__PostEventResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__JoinDomain_USCORETaskResponse
#define SOAP_TYPE__ns1__JoinDomain_USCORETaskResponse (3043)
/* ns1:JoinDomain_TaskResponse */
class SOAP_CMAC _ns1__JoinDomain_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3043; } /* = unique id SOAP_TYPE__ns1__JoinDomain_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__JoinDomain_USCORETaskResponse() { _ns1__JoinDomain_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__JoinDomain_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__LeaveCurrentDomain_USCORETaskResponse
#define SOAP_TYPE__ns1__LeaveCurrentDomain_USCORETaskResponse (3044)
/* ns1:LeaveCurrentDomain_TaskResponse */
class SOAP_CMAC _ns1__LeaveCurrentDomain_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3044; } /* = unique id SOAP_TYPE__ns1__LeaveCurrentDomain_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__LeaveCurrentDomain_USCORETaskResponse() { _ns1__LeaveCurrentDomain_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__LeaveCurrentDomain_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureAutostartResponse
#define SOAP_TYPE__ns1__ReconfigureAutostartResponse (3045)
/* ns1:ReconfigureAutostartResponse */
class SOAP_CMAC _ns1__ReconfigureAutostartResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3045; } /* = unique id SOAP_TYPE__ns1__ReconfigureAutostartResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureAutostartResponse() { _ns1__ReconfigureAutostartResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureAutostartResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AutoStartPowerOnResponse
#define SOAP_TYPE__ns1__AutoStartPowerOnResponse (3046)
/* ns1:AutoStartPowerOnResponse */
class SOAP_CMAC _ns1__AutoStartPowerOnResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3046; } /* = unique id SOAP_TYPE__ns1__AutoStartPowerOnResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AutoStartPowerOnResponse() { _ns1__AutoStartPowerOnResponse::soap_default(NULL); }
	virtual ~_ns1__AutoStartPowerOnResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AutoStartPowerOffResponse
#define SOAP_TYPE__ns1__AutoStartPowerOffResponse (3047)
/* ns1:AutoStartPowerOffResponse */
class SOAP_CMAC _ns1__AutoStartPowerOffResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3047; } /* = unique id SOAP_TYPE__ns1__AutoStartPowerOffResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AutoStartPowerOffResponse() { _ns1__AutoStartPowerOffResponse::soap_default(NULL); }
	virtual ~_ns1__AutoStartPowerOffResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryBootDevicesResponse
#define SOAP_TYPE__ns1__QueryBootDevicesResponse (3048)
/* ns1:QueryBootDevicesResponse */
class SOAP_CMAC _ns1__QueryBootDevicesResponse
{
public:
	class ns1__HostBootDeviceInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostBootDeviceInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3048; } /* = unique id SOAP_TYPE__ns1__QueryBootDevicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryBootDevicesResponse() { _ns1__QueryBootDevicesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryBootDevicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateBootDeviceResponse
#define SOAP_TYPE__ns1__UpdateBootDeviceResponse (3049)
/* ns1:UpdateBootDeviceResponse */
class SOAP_CMAC _ns1__UpdateBootDeviceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3049; } /* = unique id SOAP_TYPE__ns1__UpdateBootDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateBootDeviceResponse() { _ns1__UpdateBootDeviceResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateBootDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableHyperThreadingResponse
#define SOAP_TYPE__ns1__EnableHyperThreadingResponse (3050)
/* ns1:EnableHyperThreadingResponse */
class SOAP_CMAC _ns1__EnableHyperThreadingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3050; } /* = unique id SOAP_TYPE__ns1__EnableHyperThreadingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableHyperThreadingResponse() { _ns1__EnableHyperThreadingResponse::soap_default(NULL); }
	virtual ~_ns1__EnableHyperThreadingResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableHyperThreadingResponse
#define SOAP_TYPE__ns1__DisableHyperThreadingResponse (3051)
/* ns1:DisableHyperThreadingResponse */
class SOAP_CMAC _ns1__DisableHyperThreadingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3051; } /* = unique id SOAP_TYPE__ns1__DisableHyperThreadingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableHyperThreadingResponse() { _ns1__DisableHyperThreadingResponse::soap_default(NULL); }
	virtual ~_ns1__DisableHyperThreadingResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SearchDatastore_USCORETaskResponse
#define SOAP_TYPE__ns1__SearchDatastore_USCORETaskResponse (3052)
/* ns1:SearchDatastore_TaskResponse */
class SOAP_CMAC _ns1__SearchDatastore_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3052; } /* = unique id SOAP_TYPE__ns1__SearchDatastore_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SearchDatastore_USCORETaskResponse() { _ns1__SearchDatastore_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__SearchDatastore_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SearchDatastoreSubFolders_USCORETaskResponse
#define SOAP_TYPE__ns1__SearchDatastoreSubFolders_USCORETaskResponse (3053)
/* ns1:SearchDatastoreSubFolders_TaskResponse */
class SOAP_CMAC _ns1__SearchDatastoreSubFolders_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3053; } /* = unique id SOAP_TYPE__ns1__SearchDatastoreSubFolders_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SearchDatastoreSubFolders_USCORETaskResponse() { _ns1__SearchDatastoreSubFolders_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__SearchDatastoreSubFolders_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeleteFileResponse
#define SOAP_TYPE__ns1__DeleteFileResponse (3054)
/* ns1:DeleteFileResponse */
class SOAP_CMAC _ns1__DeleteFileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3054; } /* = unique id SOAP_TYPE__ns1__DeleteFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteFileResponse() { _ns1__DeleteFileResponse::soap_default(NULL); }
	virtual ~_ns1__DeleteFileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateLocalSwapDatastoreResponse
#define SOAP_TYPE__ns1__UpdateLocalSwapDatastoreResponse (3055)
/* ns1:UpdateLocalSwapDatastoreResponse */
class SOAP_CMAC _ns1__UpdateLocalSwapDatastoreResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3055; } /* = unique id SOAP_TYPE__ns1__UpdateLocalSwapDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateLocalSwapDatastoreResponse() { _ns1__UpdateLocalSwapDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateLocalSwapDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAvailableDisksForVmfsResponse
#define SOAP_TYPE__ns1__QueryAvailableDisksForVmfsResponse (3056)
/* ns1:QueryAvailableDisksForVmfsResponse */
class SOAP_CMAC _ns1__QueryAvailableDisksForVmfsResponse
{
public:
	std::vector<ns1__HostScsiDisk * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostScsiDisk */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3056; } /* = unique id SOAP_TYPE__ns1__QueryAvailableDisksForVmfsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAvailableDisksForVmfsResponse() { _ns1__QueryAvailableDisksForVmfsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAvailableDisksForVmfsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVmfsDatastoreCreateOptionsResponse
#define SOAP_TYPE__ns1__QueryVmfsDatastoreCreateOptionsResponse (3057)
/* ns1:QueryVmfsDatastoreCreateOptionsResponse */
class SOAP_CMAC _ns1__QueryVmfsDatastoreCreateOptionsResponse
{
public:
	std::vector<ns1__VmfsDatastoreOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VmfsDatastoreOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3057; } /* = unique id SOAP_TYPE__ns1__QueryVmfsDatastoreCreateOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVmfsDatastoreCreateOptionsResponse() { _ns1__QueryVmfsDatastoreCreateOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVmfsDatastoreCreateOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateVmfsDatastoreResponse
#define SOAP_TYPE__ns1__CreateVmfsDatastoreResponse (3058)
/* ns1:CreateVmfsDatastoreResponse */
class SOAP_CMAC _ns1__CreateVmfsDatastoreResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3058; } /* = unique id SOAP_TYPE__ns1__CreateVmfsDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateVmfsDatastoreResponse() { _ns1__CreateVmfsDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__CreateVmfsDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVmfsDatastoreExtendOptionsResponse
#define SOAP_TYPE__ns1__QueryVmfsDatastoreExtendOptionsResponse (3059)
/* ns1:QueryVmfsDatastoreExtendOptionsResponse */
class SOAP_CMAC _ns1__QueryVmfsDatastoreExtendOptionsResponse
{
public:
	std::vector<ns1__VmfsDatastoreOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VmfsDatastoreOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3059; } /* = unique id SOAP_TYPE__ns1__QueryVmfsDatastoreExtendOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVmfsDatastoreExtendOptionsResponse() { _ns1__QueryVmfsDatastoreExtendOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVmfsDatastoreExtendOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVmfsDatastoreExpandOptionsResponse
#define SOAP_TYPE__ns1__QueryVmfsDatastoreExpandOptionsResponse (3060)
/* ns1:QueryVmfsDatastoreExpandOptionsResponse */
class SOAP_CMAC _ns1__QueryVmfsDatastoreExpandOptionsResponse
{
public:
	std::vector<ns1__VmfsDatastoreOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VmfsDatastoreOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3060; } /* = unique id SOAP_TYPE__ns1__QueryVmfsDatastoreExpandOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVmfsDatastoreExpandOptionsResponse() { _ns1__QueryVmfsDatastoreExpandOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVmfsDatastoreExpandOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExtendVmfsDatastoreResponse
#define SOAP_TYPE__ns1__ExtendVmfsDatastoreResponse (3061)
/* ns1:ExtendVmfsDatastoreResponse */
class SOAP_CMAC _ns1__ExtendVmfsDatastoreResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3061; } /* = unique id SOAP_TYPE__ns1__ExtendVmfsDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExtendVmfsDatastoreResponse() { _ns1__ExtendVmfsDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__ExtendVmfsDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExpandVmfsDatastoreResponse
#define SOAP_TYPE__ns1__ExpandVmfsDatastoreResponse (3062)
/* ns1:ExpandVmfsDatastoreResponse */
class SOAP_CMAC _ns1__ExpandVmfsDatastoreResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3062; } /* = unique id SOAP_TYPE__ns1__ExpandVmfsDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExpandVmfsDatastoreResponse() { _ns1__ExpandVmfsDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__ExpandVmfsDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateNasDatastoreResponse
#define SOAP_TYPE__ns1__CreateNasDatastoreResponse (3063)
/* ns1:CreateNasDatastoreResponse */
class SOAP_CMAC _ns1__CreateNasDatastoreResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3063; } /* = unique id SOAP_TYPE__ns1__CreateNasDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateNasDatastoreResponse() { _ns1__CreateNasDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__CreateNasDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateLocalDatastoreResponse
#define SOAP_TYPE__ns1__CreateLocalDatastoreResponse (3064)
/* ns1:CreateLocalDatastoreResponse */
class SOAP_CMAC _ns1__CreateLocalDatastoreResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3064; } /* = unique id SOAP_TYPE__ns1__CreateLocalDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateLocalDatastoreResponse() { _ns1__CreateLocalDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__CreateLocalDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveDatastoreResponse
#define SOAP_TYPE__ns1__RemoveDatastoreResponse (3065)
/* ns1:RemoveDatastoreResponse */
class SOAP_CMAC _ns1__RemoveDatastoreResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3065; } /* = unique id SOAP_TYPE__ns1__RemoveDatastoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveDatastoreResponse() { _ns1__RemoveDatastoreResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveDatastoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ConfigureDatastorePrincipalResponse
#define SOAP_TYPE__ns1__ConfigureDatastorePrincipalResponse (3066)
/* ns1:ConfigureDatastorePrincipalResponse */
class SOAP_CMAC _ns1__ConfigureDatastorePrincipalResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3066; } /* = unique id SOAP_TYPE__ns1__ConfigureDatastorePrincipalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ConfigureDatastorePrincipalResponse() { _ns1__ConfigureDatastorePrincipalResponse::soap_default(NULL); }
	virtual ~_ns1__ConfigureDatastorePrincipalResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumesResponse
#define SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumesResponse (3067)
/* ns1:QueryUnresolvedVmfsVolumesResponse */
class SOAP_CMAC _ns1__QueryUnresolvedVmfsVolumesResponse
{
public:
	std::vector<ns1__HostUnresolvedVmfsVolume * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostUnresolvedVmfsVolume */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3067; } /* = unique id SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUnresolvedVmfsVolumesResponse() { _ns1__QueryUnresolvedVmfsVolumesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryUnresolvedVmfsVolumesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse
#define SOAP_TYPE__ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse (3068)
/* ns1:ResignatureUnresolvedVmfsVolume_TaskResponse */
class SOAP_CMAC _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3068; } /* = unique id SOAP_TYPE__ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse() { _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDateTimeConfigResponse
#define SOAP_TYPE__ns1__UpdateDateTimeConfigResponse (3069)
/* ns1:UpdateDateTimeConfigResponse */
class SOAP_CMAC _ns1__UpdateDateTimeConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3069; } /* = unique id SOAP_TYPE__ns1__UpdateDateTimeConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDateTimeConfigResponse() { _ns1__UpdateDateTimeConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDateTimeConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAvailableTimeZonesResponse
#define SOAP_TYPE__ns1__QueryAvailableTimeZonesResponse (3070)
/* ns1:QueryAvailableTimeZonesResponse */
class SOAP_CMAC _ns1__QueryAvailableTimeZonesResponse
{
public:
	std::vector<ns1__HostDateTimeSystemTimeZone * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostDateTimeSystemTimeZone */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3070; } /* = unique id SOAP_TYPE__ns1__QueryAvailableTimeZonesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAvailableTimeZonesResponse() { _ns1__QueryAvailableTimeZonesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAvailableTimeZonesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryDateTimeResponse
#define SOAP_TYPE__ns1__QueryDateTimeResponse (3071)
/* ns1:QueryDateTimeResponse */
class SOAP_CMAC _ns1__QueryDateTimeResponse
{
public:
	time_t returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3071; } /* = unique id SOAP_TYPE__ns1__QueryDateTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryDateTimeResponse() { _ns1__QueryDateTimeResponse::soap_default(NULL); }
	virtual ~_ns1__QueryDateTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDateTimeResponse
#define SOAP_TYPE__ns1__UpdateDateTimeResponse (3072)
/* ns1:UpdateDateTimeResponse */
class SOAP_CMAC _ns1__UpdateDateTimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3072; } /* = unique id SOAP_TYPE__ns1__UpdateDateTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDateTimeResponse() { _ns1__UpdateDateTimeResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDateTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshDateTimeSystemResponse
#define SOAP_TYPE__ns1__RefreshDateTimeSystemResponse (3073)
/* ns1:RefreshDateTimeSystemResponse */
class SOAP_CMAC _ns1__RefreshDateTimeSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3073; } /* = unique id SOAP_TYPE__ns1__RefreshDateTimeSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshDateTimeSystemResponse() { _ns1__RefreshDateTimeSystemResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshDateTimeSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryAvailablePartitionResponse
#define SOAP_TYPE__ns1__QueryAvailablePartitionResponse (3074)
/* ns1:QueryAvailablePartitionResponse */
class SOAP_CMAC _ns1__QueryAvailablePartitionResponse
{
public:
	std::vector<ns1__HostDiagnosticPartition * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostDiagnosticPartition */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3074; } /* = unique id SOAP_TYPE__ns1__QueryAvailablePartitionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryAvailablePartitionResponse() { _ns1__QueryAvailablePartitionResponse::soap_default(NULL); }
	virtual ~_ns1__QueryAvailablePartitionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SelectActivePartitionResponse
#define SOAP_TYPE__ns1__SelectActivePartitionResponse (3075)
/* ns1:SelectActivePartitionResponse */
class SOAP_CMAC _ns1__SelectActivePartitionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3075; } /* = unique id SOAP_TYPE__ns1__SelectActivePartitionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SelectActivePartitionResponse() { _ns1__SelectActivePartitionResponse::soap_default(NULL); }
	virtual ~_ns1__SelectActivePartitionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPartitionCreateOptionsResponse
#define SOAP_TYPE__ns1__QueryPartitionCreateOptionsResponse (3076)
/* ns1:QueryPartitionCreateOptionsResponse */
class SOAP_CMAC _ns1__QueryPartitionCreateOptionsResponse
{
public:
	std::vector<ns1__HostDiagnosticPartitionCreateOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostDiagnosticPartitionCreateOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3076; } /* = unique id SOAP_TYPE__ns1__QueryPartitionCreateOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPartitionCreateOptionsResponse() { _ns1__QueryPartitionCreateOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPartitionCreateOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPartitionCreateDescResponse
#define SOAP_TYPE__ns1__QueryPartitionCreateDescResponse (3077)
/* ns1:QueryPartitionCreateDescResponse */
class SOAP_CMAC _ns1__QueryPartitionCreateDescResponse
{
public:
	class ns1__HostDiagnosticPartitionCreateDescription *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostDiagnosticPartitionCreateDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3077; } /* = unique id SOAP_TYPE__ns1__QueryPartitionCreateDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPartitionCreateDescResponse() { _ns1__QueryPartitionCreateDescResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPartitionCreateDescResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateDiagnosticPartitionResponse
#define SOAP_TYPE__ns1__CreateDiagnosticPartitionResponse (3078)
/* ns1:CreateDiagnosticPartitionResponse */
class SOAP_CMAC _ns1__CreateDiagnosticPartitionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3078; } /* = unique id SOAP_TYPE__ns1__CreateDiagnosticPartitionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateDiagnosticPartitionResponse() { _ns1__CreateDiagnosticPartitionResponse::soap_default(NULL); }
	virtual ~_ns1__CreateDiagnosticPartitionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDefaultPolicyResponse
#define SOAP_TYPE__ns1__UpdateDefaultPolicyResponse (3079)
/* ns1:UpdateDefaultPolicyResponse */
class SOAP_CMAC _ns1__UpdateDefaultPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3079; } /* = unique id SOAP_TYPE__ns1__UpdateDefaultPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDefaultPolicyResponse() { _ns1__UpdateDefaultPolicyResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDefaultPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableRulesetResponse
#define SOAP_TYPE__ns1__EnableRulesetResponse (3080)
/* ns1:EnableRulesetResponse */
class SOAP_CMAC _ns1__EnableRulesetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3080; } /* = unique id SOAP_TYPE__ns1__EnableRulesetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableRulesetResponse() { _ns1__EnableRulesetResponse::soap_default(NULL); }
	virtual ~_ns1__EnableRulesetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableRulesetResponse
#define SOAP_TYPE__ns1__DisableRulesetResponse (3081)
/* ns1:DisableRulesetResponse */
class SOAP_CMAC _ns1__DisableRulesetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3081; } /* = unique id SOAP_TYPE__ns1__DisableRulesetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableRulesetResponse() { _ns1__DisableRulesetResponse::soap_default(NULL); }
	virtual ~_ns1__DisableRulesetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshFirewallResponse
#define SOAP_TYPE__ns1__RefreshFirewallResponse (3082)
/* ns1:RefreshFirewallResponse */
class SOAP_CMAC _ns1__RefreshFirewallResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3082; } /* = unique id SOAP_TYPE__ns1__RefreshFirewallResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshFirewallResponse() { _ns1__RefreshFirewallResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshFirewallResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetFirmwareToFactoryDefaultsResponse
#define SOAP_TYPE__ns1__ResetFirmwareToFactoryDefaultsResponse (3083)
/* ns1:ResetFirmwareToFactoryDefaultsResponse */
class SOAP_CMAC _ns1__ResetFirmwareToFactoryDefaultsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3083; } /* = unique id SOAP_TYPE__ns1__ResetFirmwareToFactoryDefaultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetFirmwareToFactoryDefaultsResponse() { _ns1__ResetFirmwareToFactoryDefaultsResponse::soap_default(NULL); }
	virtual ~_ns1__ResetFirmwareToFactoryDefaultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__BackupFirmwareConfigurationResponse
#define SOAP_TYPE__ns1__BackupFirmwareConfigurationResponse (3084)
/* ns1:BackupFirmwareConfigurationResponse */
class SOAP_CMAC _ns1__BackupFirmwareConfigurationResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3084; } /* = unique id SOAP_TYPE__ns1__BackupFirmwareConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__BackupFirmwareConfigurationResponse() { _ns1__BackupFirmwareConfigurationResponse::soap_default(NULL); }
	virtual ~_ns1__BackupFirmwareConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryFirmwareConfigUploadURLResponse
#define SOAP_TYPE__ns1__QueryFirmwareConfigUploadURLResponse (3085)
/* ns1:QueryFirmwareConfigUploadURLResponse */
class SOAP_CMAC _ns1__QueryFirmwareConfigUploadURLResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3085; } /* = unique id SOAP_TYPE__ns1__QueryFirmwareConfigUploadURLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryFirmwareConfigUploadURLResponse() { _ns1__QueryFirmwareConfigUploadURLResponse::soap_default(NULL); }
	virtual ~_ns1__QueryFirmwareConfigUploadURLResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RestoreFirmwareConfigurationResponse
#define SOAP_TYPE__ns1__RestoreFirmwareConfigurationResponse (3086)
/* ns1:RestoreFirmwareConfigurationResponse */
class SOAP_CMAC _ns1__RestoreFirmwareConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3086; } /* = unique id SOAP_TYPE__ns1__RestoreFirmwareConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RestoreFirmwareConfigurationResponse() { _ns1__RestoreFirmwareConfigurationResponse::soap_default(NULL); }
	virtual ~_ns1__RestoreFirmwareConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshHealthStatusSystemResponse
#define SOAP_TYPE__ns1__RefreshHealthStatusSystemResponse (3087)
/* ns1:RefreshHealthStatusSystemResponse */
class SOAP_CMAC _ns1__RefreshHealthStatusSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3087; } /* = unique id SOAP_TYPE__ns1__RefreshHealthStatusSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshHealthStatusSystemResponse() { _ns1__RefreshHealthStatusSystemResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshHealthStatusSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetSystemHealthInfoResponse
#define SOAP_TYPE__ns1__ResetSystemHealthInfoResponse (3088)
/* ns1:ResetSystemHealthInfoResponse */
class SOAP_CMAC _ns1__ResetSystemHealthInfoResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3088; } /* = unique id SOAP_TYPE__ns1__ResetSystemHealthInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetSystemHealthInfoResponse() { _ns1__ResetSystemHealthInfoResponse::soap_default(NULL); }
	virtual ~_ns1__ResetSystemHealthInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryModulesResponse
#define SOAP_TYPE__ns1__QueryModulesResponse (3089)
/* ns1:QueryModulesResponse */
class SOAP_CMAC _ns1__QueryModulesResponse
{
public:
	std::vector<ns1__KernelModuleInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:KernelModuleInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3089; } /* = unique id SOAP_TYPE__ns1__QueryModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryModulesResponse() { _ns1__QueryModulesResponse::soap_default(NULL); }
	virtual ~_ns1__QueryModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateModuleOptionStringResponse
#define SOAP_TYPE__ns1__UpdateModuleOptionStringResponse (3090)
/* ns1:UpdateModuleOptionStringResponse */
class SOAP_CMAC _ns1__UpdateModuleOptionStringResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3090; } /* = unique id SOAP_TYPE__ns1__UpdateModuleOptionStringResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateModuleOptionStringResponse() { _ns1__UpdateModuleOptionStringResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateModuleOptionStringResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryConfiguredModuleOptionStringResponse
#define SOAP_TYPE__ns1__QueryConfiguredModuleOptionStringResponse (3091)
/* ns1:QueryConfiguredModuleOptionStringResponse */
class SOAP_CMAC _ns1__QueryConfiguredModuleOptionStringResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3091; } /* = unique id SOAP_TYPE__ns1__QueryConfiguredModuleOptionStringResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryConfiguredModuleOptionStringResponse() { _ns1__QueryConfiguredModuleOptionStringResponse::soap_default(NULL); }
	virtual ~_ns1__QueryConfiguredModuleOptionStringResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateUserResponse
#define SOAP_TYPE__ns1__CreateUserResponse (3092)
/* ns1:CreateUserResponse */
class SOAP_CMAC _ns1__CreateUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3092; } /* = unique id SOAP_TYPE__ns1__CreateUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateUserResponse() { _ns1__CreateUserResponse::soap_default(NULL); }
	virtual ~_ns1__CreateUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateUserResponse
#define SOAP_TYPE__ns1__UpdateUserResponse (3093)
/* ns1:UpdateUserResponse */
class SOAP_CMAC _ns1__UpdateUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3093; } /* = unique id SOAP_TYPE__ns1__UpdateUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateUserResponse() { _ns1__UpdateUserResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateGroupResponse
#define SOAP_TYPE__ns1__CreateGroupResponse (3094)
/* ns1:CreateGroupResponse */
class SOAP_CMAC _ns1__CreateGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3094; } /* = unique id SOAP_TYPE__ns1__CreateGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateGroupResponse() { _ns1__CreateGroupResponse::soap_default(NULL); }
	virtual ~_ns1__CreateGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveUserResponse
#define SOAP_TYPE__ns1__RemoveUserResponse (3095)
/* ns1:RemoveUserResponse */
class SOAP_CMAC _ns1__RemoveUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3095; } /* = unique id SOAP_TYPE__ns1__RemoveUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveUserResponse() { _ns1__RemoveUserResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveGroupResponse
#define SOAP_TYPE__ns1__RemoveGroupResponse (3096)
/* ns1:RemoveGroupResponse */
class SOAP_CMAC _ns1__RemoveGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3096; } /* = unique id SOAP_TYPE__ns1__RemoveGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveGroupResponse() { _ns1__RemoveGroupResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AssignUserToGroupResponse
#define SOAP_TYPE__ns1__AssignUserToGroupResponse (3097)
/* ns1:AssignUserToGroupResponse */
class SOAP_CMAC _ns1__AssignUserToGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3097; } /* = unique id SOAP_TYPE__ns1__AssignUserToGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AssignUserToGroupResponse() { _ns1__AssignUserToGroupResponse::soap_default(NULL); }
	virtual ~_ns1__AssignUserToGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnassignUserFromGroupResponse
#define SOAP_TYPE__ns1__UnassignUserFromGroupResponse (3098)
/* ns1:UnassignUserFromGroupResponse */
class SOAP_CMAC _ns1__UnassignUserFromGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3098; } /* = unique id SOAP_TYPE__ns1__UnassignUserFromGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnassignUserFromGroupResponse() { _ns1__UnassignUserFromGroupResponse::soap_default(NULL); }
	virtual ~_ns1__UnassignUserFromGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureServiceConsoleReservationResponse
#define SOAP_TYPE__ns1__ReconfigureServiceConsoleReservationResponse (3099)
/* ns1:ReconfigureServiceConsoleReservationResponse */
class SOAP_CMAC _ns1__ReconfigureServiceConsoleReservationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3099; } /* = unique id SOAP_TYPE__ns1__ReconfigureServiceConsoleReservationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureServiceConsoleReservationResponse() { _ns1__ReconfigureServiceConsoleReservationResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureServiceConsoleReservationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureVirtualMachineReservationResponse
#define SOAP_TYPE__ns1__ReconfigureVirtualMachineReservationResponse (3100)
/* ns1:ReconfigureVirtualMachineReservationResponse */
class SOAP_CMAC _ns1__ReconfigureVirtualMachineReservationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3100; } /* = unique id SOAP_TYPE__ns1__ReconfigureVirtualMachineReservationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureVirtualMachineReservationResponse() { _ns1__ReconfigureVirtualMachineReservationResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureVirtualMachineReservationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateNetworkConfigResponse
#define SOAP_TYPE__ns1__UpdateNetworkConfigResponse (3101)
/* ns1:UpdateNetworkConfigResponse */
class SOAP_CMAC _ns1__UpdateNetworkConfigResponse
{
public:
	class ns1__HostNetworkConfigResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostNetworkConfigResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3101; } /* = unique id SOAP_TYPE__ns1__UpdateNetworkConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateNetworkConfigResponse() { _ns1__UpdateNetworkConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateNetworkConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDnsConfigResponse
#define SOAP_TYPE__ns1__UpdateDnsConfigResponse (3102)
/* ns1:UpdateDnsConfigResponse */
class SOAP_CMAC _ns1__UpdateDnsConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3102; } /* = unique id SOAP_TYPE__ns1__UpdateDnsConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDnsConfigResponse() { _ns1__UpdateDnsConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDnsConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateIpRouteConfigResponse
#define SOAP_TYPE__ns1__UpdateIpRouteConfigResponse (3103)
/* ns1:UpdateIpRouteConfigResponse */
class SOAP_CMAC _ns1__UpdateIpRouteConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3103; } /* = unique id SOAP_TYPE__ns1__UpdateIpRouteConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateIpRouteConfigResponse() { _ns1__UpdateIpRouteConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateIpRouteConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateConsoleIpRouteConfigResponse
#define SOAP_TYPE__ns1__UpdateConsoleIpRouteConfigResponse (3104)
/* ns1:UpdateConsoleIpRouteConfigResponse */
class SOAP_CMAC _ns1__UpdateConsoleIpRouteConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3104; } /* = unique id SOAP_TYPE__ns1__UpdateConsoleIpRouteConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateConsoleIpRouteConfigResponse() { _ns1__UpdateConsoleIpRouteConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateConsoleIpRouteConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateIpRouteTableConfigResponse
#define SOAP_TYPE__ns1__UpdateIpRouteTableConfigResponse (3105)
/* ns1:UpdateIpRouteTableConfigResponse */
class SOAP_CMAC _ns1__UpdateIpRouteTableConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3105; } /* = unique id SOAP_TYPE__ns1__UpdateIpRouteTableConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateIpRouteTableConfigResponse() { _ns1__UpdateIpRouteTableConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateIpRouteTableConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddVirtualSwitchResponse
#define SOAP_TYPE__ns1__AddVirtualSwitchResponse (3106)
/* ns1:AddVirtualSwitchResponse */
class SOAP_CMAC _ns1__AddVirtualSwitchResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3106; } /* = unique id SOAP_TYPE__ns1__AddVirtualSwitchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddVirtualSwitchResponse() { _ns1__AddVirtualSwitchResponse::soap_default(NULL); }
	virtual ~_ns1__AddVirtualSwitchResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveVirtualSwitchResponse
#define SOAP_TYPE__ns1__RemoveVirtualSwitchResponse (3107)
/* ns1:RemoveVirtualSwitchResponse */
class SOAP_CMAC _ns1__RemoveVirtualSwitchResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3107; } /* = unique id SOAP_TYPE__ns1__RemoveVirtualSwitchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveVirtualSwitchResponse() { _ns1__RemoveVirtualSwitchResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveVirtualSwitchResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateVirtualSwitchResponse
#define SOAP_TYPE__ns1__UpdateVirtualSwitchResponse (3108)
/* ns1:UpdateVirtualSwitchResponse */
class SOAP_CMAC _ns1__UpdateVirtualSwitchResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3108; } /* = unique id SOAP_TYPE__ns1__UpdateVirtualSwitchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateVirtualSwitchResponse() { _ns1__UpdateVirtualSwitchResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateVirtualSwitchResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddPortGroupResponse
#define SOAP_TYPE__ns1__AddPortGroupResponse (3109)
/* ns1:AddPortGroupResponse */
class SOAP_CMAC _ns1__AddPortGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3109; } /* = unique id SOAP_TYPE__ns1__AddPortGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddPortGroupResponse() { _ns1__AddPortGroupResponse::soap_default(NULL); }
	virtual ~_ns1__AddPortGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemovePortGroupResponse
#define SOAP_TYPE__ns1__RemovePortGroupResponse (3110)
/* ns1:RemovePortGroupResponse */
class SOAP_CMAC _ns1__RemovePortGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3110; } /* = unique id SOAP_TYPE__ns1__RemovePortGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemovePortGroupResponse() { _ns1__RemovePortGroupResponse::soap_default(NULL); }
	virtual ~_ns1__RemovePortGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdatePortGroupResponse
#define SOAP_TYPE__ns1__UpdatePortGroupResponse (3111)
/* ns1:UpdatePortGroupResponse */
class SOAP_CMAC _ns1__UpdatePortGroupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3111; } /* = unique id SOAP_TYPE__ns1__UpdatePortGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdatePortGroupResponse() { _ns1__UpdatePortGroupResponse::soap_default(NULL); }
	virtual ~_ns1__UpdatePortGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdatePhysicalNicLinkSpeedResponse
#define SOAP_TYPE__ns1__UpdatePhysicalNicLinkSpeedResponse (3112)
/* ns1:UpdatePhysicalNicLinkSpeedResponse */
class SOAP_CMAC _ns1__UpdatePhysicalNicLinkSpeedResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3112; } /* = unique id SOAP_TYPE__ns1__UpdatePhysicalNicLinkSpeedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdatePhysicalNicLinkSpeedResponse() { _ns1__UpdatePhysicalNicLinkSpeedResponse::soap_default(NULL); }
	virtual ~_ns1__UpdatePhysicalNicLinkSpeedResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryNetworkHintResponse
#define SOAP_TYPE__ns1__QueryNetworkHintResponse (3113)
/* ns1:QueryNetworkHintResponse */
class SOAP_CMAC _ns1__QueryNetworkHintResponse
{
public:
	std::vector<ns1__PhysicalNicHintInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:PhysicalNicHintInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3113; } /* = unique id SOAP_TYPE__ns1__QueryNetworkHintResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryNetworkHintResponse() { _ns1__QueryNetworkHintResponse::soap_default(NULL); }
	virtual ~_ns1__QueryNetworkHintResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddVirtualNicResponse
#define SOAP_TYPE__ns1__AddVirtualNicResponse (3114)
/* ns1:AddVirtualNicResponse */
class SOAP_CMAC _ns1__AddVirtualNicResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3114; } /* = unique id SOAP_TYPE__ns1__AddVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddVirtualNicResponse() { _ns1__AddVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__AddVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveVirtualNicResponse
#define SOAP_TYPE__ns1__RemoveVirtualNicResponse (3115)
/* ns1:RemoveVirtualNicResponse */
class SOAP_CMAC _ns1__RemoveVirtualNicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3115; } /* = unique id SOAP_TYPE__ns1__RemoveVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveVirtualNicResponse() { _ns1__RemoveVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateVirtualNicResponse
#define SOAP_TYPE__ns1__UpdateVirtualNicResponse (3116)
/* ns1:UpdateVirtualNicResponse */
class SOAP_CMAC _ns1__UpdateVirtualNicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3116; } /* = unique id SOAP_TYPE__ns1__UpdateVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateVirtualNicResponse() { _ns1__UpdateVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddServiceConsoleVirtualNicResponse
#define SOAP_TYPE__ns1__AddServiceConsoleVirtualNicResponse (3117)
/* ns1:AddServiceConsoleVirtualNicResponse */
class SOAP_CMAC _ns1__AddServiceConsoleVirtualNicResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3117; } /* = unique id SOAP_TYPE__ns1__AddServiceConsoleVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddServiceConsoleVirtualNicResponse() { _ns1__AddServiceConsoleVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__AddServiceConsoleVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveServiceConsoleVirtualNicResponse
#define SOAP_TYPE__ns1__RemoveServiceConsoleVirtualNicResponse (3118)
/* ns1:RemoveServiceConsoleVirtualNicResponse */
class SOAP_CMAC _ns1__RemoveServiceConsoleVirtualNicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3118; } /* = unique id SOAP_TYPE__ns1__RemoveServiceConsoleVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveServiceConsoleVirtualNicResponse() { _ns1__RemoveServiceConsoleVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveServiceConsoleVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateServiceConsoleVirtualNicResponse
#define SOAP_TYPE__ns1__UpdateServiceConsoleVirtualNicResponse (3119)
/* ns1:UpdateServiceConsoleVirtualNicResponse */
class SOAP_CMAC _ns1__UpdateServiceConsoleVirtualNicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3119; } /* = unique id SOAP_TYPE__ns1__UpdateServiceConsoleVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateServiceConsoleVirtualNicResponse() { _ns1__UpdateServiceConsoleVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateServiceConsoleVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RestartServiceConsoleVirtualNicResponse
#define SOAP_TYPE__ns1__RestartServiceConsoleVirtualNicResponse (3120)
/* ns1:RestartServiceConsoleVirtualNicResponse */
class SOAP_CMAC _ns1__RestartServiceConsoleVirtualNicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3120; } /* = unique id SOAP_TYPE__ns1__RestartServiceConsoleVirtualNicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RestartServiceConsoleVirtualNicResponse() { _ns1__RestartServiceConsoleVirtualNicResponse::soap_default(NULL); }
	virtual ~_ns1__RestartServiceConsoleVirtualNicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshNetworkSystemResponse
#define SOAP_TYPE__ns1__RefreshNetworkSystemResponse (3121)
/* ns1:RefreshNetworkSystemResponse */
class SOAP_CMAC _ns1__RefreshNetworkSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3121; } /* = unique id SOAP_TYPE__ns1__RefreshNetworkSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshNetworkSystemResponse() { _ns1__RefreshNetworkSystemResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshNetworkSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckHostPatch_USCORETaskResponse (3122)
/* ns1:CheckHostPatch_TaskResponse */
class SOAP_CMAC _ns1__CheckHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3122; } /* = unique id SOAP_TYPE__ns1__CheckHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckHostPatch_USCORETaskResponse() { _ns1__CheckHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ScanHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__ScanHostPatch_USCORETaskResponse (3123)
/* ns1:ScanHostPatch_TaskResponse */
class SOAP_CMAC _ns1__ScanHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3123; } /* = unique id SOAP_TYPE__ns1__ScanHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ScanHostPatch_USCORETaskResponse() { _ns1__ScanHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ScanHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ScanHostPatchV2_USCORETaskResponse
#define SOAP_TYPE__ns1__ScanHostPatchV2_USCORETaskResponse (3124)
/* ns1:ScanHostPatchV2_TaskResponse */
class SOAP_CMAC _ns1__ScanHostPatchV2_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3124; } /* = unique id SOAP_TYPE__ns1__ScanHostPatchV2_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ScanHostPatchV2_USCORETaskResponse() { _ns1__ScanHostPatchV2_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ScanHostPatchV2_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StageHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__StageHostPatch_USCORETaskResponse (3125)
/* ns1:StageHostPatch_TaskResponse */
class SOAP_CMAC _ns1__StageHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3125; } /* = unique id SOAP_TYPE__ns1__StageHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StageHostPatch_USCORETaskResponse() { _ns1__StageHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__StageHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InstallHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__InstallHostPatch_USCORETaskResponse (3126)
/* ns1:InstallHostPatch_TaskResponse */
class SOAP_CMAC _ns1__InstallHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3126; } /* = unique id SOAP_TYPE__ns1__InstallHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InstallHostPatch_USCORETaskResponse() { _ns1__InstallHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__InstallHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__InstallHostPatchV2_USCORETaskResponse
#define SOAP_TYPE__ns1__InstallHostPatchV2_USCORETaskResponse (3127)
/* ns1:InstallHostPatchV2_TaskResponse */
class SOAP_CMAC _ns1__InstallHostPatchV2_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3127; } /* = unique id SOAP_TYPE__ns1__InstallHostPatchV2_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__InstallHostPatchV2_USCORETaskResponse() { _ns1__InstallHostPatchV2_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__InstallHostPatchV2_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UninstallHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__UninstallHostPatch_USCORETaskResponse (3128)
/* ns1:UninstallHostPatch_TaskResponse */
class SOAP_CMAC _ns1__UninstallHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3128; } /* = unique id SOAP_TYPE__ns1__UninstallHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UninstallHostPatch_USCORETaskResponse() { _ns1__UninstallHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__UninstallHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryHostPatch_USCORETaskResponse
#define SOAP_TYPE__ns1__QueryHostPatch_USCORETaskResponse (3129)
/* ns1:QueryHostPatch_TaskResponse */
class SOAP_CMAC _ns1__QueryHostPatch_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3129; } /* = unique id SOAP_TYPE__ns1__QueryHostPatch_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryHostPatch_USCORETaskResponse() { _ns1__QueryHostPatch_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__QueryHostPatch_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshResponse
#define SOAP_TYPE__ns1__RefreshResponse (3130)
/* ns1:RefreshResponse */
class SOAP_CMAC _ns1__RefreshResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3130; } /* = unique id SOAP_TYPE__ns1__RefreshResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshResponse() { _ns1__RefreshResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdatePassthruConfigResponse
#define SOAP_TYPE__ns1__UpdatePassthruConfigResponse (3131)
/* ns1:UpdatePassthruConfigResponse */
class SOAP_CMAC _ns1__UpdatePassthruConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3131; } /* = unique id SOAP_TYPE__ns1__UpdatePassthruConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdatePassthruConfigResponse() { _ns1__UpdatePassthruConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdatePassthruConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ConfigurePowerPolicyResponse
#define SOAP_TYPE__ns1__ConfigurePowerPolicyResponse (3132)
/* ns1:ConfigurePowerPolicyResponse */
class SOAP_CMAC _ns1__ConfigurePowerPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3132; } /* = unique id SOAP_TYPE__ns1__ConfigurePowerPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ConfigurePowerPolicyResponse() { _ns1__ConfigurePowerPolicyResponse::soap_default(NULL); }
	virtual ~_ns1__ConfigurePowerPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateServicePolicyResponse
#define SOAP_TYPE__ns1__UpdateServicePolicyResponse (3133)
/* ns1:UpdateServicePolicyResponse */
class SOAP_CMAC _ns1__UpdateServicePolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3133; } /* = unique id SOAP_TYPE__ns1__UpdateServicePolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateServicePolicyResponse() { _ns1__UpdateServicePolicyResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateServicePolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartServiceResponse
#define SOAP_TYPE__ns1__StartServiceResponse (3134)
/* ns1:StartServiceResponse */
class SOAP_CMAC _ns1__StartServiceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3134; } /* = unique id SOAP_TYPE__ns1__StartServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartServiceResponse() { _ns1__StartServiceResponse::soap_default(NULL); }
	virtual ~_ns1__StartServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopServiceResponse
#define SOAP_TYPE__ns1__StopServiceResponse (3135)
/* ns1:StopServiceResponse */
class SOAP_CMAC _ns1__StopServiceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3135; } /* = unique id SOAP_TYPE__ns1__StopServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopServiceResponse() { _ns1__StopServiceResponse::soap_default(NULL); }
	virtual ~_ns1__StopServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RestartServiceResponse
#define SOAP_TYPE__ns1__RestartServiceResponse (3136)
/* ns1:RestartServiceResponse */
class SOAP_CMAC _ns1__RestartServiceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3136; } /* = unique id SOAP_TYPE__ns1__RestartServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RestartServiceResponse() { _ns1__RestartServiceResponse::soap_default(NULL); }
	virtual ~_ns1__RestartServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UninstallServiceResponse
#define SOAP_TYPE__ns1__UninstallServiceResponse (3137)
/* ns1:UninstallServiceResponse */
class SOAP_CMAC _ns1__UninstallServiceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3137; } /* = unique id SOAP_TYPE__ns1__UninstallServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UninstallServiceResponse() { _ns1__UninstallServiceResponse::soap_default(NULL); }
	virtual ~_ns1__UninstallServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshServicesResponse
#define SOAP_TYPE__ns1__RefreshServicesResponse (3138)
/* ns1:RefreshServicesResponse */
class SOAP_CMAC _ns1__RefreshServicesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3138; } /* = unique id SOAP_TYPE__ns1__RefreshServicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshServicesResponse() { _ns1__RefreshServicesResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshServicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureSnmpAgentResponse
#define SOAP_TYPE__ns1__ReconfigureSnmpAgentResponse (3139)
/* ns1:ReconfigureSnmpAgentResponse */
class SOAP_CMAC _ns1__ReconfigureSnmpAgentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3139; } /* = unique id SOAP_TYPE__ns1__ReconfigureSnmpAgentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureSnmpAgentResponse() { _ns1__ReconfigureSnmpAgentResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureSnmpAgentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SendTestNotificationResponse
#define SOAP_TYPE__ns1__SendTestNotificationResponse (3140)
/* ns1:SendTestNotificationResponse */
class SOAP_CMAC _ns1__SendTestNotificationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3140; } /* = unique id SOAP_TYPE__ns1__SendTestNotificationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SendTestNotificationResponse() { _ns1__SendTestNotificationResponse::soap_default(NULL); }
	virtual ~_ns1__SendTestNotificationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveDiskPartitionInfoResponse
#define SOAP_TYPE__ns1__RetrieveDiskPartitionInfoResponse (3141)
/* ns1:RetrieveDiskPartitionInfoResponse */
class SOAP_CMAC _ns1__RetrieveDiskPartitionInfoResponse
{
public:
	std::vector<ns1__HostDiskPartitionInfo * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostDiskPartitionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3141; } /* = unique id SOAP_TYPE__ns1__RetrieveDiskPartitionInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveDiskPartitionInfoResponse() { _ns1__RetrieveDiskPartitionInfoResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveDiskPartitionInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ComputeDiskPartitionInfoResponse
#define SOAP_TYPE__ns1__ComputeDiskPartitionInfoResponse (3142)
/* ns1:ComputeDiskPartitionInfoResponse */
class SOAP_CMAC _ns1__ComputeDiskPartitionInfoResponse
{
public:
	ns1__HostDiskPartitionInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostDiskPartitionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3142; } /* = unique id SOAP_TYPE__ns1__ComputeDiskPartitionInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ComputeDiskPartitionInfoResponse() { _ns1__ComputeDiskPartitionInfoResponse::soap_default(NULL); }
	virtual ~_ns1__ComputeDiskPartitionInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ComputeDiskPartitionInfoForResizeResponse
#define SOAP_TYPE__ns1__ComputeDiskPartitionInfoForResizeResponse (3143)
/* ns1:ComputeDiskPartitionInfoForResizeResponse */
class SOAP_CMAC _ns1__ComputeDiskPartitionInfoForResizeResponse
{
public:
	ns1__HostDiskPartitionInfo *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostDiskPartitionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3143; } /* = unique id SOAP_TYPE__ns1__ComputeDiskPartitionInfoForResizeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ComputeDiskPartitionInfoForResizeResponse() { _ns1__ComputeDiskPartitionInfoForResizeResponse::soap_default(NULL); }
	virtual ~_ns1__ComputeDiskPartitionInfoForResizeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateDiskPartitionsResponse
#define SOAP_TYPE__ns1__UpdateDiskPartitionsResponse (3144)
/* ns1:UpdateDiskPartitionsResponse */
class SOAP_CMAC _ns1__UpdateDiskPartitionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3144; } /* = unique id SOAP_TYPE__ns1__UpdateDiskPartitionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateDiskPartitionsResponse() { _ns1__UpdateDiskPartitionsResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateDiskPartitionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FormatVmfsResponse
#define SOAP_TYPE__ns1__FormatVmfsResponse (3145)
/* ns1:FormatVmfsResponse */
class SOAP_CMAC _ns1__FormatVmfsResponse
{
public:
	class ns1__HostVmfsVolume *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostVmfsVolume */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3145; } /* = unique id SOAP_TYPE__ns1__FormatVmfsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FormatVmfsResponse() { _ns1__FormatVmfsResponse::soap_default(NULL); }
	virtual ~_ns1__FormatVmfsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RescanVmfsResponse
#define SOAP_TYPE__ns1__RescanVmfsResponse (3146)
/* ns1:RescanVmfsResponse */
class SOAP_CMAC _ns1__RescanVmfsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3146; } /* = unique id SOAP_TYPE__ns1__RescanVmfsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RescanVmfsResponse() { _ns1__RescanVmfsResponse::soap_default(NULL); }
	virtual ~_ns1__RescanVmfsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AttachVmfsExtentResponse
#define SOAP_TYPE__ns1__AttachVmfsExtentResponse (3147)
/* ns1:AttachVmfsExtentResponse */
class SOAP_CMAC _ns1__AttachVmfsExtentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3147; } /* = unique id SOAP_TYPE__ns1__AttachVmfsExtentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AttachVmfsExtentResponse() { _ns1__AttachVmfsExtentResponse::soap_default(NULL); }
	virtual ~_ns1__AttachVmfsExtentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExpandVmfsExtentResponse
#define SOAP_TYPE__ns1__ExpandVmfsExtentResponse (3148)
/* ns1:ExpandVmfsExtentResponse */
class SOAP_CMAC _ns1__ExpandVmfsExtentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3148; } /* = unique id SOAP_TYPE__ns1__ExpandVmfsExtentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExpandVmfsExtentResponse() { _ns1__ExpandVmfsExtentResponse::soap_default(NULL); }
	virtual ~_ns1__ExpandVmfsExtentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpgradeVmfsResponse
#define SOAP_TYPE__ns1__UpgradeVmfsResponse (3149)
/* ns1:UpgradeVmfsResponse */
class SOAP_CMAC _ns1__UpgradeVmfsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3149; } /* = unique id SOAP_TYPE__ns1__UpgradeVmfsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpgradeVmfsResponse() { _ns1__UpgradeVmfsResponse::soap_default(NULL); }
	virtual ~_ns1__UpgradeVmfsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpgradeVmLayoutResponse
#define SOAP_TYPE__ns1__UpgradeVmLayoutResponse (3150)
/* ns1:UpgradeVmLayoutResponse */
class SOAP_CMAC _ns1__UpgradeVmLayoutResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3150; } /* = unique id SOAP_TYPE__ns1__UpgradeVmLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpgradeVmLayoutResponse() { _ns1__UpgradeVmLayoutResponse::soap_default(NULL); }
	virtual ~_ns1__UpgradeVmLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumeResponse
#define SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumeResponse (3151)
/* ns1:QueryUnresolvedVmfsVolumeResponse */
class SOAP_CMAC _ns1__QueryUnresolvedVmfsVolumeResponse
{
public:
	std::vector<ns1__HostUnresolvedVmfsVolume * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostUnresolvedVmfsVolume */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3151; } /* = unique id SOAP_TYPE__ns1__QueryUnresolvedVmfsVolumeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUnresolvedVmfsVolumeResponse() { _ns1__QueryUnresolvedVmfsVolumeResponse::soap_default(NULL); }
	virtual ~_ns1__QueryUnresolvedVmfsVolumeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResolveMultipleUnresolvedVmfsVolumesResponse
#define SOAP_TYPE__ns1__ResolveMultipleUnresolvedVmfsVolumesResponse (3152)
/* ns1:ResolveMultipleUnresolvedVmfsVolumesResponse */
class SOAP_CMAC _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse
{
public:
	std::vector<ns1__HostUnresolvedVmfsResolutionResult * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostUnresolvedVmfsResolutionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3152; } /* = unique id SOAP_TYPE__ns1__ResolveMultipleUnresolvedVmfsVolumesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse() { _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse::soap_default(NULL); }
	virtual ~_ns1__ResolveMultipleUnresolvedVmfsVolumesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UnmountForceMountedVmfsVolumeResponse
#define SOAP_TYPE__ns1__UnmountForceMountedVmfsVolumeResponse (3153)
/* ns1:UnmountForceMountedVmfsVolumeResponse */
class SOAP_CMAC _ns1__UnmountForceMountedVmfsVolumeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3153; } /* = unique id SOAP_TYPE__ns1__UnmountForceMountedVmfsVolumeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UnmountForceMountedVmfsVolumeResponse() { _ns1__UnmountForceMountedVmfsVolumeResponse::soap_default(NULL); }
	virtual ~_ns1__UnmountForceMountedVmfsVolumeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RescanHbaResponse
#define SOAP_TYPE__ns1__RescanHbaResponse (3154)
/* ns1:RescanHbaResponse */
class SOAP_CMAC _ns1__RescanHbaResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3154; } /* = unique id SOAP_TYPE__ns1__RescanHbaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RescanHbaResponse() { _ns1__RescanHbaResponse::soap_default(NULL); }
	virtual ~_ns1__RescanHbaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RescanAllHbaResponse
#define SOAP_TYPE__ns1__RescanAllHbaResponse (3155)
/* ns1:RescanAllHbaResponse */
class SOAP_CMAC _ns1__RescanAllHbaResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3155; } /* = unique id SOAP_TYPE__ns1__RescanAllHbaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RescanAllHbaResponse() { _ns1__RescanAllHbaResponse::soap_default(NULL); }
	virtual ~_ns1__RescanAllHbaResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateSoftwareInternetScsiEnabledResponse
#define SOAP_TYPE__ns1__UpdateSoftwareInternetScsiEnabledResponse (3156)
/* ns1:UpdateSoftwareInternetScsiEnabledResponse */
class SOAP_CMAC _ns1__UpdateSoftwareInternetScsiEnabledResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3156; } /* = unique id SOAP_TYPE__ns1__UpdateSoftwareInternetScsiEnabledResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateSoftwareInternetScsiEnabledResponse() { _ns1__UpdateSoftwareInternetScsiEnabledResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateSoftwareInternetScsiEnabledResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiDiscoveryPropertiesResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiDiscoveryPropertiesResponse (3157)
/* ns1:UpdateInternetScsiDiscoveryPropertiesResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiDiscoveryPropertiesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3157; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiDiscoveryPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiDiscoveryPropertiesResponse() { _ns1__UpdateInternetScsiDiscoveryPropertiesResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiDiscoveryPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiAuthenticationPropertiesResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiAuthenticationPropertiesResponse (3158)
/* ns1:UpdateInternetScsiAuthenticationPropertiesResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiAuthenticationPropertiesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3158; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiAuthenticationPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiAuthenticationPropertiesResponse() { _ns1__UpdateInternetScsiAuthenticationPropertiesResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiAuthenticationPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiDigestPropertiesResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiDigestPropertiesResponse (3159)
/* ns1:UpdateInternetScsiDigestPropertiesResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiDigestPropertiesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3159; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiDigestPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiDigestPropertiesResponse() { _ns1__UpdateInternetScsiDigestPropertiesResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiDigestPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiAdvancedOptionsResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiAdvancedOptionsResponse (3160)
/* ns1:UpdateInternetScsiAdvancedOptionsResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiAdvancedOptionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3160; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiAdvancedOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiAdvancedOptionsResponse() { _ns1__UpdateInternetScsiAdvancedOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiAdvancedOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiIPPropertiesResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiIPPropertiesResponse (3161)
/* ns1:UpdateInternetScsiIPPropertiesResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiIPPropertiesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3161; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiIPPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiIPPropertiesResponse() { _ns1__UpdateInternetScsiIPPropertiesResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiIPPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiNameResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiNameResponse (3162)
/* ns1:UpdateInternetScsiNameResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiNameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3162; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiNameResponse() { _ns1__UpdateInternetScsiNameResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateInternetScsiAliasResponse
#define SOAP_TYPE__ns1__UpdateInternetScsiAliasResponse (3163)
/* ns1:UpdateInternetScsiAliasResponse */
class SOAP_CMAC _ns1__UpdateInternetScsiAliasResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3163; } /* = unique id SOAP_TYPE__ns1__UpdateInternetScsiAliasResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateInternetScsiAliasResponse() { _ns1__UpdateInternetScsiAliasResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateInternetScsiAliasResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddInternetScsiSendTargetsResponse
#define SOAP_TYPE__ns1__AddInternetScsiSendTargetsResponse (3164)
/* ns1:AddInternetScsiSendTargetsResponse */
class SOAP_CMAC _ns1__AddInternetScsiSendTargetsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3164; } /* = unique id SOAP_TYPE__ns1__AddInternetScsiSendTargetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddInternetScsiSendTargetsResponse() { _ns1__AddInternetScsiSendTargetsResponse::soap_default(NULL); }
	virtual ~_ns1__AddInternetScsiSendTargetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveInternetScsiSendTargetsResponse
#define SOAP_TYPE__ns1__RemoveInternetScsiSendTargetsResponse (3165)
/* ns1:RemoveInternetScsiSendTargetsResponse */
class SOAP_CMAC _ns1__RemoveInternetScsiSendTargetsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3165; } /* = unique id SOAP_TYPE__ns1__RemoveInternetScsiSendTargetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveInternetScsiSendTargetsResponse() { _ns1__RemoveInternetScsiSendTargetsResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveInternetScsiSendTargetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AddInternetScsiStaticTargetsResponse
#define SOAP_TYPE__ns1__AddInternetScsiStaticTargetsResponse (3166)
/* ns1:AddInternetScsiStaticTargetsResponse */
class SOAP_CMAC _ns1__AddInternetScsiStaticTargetsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3166; } /* = unique id SOAP_TYPE__ns1__AddInternetScsiStaticTargetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AddInternetScsiStaticTargetsResponse() { _ns1__AddInternetScsiStaticTargetsResponse::soap_default(NULL); }
	virtual ~_ns1__AddInternetScsiStaticTargetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveInternetScsiStaticTargetsResponse
#define SOAP_TYPE__ns1__RemoveInternetScsiStaticTargetsResponse (3167)
/* ns1:RemoveInternetScsiStaticTargetsResponse */
class SOAP_CMAC _ns1__RemoveInternetScsiStaticTargetsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3167; } /* = unique id SOAP_TYPE__ns1__RemoveInternetScsiStaticTargetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveInternetScsiStaticTargetsResponse() { _ns1__RemoveInternetScsiStaticTargetsResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveInternetScsiStaticTargetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__EnableMultipathPathResponse
#define SOAP_TYPE__ns1__EnableMultipathPathResponse (3168)
/* ns1:EnableMultipathPathResponse */
class SOAP_CMAC _ns1__EnableMultipathPathResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3168; } /* = unique id SOAP_TYPE__ns1__EnableMultipathPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__EnableMultipathPathResponse() { _ns1__EnableMultipathPathResponse::soap_default(NULL); }
	virtual ~_ns1__EnableMultipathPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DisableMultipathPathResponse
#define SOAP_TYPE__ns1__DisableMultipathPathResponse (3169)
/* ns1:DisableMultipathPathResponse */
class SOAP_CMAC _ns1__DisableMultipathPathResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3169; } /* = unique id SOAP_TYPE__ns1__DisableMultipathPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DisableMultipathPathResponse() { _ns1__DisableMultipathPathResponse::soap_default(NULL); }
	virtual ~_ns1__DisableMultipathPathResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetMultipathLunPolicyResponse
#define SOAP_TYPE__ns1__SetMultipathLunPolicyResponse (3170)
/* ns1:SetMultipathLunPolicyResponse */
class SOAP_CMAC _ns1__SetMultipathLunPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3170; } /* = unique id SOAP_TYPE__ns1__SetMultipathLunPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetMultipathLunPolicyResponse() { _ns1__SetMultipathLunPolicyResponse::soap_default(NULL); }
	virtual ~_ns1__SetMultipathLunPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPathSelectionPolicyOptionsResponse
#define SOAP_TYPE__ns1__QueryPathSelectionPolicyOptionsResponse (3171)
/* ns1:QueryPathSelectionPolicyOptionsResponse */
class SOAP_CMAC _ns1__QueryPathSelectionPolicyOptionsResponse
{
public:
	std::vector<ns1__HostPathSelectionPolicyOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostPathSelectionPolicyOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3171; } /* = unique id SOAP_TYPE__ns1__QueryPathSelectionPolicyOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPathSelectionPolicyOptionsResponse() { _ns1__QueryPathSelectionPolicyOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPathSelectionPolicyOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryStorageArrayTypePolicyOptionsResponse
#define SOAP_TYPE__ns1__QueryStorageArrayTypePolicyOptionsResponse (3172)
/* ns1:QueryStorageArrayTypePolicyOptionsResponse */
class SOAP_CMAC _ns1__QueryStorageArrayTypePolicyOptionsResponse
{
public:
	std::vector<ns1__HostStorageArrayTypePolicyOption * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:HostStorageArrayTypePolicyOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3172; } /* = unique id SOAP_TYPE__ns1__QueryStorageArrayTypePolicyOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryStorageArrayTypePolicyOptionsResponse() { _ns1__QueryStorageArrayTypePolicyOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryStorageArrayTypePolicyOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateScsiLunDisplayNameResponse
#define SOAP_TYPE__ns1__UpdateScsiLunDisplayNameResponse (3173)
/* ns1:UpdateScsiLunDisplayNameResponse */
class SOAP_CMAC _ns1__UpdateScsiLunDisplayNameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3173; } /* = unique id SOAP_TYPE__ns1__UpdateScsiLunDisplayNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateScsiLunDisplayNameResponse() { _ns1__UpdateScsiLunDisplayNameResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateScsiLunDisplayNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RefreshStorageSystemResponse
#define SOAP_TYPE__ns1__RefreshStorageSystemResponse (3174)
/* ns1:RefreshStorageSystemResponse */
class SOAP_CMAC _ns1__RefreshStorageSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3174; } /* = unique id SOAP_TYPE__ns1__RefreshStorageSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RefreshStorageSystemResponse() { _ns1__RefreshStorageSystemResponse::soap_default(NULL); }
	virtual ~_ns1__RefreshStorageSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateIpConfigResponse
#define SOAP_TYPE__ns1__UpdateIpConfigResponse (3175)
/* ns1:UpdateIpConfigResponse */
class SOAP_CMAC _ns1__UpdateIpConfigResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3175; } /* = unique id SOAP_TYPE__ns1__UpdateIpConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateIpConfigResponse() { _ns1__UpdateIpConfigResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateIpConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SelectVnicResponse
#define SOAP_TYPE__ns1__SelectVnicResponse (3176)
/* ns1:SelectVnicResponse */
class SOAP_CMAC _ns1__SelectVnicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3176; } /* = unique id SOAP_TYPE__ns1__SelectVnicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SelectVnicResponse() { _ns1__SelectVnicResponse::soap_default(NULL); }
	virtual ~_ns1__SelectVnicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeselectVnicResponse
#define SOAP_TYPE__ns1__DeselectVnicResponse (3177)
/* ns1:DeselectVnicResponse */
class SOAP_CMAC _ns1__DeselectVnicResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3177; } /* = unique id SOAP_TYPE__ns1__DeselectVnicResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeselectVnicResponse() { _ns1__DeselectVnicResponse::soap_default(NULL); }
	virtual ~_ns1__DeselectVnicResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryNetConfigResponse
#define SOAP_TYPE__ns1__QueryNetConfigResponse (3178)
/* ns1:QueryNetConfigResponse */
class SOAP_CMAC _ns1__QueryNetConfigResponse
{
public:
	ns1__VirtualNicManagerNetConfig *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:VirtualNicManagerNetConfig */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3178; } /* = unique id SOAP_TYPE__ns1__QueryNetConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryNetConfigResponse() { _ns1__QueryNetConfigResponse::soap_default(NULL); }
	virtual ~_ns1__QueryNetConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SelectVnicForNicTypeResponse
#define SOAP_TYPE__ns1__SelectVnicForNicTypeResponse (3179)
/* ns1:SelectVnicForNicTypeResponse */
class SOAP_CMAC _ns1__SelectVnicForNicTypeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3179; } /* = unique id SOAP_TYPE__ns1__SelectVnicForNicTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SelectVnicForNicTypeResponse() { _ns1__SelectVnicForNicTypeResponse::soap_default(NULL); }
	virtual ~_ns1__SelectVnicForNicTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DeselectVnicForNicTypeResponse
#define SOAP_TYPE__ns1__DeselectVnicForNicTypeResponse (3180)
/* ns1:DeselectVnicForNicTypeResponse */
class SOAP_CMAC _ns1__DeselectVnicForNicTypeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3180; } /* = unique id SOAP_TYPE__ns1__DeselectVnicForNicTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeselectVnicForNicTypeResponse() { _ns1__DeselectVnicForNicTypeResponse::soap_default(NULL); }
	virtual ~_ns1__DeselectVnicForNicTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryOptionsResponse
#define SOAP_TYPE__ns1__QueryOptionsResponse (3181)
/* ns1:QueryOptionsResponse */
class SOAP_CMAC _ns1__QueryOptionsResponse
{
public:
	std::vector<ns1__OptionValue * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:OptionValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3181; } /* = unique id SOAP_TYPE__ns1__QueryOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryOptionsResponse() { _ns1__QueryOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__QueryOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateOptionsResponse
#define SOAP_TYPE__ns1__UpdateOptionsResponse (3182)
/* ns1:UpdateOptionsResponse */
class SOAP_CMAC _ns1__UpdateOptionsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3182; } /* = unique id SOAP_TYPE__ns1__UpdateOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateOptionsResponse() { _ns1__UpdateOptionsResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckCompliance_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckCompliance_USCORETaskResponse (3183)
/* ns1:CheckCompliance_TaskResponse */
class SOAP_CMAC _ns1__CheckCompliance_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3183; } /* = unique id SOAP_TYPE__ns1__CheckCompliance_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckCompliance_USCORETaskResponse() { _ns1__CheckCompliance_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckCompliance_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryComplianceStatusResponse
#define SOAP_TYPE__ns1__QueryComplianceStatusResponse (3184)
/* ns1:QueryComplianceStatusResponse */
class SOAP_CMAC _ns1__QueryComplianceStatusResponse
{
public:
	std::vector<ns1__ComplianceResult * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ComplianceResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3184; } /* = unique id SOAP_TYPE__ns1__QueryComplianceStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryComplianceStatusResponse() { _ns1__QueryComplianceStatusResponse::soap_default(NULL); }
	virtual ~_ns1__QueryComplianceStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ClearComplianceStatusResponse
#define SOAP_TYPE__ns1__ClearComplianceStatusResponse (3185)
/* ns1:ClearComplianceStatusResponse */
class SOAP_CMAC _ns1__ClearComplianceStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3185; } /* = unique id SOAP_TYPE__ns1__ClearComplianceStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ClearComplianceStatusResponse() { _ns1__ClearComplianceStatusResponse::soap_default(NULL); }
	virtual ~_ns1__ClearComplianceStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryExpressionMetadataResponse
#define SOAP_TYPE__ns1__QueryExpressionMetadataResponse (3186)
/* ns1:QueryExpressionMetadataResponse */
class SOAP_CMAC _ns1__QueryExpressionMetadataResponse
{
public:
	std::vector<ns1__ProfileExpressionMetadata * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProfileExpressionMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3186; } /* = unique id SOAP_TYPE__ns1__QueryExpressionMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryExpressionMetadataResponse() { _ns1__QueryExpressionMetadataResponse::soap_default(NULL); }
	virtual ~_ns1__QueryExpressionMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyProfileResponse
#define SOAP_TYPE__ns1__DestroyProfileResponse (3187)
/* ns1:DestroyProfileResponse */
class SOAP_CMAC _ns1__DestroyProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3187; } /* = unique id SOAP_TYPE__ns1__DestroyProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyProfileResponse() { _ns1__DestroyProfileResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__AssociateProfileResponse
#define SOAP_TYPE__ns1__AssociateProfileResponse (3188)
/* ns1:AssociateProfileResponse */
class SOAP_CMAC _ns1__AssociateProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3188; } /* = unique id SOAP_TYPE__ns1__AssociateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__AssociateProfileResponse() { _ns1__AssociateProfileResponse::soap_default(NULL); }
	virtual ~_ns1__AssociateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DissociateProfileResponse
#define SOAP_TYPE__ns1__DissociateProfileResponse (3189)
/* ns1:DissociateProfileResponse */
class SOAP_CMAC _ns1__DissociateProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3189; } /* = unique id SOAP_TYPE__ns1__DissociateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DissociateProfileResponse() { _ns1__DissociateProfileResponse::soap_default(NULL); }
	virtual ~_ns1__DissociateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckProfileCompliance_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckProfileCompliance_USCORETaskResponse (3190)
/* ns1:CheckProfileCompliance_TaskResponse */
class SOAP_CMAC _ns1__CheckProfileCompliance_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3190; } /* = unique id SOAP_TYPE__ns1__CheckProfileCompliance_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckProfileCompliance_USCORETaskResponse() { _ns1__CheckProfileCompliance_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckProfileCompliance_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExportProfileResponse
#define SOAP_TYPE__ns1__ExportProfileResponse (3191)
/* ns1:ExportProfileResponse */
class SOAP_CMAC _ns1__ExportProfileResponse
{
public:
	std::string returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3191; } /* = unique id SOAP_TYPE__ns1__ExportProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExportProfileResponse() { _ns1__ExportProfileResponse::soap_default(NULL); }
	virtual ~_ns1__ExportProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateProfileResponse
#define SOAP_TYPE__ns1__CreateProfileResponse (3192)
/* ns1:CreateProfileResponse */
class SOAP_CMAC _ns1__CreateProfileResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3192; } /* = unique id SOAP_TYPE__ns1__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateProfileResponse() { _ns1__CreateProfileResponse::soap_default(NULL); }
	virtual ~_ns1__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryPolicyMetadataResponse
#define SOAP_TYPE__ns1__QueryPolicyMetadataResponse (3193)
/* ns1:QueryPolicyMetadataResponse */
class SOAP_CMAC _ns1__QueryPolicyMetadataResponse
{
public:
	std::vector<ns1__ProfilePolicyMetadata * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProfilePolicyMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3193; } /* = unique id SOAP_TYPE__ns1__QueryPolicyMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryPolicyMetadataResponse() { _ns1__QueryPolicyMetadataResponse::soap_default(NULL); }
	virtual ~_ns1__QueryPolicyMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__FindAssociatedProfileResponse
#define SOAP_TYPE__ns1__FindAssociatedProfileResponse (3194)
/* ns1:FindAssociatedProfileResponse */
class SOAP_CMAC _ns1__FindAssociatedProfileResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3194; } /* = unique id SOAP_TYPE__ns1__FindAssociatedProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__FindAssociatedProfileResponse() { _ns1__FindAssociatedProfileResponse::soap_default(NULL); }
	virtual ~_ns1__FindAssociatedProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateClusterProfileResponse
#define SOAP_TYPE__ns1__UpdateClusterProfileResponse (3195)
/* ns1:UpdateClusterProfileResponse */
class SOAP_CMAC _ns1__UpdateClusterProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3195; } /* = unique id SOAP_TYPE__ns1__UpdateClusterProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateClusterProfileResponse() { _ns1__UpdateClusterProfileResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateClusterProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateReferenceHostResponse
#define SOAP_TYPE__ns1__UpdateReferenceHostResponse (3196)
/* ns1:UpdateReferenceHostResponse */
class SOAP_CMAC _ns1__UpdateReferenceHostResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3196; } /* = unique id SOAP_TYPE__ns1__UpdateReferenceHostResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateReferenceHostResponse() { _ns1__UpdateReferenceHostResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateReferenceHostResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__UpdateHostProfileResponse
#define SOAP_TYPE__ns1__UpdateHostProfileResponse (3197)
/* ns1:UpdateHostProfileResponse */
class SOAP_CMAC _ns1__UpdateHostProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3197; } /* = unique id SOAP_TYPE__ns1__UpdateHostProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__UpdateHostProfileResponse() { _ns1__UpdateHostProfileResponse::soap_default(NULL); }
	virtual ~_ns1__UpdateHostProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ExecuteHostProfileResponse
#define SOAP_TYPE__ns1__ExecuteHostProfileResponse (3198)
/* ns1:ExecuteHostProfileResponse */
class SOAP_CMAC _ns1__ExecuteHostProfileResponse
{
public:
	class ns1__ProfileExecuteResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ProfileExecuteResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3198; } /* = unique id SOAP_TYPE__ns1__ExecuteHostProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ExecuteHostProfileResponse() { _ns1__ExecuteHostProfileResponse::soap_default(NULL); }
	virtual ~_ns1__ExecuteHostProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ApplyHostConfig_USCORETaskResponse
#define SOAP_TYPE__ns1__ApplyHostConfig_USCORETaskResponse (3199)
/* ns1:ApplyHostConfig_TaskResponse */
class SOAP_CMAC _ns1__ApplyHostConfig_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3199; } /* = unique id SOAP_TYPE__ns1__ApplyHostConfig_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ApplyHostConfig_USCORETaskResponse() { _ns1__ApplyHostConfig_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__ApplyHostConfig_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GenerateConfigTaskListResponse
#define SOAP_TYPE__ns1__GenerateConfigTaskListResponse (3200)
/* ns1:GenerateConfigTaskListResponse */
class SOAP_CMAC _ns1__GenerateConfigTaskListResponse
{
public:
	class ns1__HostProfileManagerConfigTaskList *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:HostProfileManagerConfigTaskList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3200; } /* = unique id SOAP_TYPE__ns1__GenerateConfigTaskListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GenerateConfigTaskListResponse() { _ns1__GenerateConfigTaskListResponse::soap_default(NULL); }
	virtual ~_ns1__GenerateConfigTaskListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryHostProfileMetadataResponse
#define SOAP_TYPE__ns1__QueryHostProfileMetadataResponse (3201)
/* ns1:QueryHostProfileMetadataResponse */
class SOAP_CMAC _ns1__QueryHostProfileMetadataResponse
{
public:
	std::vector<ns1__ProfileMetadata * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ProfileMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3201; } /* = unique id SOAP_TYPE__ns1__QueryHostProfileMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryHostProfileMetadataResponse() { _ns1__QueryHostProfileMetadataResponse::soap_default(NULL); }
	virtual ~_ns1__QueryHostProfileMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateDefaultProfileResponse
#define SOAP_TYPE__ns1__CreateDefaultProfileResponse (3202)
/* ns1:CreateDefaultProfileResponse */
class SOAP_CMAC _ns1__CreateDefaultProfileResponse
{
public:
	class ns1__ApplyProfile *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ApplyProfile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3202; } /* = unique id SOAP_TYPE__ns1__CreateDefaultProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateDefaultProfileResponse() { _ns1__CreateDefaultProfileResponse::soap_default(NULL); }
	virtual ~_ns1__CreateDefaultProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveScheduledTaskResponse
#define SOAP_TYPE__ns1__RemoveScheduledTaskResponse (3203)
/* ns1:RemoveScheduledTaskResponse */
class SOAP_CMAC _ns1__RemoveScheduledTaskResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3203; } /* = unique id SOAP_TYPE__ns1__RemoveScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveScheduledTaskResponse() { _ns1__RemoveScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ReconfigureScheduledTaskResponse
#define SOAP_TYPE__ns1__ReconfigureScheduledTaskResponse (3204)
/* ns1:ReconfigureScheduledTaskResponse */
class SOAP_CMAC _ns1__ReconfigureScheduledTaskResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3204; } /* = unique id SOAP_TYPE__ns1__ReconfigureScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ReconfigureScheduledTaskResponse() { _ns1__ReconfigureScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__ReconfigureScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RunScheduledTaskResponse
#define SOAP_TYPE__ns1__RunScheduledTaskResponse (3205)
/* ns1:RunScheduledTaskResponse */
class SOAP_CMAC _ns1__RunScheduledTaskResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3205; } /* = unique id SOAP_TYPE__ns1__RunScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RunScheduledTaskResponse() { _ns1__RunScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__RunScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateScheduledTaskResponse
#define SOAP_TYPE__ns1__CreateScheduledTaskResponse (3206)
/* ns1:CreateScheduledTaskResponse */
class SOAP_CMAC _ns1__CreateScheduledTaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3206; } /* = unique id SOAP_TYPE__ns1__CreateScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateScheduledTaskResponse() { _ns1__CreateScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveEntityScheduledTaskResponse
#define SOAP_TYPE__ns1__RetrieveEntityScheduledTaskResponse (3207)
/* ns1:RetrieveEntityScheduledTaskResponse */
class SOAP_CMAC _ns1__RetrieveEntityScheduledTaskResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3207; } /* = unique id SOAP_TYPE__ns1__RetrieveEntityScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveEntityScheduledTaskResponse() { _ns1__RetrieveEntityScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveEntityScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateObjectScheduledTaskResponse
#define SOAP_TYPE__ns1__CreateObjectScheduledTaskResponse (3208)
/* ns1:CreateObjectScheduledTaskResponse */
class SOAP_CMAC _ns1__CreateObjectScheduledTaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3208; } /* = unique id SOAP_TYPE__ns1__CreateObjectScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateObjectScheduledTaskResponse() { _ns1__CreateObjectScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__CreateObjectScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrieveObjectScheduledTaskResponse
#define SOAP_TYPE__ns1__RetrieveObjectScheduledTaskResponse (3209)
/* ns1:RetrieveObjectScheduledTaskResponse */
class SOAP_CMAC _ns1__RetrieveObjectScheduledTaskResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3209; } /* = unique id SOAP_TYPE__ns1__RetrieveObjectScheduledTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrieveObjectScheduledTaskResponse() { _ns1__RetrieveObjectScheduledTaskResponse::soap_default(NULL); }
	virtual ~_ns1__RetrieveObjectScheduledTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__OpenInventoryViewFolderResponse
#define SOAP_TYPE__ns1__OpenInventoryViewFolderResponse (3210)
/* ns1:OpenInventoryViewFolderResponse */
class SOAP_CMAC _ns1__OpenInventoryViewFolderResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3210; } /* = unique id SOAP_TYPE__ns1__OpenInventoryViewFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__OpenInventoryViewFolderResponse() { _ns1__OpenInventoryViewFolderResponse::soap_default(NULL); }
	virtual ~_ns1__OpenInventoryViewFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CloseInventoryViewFolderResponse
#define SOAP_TYPE__ns1__CloseInventoryViewFolderResponse (3211)
/* ns1:CloseInventoryViewFolderResponse */
class SOAP_CMAC _ns1__CloseInventoryViewFolderResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3211; } /* = unique id SOAP_TYPE__ns1__CloseInventoryViewFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CloseInventoryViewFolderResponse() { _ns1__CloseInventoryViewFolderResponse::soap_default(NULL); }
	virtual ~_ns1__CloseInventoryViewFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ModifyListViewResponse
#define SOAP_TYPE__ns1__ModifyListViewResponse (3212)
/* ns1:ModifyListViewResponse */
class SOAP_CMAC _ns1__ModifyListViewResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3212; } /* = unique id SOAP_TYPE__ns1__ModifyListViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ModifyListViewResponse() { _ns1__ModifyListViewResponse::soap_default(NULL); }
	virtual ~_ns1__ModifyListViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetListViewResponse
#define SOAP_TYPE__ns1__ResetListViewResponse (3213)
/* ns1:ResetListViewResponse */
class SOAP_CMAC _ns1__ResetListViewResponse
{
public:
	std::vector<ns1__ManagedObjectReference * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3213; } /* = unique id SOAP_TYPE__ns1__ResetListViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetListViewResponse() { _ns1__ResetListViewResponse::soap_default(NULL); }
	virtual ~_ns1__ResetListViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ResetListViewFromViewResponse
#define SOAP_TYPE__ns1__ResetListViewFromViewResponse (3214)
/* ns1:ResetListViewFromViewResponse */
class SOAP_CMAC _ns1__ResetListViewFromViewResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3214; } /* = unique id SOAP_TYPE__ns1__ResetListViewFromViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ResetListViewFromViewResponse() { _ns1__ResetListViewFromViewResponse::soap_default(NULL); }
	virtual ~_ns1__ResetListViewFromViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyViewResponse
#define SOAP_TYPE__ns1__DestroyViewResponse (3215)
/* ns1:DestroyViewResponse */
class SOAP_CMAC _ns1__DestroyViewResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3215; } /* = unique id SOAP_TYPE__ns1__DestroyViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyViewResponse() { _ns1__DestroyViewResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateInventoryViewResponse
#define SOAP_TYPE__ns1__CreateInventoryViewResponse (3216)
/* ns1:CreateInventoryViewResponse */
class SOAP_CMAC _ns1__CreateInventoryViewResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3216; } /* = unique id SOAP_TYPE__ns1__CreateInventoryViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateInventoryViewResponse() { _ns1__CreateInventoryViewResponse::soap_default(NULL); }
	virtual ~_ns1__CreateInventoryViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateContainerViewResponse
#define SOAP_TYPE__ns1__CreateContainerViewResponse (3217)
/* ns1:CreateContainerViewResponse */
class SOAP_CMAC _ns1__CreateContainerViewResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3217; } /* = unique id SOAP_TYPE__ns1__CreateContainerViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateContainerViewResponse() { _ns1__CreateContainerViewResponse::soap_default(NULL); }
	virtual ~_ns1__CreateContainerViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateListViewResponse
#define SOAP_TYPE__ns1__CreateListViewResponse (3218)
/* ns1:CreateListViewResponse */
class SOAP_CMAC _ns1__CreateListViewResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3218; } /* = unique id SOAP_TYPE__ns1__CreateListViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateListViewResponse() { _ns1__CreateListViewResponse::soap_default(NULL); }
	virtual ~_ns1__CreateListViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateListViewFromViewResponse
#define SOAP_TYPE__ns1__CreateListViewFromViewResponse (3219)
/* ns1:CreateListViewFromViewResponse */
class SOAP_CMAC _ns1__CreateListViewFromViewResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3219; } /* = unique id SOAP_TYPE__ns1__CreateListViewFromViewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateListViewFromViewResponse() { _ns1__CreateListViewFromViewResponse::soap_default(NULL); }
	virtual ~_ns1__CreateListViewFromViewResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RevertToSnapshot_USCORETaskResponse
#define SOAP_TYPE__ns1__RevertToSnapshot_USCORETaskResponse (3220)
/* ns1:RevertToSnapshot_TaskResponse */
class SOAP_CMAC _ns1__RevertToSnapshot_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3220; } /* = unique id SOAP_TYPE__ns1__RevertToSnapshot_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RevertToSnapshot_USCORETaskResponse() { _ns1__RevertToSnapshot_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RevertToSnapshot_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RemoveSnapshot_USCORETaskResponse
#define SOAP_TYPE__ns1__RemoveSnapshot_USCORETaskResponse (3221)
/* ns1:RemoveSnapshot_TaskResponse */
class SOAP_CMAC _ns1__RemoveSnapshot_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3221; } /* = unique id SOAP_TYPE__ns1__RemoveSnapshot_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RemoveSnapshot_USCORETaskResponse() { _ns1__RemoveSnapshot_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__RemoveSnapshot_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RenameSnapshotResponse
#define SOAP_TYPE__ns1__RenameSnapshotResponse (3222)
/* ns1:RenameSnapshotResponse */
class SOAP_CMAC _ns1__RenameSnapshotResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3222; } /* = unique id SOAP_TYPE__ns1__RenameSnapshotResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RenameSnapshotResponse() { _ns1__RenameSnapshotResponse::soap_default(NULL); }
	virtual ~_ns1__RenameSnapshotResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckCompatibility_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckCompatibility_USCORETaskResponse (3223)
/* ns1:CheckCompatibility_TaskResponse */
class SOAP_CMAC _ns1__CheckCompatibility_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3223; } /* = unique id SOAP_TYPE__ns1__CheckCompatibility_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckCompatibility_USCORETaskResponse() { _ns1__CheckCompatibility_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckCompatibility_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryVMotionCompatibilityEx_USCORETaskResponse
#define SOAP_TYPE__ns1__QueryVMotionCompatibilityEx_USCORETaskResponse (3224)
/* ns1:QueryVMotionCompatibilityEx_TaskResponse */
class SOAP_CMAC _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3224; } /* = unique id SOAP_TYPE__ns1__QueryVMotionCompatibilityEx_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse() { _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__QueryVMotionCompatibilityEx_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckMigrate_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckMigrate_USCORETaskResponse (3225)
/* ns1:CheckMigrate_TaskResponse */
class SOAP_CMAC _ns1__CheckMigrate_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3225; } /* = unique id SOAP_TYPE__ns1__CheckMigrate_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckMigrate_USCORETaskResponse() { _ns1__CheckMigrate_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckMigrate_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckRelocate_USCORETaskResponse
#define SOAP_TYPE__ns1__CheckRelocate_USCORETaskResponse (3226)
/* ns1:CheckRelocate_TaskResponse */
class SOAP_CMAC _ns1__CheckRelocate_USCORETaskResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3226; } /* = unique id SOAP_TYPE__ns1__CheckRelocate_USCORETaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckRelocate_USCORETaskResponse() { _ns1__CheckRelocate_USCORETaskResponse::soap_default(NULL); }
	virtual ~_ns1__CheckRelocate_USCORETaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyPropertyFilterResponse
#define SOAP_TYPE__ns1__DestroyPropertyFilterResponse (3227)
/* ns1:DestroyPropertyFilterResponse */
class SOAP_CMAC _ns1__DestroyPropertyFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3227; } /* = unique id SOAP_TYPE__ns1__DestroyPropertyFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyPropertyFilterResponse() { _ns1__DestroyPropertyFilterResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyPropertyFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreateFilterResponse
#define SOAP_TYPE__ns1__CreateFilterResponse (3228)
/* ns1:CreateFilterResponse */
class SOAP_CMAC _ns1__CreateFilterResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3228; } /* = unique id SOAP_TYPE__ns1__CreateFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateFilterResponse() { _ns1__CreateFilterResponse::soap_default(NULL); }
	virtual ~_ns1__CreateFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrievePropertiesResponse
#define SOAP_TYPE__ns1__RetrievePropertiesResponse (3229)
/* ns1:RetrievePropertiesResponse */
class SOAP_CMAC _ns1__RetrievePropertiesResponse
{
public:
	std::vector<ns1__ObjectContent * >returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ObjectContent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3229; } /* = unique id SOAP_TYPE__ns1__RetrievePropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrievePropertiesResponse() { _ns1__RetrievePropertiesResponse::soap_default(NULL); }
	virtual ~_ns1__RetrievePropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CheckForUpdatesResponse
#define SOAP_TYPE__ns1__CheckForUpdatesResponse (3230)
/* ns1:CheckForUpdatesResponse */
class SOAP_CMAC _ns1__CheckForUpdatesResponse
{
public:
	class ns1__UpdateSet *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:UpdateSet */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3230; } /* = unique id SOAP_TYPE__ns1__CheckForUpdatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CheckForUpdatesResponse() { _ns1__CheckForUpdatesResponse::soap_default(NULL); }
	virtual ~_ns1__CheckForUpdatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WaitForUpdatesResponse
#define SOAP_TYPE__ns1__WaitForUpdatesResponse (3231)
/* ns1:WaitForUpdatesResponse */
class SOAP_CMAC _ns1__WaitForUpdatesResponse
{
public:
	ns1__UpdateSet *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:UpdateSet */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3231; } /* = unique id SOAP_TYPE__ns1__WaitForUpdatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WaitForUpdatesResponse() { _ns1__WaitForUpdatesResponse::soap_default(NULL); }
	virtual ~_ns1__WaitForUpdatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CancelWaitForUpdatesResponse
#define SOAP_TYPE__ns1__CancelWaitForUpdatesResponse (3232)
/* ns1:CancelWaitForUpdatesResponse */
class SOAP_CMAC _ns1__CancelWaitForUpdatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3232; } /* = unique id SOAP_TYPE__ns1__CancelWaitForUpdatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CancelWaitForUpdatesResponse() { _ns1__CancelWaitForUpdatesResponse::soap_default(NULL); }
	virtual ~_ns1__CancelWaitForUpdatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WaitForUpdatesExResponse
#define SOAP_TYPE__ns1__WaitForUpdatesExResponse (3233)
/* ns1:WaitForUpdatesExResponse */
class SOAP_CMAC _ns1__WaitForUpdatesExResponse
{
public:
	ns1__UpdateSet *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:UpdateSet */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3233; } /* = unique id SOAP_TYPE__ns1__WaitForUpdatesExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WaitForUpdatesExResponse() { _ns1__WaitForUpdatesExResponse::soap_default(NULL); }
	virtual ~_ns1__WaitForUpdatesExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__RetrievePropertiesExResponse
#define SOAP_TYPE__ns1__RetrievePropertiesExResponse (3234)
/* ns1:RetrievePropertiesExResponse */
class SOAP_CMAC _ns1__RetrievePropertiesExResponse
{
public:
	class ns1__RetrieveResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:RetrieveResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3234; } /* = unique id SOAP_TYPE__ns1__RetrievePropertiesExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__RetrievePropertiesExResponse() { _ns1__RetrievePropertiesExResponse::soap_default(NULL); }
	virtual ~_ns1__RetrievePropertiesExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__ContinueRetrievePropertiesExResponse
#define SOAP_TYPE__ns1__ContinueRetrievePropertiesExResponse (3235)
/* ns1:ContinueRetrievePropertiesExResponse */
class SOAP_CMAC _ns1__ContinueRetrievePropertiesExResponse
{
public:
	ns1__RetrieveResult *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:RetrieveResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3235; } /* = unique id SOAP_TYPE__ns1__ContinueRetrievePropertiesExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ContinueRetrievePropertiesExResponse() { _ns1__ContinueRetrievePropertiesExResponse::soap_default(NULL); }
	virtual ~_ns1__ContinueRetrievePropertiesExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CancelRetrievePropertiesExResponse
#define SOAP_TYPE__ns1__CancelRetrievePropertiesExResponse (3236)
/* ns1:CancelRetrievePropertiesExResponse */
class SOAP_CMAC _ns1__CancelRetrievePropertiesExResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3236; } /* = unique id SOAP_TYPE__ns1__CancelRetrievePropertiesExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CancelRetrievePropertiesExResponse() { _ns1__CancelRetrievePropertiesExResponse::soap_default(NULL); }
	virtual ~_ns1__CancelRetrievePropertiesExResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__CreatePropertyCollectorResponse
#define SOAP_TYPE__ns1__CreatePropertyCollectorResponse (3237)
/* ns1:CreatePropertyCollectorResponse */
class SOAP_CMAC _ns1__CreatePropertyCollectorResponse
{
public:
	ns1__ManagedObjectReference *returnval;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:ManagedObjectReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3237; } /* = unique id SOAP_TYPE__ns1__CreatePropertyCollectorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreatePropertyCollectorResponse() { _ns1__CreatePropertyCollectorResponse::soap_default(NULL); }
	virtual ~_ns1__CreatePropertyCollectorResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DestroyPropertyCollectorResponse
#define SOAP_TYPE__ns1__DestroyPropertyCollectorResponse (3238)
/* ns1:DestroyPropertyCollectorResponse */
class SOAP_CMAC _ns1__DestroyPropertyCollectorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 3238; } /* = unique id SOAP_TYPE__ns1__DestroyPropertyCollectorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DestroyPropertyCollectorResponse() { _ns1__DestroyPropertyCollectorResponse::soap_default(NULL); }
	virtual ~_ns1__DestroyPropertyCollectorResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeyAnyValue
#define SOAP_TYPE_ns1__KeyAnyValue (41)
/* ns1:KeyAnyValue */
class SOAP_CMAC ns1__KeyAnyValue : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	xsd__anyType *value;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns1__KeyAnyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KeyAnyValue() { ns1__KeyAnyValue::soap_default(NULL); }
	virtual ~ns1__KeyAnyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalizableMessage
#define SOAP_TYPE_ns1__LocalizableMessage (43)
/* ns1:LocalizableMessage */
class SOAP_CMAC ns1__LocalizableMessage : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >arg;	/* optional element of type ns1:KeyAnyValue */
	std::string *message;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns1__LocalizableMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalizableMessage() { ns1__LocalizableMessage::soap_default(NULL); }
	virtual ~ns1__LocalizableMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalizedMethodFault
#define SOAP_TYPE_ns1__LocalizedMethodFault (60)
/* ns1:LocalizedMethodFault */
class SOAP_CMAC ns1__LocalizedMethodFault : public ns1__DynamicData
{
public:
	ns1__MethodFault *fault;	/* required element of type ns1:MethodFault */
	std::string *localizedMessage;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns1__LocalizedMethodFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalizedMethodFault() { ns1__LocalizedMethodFault::soap_default(NULL); }
	virtual ~ns1__LocalizedMethodFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RuntimeFault
#define SOAP_TYPE_ns1__RuntimeFault (63)
/* ns1:RuntimeFault */
class SOAP_CMAC ns1__RuntimeFault : public ns1__MethodFault
{
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns1__RuntimeFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RuntimeFault() { ns1__RuntimeFault::soap_default(NULL); }
	virtual ~ns1__RuntimeFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ManagedObjectReference
#define SOAP_TYPE_ns1__ManagedObjectReference (64)
/* Primitive ns1:ManagedObjectReference schema type: */
class SOAP_CMAC ns1__ManagedObjectReference : public xsd__anyType
{
public:
	std::string __item;
	std::string *type;	/* optional attribute */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns1__ManagedObjectReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ManagedObjectReference() { ns1__ManagedObjectReference::soap_default(NULL); }
	virtual ~ns1__ManagedObjectReference() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidCollectorVersion
#define SOAP_TYPE_ns1__InvalidCollectorVersion (72)
/* ns1:InvalidCollectorVersion */
class SOAP_CMAC ns1__InvalidCollectorVersion : public ns1__MethodFault
{
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns1__InvalidCollectorVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidCollectorVersion() { ns1__InvalidCollectorVersion::soap_default(NULL); }
	virtual ~ns1__InvalidCollectorVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidProperty
#define SOAP_TYPE_ns1__InvalidProperty (73)
/* ns1:InvalidProperty */
class SOAP_CMAC ns1__InvalidProperty : public ns1__MethodFault
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns1__InvalidProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidProperty() { ns1__InvalidProperty::soap_default(NULL); }
	virtual ~ns1__InvalidProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PropertyFilterSpec
#define SOAP_TYPE_ns1__PropertyFilterSpec (74)
/* ns1:PropertyFilterSpec */
class SOAP_CMAC ns1__PropertyFilterSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__PropertySpec * >propSet;	/* required element of type ns1:PropertySpec */
	std::vector<ns1__ObjectSpec * >objectSet;	/* required element of type ns1:ObjectSpec */
	bool *reportMissingObjectsInResults;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns1__PropertyFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PropertyFilterSpec() { ns1__PropertyFilterSpec::soap_default(NULL); }
	virtual ~ns1__PropertyFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PropertySpec
#define SOAP_TYPE_ns1__PropertySpec (76)
/* ns1:PropertySpec */
class SOAP_CMAC ns1__PropertySpec : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	bool *all;	/* optional element of type xsd:boolean */
	std::vector<std::string >pathSet;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns1__PropertySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PropertySpec() { ns1__PropertySpec::soap_default(NULL); }
	virtual ~ns1__PropertySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ObjectSpec
#define SOAP_TYPE_ns1__ObjectSpec (78)
/* ns1:ObjectSpec */
class SOAP_CMAC ns1__ObjectSpec : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	bool *skip;	/* optional element of type xsd:boolean */
	std::vector<ns1__SelectionSpec * >selectSet;	/* optional element of type ns1:SelectionSpec */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns1__ObjectSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ObjectSpec() { ns1__ObjectSpec::soap_default(NULL); }
	virtual ~ns1__ObjectSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SelectionSpec
#define SOAP_TYPE_ns1__SelectionSpec (80)
/* ns1:SelectionSpec */
class SOAP_CMAC ns1__SelectionSpec : public ns1__DynamicData
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns1__SelectionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SelectionSpec() { ns1__SelectionSpec::soap_default(NULL); }
	virtual ~ns1__SelectionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ObjectContent
#define SOAP_TYPE_ns1__ObjectContent (83)
/* ns1:ObjectContent */
class SOAP_CMAC ns1__ObjectContent : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__DynamicProperty * >propSet;	/* optional element of type ns1:DynamicProperty */
	std::vector<ns1__MissingProperty * >missingSet;	/* optional element of type ns1:MissingProperty */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns1__ObjectContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ObjectContent() { ns1__ObjectContent::soap_default(NULL); }
	virtual ~ns1__ObjectContent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateSet
#define SOAP_TYPE_ns1__UpdateSet (85)
/* ns1:UpdateSet */
class SOAP_CMAC ns1__UpdateSet : public ns1__DynamicData
{
public:
	std::string version;	/* required element of type xsd:string */
	std::vector<ns1__PropertyFilterUpdate * >filterSet;	/* optional element of type ns1:PropertyFilterUpdate */
	bool *truncated;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns1__UpdateSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateSet() { ns1__UpdateSet::soap_default(NULL); }
	virtual ~ns1__UpdateSet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PropertyFilterUpdate
#define SOAP_TYPE_ns1__PropertyFilterUpdate (86)
/* ns1:PropertyFilterUpdate */
class SOAP_CMAC ns1__PropertyFilterUpdate : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *filter;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ObjectUpdate * >objectSet;	/* optional element of type ns1:ObjectUpdate */
	std::vector<ns1__MissingObject * >missingSet;	/* optional element of type ns1:MissingObject */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns1__PropertyFilterUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PropertyFilterUpdate() { ns1__PropertyFilterUpdate::soap_default(NULL); }
	virtual ~ns1__PropertyFilterUpdate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ObjectUpdate
#define SOAP_TYPE_ns1__ObjectUpdate (88)
/* ns1:ObjectUpdate */
class SOAP_CMAC ns1__ObjectUpdate : public ns1__DynamicData
{
public:
	enum ns1__ObjectUpdateKind kind;	/* required element of type ns1:ObjectUpdateKind */
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__PropertyChange * >changeSet;	/* optional element of type ns1:PropertyChange */
	std::vector<ns1__MissingProperty * >missingSet;	/* optional element of type ns1:MissingProperty */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ns1__ObjectUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ObjectUpdate() { ns1__ObjectUpdate::soap_default(NULL); }
	virtual ~ns1__ObjectUpdate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PropertyChange
#define SOAP_TYPE_ns1__PropertyChange (90)
/* ns1:PropertyChange */
class SOAP_CMAC ns1__PropertyChange : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	enum ns1__PropertyChangeOp op;	/* required element of type ns1:PropertyChangeOp */
	xsd__anyType *val;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ns1__PropertyChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PropertyChange() { ns1__PropertyChange::soap_default(NULL); }
	virtual ~ns1__PropertyChange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingProperty
#define SOAP_TYPE_ns1__MissingProperty (92)
/* ns1:MissingProperty */
class SOAP_CMAC ns1__MissingProperty : public ns1__DynamicData
{
public:
	std::string path;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_ns1__MissingProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingProperty() { ns1__MissingProperty::soap_default(NULL); }
	virtual ~ns1__MissingProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingObject
#define SOAP_TYPE_ns1__MissingObject (94)
/* ns1:MissingObject */
class SOAP_CMAC ns1__MissingObject : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_ns1__MissingObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingObject() { ns1__MissingObject::soap_default(NULL); }
	virtual ~ns1__MissingObject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WaitOptions
#define SOAP_TYPE_ns1__WaitOptions (96)
/* ns1:WaitOptions */
class SOAP_CMAC ns1__WaitOptions : public ns1__DynamicData
{
public:
	int *maxWaitSeconds;	/* optional element of type xsd:int */
	int *maxObjectUpdates;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_ns1__WaitOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WaitOptions() { ns1__WaitOptions::soap_default(NULL); }
	virtual ~ns1__WaitOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveOptions
#define SOAP_TYPE_ns1__RetrieveOptions (97)
/* ns1:RetrieveOptions */
class SOAP_CMAC ns1__RetrieveOptions : public ns1__DynamicData
{
public:
	int *maxObjects;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_ns1__RetrieveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveOptions() { ns1__RetrieveOptions::soap_default(NULL); }
	virtual ~ns1__RetrieveOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RetrieveResult
#define SOAP_TYPE_ns1__RetrieveResult (98)
/* ns1:RetrieveResult */
class SOAP_CMAC ns1__RetrieveResult : public ns1__DynamicData
{
public:
	std::string *token;	/* optional element of type xsd:string */
	std::vector<ns1__ObjectContent * >objects;	/* required element of type ns1:ObjectContent */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_ns1__RetrieveResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RetrieveResult() { ns1__RetrieveResult::soap_default(NULL); }
	virtual ~ns1__RetrieveResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AboutInfo
#define SOAP_TYPE_ns1__AboutInfo (578)
/* ns1:AboutInfo */
class SOAP_CMAC ns1__AboutInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string fullName;	/* required element of type xsd:string */
	std::string vendor;	/* required element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::string build;	/* required element of type xsd:string */
	std::string *localeVersion;	/* optional element of type xsd:string */
	std::string *localeBuild;	/* optional element of type xsd:string */
	std::string osType;	/* required element of type xsd:string */
	std::string productLineId;	/* required element of type xsd:string */
	std::string apiType;	/* required element of type xsd:string */
	std::string apiVersion;	/* required element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
	std::string *licenseProductName;	/* optional element of type xsd:string */
	std::string *licenseProductVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_ns1__AboutInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AboutInfo() { ns1__AboutInfo::soap_default(NULL); }
	virtual ~ns1__AboutInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorizationDescription
#define SOAP_TYPE_ns1__AuthorizationDescription (579)
/* ns1:AuthorizationDescription */
class SOAP_CMAC ns1__AuthorizationDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__ElementDescription * >privilege;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >privilegeGroup;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_ns1__AuthorizationDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthorizationDescription() { ns1__AuthorizationDescription::soap_default(NULL); }
	virtual ~ns1__AuthorizationDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Permission
#define SOAP_TYPE_ns1__Permission (580)
/* ns1:Permission */
class SOAP_CMAC ns1__Permission : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
	std::string principal;	/* required element of type xsd:string */
	bool group;	/* required element of type xsd:boolean */
	int roleId;	/* required element of type xsd:int */
	bool propagate;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_ns1__Permission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Permission() { ns1__Permission::soap_default(NULL); }
	virtual ~ns1__Permission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorizationRole
#define SOAP_TYPE_ns1__AuthorizationRole (582)
/* ns1:AuthorizationRole */
class SOAP_CMAC ns1__AuthorizationRole : public ns1__DynamicData
{
public:
	int roleId;	/* required element of type xsd:int */
	bool system;	/* required element of type xsd:boolean */
	std::string name;	/* required element of type xsd:string */
	class ns1__Description *info;	/* required element of type ns1:Description */
	std::vector<std::string >privilege;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_ns1__AuthorizationRole */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthorizationRole() { ns1__AuthorizationRole::soap_default(NULL); }
	virtual ~ns1__AuthorizationRole() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorizationPrivilege
#define SOAP_TYPE_ns1__AuthorizationPrivilege (584)
/* ns1:AuthorizationPrivilege */
class SOAP_CMAC ns1__AuthorizationPrivilege : public ns1__DynamicData
{
public:
	std::string privId;	/* required element of type xsd:string */
	bool onParent;	/* required element of type xsd:boolean */
	std::string name;	/* required element of type xsd:string */
	std::string privGroupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_ns1__AuthorizationPrivilege */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthorizationPrivilege() { ns1__AuthorizationPrivilege::soap_default(NULL); }
	virtual ~ns1__AuthorizationPrivilege() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Capability
#define SOAP_TYPE_ns1__Capability (587)
/* ns1:Capability */
class SOAP_CMAC ns1__Capability : public ns1__DynamicData
{
public:
	bool provisioningSupported;	/* required element of type xsd:boolean */
	bool multiHostSupported;	/* required element of type xsd:boolean */
	bool userShellAccessSupported;	/* required element of type xsd:boolean */
	std::vector<ns1__EVCMode * >supportedEVCMode;	/* optional element of type ns1:EVCMode */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_ns1__Capability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Capability() { ns1__Capability::soap_default(NULL); }
	virtual ~ns1__Capability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeResourceSummary
#define SOAP_TYPE_ns1__ComputeResourceSummary (589)
/* ns1:ComputeResourceSummary */
class SOAP_CMAC ns1__ComputeResourceSummary : public ns1__DynamicData
{
public:
	int totalCpu;	/* required element of type xsd:int */
	LONG64 totalMemory;	/* required element of type xsd:long */
	short numCpuCores;	/* required element of type xsd:short */
	short numCpuThreads;	/* required element of type xsd:short */
	int effectiveCpu;	/* required element of type xsd:int */
	LONG64 effectiveMemory;	/* required element of type xsd:long */
	int numHosts;	/* required element of type xsd:int */
	int numEffectiveHosts;	/* required element of type xsd:int */
	enum ns1__ManagedEntityStatus overallStatus;	/* required element of type ns1:ManagedEntityStatus */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_ns1__ComputeResourceSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeResourceSummary() { ns1__ComputeResourceSummary::soap_default(NULL); }
	virtual ~ns1__ComputeResourceSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeResourceConfigInfo
#define SOAP_TYPE_ns1__ComputeResourceConfigInfo (590)
/* ns1:ComputeResourceConfigInfo */
class SOAP_CMAC ns1__ComputeResourceConfigInfo : public ns1__DynamicData
{
public:
	std::string vmSwapPlacement;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_ns1__ComputeResourceConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeResourceConfigInfo() { ns1__ComputeResourceConfigInfo::soap_default(NULL); }
	virtual ~ns1__ComputeResourceConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeResourceConfigSpec
#define SOAP_TYPE_ns1__ComputeResourceConfigSpec (591)
/* ns1:ComputeResourceConfigSpec */
class SOAP_CMAC ns1__ComputeResourceConfigSpec : public ns1__DynamicData
{
public:
	std::string *vmSwapPlacement;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_ns1__ComputeResourceConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeResourceConfigSpec() { ns1__ComputeResourceConfigSpec::soap_default(NULL); }
	virtual ~ns1__ComputeResourceConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldDef
#define SOAP_TYPE_ns1__CustomFieldDef (592)
/* ns1:CustomFieldDef */
class SOAP_CMAC ns1__CustomFieldDef : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string *managedObjectType;	/* optional element of type xsd:string */
	ns1__PrivilegePolicyDef *fieldDefPrivileges;	/* optional element of type ns1:PrivilegePolicyDef */
	ns1__PrivilegePolicyDef *fieldInstancePrivileges;	/* optional element of type ns1:PrivilegePolicyDef */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_ns1__CustomFieldDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldDef() { ns1__CustomFieldDef::soap_default(NULL); }
	virtual ~ns1__CustomFieldDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldValue
#define SOAP_TYPE_ns1__CustomFieldValue (594)
/* ns1:CustomFieldValue */
class SOAP_CMAC ns1__CustomFieldValue : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_ns1__CustomFieldValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldValue() { ns1__CustomFieldValue::soap_default(NULL); }
	virtual ~ns1__CustomFieldValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSpecInfo
#define SOAP_TYPE_ns1__CustomizationSpecInfo (597)
/* ns1:CustomizationSpecInfo */
class SOAP_CMAC ns1__CustomizationSpecInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string *changeVersion;	/* optional element of type xsd:string */
	time_t *lastUpdateTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_ns1__CustomizationSpecInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSpecInfo() { ns1__CustomizationSpecInfo::soap_default(NULL); }
	virtual ~ns1__CustomizationSpecInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSpecItem
#define SOAP_TYPE_ns1__CustomizationSpecItem (599)
/* ns1:CustomizationSpecItem */
class SOAP_CMAC ns1__CustomizationSpecItem : public ns1__DynamicData
{
public:
	ns1__CustomizationSpecInfo *info;	/* required element of type ns1:CustomizationSpecInfo */
	ns1__CustomizationSpec *spec;	/* required element of type ns1:CustomizationSpec */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_ns1__CustomizationSpecItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSpecItem() { ns1__CustomizationSpecItem::soap_default(NULL); }
	virtual ~ns1__CustomizationSpecItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreSummary
#define SOAP_TYPE_ns1__DatastoreSummary (600)
/* ns1:DatastoreSummary */
class SOAP_CMAC ns1__DatastoreSummary : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
	LONG64 capacity;	/* required element of type xsd:long */
	LONG64 freeSpace;	/* required element of type xsd:long */
	LONG64 *uncommitted;	/* optional element of type xsd:long */
	bool accessible;	/* required element of type xsd:boolean */
	bool *multipleHostAccess;	/* optional element of type xsd:boolean */
	std::string type;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_ns1__DatastoreSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreSummary() { ns1__DatastoreSummary::soap_default(NULL); }
	virtual ~ns1__DatastoreSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreInfo
#define SOAP_TYPE_ns1__DatastoreInfo (601)
/* ns1:DatastoreInfo */
class SOAP_CMAC ns1__DatastoreInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
	LONG64 freeSpace;	/* required element of type xsd:long */
	LONG64 maxFileSize;	/* required element of type xsd:long */
	time_t *timestamp;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_ns1__DatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreInfo() { ns1__DatastoreInfo::soap_default(NULL); }
	virtual ~ns1__DatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreCapability
#define SOAP_TYPE_ns1__DatastoreCapability (602)
/* ns1:DatastoreCapability */
class SOAP_CMAC ns1__DatastoreCapability : public ns1__DynamicData
{
public:
	bool directoryHierarchySupported;	/* required element of type xsd:boolean */
	bool rawDiskMappingsSupported;	/* required element of type xsd:boolean */
	bool perFileThinProvisioningSupported;	/* required element of type xsd:boolean */
	bool *storageIORMSupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_ns1__DatastoreCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreCapability() { ns1__DatastoreCapability::soap_default(NULL); }
	virtual ~ns1__DatastoreCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreHostMount
#define SOAP_TYPE_ns1__DatastoreHostMount (603)
/* ns1:DatastoreHostMount */
class SOAP_CMAC ns1__DatastoreHostMount : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	class ns1__HostMountInfo *mountInfo;	/* required element of type ns1:HostMountInfo */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_ns1__DatastoreHostMount */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreHostMount() { ns1__DatastoreHostMount::soap_default(NULL); }
	virtual ~ns1__DatastoreHostMount() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreMountPathDatastorePair
#define SOAP_TYPE_ns1__DatastoreMountPathDatastorePair (605)
/* ns1:DatastoreMountPathDatastorePair */
class SOAP_CMAC ns1__DatastoreMountPathDatastorePair : public ns1__DynamicData
{
public:
	std::string oldMountPath;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_ns1__DatastoreMountPathDatastorePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreMountPathDatastorePair() { ns1__DatastoreMountPathDatastorePair::soap_default(NULL); }
	virtual ~ns1__DatastoreMountPathDatastorePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Description
#define SOAP_TYPE_ns1__Description (607)
/* ns1:Description */
class SOAP_CMAC ns1__Description : public ns1__DynamicData
{
public:
	std::string label;	/* required element of type xsd:string */
	std::string summary;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_ns1__Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Description() { ns1__Description::soap_default(NULL); }
	virtual ~ns1__Description() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogDescriptor
#define SOAP_TYPE_ns1__DiagnosticManagerLogDescriptor (608)
/* ns1:DiagnosticManagerLogDescriptor */
class SOAP_CMAC ns1__DiagnosticManagerLogDescriptor : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string fileName;	/* required element of type xsd:string */
	std::string creator;	/* required element of type xsd:string */
	std::string format;	/* required element of type xsd:string */
	std::string mimeType;	/* required element of type xsd:string */
	ns1__Description *info;	/* required element of type ns1:Description */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_ns1__DiagnosticManagerLogDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticManagerLogDescriptor() { ns1__DiagnosticManagerLogDescriptor::soap_default(NULL); }
	virtual ~ns1__DiagnosticManagerLogDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerLogHeader
#define SOAP_TYPE_ns1__DiagnosticManagerLogHeader (610)
/* ns1:DiagnosticManagerLogHeader */
class SOAP_CMAC ns1__DiagnosticManagerLogHeader : public ns1__DynamicData
{
public:
	int lineStart;	/* required element of type xsd:int */
	int lineEnd;	/* required element of type xsd:int */
	std::vector<std::string >lineText;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_ns1__DiagnosticManagerLogHeader */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticManagerLogHeader() { ns1__DiagnosticManagerLogHeader::soap_default(NULL); }
	virtual ~ns1__DiagnosticManagerLogHeader() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticManagerBundleInfo
#define SOAP_TYPE_ns1__DiagnosticManagerBundleInfo (611)
/* ns1:DiagnosticManagerBundleInfo */
class SOAP_CMAC ns1__DiagnosticManagerBundleInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *system;	/* optional element of type ns1:ManagedObjectReference */
	std::string url;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_ns1__DiagnosticManagerBundleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiagnosticManagerBundleInfo() { ns1__DiagnosticManagerBundleInfo::soap_default(NULL); }
	virtual ~ns1__DiagnosticManagerBundleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSContactInfo
#define SOAP_TYPE_ns1__DVSContactInfo (613)
/* ns1:DVSContactInfo */
class SOAP_CMAC ns1__DVSContactInfo : public ns1__DynamicData
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::string *contact;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_ns1__DVSContactInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSContactInfo() { ns1__DVSContactInfo::soap_default(NULL); }
	virtual ~ns1__DVSContactInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSFeatureCapability
#define SOAP_TYPE_ns1__DVSFeatureCapability (614)
/* ns1:DVSFeatureCapability */
class SOAP_CMAC ns1__DVSFeatureCapability : public ns1__DynamicData
{
public:
	bool networkResourceManagementSupported;	/* required element of type xsd:boolean */
	bool vmDirectPathGen2Supported;	/* required element of type xsd:boolean */
	std::vector<std::string >nicTeamingPolicy;	/* optional element of type xsd:string */
	int *networkResourcePoolHighShareValue;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_ns1__DVSFeatureCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSFeatureCapability() { ns1__DVSFeatureCapability::soap_default(NULL); }
	virtual ~ns1__DVSFeatureCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSCapability
#define SOAP_TYPE_ns1__DVSCapability (615)
/* ns1:DVSCapability */
class SOAP_CMAC ns1__DVSCapability : public ns1__DynamicData
{
public:
	bool *dvsOperationSupported;	/* optional element of type xsd:boolean */
	bool *dvPortGroupOperationSupported;	/* optional element of type xsd:boolean */
	bool *dvPortOperationSupported;	/* optional element of type xsd:boolean */
	std::vector<ns1__DistributedVirtualSwitchHostProductSpec * >compatibleHostComponentProductInfo;	/* optional element of type ns1:DistributedVirtualSwitchHostProductSpec */
	ns1__DVSFeatureCapability *featuresSupported;	/* optional element of type ns1:DVSFeatureCapability */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_ns1__DVSCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSCapability() { ns1__DVSCapability::soap_default(NULL); }
	virtual ~ns1__DVSCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSSummary
#define SOAP_TYPE_ns1__DVSSummary (616)
/* ns1:DVSSummary */
class SOAP_CMAC ns1__DVSSummary : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	int numPorts;	/* required element of type xsd:int */
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	std::vector<ns1__ManagedObjectReference * >hostMember;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >vm;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<std::string >portgroupName;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	ns1__DVSContactInfo *contact;	/* optional element of type ns1:DVSContactInfo */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_ns1__DVSSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSSummary() { ns1__DVSSummary::soap_default(NULL); }
	virtual ~ns1__DVSSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSPolicy
#define SOAP_TYPE_ns1__DVSPolicy (617)
/* ns1:DVSPolicy */
class SOAP_CMAC ns1__DVSPolicy : public ns1__DynamicData
{
public:
	bool *autoPreInstallAllowed;	/* optional element of type xsd:boolean */
	bool *autoUpgradeAllowed;	/* optional element of type xsd:boolean */
	bool *partialUpgradeAllowed;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_ns1__DVSPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSPolicy() { ns1__DVSPolicy::soap_default(NULL); }
	virtual ~ns1__DVSPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSUplinkPortPolicy
#define SOAP_TYPE_ns1__DVSUplinkPortPolicy (618)
/* ns1:DVSUplinkPortPolicy */
class SOAP_CMAC ns1__DVSUplinkPortPolicy : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_ns1__DVSUplinkPortPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSUplinkPortPolicy() { ns1__DVSUplinkPortPolicy::soap_default(NULL); }
	virtual ~ns1__DVSUplinkPortPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSConfigSpec
#define SOAP_TYPE_ns1__DVSConfigSpec (620)
/* ns1:DVSConfigSpec */
class SOAP_CMAC ns1__DVSConfigSpec : public ns1__DynamicData
{
public:
	std::string *configVersion;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	int *numStandalonePorts;	/* optional element of type xsd:int */
	int *maxPorts;	/* optional element of type xsd:int */
	ns1__DVSUplinkPortPolicy *uplinkPortPolicy;	/* optional element of type ns1:DVSUplinkPortPolicy */
	std::vector<ns1__ManagedObjectReference * >uplinkPortgroup;	/* optional element of type ns1:ManagedObjectReference */
	class ns1__DVPortSetting *defaultPortConfig;	/* optional element of type ns1:DVPortSetting */
	std::vector<ns1__DistributedVirtualSwitchHostMemberConfigSpec * >host;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberConfigSpec */
	std::string *extensionKey;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	ns1__DVSPolicy *policy;	/* optional element of type ns1:DVSPolicy */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
	ns1__DVSContactInfo *contact;	/* optional element of type ns1:DVSContactInfo */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_ns1__DVSConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSConfigSpec() { ns1__DVSConfigSpec::soap_default(NULL); }
	virtual ~ns1__DVSConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSCreateSpec
#define SOAP_TYPE_ns1__DVSCreateSpec (621)
/* ns1:DVSCreateSpec */
class SOAP_CMAC ns1__DVSCreateSpec : public ns1__DynamicData
{
public:
	ns1__DVSConfigSpec *configSpec;	/* required element of type ns1:DVSConfigSpec */
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	ns1__DVSCapability *capability;	/* optional element of type ns1:DVSCapability */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_ns1__DVSCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSCreateSpec() { ns1__DVSCreateSpec::soap_default(NULL); }
	virtual ~ns1__DVSCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSConfigInfo
#define SOAP_TYPE_ns1__DVSConfigInfo (622)
/* ns1:DVSConfigInfo */
class SOAP_CMAC ns1__DVSConfigInfo : public ns1__DynamicData
{
public:
	std::string uuid;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int numStandalonePorts;	/* required element of type xsd:int */
	int numPorts;	/* required element of type xsd:int */
	int maxPorts;	/* required element of type xsd:int */
	ns1__DVSUplinkPortPolicy *uplinkPortPolicy;	/* required element of type ns1:DVSUplinkPortPolicy */
	std::vector<ns1__ManagedObjectReference * >uplinkPortgroup;	/* optional element of type ns1:ManagedObjectReference */
	ns1__DVPortSetting *defaultPortConfig;	/* required element of type ns1:DVPortSetting */
	std::vector<ns1__DistributedVirtualSwitchHostMember * >host;	/* optional element of type ns1:DistributedVirtualSwitchHostMember */
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
	ns1__DistributedVirtualSwitchProductSpec *targetInfo;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	std::string *extensionKey;	/* optional element of type xsd:string */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
	ns1__DVSPolicy *policy;	/* optional element of type ns1:DVSPolicy */
	std::string *description;	/* optional element of type xsd:string */
	std::string configVersion;	/* required element of type xsd:string */
	ns1__DVSContactInfo *contact;	/* required element of type ns1:DVSContactInfo */
	time_t createTime;	/* required element of type xsd:dateTime */
	bool *networkResourceManagementEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_ns1__DVSConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSConfigInfo() { ns1__DVSConfigInfo::soap_default(NULL); }
	virtual ~ns1__DVSConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnumDescription
#define SOAP_TYPE_ns1__EnumDescription (627)
/* ns1:EnumDescription */
class SOAP_CMAC ns1__EnumDescription : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::vector<ns1__ElementDescription * >tags;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_ns1__EnumDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnumDescription() { ns1__EnumDescription::soap_default(NULL); }
	virtual ~ns1__EnumDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionServerInfo
#define SOAP_TYPE_ns1__ExtensionServerInfo (631)
/* ns1:ExtensionServerInfo */
class SOAP_CMAC ns1__ExtensionServerInfo : public ns1__DynamicData
{
public:
	std::string url;	/* required element of type xsd:string */
	ns1__Description *description;	/* required element of type ns1:Description */
	std::string company;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::vector<std::string >adminEmail;	/* required element of type xsd:string */
	std::string *serverThumbprint;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_ns1__ExtensionServerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionServerInfo() { ns1__ExtensionServerInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionServerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionClientInfo
#define SOAP_TYPE_ns1__ExtensionClientInfo (633)
/* ns1:ExtensionClientInfo */
class SOAP_CMAC ns1__ExtensionClientInfo : public ns1__DynamicData
{
public:
	std::string version;	/* required element of type xsd:string */
	ns1__Description *description;	/* required element of type ns1:Description */
	std::string company;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_ns1__ExtensionClientInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionClientInfo() { ns1__ExtensionClientInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionClientInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionTaskTypeInfo
#define SOAP_TYPE_ns1__ExtensionTaskTypeInfo (635)
/* ns1:ExtensionTaskTypeInfo */
class SOAP_CMAC ns1__ExtensionTaskTypeInfo : public ns1__DynamicData
{
public:
	std::string taskID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_ns1__ExtensionTaskTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionTaskTypeInfo() { ns1__ExtensionTaskTypeInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionTaskTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionEventTypeInfo
#define SOAP_TYPE_ns1__ExtensionEventTypeInfo (637)
/* ns1:ExtensionEventTypeInfo */
class SOAP_CMAC ns1__ExtensionEventTypeInfo : public ns1__DynamicData
{
public:
	std::string eventID;	/* required element of type xsd:string */
	std::string *eventTypeSchema;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_ns1__ExtensionEventTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionEventTypeInfo() { ns1__ExtensionEventTypeInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionEventTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionFaultTypeInfo
#define SOAP_TYPE_ns1__ExtensionFaultTypeInfo (639)
/* ns1:ExtensionFaultTypeInfo */
class SOAP_CMAC ns1__ExtensionFaultTypeInfo : public ns1__DynamicData
{
public:
	std::string faultID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_ns1__ExtensionFaultTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionFaultTypeInfo() { ns1__ExtensionFaultTypeInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionFaultTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionPrivilegeInfo
#define SOAP_TYPE_ns1__ExtensionPrivilegeInfo (641)
/* ns1:ExtensionPrivilegeInfo */
class SOAP_CMAC ns1__ExtensionPrivilegeInfo : public ns1__DynamicData
{
public:
	std::string privID;	/* required element of type xsd:string */
	std::string privGroupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_ns1__ExtensionPrivilegeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionPrivilegeInfo() { ns1__ExtensionPrivilegeInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionPrivilegeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionResourceInfo
#define SOAP_TYPE_ns1__ExtensionResourceInfo (643)
/* ns1:ExtensionResourceInfo */
class SOAP_CMAC ns1__ExtensionResourceInfo : public ns1__DynamicData
{
public:
	std::string locale;	/* required element of type xsd:string */
	std::string module;	/* required element of type xsd:string */
	std::vector<ns1__KeyValue * >data;	/* required element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_ns1__ExtensionResourceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionResourceInfo() { ns1__ExtensionResourceInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionResourceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtensionHealthInfo
#define SOAP_TYPE_ns1__ExtensionHealthInfo (645)
/* ns1:ExtensionHealthInfo */
class SOAP_CMAC ns1__ExtensionHealthInfo : public ns1__DynamicData
{
public:
	std::string url;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_ns1__ExtensionHealthInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtensionHealthInfo() { ns1__ExtensionHealthInfo::soap_default(NULL); }
	virtual ~ns1__ExtensionHealthInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Extension
#define SOAP_TYPE_ns1__Extension (646)
/* ns1:Extension */
class SOAP_CMAC ns1__Extension : public ns1__DynamicData
{
public:
	ns1__Description *description;	/* required element of type ns1:Description */
	std::string key;	/* required element of type xsd:string */
	std::string *company;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::string *subjectName;	/* optional element of type xsd:string */
	std::vector<ns1__ExtensionServerInfo * >server;	/* optional element of type ns1:ExtensionServerInfo */
	std::vector<ns1__ExtensionClientInfo * >client;	/* optional element of type ns1:ExtensionClientInfo */
	std::vector<ns1__ExtensionTaskTypeInfo * >taskList;	/* optional element of type ns1:ExtensionTaskTypeInfo */
	std::vector<ns1__ExtensionEventTypeInfo * >eventList;	/* optional element of type ns1:ExtensionEventTypeInfo */
	std::vector<ns1__ExtensionFaultTypeInfo * >faultList;	/* optional element of type ns1:ExtensionFaultTypeInfo */
	std::vector<ns1__ExtensionPrivilegeInfo * >privilegeList;	/* optional element of type ns1:ExtensionPrivilegeInfo */
	std::vector<ns1__ExtensionResourceInfo * >resourceList;	/* optional element of type ns1:ExtensionResourceInfo */
	time_t lastHeartbeatTime;	/* required element of type xsd:dateTime */
	ns1__ExtensionHealthInfo *healthInfo;	/* optional element of type ns1:ExtensionHealthInfo */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_ns1__Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Extension() { ns1__Extension::soap_default(NULL); }
	virtual ~ns1__Extension() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostServiceTicket
#define SOAP_TYPE_ns1__HostServiceTicket (648)
/* ns1:HostServiceTicket */
class SOAP_CMAC ns1__HostServiceTicket : public ns1__DynamicData
{
public:
	std::string *host;	/* optional element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
	std::string service;	/* required element of type xsd:string */
	std::string serviceVersion;	/* required element of type xsd:string */
	std::string sessionId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_ns1__HostServiceTicket */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostServiceTicket() { ns1__HostServiceTicket::soap_default(NULL); }
	virtual ~ns1__HostServiceTicket() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseDatastoreLeaseInfo
#define SOAP_TYPE_ns1__HttpNfcLeaseDatastoreLeaseInfo (649)
/* ns1:HttpNfcLeaseDatastoreLeaseInfo */
class SOAP_CMAC ns1__HttpNfcLeaseDatastoreLeaseInfo : public ns1__DynamicData
{
public:
	std::string datastoreKey;	/* required element of type xsd:string */
	std::vector<ns1__HttpNfcLeaseHostInfo * >hosts;	/* required element of type ns1:HttpNfcLeaseHostInfo */
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseDatastoreLeaseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseDatastoreLeaseInfo() { ns1__HttpNfcLeaseDatastoreLeaseInfo::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseDatastoreLeaseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseHostInfo
#define SOAP_TYPE_ns1__HttpNfcLeaseHostInfo (651)
/* ns1:HttpNfcLeaseHostInfo */
class SOAP_CMAC ns1__HttpNfcLeaseHostInfo : public ns1__DynamicData
{
public:
	std::string url;	/* required element of type xsd:string */
	std::string sslThumbprint;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseHostInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseHostInfo() { ns1__HttpNfcLeaseHostInfo::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseHostInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseInfo
#define SOAP_TYPE_ns1__HttpNfcLeaseInfo (653)
/* ns1:HttpNfcLeaseInfo */
class SOAP_CMAC ns1__HttpNfcLeaseInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *lease;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__HttpNfcLeaseDeviceUrl * >deviceUrl;	/* optional element of type ns1:HttpNfcLeaseDeviceUrl */
	LONG64 totalDiskCapacityInKB;	/* required element of type xsd:long */
	int leaseTimeout;	/* required element of type xsd:int */
	std::vector<ns1__HttpNfcLeaseDatastoreLeaseInfo * >hostMap;	/* optional element of type ns1:HttpNfcLeaseDatastoreLeaseInfo */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseInfo() { ns1__HttpNfcLeaseInfo::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseDeviceUrl
#define SOAP_TYPE_ns1__HttpNfcLeaseDeviceUrl (654)
/* ns1:HttpNfcLeaseDeviceUrl */
class SOAP_CMAC ns1__HttpNfcLeaseDeviceUrl : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string importKey;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
	std::string sslThumbprint;	/* required element of type xsd:string */
	bool *disk;	/* optional element of type xsd:boolean */
	std::string *targetId;	/* optional element of type xsd:string */
	std::string *datastoreKey;	/* optional element of type xsd:string */
	LONG64 *fileSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseDeviceUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseDeviceUrl() { ns1__HttpNfcLeaseDeviceUrl::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseDeviceUrl() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HttpNfcLeaseManifestEntry
#define SOAP_TYPE_ns1__HttpNfcLeaseManifestEntry (656)
/* ns1:HttpNfcLeaseManifestEntry */
class SOAP_CMAC ns1__HttpNfcLeaseManifestEntry : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string sha1;	/* required element of type xsd:string */
	LONG64 size;	/* required element of type xsd:long */
	bool disk;	/* required element of type xsd:boolean */
	LONG64 *capacity;	/* optional element of type xsd:long */
	LONG64 *populatedSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_ns1__HttpNfcLeaseManifestEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HttpNfcLeaseManifestEntry() { ns1__HttpNfcLeaseManifestEntry::soap_default(NULL); }
	virtual ~ns1__HttpNfcLeaseManifestEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ImportSpec
#define SOAP_TYPE_ns1__ImportSpec (658)
/* ns1:ImportSpec */
class SOAP_CMAC ns1__ImportSpec : public ns1__DynamicData
{
public:
	ns1__VAppEntityConfigInfo *entityConfig;	/* optional element of type ns1:VAppEntityConfigInfo */
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_ns1__ImportSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ImportSpec() { ns1__ImportSpec::soap_default(NULL); }
	virtual ~ns1__ImportSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InheritablePolicy
#define SOAP_TYPE_ns1__InheritablePolicy (660)
/* ns1:InheritablePolicy */
class SOAP_CMAC ns1__InheritablePolicy : public ns1__DynamicData
{
public:
	bool inherited;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_ns1__InheritablePolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InheritablePolicy() { ns1__InheritablePolicy::soap_default(NULL); }
	virtual ~ns1__InheritablePolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KeyValue
#define SOAP_TYPE_ns1__KeyValue (662)
/* ns1:KeyValue */
class SOAP_CMAC ns1__KeyValue : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_ns1__KeyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KeyValue() { ns1__KeyValue::soap_default(NULL); }
	virtual ~ns1__KeyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseAssignmentManagerLicenseAssignment
#define SOAP_TYPE_ns1__LicenseAssignmentManagerLicenseAssignment (664)
/* ns1:LicenseAssignmentManagerLicenseAssignment */
class SOAP_CMAC ns1__LicenseAssignmentManagerLicenseAssignment : public ns1__DynamicData
{
public:
	std::string entityId;	/* required element of type xsd:string */
	std::string *scope;	/* optional element of type xsd:string */
	std::string *entityDisplayName;	/* optional element of type xsd:string */
	ns1__LicenseManagerLicenseInfo *assignedLicense;	/* required element of type ns1:LicenseManagerLicenseInfo */
	std::vector<ns1__KeyAnyValue * >properties;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_ns1__LicenseAssignmentManagerLicenseAssignment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseAssignmentManagerLicenseAssignment() { ns1__LicenseAssignmentManagerLicenseAssignment::soap_default(NULL); }
	virtual ~ns1__LicenseAssignmentManagerLicenseAssignment() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseSource
#define SOAP_TYPE_ns1__LicenseSource (666)
/* ns1:LicenseSource */
class SOAP_CMAC ns1__LicenseSource : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_ns1__LicenseSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseSource() { ns1__LicenseSource::soap_default(NULL); }
	virtual ~ns1__LicenseSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseFeatureInfo
#define SOAP_TYPE_ns1__LicenseFeatureInfo (670)
/* ns1:LicenseFeatureInfo */
class SOAP_CMAC ns1__LicenseFeatureInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string featureName;	/* required element of type xsd:string */
	std::string *featureDescription;	/* optional element of type xsd:string */
	enum ns1__LicenseFeatureInfoState *state;	/* optional element of type ns1:LicenseFeatureInfoState */
	std::string costUnit;	/* required element of type xsd:string */
	std::string *sourceRestriction;	/* optional element of type xsd:string */
	std::vector<std::string >dependentKey;	/* optional element of type xsd:string */
	bool *edition;	/* optional element of type xsd:boolean */
	time_t *expiresOn;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_ns1__LicenseFeatureInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseFeatureInfo() { ns1__LicenseFeatureInfo::soap_default(NULL); }
	virtual ~ns1__LicenseFeatureInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseReservationInfo
#define SOAP_TYPE_ns1__LicenseReservationInfo (672)
/* ns1:LicenseReservationInfo */
class SOAP_CMAC ns1__LicenseReservationInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	enum ns1__LicenseReservationInfoState state;	/* required element of type ns1:LicenseReservationInfoState */
	int required;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_ns1__LicenseReservationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseReservationInfo() { ns1__LicenseReservationInfo::soap_default(NULL); }
	virtual ~ns1__LicenseReservationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseAvailabilityInfo
#define SOAP_TYPE_ns1__LicenseAvailabilityInfo (674)
/* ns1:LicenseAvailabilityInfo */
class SOAP_CMAC ns1__LicenseAvailabilityInfo : public ns1__DynamicData
{
public:
	ns1__LicenseFeatureInfo *feature;	/* required element of type ns1:LicenseFeatureInfo */
	int total;	/* required element of type xsd:int */
	int available;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE_ns1__LicenseAvailabilityInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseAvailabilityInfo() { ns1__LicenseAvailabilityInfo::soap_default(NULL); }
	virtual ~ns1__LicenseAvailabilityInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseDiagnostics
#define SOAP_TYPE_ns1__LicenseDiagnostics (676)
/* ns1:LicenseDiagnostics */
class SOAP_CMAC ns1__LicenseDiagnostics : public ns1__DynamicData
{
public:
	time_t sourceLastChanged;	/* required element of type xsd:dateTime */
	std::string sourceLost;	/* required element of type xsd:string */
	float sourceLatency;	/* required element of type xsd:float */
	std::string licenseRequests;	/* required element of type xsd:string */
	std::string licenseRequestFailures;	/* required element of type xsd:string */
	std::string licenseFeatureUnknowns;	/* required element of type xsd:string */
	enum ns1__LicenseManagerState opState;	/* required element of type ns1:LicenseManagerState */
	time_t lastStatusUpdate;	/* required element of type xsd:dateTime */
	std::string opFailureMessage;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_ns1__LicenseDiagnostics */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseDiagnostics() { ns1__LicenseDiagnostics::soap_default(NULL); }
	virtual ~ns1__LicenseDiagnostics() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseUsageInfo
#define SOAP_TYPE_ns1__LicenseUsageInfo (677)
/* ns1:LicenseUsageInfo */
class SOAP_CMAC ns1__LicenseUsageInfo : public ns1__DynamicData
{
public:
	ns1__LicenseSource *source;	/* required element of type ns1:LicenseSource */
	bool sourceAvailable;	/* required element of type xsd:boolean */
	std::vector<ns1__LicenseReservationInfo * >reservationInfo;	/* optional element of type ns1:LicenseReservationInfo */
	std::vector<ns1__LicenseFeatureInfo * >featureInfo;	/* optional element of type ns1:LicenseFeatureInfo */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_ns1__LicenseUsageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseUsageInfo() { ns1__LicenseUsageInfo::soap_default(NULL); }
	virtual ~ns1__LicenseUsageInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerEvaluationInfo
#define SOAP_TYPE_ns1__LicenseManagerEvaluationInfo (678)
/* ns1:LicenseManagerEvaluationInfo */
class SOAP_CMAC ns1__LicenseManagerEvaluationInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__KeyAnyValue * >properties;	/* required element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_ns1__LicenseManagerEvaluationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseManagerEvaluationInfo() { ns1__LicenseManagerEvaluationInfo::soap_default(NULL); }
	virtual ~ns1__LicenseManagerEvaluationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseManagerLicenseInfo
#define SOAP_TYPE_ns1__LicenseManagerLicenseInfo (679)
/* ns1:LicenseManagerLicenseInfo */
class SOAP_CMAC ns1__LicenseManagerLicenseInfo : public ns1__DynamicData
{
public:
	std::string licenseKey;	/* required element of type xsd:string */
	std::string editionKey;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int total;	/* required element of type xsd:int */
	int *used;	/* optional element of type xsd:int */
	std::string costUnit;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >properties;	/* optional element of type ns1:KeyAnyValue */
	std::vector<ns1__KeyValue * >labels;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_ns1__LicenseManagerLicenseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseManagerLicenseInfo() { ns1__LicenseManagerLicenseInfo::soap_default(NULL); }
	virtual ~ns1__LicenseManagerLicenseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalizationManagerMessageCatalog
#define SOAP_TYPE_ns1__LocalizationManagerMessageCatalog (681)
/* ns1:LocalizationManagerMessageCatalog */
class SOAP_CMAC ns1__LocalizationManagerMessageCatalog : public ns1__DynamicData
{
public:
	std::string moduleName;	/* required element of type xsd:string */
	std::string catalogName;	/* required element of type xsd:string */
	std::string locale;	/* required element of type xsd:string */
	std::string catalogUri;	/* required element of type xsd:string */
	time_t *lastModified;	/* optional element of type xsd:dateTime */
	std::string *md5sum;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_ns1__LocalizationManagerMessageCatalog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalizationManagerMessageCatalog() { ns1__LocalizationManagerMessageCatalog::soap_default(NULL); }
	virtual ~ns1__LocalizationManagerMessageCatalog() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkSummary
#define SOAP_TYPE_ns1__NetworkSummary (685)
/* ns1:NetworkSummary */
class SOAP_CMAC ns1__NetworkSummary : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *network;	/* optional element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	bool accessible;	/* required element of type xsd:boolean */
	std::string *ipPoolName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_ns1__NetworkSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkSummary() { ns1__NetworkSummary::soap_default(NULL); }
	virtual ~ns1__NetworkSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumericRange
#define SOAP_TYPE_ns1__NumericRange (686)
/* ns1:NumericRange */
class SOAP_CMAC ns1__NumericRange : public ns1__DynamicData
{
public:
	int start;	/* required element of type xsd:int */
	int end;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_ns1__NumericRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumericRange() { ns1__NumericRange::soap_default(NULL); }
	virtual ~ns1__NumericRange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfDeploymentOption
#define SOAP_TYPE_ns1__OvfDeploymentOption (688)
/* ns1:OvfDeploymentOption */
class SOAP_CMAC ns1__OvfDeploymentOption : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string label;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_ns1__OvfDeploymentOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfDeploymentOption() { ns1__OvfDeploymentOption::soap_default(NULL); }
	virtual ~ns1__OvfDeploymentOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfManagerCommonParams
#define SOAP_TYPE_ns1__OvfManagerCommonParams (690)
/* ns1:OvfManagerCommonParams */
class SOAP_CMAC ns1__OvfManagerCommonParams : public ns1__DynamicData
{
public:
	std::string locale;	/* required element of type xsd:string */
	std::string deploymentOption;	/* required element of type xsd:string */
	std::vector<ns1__KeyValue * >msgBundle;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_ns1__OvfManagerCommonParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfManagerCommonParams() { ns1__OvfManagerCommonParams::soap_default(NULL); }
	virtual ~ns1__OvfManagerCommonParams() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfValidateHostResult
#define SOAP_TYPE_ns1__OvfValidateHostResult (692)
/* ns1:OvfValidateHostResult */
class SOAP_CMAC ns1__OvfValidateHostResult : public ns1__DynamicData
{
public:
	LONG64 *downloadSize;	/* optional element of type xsd:long */
	LONG64 *flatDeploymentSize;	/* optional element of type xsd:long */
	LONG64 *sparseDeploymentSize;	/* optional element of type xsd:long */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >warning;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<std::string >supportedDiskProvisioning;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_ns1__OvfValidateHostResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfValidateHostResult() { ns1__OvfValidateHostResult::soap_default(NULL); }
	virtual ~ns1__OvfValidateHostResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfParseDescriptorResult
#define SOAP_TYPE_ns1__OvfParseDescriptorResult (694)
/* ns1:OvfParseDescriptorResult */
class SOAP_CMAC ns1__OvfParseDescriptorResult : public ns1__DynamicData
{
public:
	std::vector<std::string >eula;	/* optional element of type xsd:string */
	std::vector<ns1__OvfNetworkInfo * >network;	/* optional element of type ns1:OvfNetworkInfo */
	std::vector<std::string >ipAllocationScheme;	/* optional element of type xsd:string */
	std::vector<std::string >ipProtocols;	/* optional element of type xsd:string */
	std::vector<ns1__VAppPropertyInfo * >property;	/* optional element of type ns1:VAppPropertyInfo */
	ns1__VAppProductInfo *productInfo;	/* optional element of type ns1:VAppProductInfo */
	std::string annotation;	/* required element of type xsd:string */
	LONG64 *approximateDownloadSize;	/* optional element of type xsd:long */
	LONG64 *approximateFlatDeploymentSize;	/* optional element of type xsd:long */
	LONG64 *approximateSparseDeploymentSize;	/* optional element of type xsd:long */
	std::string defaultEntityName;	/* required element of type xsd:string */
	bool virtualApp;	/* required element of type xsd:boolean */
	std::vector<ns1__OvfDeploymentOption * >deploymentOption;	/* optional element of type ns1:OvfDeploymentOption */
	std::string defaultDeploymentOption;	/* required element of type xsd:string */
	std::vector<ns1__KeyValue * >entityName;	/* optional element of type ns1:KeyValue */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >warning;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_ns1__OvfParseDescriptorResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfParseDescriptorResult() { ns1__OvfParseDescriptorResult::soap_default(NULL); }
	virtual ~ns1__OvfParseDescriptorResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfNetworkInfo
#define SOAP_TYPE_ns1__OvfNetworkInfo (695)
/* ns1:OvfNetworkInfo */
class SOAP_CMAC ns1__OvfNetworkInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_ns1__OvfNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfNetworkInfo() { ns1__OvfNetworkInfo::soap_default(NULL); }
	virtual ~ns1__OvfNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfResourceMap
#define SOAP_TYPE_ns1__OvfResourceMap (698)
/* ns1:OvfResourceMap */
class SOAP_CMAC ns1__OvfResourceMap : public ns1__DynamicData
{
public:
	std::string source;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *parent;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ResourceConfigSpec *resourceSpec;	/* optional element of type ns1:ResourceConfigSpec */
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_ns1__OvfResourceMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfResourceMap() { ns1__OvfResourceMap::soap_default(NULL); }
	virtual ~ns1__OvfResourceMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfNetworkMapping
#define SOAP_TYPE_ns1__OvfNetworkMapping (700)
/* ns1:OvfNetworkMapping */
class SOAP_CMAC ns1__OvfNetworkMapping : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *network;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE_ns1__OvfNetworkMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfNetworkMapping() { ns1__OvfNetworkMapping::soap_default(NULL); }
	virtual ~ns1__OvfNetworkMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateImportSpecResult
#define SOAP_TYPE_ns1__OvfCreateImportSpecResult (702)
/* ns1:OvfCreateImportSpecResult */
class SOAP_CMAC ns1__OvfCreateImportSpecResult : public ns1__DynamicData
{
public:
	ns1__ImportSpec *importSpec;	/* optional element of type ns1:ImportSpec */
	std::vector<ns1__OvfFileItem * >fileItem;	/* optional element of type ns1:OvfFileItem */
	std::vector<ns1__LocalizedMethodFault * >warning;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_ns1__OvfCreateImportSpecResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfCreateImportSpecResult() { ns1__OvfCreateImportSpecResult::soap_default(NULL); }
	virtual ~ns1__OvfCreateImportSpecResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfFileItem
#define SOAP_TYPE_ns1__OvfFileItem (703)
/* ns1:OvfFileItem */
class SOAP_CMAC ns1__OvfFileItem : public ns1__DynamicData
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::string path;	/* required element of type xsd:string */
	std::string *compressionMethod;	/* optional element of type xsd:string */
	LONG64 *chunkSize;	/* optional element of type xsd:long */
	LONG64 *size;	/* optional element of type xsd:long */
	int cimType;	/* required element of type xsd:int */
	bool create;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE_ns1__OvfFileItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfFileItem() { ns1__OvfFileItem::soap_default(NULL); }
	virtual ~ns1__OvfFileItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateDescriptorParams
#define SOAP_TYPE_ns1__OvfCreateDescriptorParams (705)
/* ns1:OvfCreateDescriptorParams */
class SOAP_CMAC ns1__OvfCreateDescriptorParams : public ns1__DynamicData
{
public:
	std::vector<ns1__OvfFile * >ovfFiles;	/* optional element of type ns1:OvfFile */
	std::string *name;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	bool *includeImageFiles;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE_ns1__OvfCreateDescriptorParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfCreateDescriptorParams() { ns1__OvfCreateDescriptorParams::soap_default(NULL); }
	virtual ~ns1__OvfCreateDescriptorParams() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateDescriptorResult
#define SOAP_TYPE_ns1__OvfCreateDescriptorResult (706)
/* ns1:OvfCreateDescriptorResult */
class SOAP_CMAC ns1__OvfCreateDescriptorResult : public ns1__DynamicData
{
public:
	std::string ovfDescriptor;	/* required element of type xsd:string */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >warning;	/* optional element of type ns1:LocalizedMethodFault */
	bool *includeImageFiles;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_ns1__OvfCreateDescriptorResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfCreateDescriptorResult() { ns1__OvfCreateDescriptorResult::soap_default(NULL); }
	virtual ~ns1__OvfCreateDescriptorResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfFile
#define SOAP_TYPE_ns1__OvfFile (707)
/* ns1:OvfFile */
class SOAP_CMAC ns1__OvfFile : public ns1__DynamicData
{
public:
	std::string deviceId;	/* required element of type xsd:string */
	std::string path;	/* required element of type xsd:string */
	std::string *compressionMethod;	/* optional element of type xsd:string */
	LONG64 *chunkSize;	/* optional element of type xsd:long */
	LONG64 size;	/* required element of type xsd:long */
	LONG64 *capacity;	/* optional element of type xsd:long */
	LONG64 *populatedSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_ns1__OvfFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfFile() { ns1__OvfFile::soap_default(NULL); }
	virtual ~ns1__OvfFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PasswordField
#define SOAP_TYPE_ns1__PasswordField (709)
/* ns1:PasswordField */
class SOAP_CMAC ns1__PasswordField : public ns1__DynamicData
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE_ns1__PasswordField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PasswordField() { ns1__PasswordField::soap_default(NULL); }
	virtual ~ns1__PasswordField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerformanceDescription
#define SOAP_TYPE_ns1__PerformanceDescription (710)
/* ns1:PerformanceDescription */
class SOAP_CMAC ns1__PerformanceDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__ElementDescription * >counterType;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >statsType;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE_ns1__PerformanceDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerformanceDescription() { ns1__PerformanceDescription::soap_default(NULL); }
	virtual ~ns1__PerformanceDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfProviderSummary
#define SOAP_TYPE_ns1__PerfProviderSummary (711)
/* ns1:PerfProviderSummary */
class SOAP_CMAC ns1__PerfProviderSummary : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	bool currentSupported;	/* required element of type xsd:boolean */
	bool summarySupported;	/* required element of type xsd:boolean */
	int *refreshRate;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_ns1__PerfProviderSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfProviderSummary() { ns1__PerfProviderSummary::soap_default(NULL); }
	virtual ~ns1__PerfProviderSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfCounterInfo
#define SOAP_TYPE_ns1__PerfCounterInfo (712)
/* ns1:PerfCounterInfo */
class SOAP_CMAC ns1__PerfCounterInfo : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	ns1__ElementDescription *nameInfo;	/* required element of type ns1:ElementDescription */
	ns1__ElementDescription *groupInfo;	/* required element of type ns1:ElementDescription */
	ns1__ElementDescription *unitInfo;	/* required element of type ns1:ElementDescription */
	enum ns1__PerfSummaryType rollupType;	/* required element of type ns1:PerfSummaryType */
	enum ns1__PerfStatsType statsType;	/* required element of type ns1:PerfStatsType */
	int *level;	/* optional element of type xsd:int */
	int *perDeviceLevel;	/* optional element of type xsd:int */
	std::vector<int >associatedCounterId;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_ns1__PerfCounterInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfCounterInfo() { ns1__PerfCounterInfo::soap_default(NULL); }
	virtual ~ns1__PerfCounterInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfMetricId
#define SOAP_TYPE_ns1__PerfMetricId (714)
/* ns1:PerfMetricId */
class SOAP_CMAC ns1__PerfMetricId : public ns1__DynamicData
{
public:
	int counterId;	/* required element of type xsd:int */
	std::string instance;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE_ns1__PerfMetricId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfMetricId() { ns1__PerfMetricId::soap_default(NULL); }
	virtual ~ns1__PerfMetricId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfQuerySpec
#define SOAP_TYPE_ns1__PerfQuerySpec (716)
/* ns1:PerfQuerySpec */
class SOAP_CMAC ns1__PerfQuerySpec : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	time_t *startTime;	/* optional element of type xsd:dateTime */
	time_t *endTime;	/* optional element of type xsd:dateTime */
	int *maxSample;	/* optional element of type xsd:int */
	std::vector<ns1__PerfMetricId * >metricId;	/* optional element of type ns1:PerfMetricId */
	int *intervalId;	/* optional element of type xsd:int */
	std::string *format;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_ns1__PerfQuerySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfQuerySpec() { ns1__PerfQuerySpec::soap_default(NULL); }
	virtual ~ns1__PerfQuerySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfSampleInfo
#define SOAP_TYPE_ns1__PerfSampleInfo (718)
/* ns1:PerfSampleInfo */
class SOAP_CMAC ns1__PerfSampleInfo : public ns1__DynamicData
{
public:
	time_t timestamp;	/* required element of type xsd:dateTime */
	int interval;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_ns1__PerfSampleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfSampleInfo() { ns1__PerfSampleInfo::soap_default(NULL); }
	virtual ~ns1__PerfSampleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfMetricSeries
#define SOAP_TYPE_ns1__PerfMetricSeries (720)
/* ns1:PerfMetricSeries */
class SOAP_CMAC ns1__PerfMetricSeries : public ns1__DynamicData
{
public:
	ns1__PerfMetricId *id;	/* required element of type ns1:PerfMetricId */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE_ns1__PerfMetricSeries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfMetricSeries() { ns1__PerfMetricSeries::soap_default(NULL); }
	virtual ~ns1__PerfMetricSeries() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfEntityMetricBase
#define SOAP_TYPE_ns1__PerfEntityMetricBase (725)
/* ns1:PerfEntityMetricBase */
class SOAP_CMAC ns1__PerfEntityMetricBase : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_ns1__PerfEntityMetricBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfEntityMetricBase() { ns1__PerfEntityMetricBase::soap_default(NULL); }
	virtual ~ns1__PerfEntityMetricBase() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfCompositeMetric
#define SOAP_TYPE_ns1__PerfCompositeMetric (729)
/* ns1:PerfCompositeMetric */
class SOAP_CMAC ns1__PerfCompositeMetric : public ns1__DynamicData
{
public:
	ns1__PerfEntityMetricBase *entity;	/* optional element of type ns1:PerfEntityMetricBase */
	std::vector<ns1__PerfEntityMetricBase * >childEntity;	/* optional element of type ns1:PerfEntityMetricBase */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_ns1__PerfCompositeMetric */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfCompositeMetric() { ns1__PerfCompositeMetric::soap_default(NULL); }
	virtual ~ns1__PerfCompositeMetric() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfInterval
#define SOAP_TYPE_ns1__PerfInterval (730)
/* ns1:PerfInterval */
class SOAP_CMAC ns1__PerfInterval : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	int samplingPeriod;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	int length;	/* required element of type xsd:int */
	int *level;	/* optional element of type xsd:int */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_ns1__PerfInterval */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfInterval() { ns1__PerfInterval::soap_default(NULL); }
	virtual ~ns1__PerfInterval() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PrivilegePolicyDef
#define SOAP_TYPE_ns1__PrivilegePolicyDef (733)
/* ns1:PrivilegePolicyDef */
class SOAP_CMAC ns1__PrivilegePolicyDef : public ns1__DynamicData
{
public:
	std::string createPrivilege;	/* required element of type xsd:string */
	std::string readPrivilege;	/* required element of type xsd:string */
	std::string updatePrivilege;	/* required element of type xsd:string */
	std::string deletePrivilege;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_ns1__PrivilegePolicyDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PrivilegePolicyDef() { ns1__PrivilegePolicyDef::soap_default(NULL); }
	virtual ~ns1__PrivilegePolicyDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceAllocationInfo
#define SOAP_TYPE_ns1__ResourceAllocationInfo (734)
/* ns1:ResourceAllocationInfo */
class SOAP_CMAC ns1__ResourceAllocationInfo : public ns1__DynamicData
{
public:
	LONG64 *reservation;	/* optional element of type xsd:long */
	bool *expandableReservation;	/* optional element of type xsd:boolean */
	LONG64 *limit;	/* optional element of type xsd:long */
	class ns1__SharesInfo *shares;	/* optional element of type ns1:SharesInfo */
	LONG64 *overheadLimit;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_ns1__ResourceAllocationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceAllocationInfo() { ns1__ResourceAllocationInfo::soap_default(NULL); }
	virtual ~ns1__ResourceAllocationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceAllocationOption
#define SOAP_TYPE_ns1__ResourceAllocationOption (735)
/* ns1:ResourceAllocationOption */
class SOAP_CMAC ns1__ResourceAllocationOption : public ns1__DynamicData
{
public:
	class ns1__SharesOption *sharesOption;	/* required element of type ns1:SharesOption */
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_ns1__ResourceAllocationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceAllocationOption() { ns1__ResourceAllocationOption::soap_default(NULL); }
	virtual ~ns1__ResourceAllocationOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceConfigOption
#define SOAP_TYPE_ns1__ResourceConfigOption (736)
/* ns1:ResourceConfigOption */
class SOAP_CMAC ns1__ResourceConfigOption : public ns1__DynamicData
{
public:
	ns1__ResourceAllocationOption *cpuAllocationOption;	/* required element of type ns1:ResourceAllocationOption */
	ns1__ResourceAllocationOption *memoryAllocationOption;	/* required element of type ns1:ResourceAllocationOption */
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_ns1__ResourceConfigOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceConfigOption() { ns1__ResourceConfigOption::soap_default(NULL); }
	virtual ~ns1__ResourceConfigOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceConfigSpec
#define SOAP_TYPE_ns1__ResourceConfigSpec (737)
/* ns1:ResourceConfigSpec */
class SOAP_CMAC ns1__ResourceConfigSpec : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
	std::string *changeVersion;	/* optional element of type xsd:string */
	time_t *lastModified;	/* optional element of type xsd:dateTime */
	ns1__ResourceAllocationInfo *cpuAllocation;	/* required element of type ns1:ResourceAllocationInfo */
	ns1__ResourceAllocationInfo *memoryAllocation;	/* required element of type ns1:ResourceAllocationInfo */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_ns1__ResourceConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceConfigSpec() { ns1__ResourceConfigSpec::soap_default(NULL); }
	virtual ~ns1__ResourceConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatabaseSizeParam
#define SOAP_TYPE_ns1__DatabaseSizeParam (739)
/* ns1:DatabaseSizeParam */
class SOAP_CMAC ns1__DatabaseSizeParam : public ns1__DynamicData
{
public:
	class ns1__InventoryDescription *inventoryDesc;	/* required element of type ns1:InventoryDescription */
	class ns1__PerformanceStatisticsDescription *perfStatsDesc;	/* optional element of type ns1:PerformanceStatisticsDescription */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_ns1__DatabaseSizeParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatabaseSizeParam() { ns1__DatabaseSizeParam::soap_default(NULL); }
	virtual ~ns1__DatabaseSizeParam() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InventoryDescription
#define SOAP_TYPE_ns1__InventoryDescription (740)
/* ns1:InventoryDescription */
class SOAP_CMAC ns1__InventoryDescription : public ns1__DynamicData
{
public:
	int numHosts;	/* required element of type xsd:int */
	int numVirtualMachines;	/* required element of type xsd:int */
	int *numResourcePools;	/* optional element of type xsd:int */
	int *numClusters;	/* optional element of type xsd:int */
	int *numCpuDev;	/* optional element of type xsd:int */
	int *numNetDev;	/* optional element of type xsd:int */
	int *numDiskDev;	/* optional element of type xsd:int */
	int *numvCpuDev;	/* optional element of type xsd:int */
	int *numvNetDev;	/* optional element of type xsd:int */
	int *numvDiskDev;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE_ns1__InventoryDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InventoryDescription() { ns1__InventoryDescription::soap_default(NULL); }
	virtual ~ns1__InventoryDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerformanceStatisticsDescription
#define SOAP_TYPE_ns1__PerformanceStatisticsDescription (741)
/* ns1:PerformanceStatisticsDescription */
class SOAP_CMAC ns1__PerformanceStatisticsDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__PerfInterval * >intervals;	/* optional element of type ns1:PerfInterval */
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE_ns1__PerformanceStatisticsDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerformanceStatisticsDescription() { ns1__PerformanceStatisticsDescription::soap_default(NULL); }
	virtual ~ns1__PerformanceStatisticsDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatabaseSizeEstimate
#define SOAP_TYPE_ns1__DatabaseSizeEstimate (742)
/* ns1:DatabaseSizeEstimate */
class SOAP_CMAC ns1__DatabaseSizeEstimate : public ns1__DynamicData
{
public:
	LONG64 size;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE_ns1__DatabaseSizeEstimate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatabaseSizeEstimate() { ns1__DatabaseSizeEstimate::soap_default(NULL); }
	virtual ~ns1__DatabaseSizeEstimate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolResourceUsage
#define SOAP_TYPE_ns1__ResourcePoolResourceUsage (743)
/* ns1:ResourcePoolResourceUsage */
class SOAP_CMAC ns1__ResourcePoolResourceUsage : public ns1__DynamicData
{
public:
	LONG64 reservationUsed;	/* required element of type xsd:long */
	LONG64 reservationUsedForVm;	/* required element of type xsd:long */
	LONG64 unreservedForPool;	/* required element of type xsd:long */
	LONG64 unreservedForVm;	/* required element of type xsd:long */
	LONG64 overallUsage;	/* required element of type xsd:long */
	LONG64 maxUsage;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE_ns1__ResourcePoolResourceUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolResourceUsage() { ns1__ResourcePoolResourceUsage::soap_default(NULL); }
	virtual ~ns1__ResourcePoolResourceUsage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolRuntimeInfo
#define SOAP_TYPE_ns1__ResourcePoolRuntimeInfo (744)
/* ns1:ResourcePoolRuntimeInfo */
class SOAP_CMAC ns1__ResourcePoolRuntimeInfo : public ns1__DynamicData
{
public:
	ns1__ResourcePoolResourceUsage *memory;	/* required element of type ns1:ResourcePoolResourceUsage */
	ns1__ResourcePoolResourceUsage *cpu;	/* required element of type ns1:ResourcePoolResourceUsage */
	enum ns1__ManagedEntityStatus overallStatus;	/* required element of type ns1:ManagedEntityStatus */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE_ns1__ResourcePoolRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolRuntimeInfo() { ns1__ResourcePoolRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__ResourcePoolRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolQuickStats
#define SOAP_TYPE_ns1__ResourcePoolQuickStats (745)
/* ns1:ResourcePoolQuickStats */
class SOAP_CMAC ns1__ResourcePoolQuickStats : public ns1__DynamicData
{
public:
	LONG64 *overallCpuUsage;	/* optional element of type xsd:long */
	LONG64 *overallCpuDemand;	/* optional element of type xsd:long */
	LONG64 *guestMemoryUsage;	/* optional element of type xsd:long */
	LONG64 *hostMemoryUsage;	/* optional element of type xsd:long */
	LONG64 *distributedCpuEntitlement;	/* optional element of type xsd:long */
	LONG64 *distributedMemoryEntitlement;	/* optional element of type xsd:long */
	int *staticCpuEntitlement;	/* optional element of type xsd:int */
	int *staticMemoryEntitlement;	/* optional element of type xsd:int */
	LONG64 *privateMemory;	/* optional element of type xsd:long */
	LONG64 *sharedMemory;	/* optional element of type xsd:long */
	LONG64 *swappedMemory;	/* optional element of type xsd:long */
	LONG64 *balloonedMemory;	/* optional element of type xsd:long */
	LONG64 *overheadMemory;	/* optional element of type xsd:long */
	LONG64 *consumedOverheadMemory;	/* optional element of type xsd:long */
	LONG64 *compressedMemory;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE_ns1__ResourcePoolQuickStats */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolQuickStats() { ns1__ResourcePoolQuickStats::soap_default(NULL); }
	virtual ~ns1__ResourcePoolQuickStats() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolSummary
#define SOAP_TYPE_ns1__ResourcePoolSummary (746)
/* ns1:ResourcePoolSummary */
class SOAP_CMAC ns1__ResourcePoolSummary : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ResourceConfigSpec *config;	/* required element of type ns1:ResourceConfigSpec */
	ns1__ResourcePoolRuntimeInfo *runtime;	/* required element of type ns1:ResourcePoolRuntimeInfo */
	ns1__ResourcePoolQuickStats *quickStats;	/* optional element of type ns1:ResourcePoolQuickStats */
	int *configuredMemoryMB;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE_ns1__ResourcePoolSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolSummary() { ns1__ResourcePoolSummary::soap_default(NULL); }
	virtual ~ns1__ResourcePoolSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVMotionCompatibility
#define SOAP_TYPE_ns1__HostVMotionCompatibility (747)
/* ns1:HostVMotionCompatibility */
class SOAP_CMAC ns1__HostVMotionCompatibility : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >compatibility;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE_ns1__HostVMotionCompatibility */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVMotionCompatibility() { ns1__HostVMotionCompatibility::soap_default(NULL); }
	virtual ~ns1__HostVMotionCompatibility() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProductComponentInfo
#define SOAP_TYPE_ns1__ProductComponentInfo (749)
/* ns1:ProductComponentInfo */
class SOAP_CMAC ns1__ProductComponentInfo : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	int release;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE_ns1__ProductComponentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProductComponentInfo() { ns1__ProductComponentInfo::soap_default(NULL); }
	virtual ~ns1__ProductComponentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServiceContent
#define SOAP_TYPE_ns1__ServiceContent (751)
/* ns1:ServiceContent */
class SOAP_CMAC ns1__ServiceContent : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *rootFolder;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *propertyCollector;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *viewManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__AboutInfo *about;	/* required element of type ns1:AboutInfo */
	ns1__ManagedObjectReference *setting;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *userDirectory;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *sessionManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *authorizationManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *perfManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *scheduledTaskManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *alarmManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *eventManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *taskManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *extensionManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *customizationSpecManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *customFieldsManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *accountManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *diagnosticManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *licenseManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *searchIndex;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *fileManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *virtualDiskManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *virtualizationManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *snmpSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vmProvisioningChecker;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vmCompatibilityChecker;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *ovfManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *ipPoolManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dvSwitchManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *hostProfileManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *clusterProfileManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *complianceManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *localizationManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *storageResourceManager;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE_ns1__ServiceContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServiceContent() { ns1__ServiceContent::soap_default(NULL); }
	virtual ~ns1__ServiceContent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SessionManagerLocalTicket
#define SOAP_TYPE_ns1__SessionManagerLocalTicket (752)
/* ns1:SessionManagerLocalTicket */
class SOAP_CMAC ns1__SessionManagerLocalTicket : public ns1__DynamicData
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string passwordFilePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE_ns1__SessionManagerLocalTicket */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SessionManagerLocalTicket() { ns1__SessionManagerLocalTicket::soap_default(NULL); }
	virtual ~ns1__SessionManagerLocalTicket() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserSession
#define SOAP_TYPE_ns1__UserSession (753)
/* ns1:UserSession */
class SOAP_CMAC ns1__UserSession : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
	std::string fullName;	/* required element of type xsd:string */
	time_t loginTime;	/* required element of type xsd:dateTime */
	time_t lastActiveTime;	/* required element of type xsd:dateTime */
	std::string locale;	/* required element of type xsd:string */
	std::string messageLocale;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE_ns1__UserSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserSession() { ns1__UserSession::soap_default(NULL); }
	virtual ~ns1__UserSession() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SharesInfo
#define SOAP_TYPE_ns1__SharesInfo (755)
/* ns1:SharesInfo */
class SOAP_CMAC ns1__SharesInfo : public ns1__DynamicData
{
public:
	int shares;	/* required element of type xsd:int */
	enum ns1__SharesLevel level;	/* required element of type ns1:SharesLevel */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE_ns1__SharesInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SharesInfo() { ns1__SharesInfo::soap_default(NULL); }
	virtual ~ns1__SharesInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SharesOption
#define SOAP_TYPE_ns1__SharesOption (756)
/* ns1:SharesOption */
class SOAP_CMAC ns1__SharesOption : public ns1__DynamicData
{
public:
	class ns1__IntOption *sharesOption;	/* required element of type ns1:IntOption */
	enum ns1__SharesLevel defaultLevel;	/* required element of type ns1:SharesLevel */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE_ns1__SharesOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SharesOption() { ns1__SharesOption::soap_default(NULL); }
	virtual ~ns1__SharesOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageIOAllocationInfo
#define SOAP_TYPE_ns1__StorageIOAllocationInfo (757)
/* ns1:StorageIOAllocationInfo */
class SOAP_CMAC ns1__StorageIOAllocationInfo : public ns1__DynamicData
{
public:
	LONG64 *limit;	/* optional element of type xsd:long */
	ns1__SharesInfo *shares;	/* optional element of type ns1:SharesInfo */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE_ns1__StorageIOAllocationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageIOAllocationInfo() { ns1__StorageIOAllocationInfo::soap_default(NULL); }
	virtual ~ns1__StorageIOAllocationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageIOAllocationOption
#define SOAP_TYPE_ns1__StorageIOAllocationOption (758)
/* ns1:StorageIOAllocationOption */
class SOAP_CMAC ns1__StorageIOAllocationOption : public ns1__DynamicData
{
public:
	class ns1__LongOption *limitOption;	/* required element of type ns1:LongOption */
	ns1__SharesOption *sharesOption;	/* required element of type ns1:SharesOption */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE_ns1__StorageIOAllocationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageIOAllocationOption() { ns1__StorageIOAllocationOption::soap_default(NULL); }
	virtual ~ns1__StorageIOAllocationOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageIORMInfo
#define SOAP_TYPE_ns1__StorageIORMInfo (759)
/* ns1:StorageIORMInfo */
class SOAP_CMAC ns1__StorageIORMInfo : public ns1__DynamicData
{
public:
	bool enabled;	/* required element of type xsd:boolean */
	int congestionThreshold;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE_ns1__StorageIORMInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageIORMInfo() { ns1__StorageIORMInfo::soap_default(NULL); }
	virtual ~ns1__StorageIORMInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageIORMConfigSpec
#define SOAP_TYPE_ns1__StorageIORMConfigSpec (760)
/* ns1:StorageIORMConfigSpec */
class SOAP_CMAC ns1__StorageIORMConfigSpec : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	int *congestionThreshold;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE_ns1__StorageIORMConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageIORMConfigSpec() { ns1__StorageIORMConfigSpec::soap_default(NULL); }
	virtual ~ns1__StorageIORMConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageIORMConfigOption
#define SOAP_TYPE_ns1__StorageIORMConfigOption (761)
/* ns1:StorageIORMConfigOption */
class SOAP_CMAC ns1__StorageIORMConfigOption : public ns1__DynamicData
{
public:
	class ns1__BoolOption *enabledOption;	/* required element of type ns1:BoolOption */
	ns1__IntOption *congestionThresholdOption;	/* required element of type ns1:IntOption */
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE_ns1__StorageIORMConfigOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageIORMConfigOption() { ns1__StorageIORMConfigOption::soap_default(NULL); }
	virtual ~ns1__StorageIORMConfigOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Tag
#define SOAP_TYPE_ns1__Tag (763)
/* ns1:Tag */
class SOAP_CMAC ns1__Tag : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 763; } /* = unique id SOAP_TYPE_ns1__Tag */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Tag() { ns1__Tag::soap_default(NULL); }
	virtual ~ns1__Tag() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskDescription
#define SOAP_TYPE_ns1__TaskDescription (765)
/* ns1:TaskDescription */
class SOAP_CMAC ns1__TaskDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__ElementDescription * >methodInfo;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >state;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__TypeDescription * >reason;	/* required element of type ns1:TypeDescription */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_ns1__TaskDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskDescription() { ns1__TaskDescription::soap_default(NULL); }
	virtual ~ns1__TaskDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecByEntity
#define SOAP_TYPE_ns1__TaskFilterSpecByEntity (766)
/* ns1:TaskFilterSpecByEntity */
class SOAP_CMAC ns1__TaskFilterSpecByEntity : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__TaskFilterSpecRecursionOption recursion;	/* required element of type ns1:TaskFilterSpecRecursionOption */
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpecByEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpecByEntity() { ns1__TaskFilterSpecByEntity::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpecByEntity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecByTime
#define SOAP_TYPE_ns1__TaskFilterSpecByTime (767)
/* ns1:TaskFilterSpecByTime */
class SOAP_CMAC ns1__TaskFilterSpecByTime : public ns1__DynamicData
{
public:
	enum ns1__TaskFilterSpecTimeOption timeType;	/* required element of type ns1:TaskFilterSpecTimeOption */
	time_t *beginTime;	/* optional element of type xsd:dateTime */
	time_t *endTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpecByTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpecByTime() { ns1__TaskFilterSpecByTime::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpecByTime() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpecByUsername
#define SOAP_TYPE_ns1__TaskFilterSpecByUsername (768)
/* ns1:TaskFilterSpecByUsername */
class SOAP_CMAC ns1__TaskFilterSpecByUsername : public ns1__DynamicData
{
public:
	bool systemUser;	/* required element of type xsd:boolean */
	std::vector<std::string >userList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpecByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpecByUsername() { ns1__TaskFilterSpecByUsername::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpecByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskFilterSpec
#define SOAP_TYPE_ns1__TaskFilterSpec (769)
/* ns1:TaskFilterSpec */
class SOAP_CMAC ns1__TaskFilterSpec : public ns1__DynamicData
{
public:
	ns1__TaskFilterSpecByEntity *entity;	/* optional element of type ns1:TaskFilterSpecByEntity */
	ns1__TaskFilterSpecByTime *time;	/* optional element of type ns1:TaskFilterSpecByTime */
	ns1__TaskFilterSpecByUsername *userName;	/* optional element of type ns1:TaskFilterSpecByUsername */
	std::vector<enum ns1__TaskInfoState >state;	/* optional element of type ns1:TaskInfoState */
	ns1__ManagedObjectReference *alarm;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *scheduledTask;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<int >eventChainId;	/* optional element of type xsd:int */
	std::vector<std::string >tag;	/* optional element of type xsd:string */
	std::vector<std::string >parentTaskKey;	/* optional element of type xsd:string */
	std::vector<std::string >rootTaskKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE_ns1__TaskFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskFilterSpec() { ns1__TaskFilterSpec::soap_default(NULL); }
	virtual ~ns1__TaskFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskInfo
#define SOAP_TYPE_ns1__TaskInfo (771)
/* ns1:TaskInfo */
class SOAP_CMAC ns1__TaskInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *task;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizableMessage *description;	/* optional element of type ns1:LocalizableMessage */
	std::string *name;	/* optional element of type xsd:string */
	std::string descriptionId;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
	std::string *entityName;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >locked;	/* optional element of type ns1:ManagedObjectReference */
	enum ns1__TaskInfoState state;	/* required element of type ns1:TaskInfoState */
	bool cancelled;	/* required element of type xsd:boolean */
	bool cancelable;	/* required element of type xsd:boolean */
	ns1__LocalizedMethodFault *error;	/* optional element of type ns1:LocalizedMethodFault */
	xsd__anyType *result;	/* optional element of type xsd:anyType */
	int *progress;	/* optional element of type xsd:int */
	class ns1__TaskReason *reason;	/* required element of type ns1:TaskReason */
	time_t queueTime;	/* required element of type xsd:dateTime */
	time_t *startTime;	/* optional element of type xsd:dateTime */
	time_t *completeTime;	/* optional element of type xsd:dateTime */
	int eventChainId;	/* required element of type xsd:int */
	std::string *changeTag;	/* optional element of type xsd:string */
	std::string *parentTaskKey;	/* optional element of type xsd:string */
	std::string *rootTaskKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE_ns1__TaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskInfo() { ns1__TaskInfo::soap_default(NULL); }
	virtual ~ns1__TaskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskReason
#define SOAP_TYPE_ns1__TaskReason (773)
/* ns1:TaskReason */
class SOAP_CMAC ns1__TaskReason : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_ns1__TaskReason */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskReason() { ns1__TaskReason::soap_default(NULL); }
	virtual ~ns1__TaskReason() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo
#define SOAP_TYPE_ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo (780)
/* ns1:UpdateVirtualMachineFilesResultFailedVmFileInfo */
class SOAP_CMAC ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo : public ns1__DynamicData
{
public:
	std::string vmFile;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE_ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo() { ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo::soap_default(NULL); }
	virtual ~ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdateVirtualMachineFilesResult
#define SOAP_TYPE_ns1__UpdateVirtualMachineFilesResult (782)
/* ns1:UpdateVirtualMachineFilesResult */
class SOAP_CMAC ns1__UpdateVirtualMachineFilesResult : public ns1__DynamicData
{
public:
	std::vector<ns1__UpdateVirtualMachineFilesResultFailedVmFileInfo * >failedVmFile;	/* optional element of type ns1:UpdateVirtualMachineFilesResultFailedVmFileInfo */
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE_ns1__UpdateVirtualMachineFilesResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdateVirtualMachineFilesResult() { ns1__UpdateVirtualMachineFilesResult::soap_default(NULL); }
	virtual ~ns1__UpdateVirtualMachineFilesResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserSearchResult
#define SOAP_TYPE_ns1__UserSearchResult (783)
/* ns1:UserSearchResult */
class SOAP_CMAC ns1__UserSearchResult : public ns1__DynamicData
{
public:
	std::string principal;	/* required element of type xsd:string */
	std::string *fullName;	/* optional element of type xsd:string */
	bool group;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_ns1__UserSearchResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserSearchResult() { ns1__UserSearchResult::soap_default(NULL); }
	virtual ~ns1__UserSearchResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualAppLinkInfo
#define SOAP_TYPE_ns1__VirtualAppLinkInfo (786)
/* ns1:VirtualAppLinkInfo */
class SOAP_CMAC ns1__VirtualAppLinkInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	bool *destroyWithParent;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE_ns1__VirtualAppLinkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualAppLinkInfo() { ns1__VirtualAppLinkInfo::soap_default(NULL); }
	virtual ~ns1__VirtualAppLinkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskSpec
#define SOAP_TYPE_ns1__VirtualDiskSpec (788)
/* ns1:VirtualDiskSpec */
class SOAP_CMAC ns1__VirtualDiskSpec : public ns1__DynamicData
{
public:
	std::string diskType;	/* required element of type xsd:string */
	std::string adapterType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE_ns1__VirtualDiskSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskSpec() { ns1__VirtualDiskSpec::soap_default(NULL); }
	virtual ~ns1__VirtualDiskSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTicket
#define SOAP_TYPE_ns1__VirtualMachineTicket (791)
/* ns1:VirtualMachineTicket */
class SOAP_CMAC ns1__VirtualMachineTicket : public ns1__DynamicData
{
public:
	std::string ticket;	/* required element of type xsd:string */
	std::string cfgFile;	/* required element of type xsd:string */
	std::string *host;	/* optional element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE_ns1__VirtualMachineTicket */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineTicket() { ns1__VirtualMachineTicket::soap_default(NULL); }
	virtual ~ns1__VirtualMachineTicket() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMksTicket
#define SOAP_TYPE_ns1__VirtualMachineMksTicket (792)
/* ns1:VirtualMachineMksTicket */
class SOAP_CMAC ns1__VirtualMachineMksTicket : public ns1__DynamicData
{
public:
	std::string ticket;	/* required element of type xsd:string */
	std::string cfgFile;	/* required element of type xsd:string */
	std::string *host;	/* optional element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMksTicket */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMksTicket() { ns1__VirtualMachineMksTicket::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMksTicket() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDisplayTopology
#define SOAP_TYPE_ns1__VirtualMachineDisplayTopology (793)
/* ns1:VirtualMachineDisplayTopology */
class SOAP_CMAC ns1__VirtualMachineDisplayTopology : public ns1__DynamicData
{
public:
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDisplayTopology */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDisplayTopology() { ns1__VirtualMachineDisplayTopology::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDisplayTopology() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiskChangeExtent
#define SOAP_TYPE_ns1__DiskChangeExtent (795)
/* ns1:DiskChangeExtent */
class SOAP_CMAC ns1__DiskChangeExtent : public ns1__DynamicData
{
public:
	LONG64 start;	/* required element of type xsd:long */
	LONG64 length;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE_ns1__DiskChangeExtent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiskChangeExtent() { ns1__DiskChangeExtent::soap_default(NULL); }
	virtual ~ns1__DiskChangeExtent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiskChangeInfo
#define SOAP_TYPE_ns1__DiskChangeInfo (797)
/* ns1:DiskChangeInfo */
class SOAP_CMAC ns1__DiskChangeInfo : public ns1__DynamicData
{
public:
	LONG64 startOffset;	/* required element of type xsd:long */
	LONG64 length;	/* required element of type xsd:long */
	std::vector<ns1__DiskChangeExtent * >changedArea;	/* optional element of type ns1:DiskChangeExtent */
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE_ns1__DiskChangeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiskChangeInfo() { ns1__DiskChangeInfo::soap_default(NULL); }
	virtual ~ns1__DiskChangeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Action
#define SOAP_TYPE_ns1__Action (798)
/* ns1:Action */
class SOAP_CMAC ns1__Action : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE_ns1__Action */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Action() { ns1__Action::soap_default(NULL); }
	virtual ~ns1__Action() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodActionArgument
#define SOAP_TYPE_ns1__MethodActionArgument (799)
/* ns1:MethodActionArgument */
class SOAP_CMAC ns1__MethodActionArgument : public ns1__DynamicData
{
public:
	xsd__anyType *value;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE_ns1__MethodActionArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodActionArgument() { ns1__MethodActionArgument::soap_default(NULL); }
	virtual ~ns1__MethodActionArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmAction
#define SOAP_TYPE_ns1__AlarmAction (806)
/* ns1:AlarmAction */
class SOAP_CMAC ns1__AlarmAction : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE_ns1__AlarmAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmAction() { ns1__AlarmAction::soap_default(NULL); }
	virtual ~ns1__AlarmAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmTriggeringActionTransitionSpec
#define SOAP_TYPE_ns1__AlarmTriggeringActionTransitionSpec (808)
/* ns1:AlarmTriggeringActionTransitionSpec */
class SOAP_CMAC ns1__AlarmTriggeringActionTransitionSpec : public ns1__DynamicData
{
public:
	enum ns1__ManagedEntityStatus startState;	/* required element of type ns1:ManagedEntityStatus */
	enum ns1__ManagedEntityStatus finalState;	/* required element of type ns1:ManagedEntityStatus */
	bool repeats;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE_ns1__AlarmTriggeringActionTransitionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmTriggeringActionTransitionSpec() { ns1__AlarmTriggeringActionTransitionSpec::soap_default(NULL); }
	virtual ~ns1__AlarmTriggeringActionTransitionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmDescription
#define SOAP_TYPE_ns1__AlarmDescription (812)
/* ns1:AlarmDescription */
class SOAP_CMAC ns1__AlarmDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__TypeDescription * >expr;	/* required element of type ns1:TypeDescription */
	std::vector<ns1__ElementDescription * >stateOperator;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >metricOperator;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >hostSystemConnectionState;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >virtualMachinePowerState;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >datastoreConnectionState;	/* optional element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >hostSystemPowerState;	/* optional element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >virtualMachineGuestHeartbeatStatus;	/* optional element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >entityStatus;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__TypeDescription * >action;	/* required element of type ns1:TypeDescription */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_ns1__AlarmDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmDescription() { ns1__AlarmDescription::soap_default(NULL); }
	virtual ~ns1__AlarmDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmExpression
#define SOAP_TYPE_ns1__AlarmExpression (813)
/* ns1:AlarmExpression */
class SOAP_CMAC ns1__AlarmExpression : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE_ns1__AlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmExpression() { ns1__AlarmExpression::soap_default(NULL); }
	virtual ~ns1__AlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventAlarmExpressionComparison
#define SOAP_TYPE_ns1__EventAlarmExpressionComparison (818)
/* ns1:EventAlarmExpressionComparison */
class SOAP_CMAC ns1__EventAlarmExpressionComparison : public ns1__DynamicData
{
public:
	std::string attributeName;	/* required element of type xsd:string */
	std::string operator_;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE_ns1__EventAlarmExpressionComparison */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventAlarmExpressionComparison() { ns1__EventAlarmExpressionComparison::soap_default(NULL); }
	virtual ~ns1__EventAlarmExpressionComparison() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmSetting
#define SOAP_TYPE_ns1__AlarmSetting (823)
/* ns1:AlarmSetting */
class SOAP_CMAC ns1__AlarmSetting : public ns1__DynamicData
{
public:
	int toleranceRange;	/* required element of type xsd:int */
	int reportingFrequency;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE_ns1__AlarmSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmSetting() { ns1__AlarmSetting::soap_default(NULL); }
	virtual ~ns1__AlarmSetting() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmSpec
#define SOAP_TYPE_ns1__AlarmSpec (824)
/* ns1:AlarmSpec */
class SOAP_CMAC ns1__AlarmSpec : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
	ns1__AlarmExpression *expression;	/* required element of type ns1:AlarmExpression */
	ns1__AlarmAction *action;	/* optional element of type ns1:AlarmAction */
	int *actionFrequency;	/* optional element of type xsd:int */
	ns1__AlarmSetting *setting;	/* optional element of type ns1:AlarmSetting */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE_ns1__AlarmSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmSpec() { ns1__AlarmSpec::soap_default(NULL); }
	virtual ~ns1__AlarmSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmState
#define SOAP_TYPE_ns1__AlarmState (825)
/* ns1:AlarmState */
class SOAP_CMAC ns1__AlarmState : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *alarm;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__ManagedEntityStatus overallStatus;	/* required element of type ns1:ManagedEntityStatus */
	time_t time;	/* required element of type xsd:dateTime */
	bool *acknowledged;	/* optional element of type xsd:boolean */
	std::string *acknowledgedByUser;	/* optional element of type xsd:string */
	time_t *acknowledgedTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE_ns1__AlarmState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmState() { ns1__AlarmState::soap_default(NULL); }
	virtual ~ns1__AlarmState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterAction
#define SOAP_TYPE_ns1__ClusterAction (827)
/* ns1:ClusterAction */
class SOAP_CMAC ns1__ClusterAction : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *target;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE_ns1__ClusterAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterAction() { ns1__ClusterAction::soap_default(NULL); }
	virtual ~ns1__ClusterAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterActionHistory
#define SOAP_TYPE_ns1__ClusterActionHistory (829)
/* ns1:ClusterActionHistory */
class SOAP_CMAC ns1__ClusterActionHistory : public ns1__DynamicData
{
public:
	ns1__ClusterAction *action;	/* required element of type ns1:ClusterAction */
	time_t time;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE_ns1__ClusterActionHistory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterActionHistory() { ns1__ClusterActionHistory::soap_default(NULL); }
	virtual ~ns1__ClusterActionHistory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterAttemptedVmInfo
#define SOAP_TYPE_ns1__ClusterAttemptedVmInfo (833)
/* ns1:ClusterAttemptedVmInfo */
class SOAP_CMAC ns1__ClusterAttemptedVmInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *task;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE_ns1__ClusterAttemptedVmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterAttemptedVmInfo() { ns1__ClusterAttemptedVmInfo::soap_default(NULL); }
	virtual ~ns1__ClusterAttemptedVmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterConfigInfo
#define SOAP_TYPE_ns1__ClusterConfigInfo (835)
/* ns1:ClusterConfigInfo */
class SOAP_CMAC ns1__ClusterConfigInfo : public ns1__DynamicData
{
public:
	class ns1__ClusterDasConfigInfo *dasConfig;	/* required element of type ns1:ClusterDasConfigInfo */
	std::vector<ns1__ClusterDasVmConfigInfo * >dasVmConfig;	/* optional element of type ns1:ClusterDasVmConfigInfo */
	class ns1__ClusterDrsConfigInfo *drsConfig;	/* required element of type ns1:ClusterDrsConfigInfo */
	std::vector<ns1__ClusterDrsVmConfigInfo * >drsVmConfig;	/* optional element of type ns1:ClusterDrsVmConfigInfo */
	std::vector<ns1__ClusterRuleInfo * >rule;	/* optional element of type ns1:ClusterRuleInfo */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE_ns1__ClusterConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterConfigInfo() { ns1__ClusterConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsConfigInfo
#define SOAP_TYPE_ns1__ClusterDrsConfigInfo (836)
/* ns1:ClusterDrsConfigInfo */
class SOAP_CMAC ns1__ClusterDrsConfigInfo : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	bool *enableVmBehaviorOverrides;	/* optional element of type xsd:boolean */
	enum ns1__DrsBehavior *defaultVmBehavior;	/* optional element of type ns1:DrsBehavior */
	int *vmotionRate;	/* optional element of type xsd:int */
	std::vector<ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_ns1__ClusterDrsConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsConfigInfo() { ns1__ClusterDrsConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDrsConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsVmConfigInfo
#define SOAP_TYPE_ns1__ClusterDrsVmConfigInfo (837)
/* ns1:ClusterDrsVmConfigInfo */
class SOAP_CMAC ns1__ClusterDrsVmConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	bool *enabled;	/* optional element of type xsd:boolean */
	enum ns1__DrsBehavior *behavior;	/* optional element of type ns1:DrsBehavior */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_ns1__ClusterDrsVmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsVmConfigInfo() { ns1__ClusterDrsVmConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDrsVmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDpmConfigInfo
#define SOAP_TYPE_ns1__ClusterDpmConfigInfo (840)
/* ns1:ClusterDpmConfigInfo */
class SOAP_CMAC ns1__ClusterDpmConfigInfo : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	enum ns1__DpmBehavior *defaultDpmBehavior;	/* optional element of type ns1:DpmBehavior */
	int *hostPowerActionRate;	/* optional element of type xsd:int */
	std::vector<ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE_ns1__ClusterDpmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDpmConfigInfo() { ns1__ClusterDpmConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDpmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDpmHostConfigInfo
#define SOAP_TYPE_ns1__ClusterDpmHostConfigInfo (841)
/* ns1:ClusterDpmHostConfigInfo */
class SOAP_CMAC ns1__ClusterDpmHostConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	bool *enabled;	/* optional element of type xsd:boolean */
	enum ns1__DpmBehavior *behavior;	/* optional element of type ns1:DpmBehavior */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_ns1__ClusterDpmHostConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDpmHostConfigInfo() { ns1__ClusterDpmHostConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDpmHostConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterConfigSpec
#define SOAP_TYPE_ns1__ClusterConfigSpec (843)
/* ns1:ClusterConfigSpec */
class SOAP_CMAC ns1__ClusterConfigSpec : public ns1__DynamicData
{
public:
	ns1__ClusterDasConfigInfo *dasConfig;	/* optional element of type ns1:ClusterDasConfigInfo */
	std::vector<ns1__ClusterDasVmConfigSpec * >dasVmConfigSpec;	/* optional element of type ns1:ClusterDasVmConfigSpec */
	ns1__ClusterDrsConfigInfo *drsConfig;	/* optional element of type ns1:ClusterDrsConfigInfo */
	std::vector<ns1__ClusterDrsVmConfigSpec * >drsVmConfigSpec;	/* optional element of type ns1:ClusterDrsVmConfigSpec */
	std::vector<ns1__ClusterRuleSpec * >rulesSpec;	/* optional element of type ns1:ClusterRuleSpec */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE_ns1__ClusterConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterConfigSpec() { ns1__ClusterConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAamNodeState
#define SOAP_TYPE_ns1__ClusterDasAamNodeState (856)
/* ns1:ClusterDasAamNodeState */
class SOAP_CMAC ns1__ClusterDasAamNodeState : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string configState;	/* required element of type xsd:string */
	std::string runtimeState;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_ns1__ClusterDasAamNodeState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAamNodeState() { ns1__ClusterDasAamNodeState::soap_default(NULL); }
	virtual ~ns1__ClusterDasAamNodeState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAdmissionControlInfo
#define SOAP_TYPE_ns1__ClusterDasAdmissionControlInfo (858)
/* ns1:ClusterDasAdmissionControlInfo */
class SOAP_CMAC ns1__ClusterDasAdmissionControlInfo : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE_ns1__ClusterDasAdmissionControlInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAdmissionControlInfo() { ns1__ClusterDasAdmissionControlInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasAdmissionControlInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAdmissionControlPolicy
#define SOAP_TYPE_ns1__ClusterDasAdmissionControlPolicy (859)
/* ns1:ClusterDasAdmissionControlPolicy */
class SOAP_CMAC ns1__ClusterDasAdmissionControlPolicy : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE_ns1__ClusterDasAdmissionControlPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAdmissionControlPolicy() { ns1__ClusterDasAdmissionControlPolicy::soap_default(NULL); }
	virtual ~ns1__ClusterDasAdmissionControlPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAdvancedRuntimeInfo
#define SOAP_TYPE_ns1__ClusterDasAdvancedRuntimeInfo (860)
/* ns1:ClusterDasAdvancedRuntimeInfo */
class SOAP_CMAC ns1__ClusterDasAdvancedRuntimeInfo : public ns1__DynamicData
{
public:
	class ns1__ClusterDasHostInfo *dasHostInfo;	/* optional element of type ns1:ClusterDasHostInfo */
public:
	virtual int soap_type() const { return 860; } /* = unique id SOAP_TYPE_ns1__ClusterDasAdvancedRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAdvancedRuntimeInfo() { ns1__ClusterDasAdvancedRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasAdvancedRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasConfigInfo
#define SOAP_TYPE_ns1__ClusterDasConfigInfo (861)
/* ns1:ClusterDasConfigInfo */
class SOAP_CMAC ns1__ClusterDasConfigInfo : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	std::string *vmMonitoring;	/* optional element of type xsd:string */
	std::string *hostMonitoring;	/* optional element of type xsd:string */
	int *failoverLevel;	/* optional element of type xsd:int */
	ns1__ClusterDasAdmissionControlPolicy *admissionControlPolicy;	/* optional element of type ns1:ClusterDasAdmissionControlPolicy */
	bool *admissionControlEnabled;	/* optional element of type xsd:boolean */
	class ns1__ClusterDasVmSettings *defaultVmSettings;	/* optional element of type ns1:ClusterDasVmSettings */
	std::vector<ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
public:
	virtual int soap_type() const { return 861; } /* = unique id SOAP_TYPE_ns1__ClusterDasConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasConfigInfo() { ns1__ClusterDasConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo
#define SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo (862)
/* ns1:ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo */
class SOAP_CMAC ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo : public ns1__DynamicData
{
public:
	int numVcpus;	/* required element of type xsd:int */
	int cpuMHz;	/* required element of type xsd:int */
	int memoryMB;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 862; } /* = unique id SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo() { ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots
#define SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots (863)
/* ns1:ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
class SOAP_CMAC ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	int slots;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 863; } /* = unique id SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots() { ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots::soap_default(NULL); }
	virtual ~ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasHostInfo
#define SOAP_TYPE_ns1__ClusterDasHostInfo (866)
/* ns1:ClusterDasHostInfo */
class SOAP_CMAC ns1__ClusterDasHostInfo : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 866; } /* = unique id SOAP_TYPE_ns1__ClusterDasHostInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasHostInfo() { ns1__ClusterDasHostInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasHostInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasHostRecommendation
#define SOAP_TYPE_ns1__ClusterDasHostRecommendation (867)
/* ns1:ClusterDasHostRecommendation */
class SOAP_CMAC ns1__ClusterDasHostRecommendation : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	int *drsRating;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 867; } /* = unique id SOAP_TYPE_ns1__ClusterDasHostRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasHostRecommendation() { ns1__ClusterDasHostRecommendation::soap_default(NULL); }
	virtual ~ns1__ClusterDasHostRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmConfigInfo
#define SOAP_TYPE_ns1__ClusterDasVmConfigInfo (868)
/* ns1:ClusterDasVmConfigInfo */
class SOAP_CMAC ns1__ClusterDasVmConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__DasVmPriority *restartPriority;	/* optional element of type ns1:DasVmPriority */
	bool *powerOffOnIsolation;	/* optional element of type xsd:boolean */
	ns1__ClusterDasVmSettings *dasSettings;	/* optional element of type ns1:ClusterDasVmSettings */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE_ns1__ClusterDasVmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasVmConfigInfo() { ns1__ClusterDasVmConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasVmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmSettings
#define SOAP_TYPE_ns1__ClusterDasVmSettings (870)
/* ns1:ClusterDasVmSettings */
class SOAP_CMAC ns1__ClusterDasVmSettings : public ns1__DynamicData
{
public:
	std::string *restartPriority;	/* optional element of type xsd:string */
	std::string *isolationResponse;	/* optional element of type xsd:string */
	class ns1__ClusterVmToolsMonitoringSettings *vmToolsMonitoringSettings;	/* optional element of type ns1:ClusterVmToolsMonitoringSettings */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE_ns1__ClusterDasVmSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasVmSettings() { ns1__ClusterDasVmSettings::soap_default(NULL); }
	virtual ~ns1__ClusterDasVmSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsFaultsFaultsByVm
#define SOAP_TYPE_ns1__ClusterDrsFaultsFaultsByVm (871)
/* ns1:ClusterDrsFaultsFaultsByVm */
class SOAP_CMAC ns1__ClusterDrsFaultsFaultsByVm : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__LocalizedMethodFault * >fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 871; } /* = unique id SOAP_TYPE_ns1__ClusterDrsFaultsFaultsByVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsFaultsFaultsByVm() { ns1__ClusterDrsFaultsFaultsByVm::soap_default(NULL); }
	virtual ~ns1__ClusterDrsFaultsFaultsByVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsFaults
#define SOAP_TYPE_ns1__ClusterDrsFaults (873)
/* ns1:ClusterDrsFaults */
class SOAP_CMAC ns1__ClusterDrsFaults : public ns1__DynamicData
{
public:
	std::string reason;	/* required element of type xsd:string */
	std::vector<ns1__ClusterDrsFaultsFaultsByVm * >faultsByVm;	/* required element of type ns1:ClusterDrsFaultsFaultsByVm */
public:
	virtual int soap_type() const { return 873; } /* = unique id SOAP_TYPE_ns1__ClusterDrsFaults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsFaults() { ns1__ClusterDrsFaults::soap_default(NULL); }
	virtual ~ns1__ClusterDrsFaults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsMigration
#define SOAP_TYPE_ns1__ClusterDrsMigration (875)
/* ns1:ClusterDrsMigration */
class SOAP_CMAC ns1__ClusterDrsMigration : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	time_t time;	/* required element of type xsd:dateTime */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	int *cpuLoad;	/* optional element of type xsd:int */
	LONG64 *memoryLoad;	/* optional element of type xsd:long */
	ns1__ManagedObjectReference *source;	/* required element of type ns1:ManagedObjectReference */
	int *sourceCpuLoad;	/* optional element of type xsd:int */
	LONG64 *sourceMemoryLoad;	/* optional element of type xsd:long */
	ns1__ManagedObjectReference *destination;	/* required element of type ns1:ManagedObjectReference */
	int *destinationCpuLoad;	/* optional element of type xsd:int */
	LONG64 *destinationMemoryLoad;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE_ns1__ClusterDrsMigration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsMigration() { ns1__ClusterDrsMigration::soap_default(NULL); }
	virtual ~ns1__ClusterDrsMigration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsRecommendation
#define SOAP_TYPE_ns1__ClusterDrsRecommendation (877)
/* ns1:ClusterDrsRecommendation */
class SOAP_CMAC ns1__ClusterDrsRecommendation : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	int rating;	/* required element of type xsd:int */
	std::string reason;	/* required element of type xsd:string */
	std::string reasonText;	/* required element of type xsd:string */
	std::vector<ns1__ClusterDrsMigration * >migrationList;	/* required element of type ns1:ClusterDrsMigration */
public:
	virtual int soap_type() const { return 877; } /* = unique id SOAP_TYPE_ns1__ClusterDrsRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsRecommendation() { ns1__ClusterDrsRecommendation::soap_default(NULL); }
	virtual ~ns1__ClusterDrsRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfoHostStatus
#define SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfoHostStatus (879)
/* ns1:ClusterFailoverHostAdmissionControlInfoHostStatus */
class SOAP_CMAC ns1__ClusterFailoverHostAdmissionControlInfoHostStatus : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__ManagedEntityStatus status;	/* required element of type ns1:ManagedEntityStatus */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfoHostStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverHostAdmissionControlInfoHostStatus() { ns1__ClusterFailoverHostAdmissionControlInfoHostStatus::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverHostAdmissionControlInfoHostStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterGroupInfo
#define SOAP_TYPE_ns1__ClusterGroupInfo (887)
/* ns1:ClusterGroupInfo */
class SOAP_CMAC ns1__ClusterGroupInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE_ns1__ClusterGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterGroupInfo() { ns1__ClusterGroupInfo::soap_default(NULL); }
	virtual ~ns1__ClusterGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterHostRecommendation
#define SOAP_TYPE_ns1__ClusterHostRecommendation (891)
/* ns1:ClusterHostRecommendation */
class SOAP_CMAC ns1__ClusterHostRecommendation : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	int rating;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 891; } /* = unique id SOAP_TYPE_ns1__ClusterHostRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterHostRecommendation() { ns1__ClusterHostRecommendation::soap_default(NULL); }
	virtual ~ns1__ClusterHostRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterNotAttemptedVmInfo
#define SOAP_TYPE_ns1__ClusterNotAttemptedVmInfo (895)
/* ns1:ClusterNotAttemptedVmInfo */
class SOAP_CMAC ns1__ClusterNotAttemptedVmInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 895; } /* = unique id SOAP_TYPE_ns1__ClusterNotAttemptedVmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterNotAttemptedVmInfo() { ns1__ClusterNotAttemptedVmInfo::soap_default(NULL); }
	virtual ~ns1__ClusterNotAttemptedVmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterPowerOnVmResult
#define SOAP_TYPE_ns1__ClusterPowerOnVmResult (897)
/* ns1:ClusterPowerOnVmResult */
class SOAP_CMAC ns1__ClusterPowerOnVmResult : public ns1__DynamicData
{
public:
	std::vector<ns1__ClusterAttemptedVmInfo * >attempted;	/* optional element of type ns1:ClusterAttemptedVmInfo */
	std::vector<ns1__ClusterNotAttemptedVmInfo * >notAttempted;	/* optional element of type ns1:ClusterNotAttemptedVmInfo */
	std::vector<ns1__ClusterRecommendation * >recommendations;	/* optional element of type ns1:ClusterRecommendation */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE_ns1__ClusterPowerOnVmResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterPowerOnVmResult() { ns1__ClusterPowerOnVmResult::soap_default(NULL); }
	virtual ~ns1__ClusterPowerOnVmResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterRecommendation
#define SOAP_TYPE_ns1__ClusterRecommendation (898)
/* ns1:ClusterRecommendation */
class SOAP_CMAC ns1__ClusterRecommendation : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	time_t time;	/* required element of type xsd:dateTime */
	int rating;	/* required element of type xsd:int */
	std::string reason;	/* required element of type xsd:string */
	std::string reasonText;	/* required element of type xsd:string */
	std::vector<std::string >prerequisite;	/* optional element of type xsd:string */
	std::vector<ns1__ClusterAction * >action;	/* optional element of type ns1:ClusterAction */
	ns1__ManagedObjectReference *target;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE_ns1__ClusterRecommendation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterRecommendation() { ns1__ClusterRecommendation::soap_default(NULL); }
	virtual ~ns1__ClusterRecommendation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterRuleInfo
#define SOAP_TYPE_ns1__ClusterRuleInfo (900)
/* ns1:ClusterRuleInfo */
class SOAP_CMAC ns1__ClusterRuleInfo : public ns1__DynamicData
{
public:
	int *key;	/* optional element of type xsd:int */
	enum ns1__ManagedEntityStatus *status;	/* optional element of type ns1:ManagedEntityStatus */
	bool *enabled;	/* optional element of type xsd:boolean */
	std::string *name;	/* optional element of type xsd:string */
	bool *mandatory;	/* optional element of type xsd:boolean */
	bool *userCreated;	/* optional element of type xsd:boolean */
	bool *inCompliance;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 900; } /* = unique id SOAP_TYPE_ns1__ClusterRuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterRuleInfo() { ns1__ClusterRuleInfo::soap_default(NULL); }
	virtual ~ns1__ClusterRuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterVmToolsMonitoringSettings
#define SOAP_TYPE_ns1__ClusterVmToolsMonitoringSettings (904)
/* ns1:ClusterVmToolsMonitoringSettings */
class SOAP_CMAC ns1__ClusterVmToolsMonitoringSettings : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	std::string *vmMonitoring;	/* optional element of type xsd:string */
	bool *clusterSettings;	/* optional element of type xsd:boolean */
	int *failureInterval;	/* optional element of type xsd:int */
	int *minUpTime;	/* optional element of type xsd:int */
	int *maxFailures;	/* optional element of type xsd:int */
	int *maxFailureWindow;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE_ns1__ClusterVmToolsMonitoringSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterVmToolsMonitoringSettings() { ns1__ClusterVmToolsMonitoringSettings::soap_default(NULL); }
	virtual ~ns1__ClusterVmToolsMonitoringSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortConfigSpec
#define SOAP_TYPE_ns1__DVPortConfigSpec (905)
/* ns1:DVPortConfigSpec */
class SOAP_CMAC ns1__DVPortConfigSpec : public ns1__DynamicData
{
public:
	std::string operation;	/* required element of type xsd:string */
	std::string *key;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >scope;	/* optional element of type ns1:ManagedObjectReference */
	std::string *description;	/* optional element of type xsd:string */
	ns1__DVPortSetting *setting;	/* optional element of type ns1:DVPortSetting */
	std::string *configVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE_ns1__DVPortConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortConfigSpec() { ns1__DVPortConfigSpec::soap_default(NULL); }
	virtual ~ns1__DVPortConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortConfigInfo
#define SOAP_TYPE_ns1__DVPortConfigInfo (907)
/* ns1:DVPortConfigInfo */
class SOAP_CMAC ns1__DVPortConfigInfo : public ns1__DynamicData
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >scope;	/* optional element of type ns1:ManagedObjectReference */
	std::string *description;	/* optional element of type xsd:string */
	ns1__DVPortSetting *setting;	/* optional element of type ns1:DVPortSetting */
	std::string configVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 907; } /* = unique id SOAP_TYPE_ns1__DVPortConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortConfigInfo() { ns1__DVPortConfigInfo::soap_default(NULL); }
	virtual ~ns1__DVPortConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortSetting
#define SOAP_TYPE_ns1__DVPortSetting (910)
/* ns1:DVPortSetting */
class SOAP_CMAC ns1__DVPortSetting : public ns1__DynamicData
{
public:
	class ns1__BoolPolicy *blocked;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *vmDirectPathGen2Allowed;	/* optional element of type ns1:BoolPolicy */
	class ns1__DVSTrafficShapingPolicy *inShapingPolicy;	/* optional element of type ns1:DVSTrafficShapingPolicy */
	ns1__DVSTrafficShapingPolicy *outShapingPolicy;	/* optional element of type ns1:DVSTrafficShapingPolicy */
	class ns1__DVSVendorSpecificConfig *vendorSpecificConfig;	/* optional element of type ns1:DVSVendorSpecificConfig */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE_ns1__DVPortSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortSetting() { ns1__DVPortSetting::soap_default(NULL); }
	virtual ~ns1__DVPortSetting() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortStatus
#define SOAP_TYPE_ns1__DVPortStatus (911)
/* ns1:DVPortStatus */
class SOAP_CMAC ns1__DVPortStatus : public ns1__DynamicData
{
public:
	bool linkUp;	/* required element of type xsd:boolean */
	bool blocked;	/* required element of type xsd:boolean */
	std::vector<ns1__NumericRange * >vlanIds;	/* optional element of type ns1:NumericRange */
	bool *trunkingMode;	/* optional element of type xsd:boolean */
	int *mtu;	/* optional element of type xsd:int */
	std::string *linkPeer;	/* optional element of type xsd:string */
	std::string *macAddress;	/* optional element of type xsd:string */
	std::string *statusDetail;	/* optional element of type xsd:string */
	bool *vmDirectPathGen2Active;	/* optional element of type xsd:boolean */
	std::vector<std::string >vmDirectPathGen2InactiveReasonNetwork;	/* optional element of type xsd:string */
	std::vector<std::string >vmDirectPathGen2InactiveReasonOther;	/* optional element of type xsd:string */
	std::string *vmDirectPathGen2InactiveReasonExtended;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE_ns1__DVPortStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortStatus() { ns1__DVPortStatus::soap_default(NULL); }
	virtual ~ns1__DVPortStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortState
#define SOAP_TYPE_ns1__DVPortState (912)
/* ns1:DVPortState */
class SOAP_CMAC ns1__DVPortState : public ns1__DynamicData
{
public:
	ns1__DVPortStatus *runtimeInfo;	/* optional element of type ns1:DVPortStatus */
	class ns1__DistributedVirtualSwitchPortStatistics *stats;	/* required element of type ns1:DistributedVirtualSwitchPortStatistics */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificState;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE_ns1__DVPortState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortState() { ns1__DVPortState::soap_default(NULL); }
	virtual ~ns1__DVPortState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPort
#define SOAP_TYPE_ns1__DistributedVirtualPort (913)
/* ns1:DistributedVirtualPort */
class SOAP_CMAC ns1__DistributedVirtualPort : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__DVPortConfigInfo *config;	/* required element of type ns1:DVPortConfigInfo */
	std::string dvsUuid;	/* required element of type xsd:string */
	std::string *portgroupKey;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *proxyHost;	/* optional element of type ns1:ManagedObjectReference */
	class ns1__DistributedVirtualSwitchPortConnectee *connectee;	/* optional element of type ns1:DistributedVirtualSwitchPortConnectee */
	bool conflict;	/* required element of type xsd:boolean */
	std::string *conflictPortKey;	/* optional element of type xsd:string */
	ns1__DVPortState *state;	/* optional element of type ns1:DVPortState */
	int *connectionCookie;	/* optional element of type xsd:int */
	time_t lastStatusChange;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualPort() { ns1__DistributedVirtualPort::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupPolicy
#define SOAP_TYPE_ns1__DVPortgroupPolicy (915)
/* ns1:DVPortgroupPolicy */
class SOAP_CMAC ns1__DVPortgroupPolicy : public ns1__DynamicData
{
public:
	bool blockOverrideAllowed;	/* required element of type xsd:boolean */
	bool shapingOverrideAllowed;	/* required element of type xsd:boolean */
	bool vendorConfigOverrideAllowed;	/* required element of type xsd:boolean */
	bool livePortMovingAllowed;	/* required element of type xsd:boolean */
	bool portConfigResetAtDisconnect;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 915; } /* = unique id SOAP_TYPE_ns1__DVPortgroupPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupPolicy() { ns1__DVPortgroupPolicy::soap_default(NULL); }
	virtual ~ns1__DVPortgroupPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupConfigSpec
#define SOAP_TYPE_ns1__DVPortgroupConfigSpec (916)
/* ns1:DVPortgroupConfigSpec */
class SOAP_CMAC ns1__DVPortgroupConfigSpec : public ns1__DynamicData
{
public:
	std::string *configVersion;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	int *numPorts;	/* optional element of type xsd:int */
	std::string *portNameFormat;	/* optional element of type xsd:string */
	ns1__DVPortSetting *defaultPortConfig;	/* optional element of type ns1:DVPortSetting */
	std::string *description;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >scope;	/* optional element of type ns1:ManagedObjectReference */
	ns1__DVPortgroupPolicy *policy;	/* optional element of type ns1:DVPortgroupPolicy */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE_ns1__DVPortgroupConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupConfigSpec() { ns1__DVPortgroupConfigSpec::soap_default(NULL); }
	virtual ~ns1__DVPortgroupConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupConfigInfo
#define SOAP_TYPE_ns1__DVPortgroupConfigInfo (918)
/* ns1:DVPortgroupConfigInfo */
class SOAP_CMAC ns1__DVPortgroupConfigInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int numPorts;	/* required element of type xsd:int */
	ns1__ManagedObjectReference *distributedVirtualSwitch;	/* optional element of type ns1:ManagedObjectReference */
	ns1__DVPortSetting *defaultPortConfig;	/* optional element of type ns1:DVPortSetting */
	std::string *description;	/* optional element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	ns1__DVPortgroupPolicy *policy;	/* required element of type ns1:DVPortgroupPolicy */
	std::string *portNameFormat;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >scope;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
	std::string *configVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 918; } /* = unique id SOAP_TYPE_ns1__DVPortgroupConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupConfigInfo() { ns1__DVPortgroupConfigInfo::soap_default(NULL); }
	virtual ~ns1__DVPortgroupConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualPortgroupInfo
#define SOAP_TYPE_ns1__DistributedVirtualPortgroupInfo (919)
/* ns1:DistributedVirtualPortgroupInfo */
class SOAP_CMAC ns1__DistributedVirtualPortgroupInfo : public ns1__DynamicData
{
public:
	std::string switchName;	/* required element of type xsd:string */
	std::string switchUuid;	/* required element of type xsd:string */
	std::string portgroupName;	/* required element of type xsd:string */
	std::string portgroupKey;	/* required element of type xsd:string */
	std::string portgroupType;	/* required element of type xsd:string */
	bool uplinkPortgroup;	/* required element of type xsd:boolean */
	ns1__ManagedObjectReference *portgroup;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 919; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualPortgroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualPortgroupInfo() { ns1__DistributedVirtualPortgroupInfo::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualPortgroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchInfo
#define SOAP_TYPE_ns1__DistributedVirtualSwitchInfo (921)
/* ns1:DistributedVirtualSwitchInfo */
class SOAP_CMAC ns1__DistributedVirtualSwitchInfo : public ns1__DynamicData
{
public:
	std::string switchName;	/* required element of type xsd:string */
	std::string switchUuid;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *distributedVirtualSwitch;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 921; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchInfo() { ns1__DistributedVirtualSwitchInfo::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSManagerDvsConfigTarget
#define SOAP_TYPE_ns1__DVSManagerDvsConfigTarget (923)
/* ns1:DVSManagerDvsConfigTarget */
class SOAP_CMAC ns1__DVSManagerDvsConfigTarget : public ns1__DynamicData
{
public:
	std::vector<ns1__DistributedVirtualPortgroupInfo * >distributedVirtualPortgroup;	/* optional element of type ns1:DistributedVirtualPortgroupInfo */
	std::vector<ns1__DistributedVirtualSwitchInfo * >distributedVirtualSwitch;	/* optional element of type ns1:DistributedVirtualSwitchInfo */
public:
	virtual int soap_type() const { return 923; } /* = unique id SOAP_TYPE_ns1__DVSManagerDvsConfigTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSManagerDvsConfigTarget() { ns1__DVSManagerDvsConfigTarget::soap_default(NULL); }
	virtual ~ns1__DVSManagerDvsConfigTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerCompatibilityResult
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerCompatibilityResult (924)
/* ns1:DistributedVirtualSwitchManagerCompatibilityResult */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerCompatibilityResult : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 924; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerCompatibilityResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerCompatibilityResult() { ns1__DistributedVirtualSwitchManagerCompatibilityResult::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerCompatibilityResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainer
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainer (926)
/* ns1:DistributedVirtualSwitchManagerHostContainer */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerHostContainer : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *container;	/* required element of type ns1:ManagedObjectReference */
	bool recursive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 926; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerHostContainer() { ns1__DistributedVirtualSwitchManagerHostContainer::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerHostContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec (927)
/* ns1:DistributedVirtualSwitchManagerHostDvsFilterSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec : public ns1__DynamicData
{
public:
	bool inclusive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 927; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec() { ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerDvsProductSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerDvsProductSpec (932)
/* ns1:DistributedVirtualSwitchManagerDvsProductSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerDvsProductSpec : public ns1__DynamicData
{
public:
	ns1__DistributedVirtualSwitchProductSpec *newSwitchProductSpec;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	ns1__ManagedObjectReference *distributedVirtualSwitch;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 932; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerDvsProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerDvsProductSpec() { ns1__DistributedVirtualSwitchManagerDvsProductSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerDvsProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigSpec (933)
/* ns1:DistributedVirtualSwitchHostMemberConfigSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberConfigSpec : public ns1__DynamicData
{
public:
	std::string operation;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	class ns1__DistributedVirtualSwitchHostMemberBacking *backing;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberBacking */
	int *maxProxySwitchPorts;	/* optional element of type xsd:int */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
public:
	virtual int soap_type() const { return 933; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberConfigSpec() { ns1__DistributedVirtualSwitchHostMemberConfigSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicSpec (935)
/* ns1:DistributedVirtualSwitchHostMemberPnicSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberPnicSpec : public ns1__DynamicData
{
public:
	std::string pnicDevice;	/* required element of type xsd:string */
	std::string *uplinkPortKey;	/* optional element of type xsd:string */
	std::string *uplinkPortgroupKey;	/* optional element of type xsd:string */
	int *connectionCookie;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 935; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberPnicSpec() { ns1__DistributedVirtualSwitchHostMemberPnicSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberPnicSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberBacking
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberBacking (937)
/* ns1:DistributedVirtualSwitchHostMemberBacking */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberBacking : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 937; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberBacking */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberBacking() { ns1__DistributedVirtualSwitchHostMemberBacking::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberBacking() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigInfo
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigInfo (939)
/* ns1:DistributedVirtualSwitchHostMemberConfigInfo */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	int maxProxySwitchPorts;	/* required element of type xsd:int */
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >vendorSpecificConfig;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
	ns1__DistributedVirtualSwitchHostMemberBacking *backing;	/* required element of type ns1:DistributedVirtualSwitchHostMemberBacking */
public:
	virtual int soap_type() const { return 939; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberConfigInfo() { ns1__DistributedVirtualSwitchHostMemberConfigInfo::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMember
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMember (940)
/* ns1:DistributedVirtualSwitchHostMember */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMember : public ns1__DynamicData
{
public:
	ns1__DistributedVirtualSwitchHostMemberConfigInfo *config;	/* required element of type ns1:DistributedVirtualSwitchHostMemberConfigInfo */
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* optional element of type ns1:DistributedVirtualSwitchProductSpec */
	std::vector<std::string >uplinkPortKey;	/* optional element of type xsd:string */
	std::string status;	/* required element of type xsd:string */
	std::string *statusDetail;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 940; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMember() { ns1__DistributedVirtualSwitchHostMember::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMember() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostProductSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostProductSpec (942)
/* ns1:DistributedVirtualSwitchHostProductSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostProductSpec : public ns1__DynamicData
{
public:
	std::string *productLineId;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 942; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostProductSpec() { ns1__DistributedVirtualSwitchHostProductSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchKeyedOpaqueBlob
#define SOAP_TYPE_ns1__DistributedVirtualSwitchKeyedOpaqueBlob (944)
/* ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
class SOAP_CMAC ns1__DistributedVirtualSwitchKeyedOpaqueBlob : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string opaqueData;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 944; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchKeyedOpaqueBlob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchKeyedOpaqueBlob() { ns1__DistributedVirtualSwitchKeyedOpaqueBlob::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchKeyedOpaqueBlob() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSNetworkResourcePoolAllocationInfo
#define SOAP_TYPE_ns1__DVSNetworkResourcePoolAllocationInfo (946)
/* ns1:DVSNetworkResourcePoolAllocationInfo */
class SOAP_CMAC ns1__DVSNetworkResourcePoolAllocationInfo : public ns1__DynamicData
{
public:
	LONG64 *limit;	/* optional element of type xsd:long */
	ns1__SharesInfo *shares;	/* optional element of type ns1:SharesInfo */
public:
	virtual int soap_type() const { return 946; } /* = unique id SOAP_TYPE_ns1__DVSNetworkResourcePoolAllocationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSNetworkResourcePoolAllocationInfo() { ns1__DVSNetworkResourcePoolAllocationInfo::soap_default(NULL); }
	virtual ~ns1__DVSNetworkResourcePoolAllocationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSNetworkResourcePoolConfigSpec
#define SOAP_TYPE_ns1__DVSNetworkResourcePoolConfigSpec (947)
/* ns1:DVSNetworkResourcePoolConfigSpec */
class SOAP_CMAC ns1__DVSNetworkResourcePoolConfigSpec : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string *configVersion;	/* optional element of type xsd:string */
	ns1__DVSNetworkResourcePoolAllocationInfo *allocationInfo;	/* optional element of type ns1:DVSNetworkResourcePoolAllocationInfo */
public:
	virtual int soap_type() const { return 947; } /* = unique id SOAP_TYPE_ns1__DVSNetworkResourcePoolConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSNetworkResourcePoolConfigSpec() { ns1__DVSNetworkResourcePoolConfigSpec::soap_default(NULL); }
	virtual ~ns1__DVSNetworkResourcePoolConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSNetworkResourcePool
#define SOAP_TYPE_ns1__DVSNetworkResourcePool (949)
/* ns1:DVSNetworkResourcePool */
class SOAP_CMAC ns1__DVSNetworkResourcePool : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string configVersion;	/* required element of type xsd:string */
	ns1__DVSNetworkResourcePoolAllocationInfo *allocationInfo;	/* required element of type ns1:DVSNetworkResourcePoolAllocationInfo */
public:
	virtual int soap_type() const { return 949; } /* = unique id SOAP_TYPE_ns1__DVSNetworkResourcePool */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSNetworkResourcePool() { ns1__DVSNetworkResourcePool::soap_default(NULL); }
	virtual ~ns1__DVSNetworkResourcePool() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnectee
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnectee (951)
/* ns1:DistributedVirtualSwitchPortConnectee */
class SOAP_CMAC ns1__DistributedVirtualSwitchPortConnectee : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *connectedEntity;	/* optional element of type ns1:ManagedObjectReference */
	std::string *nicKey;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	std::string *addressHint;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 951; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnectee */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchPortConnectee() { ns1__DistributedVirtualSwitchPortConnectee::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchPortConnectee() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnection
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnection (952)
/* ns1:DistributedVirtualSwitchPortConnection */
class SOAP_CMAC ns1__DistributedVirtualSwitchPortConnection : public ns1__DynamicData
{
public:
	std::string switchUuid;	/* required element of type xsd:string */
	std::string *portgroupKey;	/* optional element of type xsd:string */
	std::string *portKey;	/* optional element of type xsd:string */
	int *connectionCookie;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 952; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchPortConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchPortConnection() { ns1__DistributedVirtualSwitchPortConnection::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchPortConnection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortCriteria
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortCriteria (953)
/* ns1:DistributedVirtualSwitchPortCriteria */
class SOAP_CMAC ns1__DistributedVirtualSwitchPortCriteria : public ns1__DynamicData
{
public:
	bool *connected;	/* optional element of type xsd:boolean */
	bool *active;	/* optional element of type xsd:boolean */
	bool *uplinkPort;	/* optional element of type xsd:boolean */
	ns1__ManagedObjectReference *scope;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<std::string >portgroupKey;	/* optional element of type xsd:string */
	bool *inside;	/* optional element of type xsd:boolean */
	std::vector<std::string >portKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 953; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchPortCriteria */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchPortCriteria() { ns1__DistributedVirtualSwitchPortCriteria::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchPortCriteria() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchPortStatistics
#define SOAP_TYPE_ns1__DistributedVirtualSwitchPortStatistics (954)
/* ns1:DistributedVirtualSwitchPortStatistics */
class SOAP_CMAC ns1__DistributedVirtualSwitchPortStatistics : public ns1__DynamicData
{
public:
	LONG64 packetsInMulticast;	/* required element of type xsd:long */
	LONG64 packetsOutMulticast;	/* required element of type xsd:long */
	LONG64 bytesInMulticast;	/* required element of type xsd:long */
	LONG64 bytesOutMulticast;	/* required element of type xsd:long */
	LONG64 packetsInUnicast;	/* required element of type xsd:long */
	LONG64 packetsOutUnicast;	/* required element of type xsd:long */
	LONG64 bytesInUnicast;	/* required element of type xsd:long */
	LONG64 bytesOutUnicast;	/* required element of type xsd:long */
	LONG64 packetsInBroadcast;	/* required element of type xsd:long */
	LONG64 packetsOutBroadcast;	/* required element of type xsd:long */
	LONG64 bytesInBroadcast;	/* required element of type xsd:long */
	LONG64 bytesOutBroadcast;	/* required element of type xsd:long */
	LONG64 packetsInDropped;	/* required element of type xsd:long */
	LONG64 packetsOutDropped;	/* required element of type xsd:long */
	LONG64 packetsInException;	/* required element of type xsd:long */
	LONG64 packetsOutException;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 954; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchPortStatistics */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchPortStatistics() { ns1__DistributedVirtualSwitchPortStatistics::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchPortStatistics() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpec
#define SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpec (955)
/* ns1:DistributedVirtualSwitchProductSpec */
class SOAP_CMAC ns1__DistributedVirtualSwitchProductSpec : public ns1__DynamicData
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::string *vendor;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	std::string *build;	/* optional element of type xsd:string */
	std::string *forwardingClass;	/* optional element of type xsd:string */
	std::string *bundleId;	/* optional element of type xsd:string */
	std::string *bundleUrl;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 955; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchProductSpec() { ns1__DistributedVirtualSwitchProductSpec::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSPvlanConfigSpec
#define SOAP_TYPE_ns1__VMwareDVSPvlanConfigSpec (970)
/* ns1:VMwareDVSPvlanConfigSpec */
class SOAP_CMAC ns1__VMwareDVSPvlanConfigSpec : public ns1__DynamicData
{
public:
	ns1__VMwareDVSPvlanMapEntry *pvlanEntry;	/* required element of type ns1:VMwareDVSPvlanMapEntry */
	std::string operation;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 970; } /* = unique id SOAP_TYPE_ns1__VMwareDVSPvlanConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSPvlanConfigSpec() { ns1__VMwareDVSPvlanConfigSpec::soap_default(NULL); }
	virtual ~ns1__VMwareDVSPvlanConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSPvlanMapEntry
#define SOAP_TYPE_ns1__VMwareDVSPvlanMapEntry (972)
/* ns1:VMwareDVSPvlanMapEntry */
class SOAP_CMAC ns1__VMwareDVSPvlanMapEntry : public ns1__DynamicData
{
public:
	int primaryVlanId;	/* required element of type xsd:int */
	int secondaryVlanId;	/* required element of type xsd:int */
	std::string pvlanType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 972; } /* = unique id SOAP_TYPE_ns1__VMwareDVSPvlanMapEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSPvlanMapEntry() { ns1__VMwareDVSPvlanMapEntry::soap_default(NULL); }
	virtual ~ns1__VMwareDVSPvlanMapEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Event
#define SOAP_TYPE_ns1__Event (974)
/* ns1:Event */
class SOAP_CMAC ns1__Event : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	int chainId;	/* required element of type xsd:int */
	time_t createdTime;	/* required element of type xsd:dateTime */
	std::string userName;	/* required element of type xsd:string */
	class ns1__DatacenterEventArgument *datacenter;	/* optional element of type ns1:DatacenterEventArgument */
	class ns1__ComputeResourceEventArgument *computeResource;	/* optional element of type ns1:ComputeResourceEventArgument */
	ns1__HostEventArgument *host;	/* optional element of type ns1:HostEventArgument */
	ns1__VmEventArgument *vm;	/* optional element of type ns1:VmEventArgument */
	class ns1__DatastoreEventArgument *ds;	/* optional element of type ns1:DatastoreEventArgument */
	class ns1__NetworkEventArgument *net;	/* optional element of type ns1:NetworkEventArgument */
	class ns1__DvsEventArgument *dvs;	/* optional element of type ns1:DvsEventArgument */
	std::string *fullFormattedMessage;	/* optional element of type xsd:string */
	std::string *changeTag;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 974; } /* = unique id SOAP_TYPE_ns1__Event */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Event() { ns1__Event::soap_default(NULL); }
	virtual ~ns1__Event() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendedEventPair
#define SOAP_TYPE_ns1__ExtendedEventPair (985)
/* ns1:ExtendedEventPair */
class SOAP_CMAC ns1__ExtendedEventPair : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE_ns1__ExtendedEventPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendedEventPair() { ns1__ExtendedEventPair::soap_default(NULL); }
	virtual ~ns1__ExtendedEventPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VnicPortArgument
#define SOAP_TYPE_ns1__VnicPortArgument (1104)
/* ns1:VnicPortArgument */
class SOAP_CMAC ns1__VnicPortArgument : public ns1__DynamicData
{
public:
	std::string vnic;	/* required element of type xsd:string */
	ns1__DistributedVirtualSwitchPortConnection *port;	/* required element of type ns1:DistributedVirtualSwitchPortConnection */
public:
	virtual int soap_type() const { return 1104; } /* = unique id SOAP_TYPE_ns1__VnicPortArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VnicPortArgument() { ns1__VnicPortArgument::soap_default(NULL); }
	virtual ~ns1__VnicPortArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsOutOfSyncHostArgument
#define SOAP_TYPE_ns1__DvsOutOfSyncHostArgument (1362)
/* ns1:DvsOutOfSyncHostArgument */
class SOAP_CMAC ns1__DvsOutOfSyncHostArgument : public ns1__DynamicData
{
public:
	ns1__HostEventArgument *outOfSyncHost;	/* required element of type ns1:HostEventArgument */
	std::vector<std::string >configParamters;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1362; } /* = unique id SOAP_TYPE_ns1__DvsOutOfSyncHostArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsOutOfSyncHostArgument() { ns1__DvsOutOfSyncHostArgument::soap_default(NULL); }
	virtual ~ns1__DvsOutOfSyncHostArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventArgument
#define SOAP_TYPE_ns1__EventArgument (1392)
/* ns1:EventArgument */
class SOAP_CMAC ns1__EventArgument : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 1392; } /* = unique id SOAP_TYPE_ns1__EventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventArgument() { ns1__EventArgument::soap_default(NULL); }
	virtual ~ns1__EventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventArgDesc
#define SOAP_TYPE_ns1__EventArgDesc (1410)
/* ns1:EventArgDesc */
class SOAP_CMAC ns1__EventArgDesc : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	ns1__ElementDescription *description;	/* optional element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 1410; } /* = unique id SOAP_TYPE_ns1__EventArgDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventArgDesc() { ns1__EventArgDesc::soap_default(NULL); }
	virtual ~ns1__EventArgDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventDescriptionEventDetail
#define SOAP_TYPE_ns1__EventDescriptionEventDetail (1412)
/* ns1:EventDescriptionEventDetail */
class SOAP_CMAC ns1__EventDescriptionEventDetail : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string category;	/* required element of type xsd:string */
	std::string formatOnDatacenter;	/* required element of type xsd:string */
	std::string formatOnComputeResource;	/* required element of type xsd:string */
	std::string formatOnHost;	/* required element of type xsd:string */
	std::string formatOnVm;	/* required element of type xsd:string */
	std::string fullFormat;	/* required element of type xsd:string */
	std::string *longDescription;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1412; } /* = unique id SOAP_TYPE_ns1__EventDescriptionEventDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventDescriptionEventDetail() { ns1__EventDescriptionEventDetail::soap_default(NULL); }
	virtual ~ns1__EventDescriptionEventDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventDescription
#define SOAP_TYPE_ns1__EventDescription (1414)
/* ns1:EventDescription */
class SOAP_CMAC ns1__EventDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__ElementDescription * >category;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__EventDescriptionEventDetail * >eventInfo;	/* required element of type ns1:EventDescriptionEventDetail */
	std::vector<ns1__EnumDescription * >enumeratedTypes;	/* optional element of type ns1:EnumDescription */
public:
	virtual int soap_type() const { return 1414; } /* = unique id SOAP_TYPE_ns1__EventDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventDescription() { ns1__EventDescription::soap_default(NULL); }
	virtual ~ns1__EventDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpecByEntity
#define SOAP_TYPE_ns1__EventFilterSpecByEntity (1415)
/* ns1:EventFilterSpecByEntity */
class SOAP_CMAC ns1__EventFilterSpecByEntity : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	enum ns1__EventFilterSpecRecursionOption recursion;	/* required element of type ns1:EventFilterSpecRecursionOption */
public:
	virtual int soap_type() const { return 1415; } /* = unique id SOAP_TYPE_ns1__EventFilterSpecByEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventFilterSpecByEntity() { ns1__EventFilterSpecByEntity::soap_default(NULL); }
	virtual ~ns1__EventFilterSpecByEntity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpecByTime
#define SOAP_TYPE_ns1__EventFilterSpecByTime (1416)
/* ns1:EventFilterSpecByTime */
class SOAP_CMAC ns1__EventFilterSpecByTime : public ns1__DynamicData
{
public:
	time_t *beginTime;	/* optional element of type xsd:dateTime */
	time_t *endTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 1416; } /* = unique id SOAP_TYPE_ns1__EventFilterSpecByTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventFilterSpecByTime() { ns1__EventFilterSpecByTime::soap_default(NULL); }
	virtual ~ns1__EventFilterSpecByTime() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpecByUsername
#define SOAP_TYPE_ns1__EventFilterSpecByUsername (1417)
/* ns1:EventFilterSpecByUsername */
class SOAP_CMAC ns1__EventFilterSpecByUsername : public ns1__DynamicData
{
public:
	bool systemUser;	/* required element of type xsd:boolean */
	std::vector<std::string >userList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1417; } /* = unique id SOAP_TYPE_ns1__EventFilterSpecByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventFilterSpecByUsername() { ns1__EventFilterSpecByUsername::soap_default(NULL); }
	virtual ~ns1__EventFilterSpecByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventFilterSpec
#define SOAP_TYPE_ns1__EventFilterSpec (1418)
/* ns1:EventFilterSpec */
class SOAP_CMAC ns1__EventFilterSpec : public ns1__DynamicData
{
public:
	ns1__EventFilterSpecByEntity *entity;	/* optional element of type ns1:EventFilterSpecByEntity */
	ns1__EventFilterSpecByTime *time;	/* optional element of type ns1:EventFilterSpecByTime */
	ns1__EventFilterSpecByUsername *userName;	/* optional element of type ns1:EventFilterSpecByUsername */
	int *eventChainId;	/* optional element of type xsd:int */
	ns1__ManagedObjectReference *alarm;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *scheduledTask;	/* optional element of type ns1:ManagedObjectReference */
	bool *disableFullMessage;	/* optional element of type xsd:boolean */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	std::vector<std::string >type;	/* optional element of type xsd:string */
	std::vector<std::string >tag;	/* optional element of type xsd:string */
	std::vector<std::string >eventTypeId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1418; } /* = unique id SOAP_TYPE_ns1__EventFilterSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventFilterSpec() { ns1__EventFilterSpec::soap_default(NULL); }
	virtual ~ns1__EventFilterSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterMismatchArgument
#define SOAP_TYPE_ns1__DatacenterMismatchArgument (1466)
/* ns1:DatacenterMismatchArgument */
class SOAP_CMAC ns1__DatacenterMismatchArgument : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *inputDatacenter;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1466; } /* = unique id SOAP_TYPE_ns1__DatacenterMismatchArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterMismatchArgument() { ns1__DatacenterMismatchArgument::soap_default(NULL); }
	virtual ~ns1__DatacenterMismatchArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsOperationBulkFaultFaultOnHost
#define SOAP_TYPE_ns1__DvsOperationBulkFaultFaultOnHost (1490)
/* ns1:DvsOperationBulkFaultFaultOnHost */
class SOAP_CMAC ns1__DvsOperationBulkFaultFaultOnHost : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1490; } /* = unique id SOAP_TYPE_ns1__DvsOperationBulkFaultFaultOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsOperationBulkFaultFaultOnHost() { ns1__DvsOperationBulkFaultFaultOnHost::soap_default(NULL); }
	virtual ~ns1__DvsOperationBulkFaultFaultOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MultipleCertificatesVerifyFaultThumbprintData
#define SOAP_TYPE_ns1__MultipleCertificatesVerifyFaultThumbprintData (1634)
/* ns1:MultipleCertificatesVerifyFaultThumbprintData */
class SOAP_CMAC ns1__MultipleCertificatesVerifyFaultThumbprintData : public ns1__DynamicData
{
public:
	int port;	/* required element of type xsd:int */
	std::string thumbprint;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1634; } /* = unique id SOAP_TYPE_ns1__MultipleCertificatesVerifyFaultThumbprintData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MultipleCertificatesVerifyFaultThumbprintData() { ns1__MultipleCertificatesVerifyFaultThumbprintData::soap_default(NULL); }
	virtual ~ns1__MultipleCertificatesVerifyFaultThumbprintData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileUpdateFailedUpdateFailure
#define SOAP_TYPE_ns1__ProfileUpdateFailedUpdateFailure (1765)
/* ns1:ProfileUpdateFailedUpdateFailure */
class SOAP_CMAC ns1__ProfileUpdateFailedUpdateFailure : public ns1__DynamicData
{
public:
	class ns1__ProfilePropertyPath *profilePath;	/* required element of type ns1:ProfilePropertyPath */
	ns1__LocalizableMessage *errMsg;	/* required element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 1765; } /* = unique id SOAP_TYPE_ns1__ProfileUpdateFailedUpdateFailure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileUpdateFailedUpdateFailure() { ns1__ProfileUpdateFailedUpdateFailure::soap_default(NULL); }
	virtual ~ns1__ProfileUpdateFailedUpdateFailure() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VimFault
#define SOAP_TYPE_ns1__VimFault (1851)
/* ns1:VimFault */
class SOAP_CMAC ns1__VimFault : public ns1__MethodFault
{
public:
	virtual int soap_type() const { return 1851; } /* = unique id SOAP_TYPE_ns1__VimFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VimFault() { ns1__VimFault::soap_default(NULL); }
	virtual ~ns1__VimFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostActiveDirectorySpec
#define SOAP_TYPE_ns1__HostActiveDirectorySpec (1883)
/* ns1:HostActiveDirectorySpec */
class SOAP_CMAC ns1__HostActiveDirectorySpec : public ns1__DynamicData
{
public:
	std::string *domainName;	/* optional element of type xsd:string */
	std::string *userName;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1883; } /* = unique id SOAP_TYPE_ns1__HostActiveDirectorySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostActiveDirectorySpec() { ns1__HostActiveDirectorySpec::soap_default(NULL); }
	virtual ~ns1__HostActiveDirectorySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostActiveDirectory
#define SOAP_TYPE_ns1__HostActiveDirectory (1884)
/* ns1:HostActiveDirectory */
class SOAP_CMAC ns1__HostActiveDirectory : public ns1__DynamicData
{
public:
	std::string changeOperation;	/* required element of type xsd:string */
	ns1__HostActiveDirectorySpec *spec;	/* optional element of type ns1:HostActiveDirectorySpec */
public:
	virtual int soap_type() const { return 1884; } /* = unique id SOAP_TYPE_ns1__HostActiveDirectory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostActiveDirectory() { ns1__HostActiveDirectory::soap_default(NULL); }
	virtual ~ns1__HostActiveDirectory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAuthenticationManagerInfo
#define SOAP_TYPE_ns1__HostAuthenticationManagerInfo (1886)
/* ns1:HostAuthenticationManagerInfo */
class SOAP_CMAC ns1__HostAuthenticationManagerInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostAuthenticationStoreInfo * >authConfig;	/* required element of type ns1:HostAuthenticationStoreInfo */
public:
	virtual int soap_type() const { return 1886; } /* = unique id SOAP_TYPE_ns1__HostAuthenticationManagerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAuthenticationManagerInfo() { ns1__HostAuthenticationManagerInfo::soap_default(NULL); }
	virtual ~ns1__HostAuthenticationManagerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAuthenticationStoreInfo
#define SOAP_TYPE_ns1__HostAuthenticationStoreInfo (1887)
/* ns1:HostAuthenticationStoreInfo */
class SOAP_CMAC ns1__HostAuthenticationStoreInfo : public ns1__DynamicData
{
public:
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1887; } /* = unique id SOAP_TYPE_ns1__HostAuthenticationStoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAuthenticationStoreInfo() { ns1__HostAuthenticationStoreInfo::soap_default(NULL); }
	virtual ~ns1__HostAuthenticationStoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartDefaults
#define SOAP_TYPE_ns1__AutoStartDefaults (1889)
/* ns1:AutoStartDefaults */
class SOAP_CMAC ns1__AutoStartDefaults : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	int *startDelay;	/* optional element of type xsd:int */
	int *stopDelay;	/* optional element of type xsd:int */
	bool *waitForHeartbeat;	/* optional element of type xsd:boolean */
	std::string *stopAction;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1889; } /* = unique id SOAP_TYPE_ns1__AutoStartDefaults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartDefaults() { ns1__AutoStartDefaults::soap_default(NULL); }
	virtual ~ns1__AutoStartDefaults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AutoStartPowerInfo
#define SOAP_TYPE_ns1__AutoStartPowerInfo (1890)
/* ns1:AutoStartPowerInfo */
class SOAP_CMAC ns1__AutoStartPowerInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	int startOrder;	/* required element of type xsd:int */
	int startDelay;	/* required element of type xsd:int */
	enum ns1__AutoStartWaitHeartbeatSetting waitForHeartbeat;	/* required element of type ns1:AutoStartWaitHeartbeatSetting */
	std::string startAction;	/* required element of type xsd:string */
	int stopDelay;	/* required element of type xsd:int */
	std::string stopAction;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1890; } /* = unique id SOAP_TYPE_ns1__AutoStartPowerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AutoStartPowerInfo() { ns1__AutoStartPowerInfo::soap_default(NULL); }
	virtual ~ns1__AutoStartPowerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAutoStartManagerConfig
#define SOAP_TYPE_ns1__HostAutoStartManagerConfig (1892)
/* ns1:HostAutoStartManagerConfig */
class SOAP_CMAC ns1__HostAutoStartManagerConfig : public ns1__DynamicData
{
public:
	ns1__AutoStartDefaults *defaults;	/* optional element of type ns1:AutoStartDefaults */
	std::vector<ns1__AutoStartPowerInfo * >powerInfo;	/* optional element of type ns1:AutoStartPowerInfo */
public:
	virtual int soap_type() const { return 1892; } /* = unique id SOAP_TYPE_ns1__HostAutoStartManagerConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAutoStartManagerConfig() { ns1__HostAutoStartManagerConfig::soap_default(NULL); }
	virtual ~ns1__HostAutoStartManagerConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostBootDeviceInfo
#define SOAP_TYPE_ns1__HostBootDeviceInfo (1893)
/* ns1:HostBootDeviceInfo */
class SOAP_CMAC ns1__HostBootDeviceInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostBootDevice * >bootDevices;	/* optional element of type ns1:HostBootDevice */
	std::string *currentBootDeviceKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1893; } /* = unique id SOAP_TYPE_ns1__HostBootDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostBootDeviceInfo() { ns1__HostBootDeviceInfo::soap_default(NULL); }
	virtual ~ns1__HostBootDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostBootDevice
#define SOAP_TYPE_ns1__HostBootDevice (1894)
/* ns1:HostBootDevice */
class SOAP_CMAC ns1__HostBootDevice : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1894; } /* = unique id SOAP_TYPE_ns1__HostBootDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostBootDevice() { ns1__HostBootDevice::soap_default(NULL); }
	virtual ~ns1__HostBootDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCapability
#define SOAP_TYPE_ns1__HostCapability (1896)
/* ns1:HostCapability */
class SOAP_CMAC ns1__HostCapability : public ns1__DynamicData
{
public:
	bool recursiveResourcePoolsSupported;	/* required element of type xsd:boolean */
	bool cpuMemoryResourceConfigurationSupported;	/* required element of type xsd:boolean */
	bool rebootSupported;	/* required element of type xsd:boolean */
	bool shutdownSupported;	/* required element of type xsd:boolean */
	bool vmotionSupported;	/* required element of type xsd:boolean */
	bool standbySupported;	/* required element of type xsd:boolean */
	bool *ipmiSupported;	/* optional element of type xsd:boolean */
	int *maxSupportedVMs;	/* optional element of type xsd:int */
	int *maxRunningVMs;	/* optional element of type xsd:int */
	int *maxSupportedVcpus;	/* optional element of type xsd:int */
	bool datastorePrincipalSupported;	/* required element of type xsd:boolean */
	bool sanSupported;	/* required element of type xsd:boolean */
	bool nfsSupported;	/* required element of type xsd:boolean */
	bool iscsiSupported;	/* required element of type xsd:boolean */
	bool vlanTaggingSupported;	/* required element of type xsd:boolean */
	bool nicTeamingSupported;	/* required element of type xsd:boolean */
	bool highGuestMemSupported;	/* required element of type xsd:boolean */
	bool maintenanceModeSupported;	/* required element of type xsd:boolean */
	bool suspendedRelocateSupported;	/* required element of type xsd:boolean */
	bool restrictedSnapshotRelocateSupported;	/* required element of type xsd:boolean */
	bool perVmSwapFiles;	/* required element of type xsd:boolean */
	bool localSwapDatastoreSupported;	/* required element of type xsd:boolean */
	bool unsharedSwapVMotionSupported;	/* required element of type xsd:boolean */
	bool backgroundSnapshotsSupported;	/* required element of type xsd:boolean */
	bool preAssignedPCIUnitNumbersSupported;	/* required element of type xsd:boolean */
	bool screenshotSupported;	/* required element of type xsd:boolean */
	bool scaledScreenshotSupported;	/* required element of type xsd:boolean */
	bool *storageVMotionSupported;	/* optional element of type xsd:boolean */
	bool *vmotionWithStorageVMotionSupported;	/* optional element of type xsd:boolean */
	bool *recordReplaySupported;	/* optional element of type xsd:boolean */
	bool *ftSupported;	/* optional element of type xsd:boolean */
	std::string *replayUnsupportedReason;	/* optional element of type xsd:string */
	std::vector<std::string >replayCompatibilityIssues;	/* optional element of type xsd:string */
	std::vector<std::string >ftCompatibilityIssues;	/* optional element of type xsd:string */
	bool *loginBySSLThumbprintSupported;	/* optional element of type xsd:boolean */
	bool *cloneFromSnapshotSupported;	/* optional element of type xsd:boolean */
	bool *deltaDiskBackingsSupported;	/* optional element of type xsd:boolean */
	bool *perVMNetworkTrafficShapingSupported;	/* optional element of type xsd:boolean */
	bool *tpmSupported;	/* optional element of type xsd:boolean */
	std::vector<ns1__HostCpuIdInfo * >supportedCpuFeature;	/* optional element of type ns1:HostCpuIdInfo */
	bool *virtualExecUsageSupported;	/* optional element of type xsd:boolean */
	bool *storageIORMSupported;	/* optional element of type xsd:boolean */
	bool *vmDirectPathGen2Supported;	/* optional element of type xsd:boolean */
	std::vector<std::string >vmDirectPathGen2UnsupportedReason;	/* optional element of type xsd:string */
	std::string *vmDirectPathGen2UnsupportedReasonExtended;	/* optional element of type xsd:string */
	bool *vStorageCapable;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1896; } /* = unique id SOAP_TYPE_ns1__HostCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCapability() { ns1__HostCapability::soap_default(NULL); }
	virtual ~ns1__HostCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigChange
#define SOAP_TYPE_ns1__HostConfigChange (1897)
/* ns1:HostConfigChange */
class SOAP_CMAC ns1__HostConfigChange : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 1897; } /* = unique id SOAP_TYPE_ns1__HostConfigChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigChange() { ns1__HostConfigChange::soap_default(NULL); }
	virtual ~ns1__HostConfigChange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigInfo
#define SOAP_TYPE_ns1__HostConfigInfo (1898)
/* ns1:HostConfigInfo */
class SOAP_CMAC ns1__HostConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	ns1__AboutInfo *product;	/* required element of type ns1:AboutInfo */
	class ns1__HostHyperThreadScheduleInfo *hyperThread;	/* optional element of type ns1:HostHyperThreadScheduleInfo */
	class ns1__ServiceConsoleReservationInfo *consoleReservation;	/* optional element of type ns1:ServiceConsoleReservationInfo */
	class ns1__VirtualMachineMemoryReservationInfo *virtualMachineReservation;	/* optional element of type ns1:VirtualMachineMemoryReservationInfo */
	class ns1__HostStorageDeviceInfo *storageDevice;	/* optional element of type ns1:HostStorageDeviceInfo */
	class ns1__HostMultipathStateInfo *multipathState;	/* optional element of type ns1:HostMultipathStateInfo */
	class ns1__HostFileSystemVolumeInfo *fileSystemVolume;	/* optional element of type ns1:HostFileSystemVolumeInfo */
	std::vector<std::string >systemFile;	/* optional element of type xsd:string */
	class ns1__HostNetworkInfo *network;	/* optional element of type ns1:HostNetworkInfo */
	class ns1__HostVMotionInfo *vmotion;	/* optional element of type ns1:HostVMotionInfo */
	class ns1__HostVirtualNicManagerInfo *virtualNicManagerInfo;	/* optional element of type ns1:HostVirtualNicManagerInfo */
	class ns1__HostNetCapabilities *capabilities;	/* optional element of type ns1:HostNetCapabilities */
	class ns1__HostDatastoreSystemCapabilities *datastoreCapabilities;	/* optional element of type ns1:HostDatastoreSystemCapabilities */
	class ns1__HostNetOffloadCapabilities *offloadCapabilities;	/* optional element of type ns1:HostNetOffloadCapabilities */
	class ns1__HostServiceInfo *service;	/* optional element of type ns1:HostServiceInfo */
	class ns1__HostFirewallInfo *firewall;	/* optional element of type ns1:HostFirewallInfo */
	ns1__HostAutoStartManagerConfig *autoStart;	/* optional element of type ns1:HostAutoStartManagerConfig */
	ns1__HostDiagnosticPartition *activeDiagnosticPartition;	/* optional element of type ns1:HostDiagnosticPartition */
	std::vector<ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
	std::vector<ns1__OptionDef * >optionDef;	/* optional element of type ns1:OptionDef */
	std::string *datastorePrincipal;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *localSwapDatastore;	/* optional element of type ns1:ManagedObjectReference */
	ns1__HostSystemResourceInfo *systemResources;	/* optional element of type ns1:HostSystemResourceInfo */
	class ns1__HostDateTimeInfo *dateTimeInfo;	/* optional element of type ns1:HostDateTimeInfo */
	ns1__HostFlagInfo *flags;	/* optional element of type ns1:HostFlagInfo */
	bool *adminDisabled;	/* optional element of type xsd:boolean */
	ns1__HostIpmiInfo *ipmi;	/* optional element of type ns1:HostIpmiInfo */
	class ns1__HostSslThumbprintInfo *sslThumbprintInfo;	/* optional element of type ns1:HostSslThumbprintInfo */
	std::vector<ns1__HostPciPassthruInfo * >pciPassthruInfo;	/* optional element of type ns1:HostPciPassthruInfo */
	ns1__HostAuthenticationManagerInfo *authenticationManagerInfo;	/* optional element of type ns1:HostAuthenticationManagerInfo */
	std::vector<ns1__HostFeatureVersionInfo * >featureVersion;	/* optional element of type ns1:HostFeatureVersionInfo */
	class ns1__PowerSystemCapability *powerSystemCapability;	/* optional element of type ns1:PowerSystemCapability */
	class ns1__PowerSystemInfo *powerSystemInfo;	/* optional element of type ns1:PowerSystemInfo */
public:
	virtual int soap_type() const { return 1898; } /* = unique id SOAP_TYPE_ns1__HostConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigInfo() { ns1__HostConfigInfo::soap_default(NULL); }
	virtual ~ns1__HostConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigManager
#define SOAP_TYPE_ns1__HostConfigManager (1899)
/* ns1:HostConfigManager */
class SOAP_CMAC ns1__HostConfigManager : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *cpuScheduler;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *datastoreSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *memoryManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *storageSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *networkSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vmotionSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *virtualNicManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *serviceSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *firewallSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *advancedOption;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *diagnosticSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *autoStartManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *snmpSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *dateTimeSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *patchManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *bootDeviceSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *firmwareSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *healthStatusSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pciPassthruSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *licenseManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *kernelModuleSystem;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *authenticationManager;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *powerSystem;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1899; } /* = unique id SOAP_TYPE_ns1__HostConfigManager */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigManager() { ns1__HostConfigManager::soap_default(NULL); }
	virtual ~ns1__HostConfigManager() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigSpec
#define SOAP_TYPE_ns1__HostConfigSpec (1900)
/* ns1:HostConfigSpec */
class SOAP_CMAC ns1__HostConfigSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__HostNasVolumeConfig * >nasDatastore;	/* optional element of type ns1:HostNasVolumeConfig */
	ns1__HostNetworkConfig *network;	/* optional element of type ns1:HostNetworkConfig */
	std::vector<ns1__HostVirtualNicManagerNicTypeSelection * >nicTypeSelection;	/* optional element of type ns1:HostVirtualNicManagerNicTypeSelection */
	std::vector<ns1__HostServiceConfig * >service;	/* optional element of type ns1:HostServiceConfig */
	class ns1__HostFirewallConfig *firewall;	/* optional element of type ns1:HostFirewallConfig */
	std::vector<ns1__OptionValue * >option;	/* optional element of type ns1:OptionValue */
	std::string *datastorePrincipal;	/* optional element of type xsd:string */
	std::string *datastorePrincipalPasswd;	/* optional element of type xsd:string */
	ns1__HostDateTimeConfig *datetime;	/* optional element of type ns1:HostDateTimeConfig */
	ns1__HostStorageDeviceInfo *storageDevice;	/* optional element of type ns1:HostStorageDeviceInfo */
	class ns1__HostLicenseSpec *license;	/* optional element of type ns1:HostLicenseSpec */
	class ns1__HostSecuritySpec *security;	/* optional element of type ns1:HostSecuritySpec */
	std::vector<ns1__HostAccountSpec * >userAccount;	/* optional element of type ns1:HostAccountSpec */
	std::vector<ns1__HostAccountSpec * >usergroupAccount;	/* optional element of type ns1:HostAccountSpec */
	class ns1__HostMemorySpec *memory;	/* optional element of type ns1:HostMemorySpec */
	std::vector<ns1__HostActiveDirectory * >activeDirectory;	/* optional element of type ns1:HostActiveDirectory */
public:
	virtual int soap_type() const { return 1900; } /* = unique id SOAP_TYPE_ns1__HostConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigSpec() { ns1__HostConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectInfoNetworkInfo
#define SOAP_TYPE_ns1__HostConnectInfoNetworkInfo (1901)
/* ns1:HostConnectInfoNetworkInfo */
class SOAP_CMAC ns1__HostConnectInfoNetworkInfo : public ns1__DynamicData
{
public:
	ns1__NetworkSummary *summary;	/* required element of type ns1:NetworkSummary */
public:
	virtual int soap_type() const { return 1901; } /* = unique id SOAP_TYPE_ns1__HostConnectInfoNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectInfoNetworkInfo() { ns1__HostConnectInfoNetworkInfo::soap_default(NULL); }
	virtual ~ns1__HostConnectInfoNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreConnectInfo
#define SOAP_TYPE_ns1__HostDatastoreConnectInfo (1904)
/* ns1:HostDatastoreConnectInfo */
class SOAP_CMAC ns1__HostDatastoreConnectInfo : public ns1__DynamicData
{
public:
	ns1__DatastoreSummary *summary;	/* required element of type ns1:DatastoreSummary */
public:
	virtual int soap_type() const { return 1904; } /* = unique id SOAP_TYPE_ns1__HostDatastoreConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreConnectInfo() { ns1__HostDatastoreConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostDatastoreConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLicenseConnectInfo
#define SOAP_TYPE_ns1__HostLicenseConnectInfo (1908)
/* ns1:HostLicenseConnectInfo */
class SOAP_CMAC ns1__HostLicenseConnectInfo : public ns1__DynamicData
{
public:
	ns1__LicenseManagerLicenseInfo *license;	/* required element of type ns1:LicenseManagerLicenseInfo */
	ns1__LicenseManagerEvaluationInfo *evaluation;	/* required element of type ns1:LicenseManagerEvaluationInfo */
public:
	virtual int soap_type() const { return 1908; } /* = unique id SOAP_TYPE_ns1__HostLicenseConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLicenseConnectInfo() { ns1__HostLicenseConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostLicenseConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectInfo
#define SOAP_TYPE_ns1__HostConnectInfo (1909)
/* ns1:HostConnectInfo */
class SOAP_CMAC ns1__HostConnectInfo : public ns1__DynamicData
{
public:
	std::string *serverIp;	/* optional element of type xsd:string */
	class ns1__HostListSummary *host;	/* required element of type ns1:HostListSummary */
	std::vector<ns1__VirtualMachineSummary * >vm;	/* optional element of type ns1:VirtualMachineSummary */
	bool *vimAccountNameRequired;	/* optional element of type xsd:boolean */
	bool *clusterSupported;	/* optional element of type xsd:boolean */
	std::vector<ns1__HostConnectInfoNetworkInfo * >network;	/* optional element of type ns1:HostConnectInfoNetworkInfo */
	std::vector<ns1__HostDatastoreConnectInfo * >datastore;	/* optional element of type ns1:HostDatastoreConnectInfo */
	ns1__HostLicenseConnectInfo *license;	/* optional element of type ns1:HostLicenseConnectInfo */
public:
	virtual int soap_type() const { return 1909; } /* = unique id SOAP_TYPE_ns1__HostConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectInfo() { ns1__HostConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectSpec
#define SOAP_TYPE_ns1__HostConnectSpec (1910)
/* ns1:HostConnectSpec */
class SOAP_CMAC ns1__HostConnectSpec : public ns1__DynamicData
{
public:
	std::string *hostName;	/* optional element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
	std::string *userName;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *vmFolder;	/* optional element of type ns1:ManagedObjectReference */
	bool force;	/* required element of type xsd:boolean */
	std::string *vimAccountName;	/* optional element of type xsd:string */
	std::string *vimAccountPassword;	/* optional element of type xsd:string */
	std::string *managementIp;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1910; } /* = unique id SOAP_TYPE_ns1__HostConnectSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectSpec() { ns1__HostConnectSpec::soap_default(NULL); }
	virtual ~ns1__HostConnectSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuIdInfo
#define SOAP_TYPE_ns1__HostCpuIdInfo (1911)
/* ns1:HostCpuIdInfo */
class SOAP_CMAC ns1__HostCpuIdInfo : public ns1__DynamicData
{
public:
	int level;	/* required element of type xsd:int */
	std::string *vendor;	/* optional element of type xsd:string */
	std::string *eax;	/* optional element of type xsd:string */
	std::string *ebx;	/* optional element of type xsd:string */
	std::string *ecx;	/* optional element of type xsd:string */
	std::string *edx;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1911; } /* = unique id SOAP_TYPE_ns1__HostCpuIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuIdInfo() { ns1__HostCpuIdInfo::soap_default(NULL); }
	virtual ~ns1__HostCpuIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHyperThreadScheduleInfo
#define SOAP_TYPE_ns1__HostHyperThreadScheduleInfo (1913)
/* ns1:HostHyperThreadScheduleInfo */
class SOAP_CMAC ns1__HostHyperThreadScheduleInfo : public ns1__DynamicData
{
public:
	bool available;	/* required element of type xsd:boolean */
	bool active;	/* required element of type xsd:boolean */
	bool config;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1913; } /* = unique id SOAP_TYPE_ns1__HostHyperThreadScheduleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHyperThreadScheduleInfo() { ns1__HostHyperThreadScheduleInfo::soap_default(NULL); }
	virtual ~ns1__HostHyperThreadScheduleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileQueryFlags
#define SOAP_TYPE_ns1__FileQueryFlags (1914)
/* ns1:FileQueryFlags */
class SOAP_CMAC ns1__FileQueryFlags : public ns1__DynamicData
{
public:
	bool fileType;	/* required element of type xsd:boolean */
	bool fileSize;	/* required element of type xsd:boolean */
	bool modification;	/* required element of type xsd:boolean */
	bool *fileOwner;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1914; } /* = unique id SOAP_TYPE_ns1__FileQueryFlags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileQueryFlags() { ns1__FileQueryFlags::soap_default(NULL); }
	virtual ~ns1__FileQueryFlags() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileInfo
#define SOAP_TYPE_ns1__FileInfo (1915)
/* ns1:FileInfo */
class SOAP_CMAC ns1__FileInfo : public ns1__DynamicData
{
public:
	std::string path;	/* required element of type xsd:string */
	LONG64 *fileSize;	/* optional element of type xsd:long */
	time_t *modification;	/* optional element of type xsd:dateTime */
	std::string *owner;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1915; } /* = unique id SOAP_TYPE_ns1__FileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileInfo() { ns1__FileInfo::soap_default(NULL); }
	virtual ~ns1__FileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileQuery
#define SOAP_TYPE_ns1__FileQuery (1917)
/* ns1:FileQuery */
class SOAP_CMAC ns1__FileQuery : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 1917; } /* = unique id SOAP_TYPE_ns1__FileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileQuery() { ns1__FileQuery::soap_default(NULL); }
	virtual ~ns1__FileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigFileQueryFilter
#define SOAP_TYPE_ns1__VmConfigFileQueryFilter (1919)
/* ns1:VmConfigFileQueryFilter */
class SOAP_CMAC ns1__VmConfigFileQueryFilter : public ns1__DynamicData
{
public:
	std::vector<int >matchConfigVersion;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1919; } /* = unique id SOAP_TYPE_ns1__VmConfigFileQueryFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigFileQueryFilter() { ns1__VmConfigFileQueryFilter::soap_default(NULL); }
	virtual ~ns1__VmConfigFileQueryFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigFileQueryFlags
#define SOAP_TYPE_ns1__VmConfigFileQueryFlags (1920)
/* ns1:VmConfigFileQueryFlags */
class SOAP_CMAC ns1__VmConfigFileQueryFlags : public ns1__DynamicData
{
public:
	bool configVersion;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1920; } /* = unique id SOAP_TYPE_ns1__VmConfigFileQueryFlags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigFileQueryFlags() { ns1__VmConfigFileQueryFlags::soap_default(NULL); }
	virtual ~ns1__VmConfigFileQueryFlags() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiskFileQueryFilter
#define SOAP_TYPE_ns1__VmDiskFileQueryFilter (1923)
/* ns1:VmDiskFileQueryFilter */
class SOAP_CMAC ns1__VmDiskFileQueryFilter : public ns1__DynamicData
{
public:
	std::vector<std::string >diskType;	/* optional element of type xsd:string */
	std::vector<int >matchHardwareVersion;	/* optional element of type xsd:int */
	std::vector<std::string >controllerType;	/* optional element of type xsd:string */
	bool *thin;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1923; } /* = unique id SOAP_TYPE_ns1__VmDiskFileQueryFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiskFileQueryFilter() { ns1__VmDiskFileQueryFilter::soap_default(NULL); }
	virtual ~ns1__VmDiskFileQueryFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiskFileQueryFlags
#define SOAP_TYPE_ns1__VmDiskFileQueryFlags (1924)
/* ns1:VmDiskFileQueryFlags */
class SOAP_CMAC ns1__VmDiskFileQueryFlags : public ns1__DynamicData
{
public:
	bool diskType;	/* required element of type xsd:boolean */
	bool capacityKb;	/* required element of type xsd:boolean */
	bool hardwareVersion;	/* required element of type xsd:boolean */
	bool *controllerType;	/* optional element of type xsd:boolean */
	bool *diskExtents;	/* optional element of type xsd:boolean */
	bool *thin;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1924; } /* = unique id SOAP_TYPE_ns1__VmDiskFileQueryFlags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiskFileQueryFlags() { ns1__VmDiskFileQueryFlags::soap_default(NULL); }
	virtual ~ns1__VmDiskFileQueryFlags() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreBrowserSearchSpec
#define SOAP_TYPE_ns1__HostDatastoreBrowserSearchSpec (1941)
/* ns1:HostDatastoreBrowserSearchSpec */
class SOAP_CMAC ns1__HostDatastoreBrowserSearchSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__FileQuery * >query;	/* optional element of type ns1:FileQuery */
	ns1__FileQueryFlags *details;	/* optional element of type ns1:FileQueryFlags */
	bool *searchCaseInsensitive;	/* optional element of type xsd:boolean */
	std::vector<std::string >matchPattern;	/* optional element of type xsd:string */
	bool *sortFoldersFirst;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1941; } /* = unique id SOAP_TYPE_ns1__HostDatastoreBrowserSearchSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreBrowserSearchSpec() { ns1__HostDatastoreBrowserSearchSpec::soap_default(NULL); }
	virtual ~ns1__HostDatastoreBrowserSearchSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreBrowserSearchResults
#define SOAP_TYPE_ns1__HostDatastoreBrowserSearchResults (1942)
/* ns1:HostDatastoreBrowserSearchResults */
class SOAP_CMAC ns1__HostDatastoreBrowserSearchResults : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
	std::string *folderPath;	/* optional element of type xsd:string */
	std::vector<ns1__FileInfo * >file;	/* optional element of type ns1:FileInfo */
public:
	virtual int soap_type() const { return 1942; } /* = unique id SOAP_TYPE_ns1__HostDatastoreBrowserSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreBrowserSearchResults() { ns1__HostDatastoreBrowserSearchResults::soap_default(NULL); }
	virtual ~ns1__HostDatastoreBrowserSearchResults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreSystemCapabilities
#define SOAP_TYPE_ns1__HostDatastoreSystemCapabilities (1944)
/* ns1:HostDatastoreSystemCapabilities */
class SOAP_CMAC ns1__HostDatastoreSystemCapabilities : public ns1__DynamicData
{
public:
	bool nfsMountCreationRequired;	/* required element of type xsd:boolean */
	bool nfsMountCreationSupported;	/* required element of type xsd:boolean */
	bool localDatastoreSupported;	/* required element of type xsd:boolean */
	bool *vmfsExtentExpansionSupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1944; } /* = unique id SOAP_TYPE_ns1__HostDatastoreSystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreSystemCapabilities() { ns1__HostDatastoreSystemCapabilities::soap_default(NULL); }
	virtual ~ns1__HostDatastoreSystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreSpec
#define SOAP_TYPE_ns1__VmfsDatastoreSpec (1948)
/* ns1:VmfsDatastoreSpec */
class SOAP_CMAC ns1__VmfsDatastoreSpec : public ns1__DynamicData
{
public:
	std::string diskUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1948; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreSpec() { ns1__VmfsDatastoreSpec::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreBaseOption
#define SOAP_TYPE_ns1__VmfsDatastoreBaseOption (1952)
/* ns1:VmfsDatastoreBaseOption */
class SOAP_CMAC ns1__VmfsDatastoreBaseOption : public ns1__DynamicData
{
public:
	ns1__HostDiskPartitionLayout *layout;	/* required element of type ns1:HostDiskPartitionLayout */
public:
	virtual int soap_type() const { return 1952; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreBaseOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreBaseOption() { ns1__VmfsDatastoreBaseOption::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreBaseOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreOption
#define SOAP_TYPE_ns1__VmfsDatastoreOption (1956)
/* ns1:VmfsDatastoreOption */
class SOAP_CMAC ns1__VmfsDatastoreOption : public ns1__DynamicData
{
public:
	ns1__VmfsDatastoreBaseOption *info;	/* required element of type ns1:VmfsDatastoreBaseOption */
	ns1__VmfsDatastoreSpec *spec;	/* required element of type ns1:VmfsDatastoreSpec */
public:
	virtual int soap_type() const { return 1956; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreOption() { ns1__VmfsDatastoreOption::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDateTimeConfig
#define SOAP_TYPE_ns1__HostDateTimeConfig (1958)
/* ns1:HostDateTimeConfig */
class SOAP_CMAC ns1__HostDateTimeConfig : public ns1__DynamicData
{
public:
	std::string *timeZone;	/* optional element of type xsd:string */
	class ns1__HostNtpConfig *ntpConfig;	/* optional element of type ns1:HostNtpConfig */
public:
	virtual int soap_type() const { return 1958; } /* = unique id SOAP_TYPE_ns1__HostDateTimeConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDateTimeConfig() { ns1__HostDateTimeConfig::soap_default(NULL); }
	virtual ~ns1__HostDateTimeConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDateTimeInfo
#define SOAP_TYPE_ns1__HostDateTimeInfo (1959)
/* ns1:HostDateTimeInfo */
class SOAP_CMAC ns1__HostDateTimeInfo : public ns1__DynamicData
{
public:
	ns1__HostDateTimeSystemTimeZone *timeZone;	/* required element of type ns1:HostDateTimeSystemTimeZone */
	ns1__HostNtpConfig *ntpConfig;	/* optional element of type ns1:HostNtpConfig */
public:
	virtual int soap_type() const { return 1959; } /* = unique id SOAP_TYPE_ns1__HostDateTimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDateTimeInfo() { ns1__HostDateTimeInfo::soap_default(NULL); }
	virtual ~ns1__HostDateTimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDateTimeSystemTimeZone
#define SOAP_TYPE_ns1__HostDateTimeSystemTimeZone (1960)
/* ns1:HostDateTimeSystemTimeZone */
class SOAP_CMAC ns1__HostDateTimeSystemTimeZone : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	int gmtOffset;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1960; } /* = unique id SOAP_TYPE_ns1__HostDateTimeSystemTimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDateTimeSystemTimeZone() { ns1__HostDateTimeSystemTimeZone::soap_default(NULL); }
	virtual ~ns1__HostDateTimeSystemTimeZone() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDevice
#define SOAP_TYPE_ns1__HostDevice (1962)
/* ns1:HostDevice */
class SOAP_CMAC ns1__HostDevice : public ns1__DynamicData
{
public:
	std::string deviceName;	/* required element of type xsd:string */
	std::string deviceType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1962; } /* = unique id SOAP_TYPE_ns1__HostDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDevice() { ns1__HostDevice::soap_default(NULL); }
	virtual ~ns1__HostDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDhcpServiceSpec
#define SOAP_TYPE_ns1__HostDhcpServiceSpec (1963)
/* ns1:HostDhcpServiceSpec */
class SOAP_CMAC ns1__HostDhcpServiceSpec : public ns1__DynamicData
{
public:
	std::string virtualSwitch;	/* required element of type xsd:string */
	int defaultLeaseDuration;	/* required element of type xsd:int */
	std::string leaseBeginIp;	/* required element of type xsd:string */
	std::string leaseEndIp;	/* required element of type xsd:string */
	int maxLeaseDuration;	/* required element of type xsd:int */
	bool unlimitedLease;	/* required element of type xsd:boolean */
	std::string ipSubnetAddr;	/* required element of type xsd:string */
	std::string ipSubnetMask;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1963; } /* = unique id SOAP_TYPE_ns1__HostDhcpServiceSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDhcpServiceSpec() { ns1__HostDhcpServiceSpec::soap_default(NULL); }
	virtual ~ns1__HostDhcpServiceSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDhcpServiceConfig
#define SOAP_TYPE_ns1__HostDhcpServiceConfig (1964)
/* ns1:HostDhcpServiceConfig */
class SOAP_CMAC ns1__HostDhcpServiceConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	std::string key;	/* required element of type xsd:string */
	ns1__HostDhcpServiceSpec *spec;	/* required element of type ns1:HostDhcpServiceSpec */
public:
	virtual int soap_type() const { return 1964; } /* = unique id SOAP_TYPE_ns1__HostDhcpServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDhcpServiceConfig() { ns1__HostDhcpServiceConfig::soap_default(NULL); }
	virtual ~ns1__HostDhcpServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDhcpService
#define SOAP_TYPE_ns1__HostDhcpService (1966)
/* ns1:HostDhcpService */
class SOAP_CMAC ns1__HostDhcpService : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__HostDhcpServiceSpec *spec;	/* required element of type ns1:HostDhcpServiceSpec */
public:
	virtual int soap_type() const { return 1966; } /* = unique id SOAP_TYPE_ns1__HostDhcpService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDhcpService() { ns1__HostDhcpService::soap_default(NULL); }
	virtual ~ns1__HostDhcpService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiagnosticPartitionCreateOption
#define SOAP_TYPE_ns1__HostDiagnosticPartitionCreateOption (1968)
/* ns1:HostDiagnosticPartitionCreateOption */
class SOAP_CMAC ns1__HostDiagnosticPartitionCreateOption : public ns1__DynamicData
{
public:
	std::string storageType;	/* required element of type xsd:string */
	std::string diagnosticType;	/* required element of type xsd:string */
	ns1__HostScsiDisk *disk;	/* required element of type ns1:HostScsiDisk */
public:
	virtual int soap_type() const { return 1968; } /* = unique id SOAP_TYPE_ns1__HostDiagnosticPartitionCreateOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiagnosticPartitionCreateOption() { ns1__HostDiagnosticPartitionCreateOption::soap_default(NULL); }
	virtual ~ns1__HostDiagnosticPartitionCreateOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiagnosticPartitionCreateSpec
#define SOAP_TYPE_ns1__HostDiagnosticPartitionCreateSpec (1970)
/* ns1:HostDiagnosticPartitionCreateSpec */
class SOAP_CMAC ns1__HostDiagnosticPartitionCreateSpec : public ns1__DynamicData
{
public:
	std::string storageType;	/* required element of type xsd:string */
	std::string diagnosticType;	/* required element of type xsd:string */
	ns1__HostScsiDiskPartition *id;	/* required element of type ns1:HostScsiDiskPartition */
	ns1__HostDiskPartitionSpec *partition;	/* required element of type ns1:HostDiskPartitionSpec */
	bool *active;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1970; } /* = unique id SOAP_TYPE_ns1__HostDiagnosticPartitionCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiagnosticPartitionCreateSpec() { ns1__HostDiagnosticPartitionCreateSpec::soap_default(NULL); }
	virtual ~ns1__HostDiagnosticPartitionCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiagnosticPartitionCreateDescription
#define SOAP_TYPE_ns1__HostDiagnosticPartitionCreateDescription (1971)
/* ns1:HostDiagnosticPartitionCreateDescription */
class SOAP_CMAC ns1__HostDiagnosticPartitionCreateDescription : public ns1__DynamicData
{
public:
	ns1__HostDiskPartitionLayout *layout;	/* required element of type ns1:HostDiskPartitionLayout */
	std::string diskUuid;	/* required element of type xsd:string */
	ns1__HostDiagnosticPartitionCreateSpec *spec;	/* required element of type ns1:HostDiagnosticPartitionCreateSpec */
public:
	virtual int soap_type() const { return 1971; } /* = unique id SOAP_TYPE_ns1__HostDiagnosticPartitionCreateDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiagnosticPartitionCreateDescription() { ns1__HostDiagnosticPartitionCreateDescription::soap_default(NULL); }
	virtual ~ns1__HostDiagnosticPartitionCreateDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiagnosticPartition
#define SOAP_TYPE_ns1__HostDiagnosticPartition (1972)
/* ns1:HostDiagnosticPartition */
class SOAP_CMAC ns1__HostDiagnosticPartition : public ns1__DynamicData
{
public:
	std::string storageType;	/* required element of type xsd:string */
	std::string diagnosticType;	/* required element of type xsd:string */
	int slots;	/* required element of type xsd:int */
	ns1__HostScsiDiskPartition *id;	/* required element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 1972; } /* = unique id SOAP_TYPE_ns1__HostDiagnosticPartition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiagnosticPartition() { ns1__HostDiagnosticPartition::soap_default(NULL); }
	virtual ~ns1__HostDiagnosticPartition() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskDimensionsChs
#define SOAP_TYPE_ns1__HostDiskDimensionsChs (1975)
/* ns1:HostDiskDimensionsChs */
class SOAP_CMAC ns1__HostDiskDimensionsChs : public ns1__DynamicData
{
public:
	LONG64 cylinder;	/* required element of type xsd:long */
	int head;	/* required element of type xsd:int */
	int sector;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1975; } /* = unique id SOAP_TYPE_ns1__HostDiskDimensionsChs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskDimensionsChs() { ns1__HostDiskDimensionsChs::soap_default(NULL); }
	virtual ~ns1__HostDiskDimensionsChs() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskDimensionsLba
#define SOAP_TYPE_ns1__HostDiskDimensionsLba (1976)
/* ns1:HostDiskDimensionsLba */
class SOAP_CMAC ns1__HostDiskDimensionsLba : public ns1__DynamicData
{
public:
	int blockSize;	/* required element of type xsd:int */
	LONG64 block;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1976; } /* = unique id SOAP_TYPE_ns1__HostDiskDimensionsLba */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskDimensionsLba() { ns1__HostDiskDimensionsLba::soap_default(NULL); }
	virtual ~ns1__HostDiskDimensionsLba() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskDimensions
#define SOAP_TYPE_ns1__HostDiskDimensions (1977)
/* ns1:HostDiskDimensions */
class SOAP_CMAC ns1__HostDiskDimensions : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 1977; } /* = unique id SOAP_TYPE_ns1__HostDiskDimensions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskDimensions() { ns1__HostDiskDimensions::soap_default(NULL); }
	virtual ~ns1__HostDiskDimensions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionAttributes
#define SOAP_TYPE_ns1__HostDiskPartitionAttributes (1978)
/* ns1:HostDiskPartitionAttributes */
class SOAP_CMAC ns1__HostDiskPartitionAttributes : public ns1__DynamicData
{
public:
	int partition;	/* required element of type xsd:int */
	LONG64 startSector;	/* required element of type xsd:long */
	LONG64 endSector;	/* required element of type xsd:long */
	std::string type;	/* required element of type xsd:string */
	bool logical;	/* required element of type xsd:boolean */
	char attributes;	/* required element of type xsd:byte */
public:
	virtual int soap_type() const { return 1978; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionAttributes() { ns1__HostDiskPartitionAttributes::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionAttributes() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionBlockRange
#define SOAP_TYPE_ns1__HostDiskPartitionBlockRange (1980)
/* ns1:HostDiskPartitionBlockRange */
class SOAP_CMAC ns1__HostDiskPartitionBlockRange : public ns1__DynamicData
{
public:
	int *partition;	/* optional element of type xsd:int */
	std::string type;	/* required element of type xsd:string */
	ns1__HostDiskDimensionsLba *start;	/* required element of type ns1:HostDiskDimensionsLba */
	ns1__HostDiskDimensionsLba *end;	/* required element of type ns1:HostDiskDimensionsLba */
public:
	virtual int soap_type() const { return 1980; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionBlockRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionBlockRange() { ns1__HostDiskPartitionBlockRange::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionBlockRange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionSpec
#define SOAP_TYPE_ns1__HostDiskPartitionSpec (1982)
/* ns1:HostDiskPartitionSpec */
class SOAP_CMAC ns1__HostDiskPartitionSpec : public ns1__DynamicData
{
public:
	ns1__HostDiskDimensionsChs *chs;	/* optional element of type ns1:HostDiskDimensionsChs */
	LONG64 *totalSectors;	/* optional element of type xsd:long */
	std::vector<ns1__HostDiskPartitionAttributes * >partition;	/* optional element of type ns1:HostDiskPartitionAttributes */
public:
	virtual int soap_type() const { return 1982; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionSpec() { ns1__HostDiskPartitionSpec::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionLayout
#define SOAP_TYPE_ns1__HostDiskPartitionLayout (1983)
/* ns1:HostDiskPartitionLayout */
class SOAP_CMAC ns1__HostDiskPartitionLayout : public ns1__DynamicData
{
public:
	ns1__HostDiskDimensionsLba *total;	/* optional element of type ns1:HostDiskDimensionsLba */
	std::vector<ns1__HostDiskPartitionBlockRange * >partition;	/* required element of type ns1:HostDiskPartitionBlockRange */
public:
	virtual int soap_type() const { return 1983; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionLayout() { ns1__HostDiskPartitionLayout::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskPartitionInfo
#define SOAP_TYPE_ns1__HostDiskPartitionInfo (1984)
/* ns1:HostDiskPartitionInfo */
class SOAP_CMAC ns1__HostDiskPartitionInfo : public ns1__DynamicData
{
public:
	std::string deviceName;	/* required element of type xsd:string */
	ns1__HostDiskPartitionSpec *spec;	/* required element of type ns1:HostDiskPartitionSpec */
	ns1__HostDiskPartitionLayout *layout;	/* required element of type ns1:HostDiskPartitionLayout */
public:
	virtual int soap_type() const { return 1984; } /* = unique id SOAP_TYPE_ns1__HostDiskPartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskPartitionInfo() { ns1__HostDiskPartitionInfo::soap_default(NULL); }
	virtual ~ns1__HostDiskPartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDnsConfig
#define SOAP_TYPE_ns1__HostDnsConfig (1986)
/* ns1:HostDnsConfig */
class SOAP_CMAC ns1__HostDnsConfig : public ns1__DynamicData
{
public:
	bool dhcp;	/* required element of type xsd:boolean */
	std::string *virtualNicDevice;	/* optional element of type xsd:string */
	std::string hostName;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	std::vector<std::string >address;	/* optional element of type xsd:string */
	std::vector<std::string >searchDomain;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1986; } /* = unique id SOAP_TYPE_ns1__HostDnsConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDnsConfig() { ns1__HostDnsConfig::soap_default(NULL); }
	virtual ~ns1__HostDnsConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFeatureVersionInfo
#define SOAP_TYPE_ns1__HostFeatureVersionInfo (1988)
/* ns1:HostFeatureVersionInfo */
class SOAP_CMAC ns1__HostFeatureVersionInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1988; } /* = unique id SOAP_TYPE_ns1__HostFeatureVersionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFeatureVersionInfo() { ns1__HostFeatureVersionInfo::soap_default(NULL); }
	virtual ~ns1__HostFeatureVersionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModeInfo
#define SOAP_TYPE_ns1__ModeInfo (1990)
/* ns1:ModeInfo */
class SOAP_CMAC ns1__ModeInfo : public ns1__DynamicData
{
public:
	std::string *browse;	/* optional element of type xsd:string */
	std::string read;	/* required element of type xsd:string */
	std::string modify;	/* required element of type xsd:string */
	std::string use;	/* required element of type xsd:string */
	std::string *admin;	/* optional element of type xsd:string */
	std::string full;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1990; } /* = unique id SOAP_TYPE_ns1__ModeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModeInfo() { ns1__ModeInfo::soap_default(NULL); }
	virtual ~ns1__ModeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFileAccess
#define SOAP_TYPE_ns1__HostFileAccess (1991)
/* ns1:HostFileAccess */
class SOAP_CMAC ns1__HostFileAccess : public ns1__DynamicData
{
public:
	std::string who;	/* required element of type xsd:string */
	std::string what;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1991; } /* = unique id SOAP_TYPE_ns1__HostFileAccess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFileAccess() { ns1__HostFileAccess::soap_default(NULL); }
	virtual ~ns1__HostFileAccess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFileSystemVolumeInfo
#define SOAP_TYPE_ns1__HostFileSystemVolumeInfo (1992)
/* ns1:HostFileSystemVolumeInfo */
class SOAP_CMAC ns1__HostFileSystemVolumeInfo : public ns1__DynamicData
{
public:
	std::vector<std::string >volumeTypeList;	/* optional element of type xsd:string */
	std::vector<ns1__HostFileSystemMountInfo * >mountInfo;	/* optional element of type ns1:HostFileSystemMountInfo */
public:
	virtual int soap_type() const { return 1992; } /* = unique id SOAP_TYPE_ns1__HostFileSystemVolumeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFileSystemVolumeInfo() { ns1__HostFileSystemVolumeInfo::soap_default(NULL); }
	virtual ~ns1__HostFileSystemVolumeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFileSystemMountInfo
#define SOAP_TYPE_ns1__HostFileSystemMountInfo (1993)
/* ns1:HostFileSystemMountInfo */
class SOAP_CMAC ns1__HostFileSystemMountInfo : public ns1__DynamicData
{
public:
	ns1__HostMountInfo *mountInfo;	/* required element of type ns1:HostMountInfo */
	class ns1__HostFileSystemVolume *volume;	/* required element of type ns1:HostFileSystemVolume */
	std::string *vStorageSupport;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1993; } /* = unique id SOAP_TYPE_ns1__HostFileSystemMountInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFileSystemMountInfo() { ns1__HostFileSystemMountInfo::soap_default(NULL); }
	virtual ~ns1__HostFileSystemMountInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFileSystemVolume
#define SOAP_TYPE_ns1__HostFileSystemVolume (1995)
/* ns1:HostFileSystemVolume */
class SOAP_CMAC ns1__HostFileSystemVolume : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	LONG64 capacity;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1995; } /* = unique id SOAP_TYPE_ns1__HostFileSystemVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFileSystemVolume() { ns1__HostFileSystemVolume::soap_default(NULL); }
	virtual ~ns1__HostFileSystemVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNasVolumeSpec
#define SOAP_TYPE_ns1__HostNasVolumeSpec (1996)
/* ns1:HostNasVolumeSpec */
class SOAP_CMAC ns1__HostNasVolumeSpec : public ns1__DynamicData
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
	std::string localPath;	/* required element of type xsd:string */
	std::string accessMode;	/* required element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	std::string *userName;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1996; } /* = unique id SOAP_TYPE_ns1__HostNasVolumeSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNasVolumeSpec() { ns1__HostNasVolumeSpec::soap_default(NULL); }
	virtual ~ns1__HostNasVolumeSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNasVolumeConfig
#define SOAP_TYPE_ns1__HostNasVolumeConfig (1997)
/* ns1:HostNasVolumeConfig */
class SOAP_CMAC ns1__HostNasVolumeConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	ns1__HostNasVolumeSpec *spec;	/* optional element of type ns1:HostNasVolumeSpec */
public:
	virtual int soap_type() const { return 1997; } /* = unique id SOAP_TYPE_ns1__HostNasVolumeConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNasVolumeConfig() { ns1__HostNasVolumeConfig::soap_default(NULL); }
	virtual ~ns1__HostNasVolumeConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLocalFileSystemVolumeSpec
#define SOAP_TYPE_ns1__HostLocalFileSystemVolumeSpec (2000)
/* ns1:HostLocalFileSystemVolumeSpec */
class SOAP_CMAC ns1__HostLocalFileSystemVolumeSpec : public ns1__DynamicData
{
public:
	std::string device;	/* required element of type xsd:string */
	std::string localPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2000; } /* = unique id SOAP_TYPE_ns1__HostLocalFileSystemVolumeSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLocalFileSystemVolumeSpec() { ns1__HostLocalFileSystemVolumeSpec::soap_default(NULL); }
	virtual ~ns1__HostLocalFileSystemVolumeSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallConfigRuleSetConfig
#define SOAP_TYPE_ns1__HostFirewallConfigRuleSetConfig (2002)
/* ns1:HostFirewallConfigRuleSetConfig */
class SOAP_CMAC ns1__HostFirewallConfigRuleSetConfig : public ns1__DynamicData
{
public:
	std::string rulesetId;	/* required element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2002; } /* = unique id SOAP_TYPE_ns1__HostFirewallConfigRuleSetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallConfigRuleSetConfig() { ns1__HostFirewallConfigRuleSetConfig::soap_default(NULL); }
	virtual ~ns1__HostFirewallConfigRuleSetConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallConfig
#define SOAP_TYPE_ns1__HostFirewallConfig (2004)
/* ns1:HostFirewallConfig */
class SOAP_CMAC ns1__HostFirewallConfig : public ns1__DynamicData
{
public:
	std::vector<ns1__HostFirewallConfigRuleSetConfig * >rule;	/* optional element of type ns1:HostFirewallConfigRuleSetConfig */
	ns1__HostFirewallDefaultPolicy *defaultBlockingPolicy;	/* required element of type ns1:HostFirewallDefaultPolicy */
public:
	virtual int soap_type() const { return 2004; } /* = unique id SOAP_TYPE_ns1__HostFirewallConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallConfig() { ns1__HostFirewallConfig::soap_default(NULL); }
	virtual ~ns1__HostFirewallConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallDefaultPolicy
#define SOAP_TYPE_ns1__HostFirewallDefaultPolicy (2005)
/* ns1:HostFirewallDefaultPolicy */
class SOAP_CMAC ns1__HostFirewallDefaultPolicy : public ns1__DynamicData
{
public:
	bool *incomingBlocked;	/* optional element of type xsd:boolean */
	bool *outgoingBlocked;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2005; } /* = unique id SOAP_TYPE_ns1__HostFirewallDefaultPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallDefaultPolicy() { ns1__HostFirewallDefaultPolicy::soap_default(NULL); }
	virtual ~ns1__HostFirewallDefaultPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallInfo
#define SOAP_TYPE_ns1__HostFirewallInfo (2006)
/* ns1:HostFirewallInfo */
class SOAP_CMAC ns1__HostFirewallInfo : public ns1__DynamicData
{
public:
	ns1__HostFirewallDefaultPolicy *defaultPolicy;	/* required element of type ns1:HostFirewallDefaultPolicy */
	std::vector<ns1__HostFirewallRuleset * >ruleset;	/* optional element of type ns1:HostFirewallRuleset */
public:
	virtual int soap_type() const { return 2006; } /* = unique id SOAP_TYPE_ns1__HostFirewallInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallInfo() { ns1__HostFirewallInfo::soap_default(NULL); }
	virtual ~ns1__HostFirewallInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFlagInfo
#define SOAP_TYPE_ns1__HostFlagInfo (2007)
/* ns1:HostFlagInfo */
class SOAP_CMAC ns1__HostFlagInfo : public ns1__DynamicData
{
public:
	bool *backgroundSnapshotsEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2007; } /* = unique id SOAP_TYPE_ns1__HostFlagInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFlagInfo() { ns1__HostFlagInfo::soap_default(NULL); }
	virtual ~ns1__HostFlagInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostForceMountedInfo
#define SOAP_TYPE_ns1__HostForceMountedInfo (2008)
/* ns1:HostForceMountedInfo */
class SOAP_CMAC ns1__HostForceMountedInfo : public ns1__DynamicData
{
public:
	bool persist;	/* required element of type xsd:boolean */
	bool mounted;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2008; } /* = unique id SOAP_TYPE_ns1__HostForceMountedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostForceMountedInfo() { ns1__HostForceMountedInfo::soap_default(NULL); }
	virtual ~ns1__HostForceMountedInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareInfo
#define SOAP_TYPE_ns1__HostHardwareInfo (2009)
/* ns1:HostHardwareInfo */
class SOAP_CMAC ns1__HostHardwareInfo : public ns1__DynamicData
{
public:
	class ns1__HostSystemInfo *systemInfo;	/* required element of type ns1:HostSystemInfo */
	class ns1__HostCpuPowerManagementInfo *cpuPowerManagementInfo;	/* optional element of type ns1:HostCpuPowerManagementInfo */
	class ns1__HostCpuInfo *cpuInfo;	/* required element of type ns1:HostCpuInfo */
	std::vector<ns1__HostCpuPackage * >cpuPkg;	/* required element of type ns1:HostCpuPackage */
	LONG64 memorySize;	/* required element of type xsd:long */
	class ns1__HostNumaInfo *numaInfo;	/* optional element of type ns1:HostNumaInfo */
	std::vector<ns1__HostPciDevice * >pciDevice;	/* optional element of type ns1:HostPciDevice */
	std::vector<ns1__HostCpuIdInfo * >cpuFeature;	/* optional element of type ns1:HostCpuIdInfo */
	class ns1__HostBIOSInfo *biosInfo;	/* optional element of type ns1:HostBIOSInfo */
public:
	virtual int soap_type() const { return 2009; } /* = unique id SOAP_TYPE_ns1__HostHardwareInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHardwareInfo() { ns1__HostHardwareInfo::soap_default(NULL); }
	virtual ~ns1__HostHardwareInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemInfo
#define SOAP_TYPE_ns1__HostSystemInfo (2010)
/* ns1:HostSystemInfo */
class SOAP_CMAC ns1__HostSystemInfo : public ns1__DynamicData
{
public:
	std::string vendor;	/* required element of type xsd:string */
	std::string model;	/* required element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	std::vector<ns1__HostSystemIdentificationInfo * >otherIdentifyingInfo;	/* optional element of type ns1:HostSystemIdentificationInfo */
public:
	virtual int soap_type() const { return 2010; } /* = unique id SOAP_TYPE_ns1__HostSystemInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemInfo() { ns1__HostSystemInfo::soap_default(NULL); }
	virtual ~ns1__HostSystemInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPowerManagementInfo
#define SOAP_TYPE_ns1__HostCpuPowerManagementInfo (2011)
/* ns1:HostCpuPowerManagementInfo */
class SOAP_CMAC ns1__HostCpuPowerManagementInfo : public ns1__DynamicData
{
public:
	std::string *currentPolicy;	/* optional element of type xsd:string */
	std::string *hardwareSupport;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2011; } /* = unique id SOAP_TYPE_ns1__HostCpuPowerManagementInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuPowerManagementInfo() { ns1__HostCpuPowerManagementInfo::soap_default(NULL); }
	virtual ~ns1__HostCpuPowerManagementInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuInfo
#define SOAP_TYPE_ns1__HostCpuInfo (2012)
/* ns1:HostCpuInfo */
class SOAP_CMAC ns1__HostCpuInfo : public ns1__DynamicData
{
public:
	short numCpuPackages;	/* required element of type xsd:short */
	short numCpuCores;	/* required element of type xsd:short */
	short numCpuThreads;	/* required element of type xsd:short */
	LONG64 hz;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2012; } /* = unique id SOAP_TYPE_ns1__HostCpuInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuInfo() { ns1__HostCpuInfo::soap_default(NULL); }
	virtual ~ns1__HostCpuInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCpuPackage
#define SOAP_TYPE_ns1__HostCpuPackage (2013)
/* ns1:HostCpuPackage */
class SOAP_CMAC ns1__HostCpuPackage : public ns1__DynamicData
{
public:
	short index;	/* required element of type xsd:short */
	std::string vendor;	/* required element of type xsd:string */
	LONG64 hz;	/* required element of type xsd:long */
	LONG64 busHz;	/* required element of type xsd:long */
	std::string description;	/* required element of type xsd:string */
	std::vector<short >threadId;	/* required element of type xsd:short */
	std::vector<ns1__HostCpuIdInfo * >cpuFeature;	/* optional element of type ns1:HostCpuIdInfo */
public:
	virtual int soap_type() const { return 2013; } /* = unique id SOAP_TYPE_ns1__HostCpuPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCpuPackage() { ns1__HostCpuPackage::soap_default(NULL); }
	virtual ~ns1__HostCpuPackage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNumaInfo
#define SOAP_TYPE_ns1__HostNumaInfo (2015)
/* ns1:HostNumaInfo */
class SOAP_CMAC ns1__HostNumaInfo : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	int numNodes;	/* required element of type xsd:int */
	std::vector<ns1__HostNumaNode * >numaNode;	/* optional element of type ns1:HostNumaNode */
public:
	virtual int soap_type() const { return 2015; } /* = unique id SOAP_TYPE_ns1__HostNumaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNumaInfo() { ns1__HostNumaInfo::soap_default(NULL); }
	virtual ~ns1__HostNumaInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNumaNode
#define SOAP_TYPE_ns1__HostNumaNode (2016)
/* ns1:HostNumaNode */
class SOAP_CMAC ns1__HostNumaNode : public ns1__DynamicData
{
public:
	char typeId;	/* required element of type xsd:byte */
	std::vector<short >cpuID;	/* required element of type xsd:short */
	LONG64 memoryRangeBegin;	/* required element of type xsd:long */
	LONG64 memoryRangeLength;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2016; } /* = unique id SOAP_TYPE_ns1__HostNumaNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNumaNode() { ns1__HostNumaNode::soap_default(NULL); }
	virtual ~ns1__HostNumaNode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostBIOSInfo
#define SOAP_TYPE_ns1__HostBIOSInfo (2018)
/* ns1:HostBIOSInfo */
class SOAP_CMAC ns1__HostBIOSInfo : public ns1__DynamicData
{
public:
	std::string *biosVersion;	/* optional element of type xsd:string */
	time_t *releaseDate;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2018; } /* = unique id SOAP_TYPE_ns1__HostBIOSInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostBIOSInfo() { ns1__HostBIOSInfo::soap_default(NULL); }
	virtual ~ns1__HostBIOSInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareElementInfo
#define SOAP_TYPE_ns1__HostHardwareElementInfo (2019)
/* ns1:HostHardwareElementInfo */
class SOAP_CMAC ns1__HostHardwareElementInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ElementDescription *status;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 2019; } /* = unique id SOAP_TYPE_ns1__HostHardwareElementInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHardwareElementInfo() { ns1__HostHardwareElementInfo::soap_default(NULL); }
	virtual ~ns1__HostHardwareElementInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStorageOperationalInfo
#define SOAP_TYPE_ns1__HostStorageOperationalInfo (2021)
/* ns1:HostStorageOperationalInfo */
class SOAP_CMAC ns1__HostStorageOperationalInfo : public ns1__DynamicData
{
public:
	std::string property;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2021; } /* = unique id SOAP_TYPE_ns1__HostStorageOperationalInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStorageOperationalInfo() { ns1__HostStorageOperationalInfo::soap_default(NULL); }
	virtual ~ns1__HostStorageOperationalInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareStatusInfo
#define SOAP_TYPE_ns1__HostHardwareStatusInfo (2025)
/* ns1:HostHardwareStatusInfo */
class SOAP_CMAC ns1__HostHardwareStatusInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostHardwareElementInfo * >memoryStatusInfo;	/* optional element of type ns1:HostHardwareElementInfo */
	std::vector<ns1__HostHardwareElementInfo * >cpuStatusInfo;	/* optional element of type ns1:HostHardwareElementInfo */
	std::vector<ns1__HostStorageElementInfo * >storageStatusInfo;	/* optional element of type ns1:HostStorageElementInfo */
public:
	virtual int soap_type() const { return 2025; } /* = unique id SOAP_TYPE_ns1__HostHardwareStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHardwareStatusInfo() { ns1__HostHardwareStatusInfo::soap_default(NULL); }
	virtual ~ns1__HostHardwareStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HealthSystemRuntime
#define SOAP_TYPE_ns1__HealthSystemRuntime (2026)
/* ns1:HealthSystemRuntime */
class SOAP_CMAC ns1__HealthSystemRuntime : public ns1__DynamicData
{
public:
	class ns1__HostSystemHealthInfo *systemHealthInfo;	/* optional element of type ns1:HostSystemHealthInfo */
	ns1__HostHardwareStatusInfo *hardwareStatusInfo;	/* optional element of type ns1:HostHardwareStatusInfo */
public:
	virtual int soap_type() const { return 2026; } /* = unique id SOAP_TYPE_ns1__HealthSystemRuntime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HealthSystemRuntime() { ns1__HealthSystemRuntime::soap_default(NULL); }
	virtual ~ns1__HealthSystemRuntime() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHostBusAdapter
#define SOAP_TYPE_ns1__HostHostBusAdapter (2027)
/* ns1:HostHostBusAdapter */
class SOAP_CMAC ns1__HostHostBusAdapter : public ns1__DynamicData
{
public:
	std::string *key;	/* optional element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
	int bus;	/* required element of type xsd:int */
	std::string status;	/* required element of type xsd:string */
	std::string model;	/* required element of type xsd:string */
	std::string *driver;	/* optional element of type xsd:string */
	std::string *pci;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2027; } /* = unique id SOAP_TYPE_ns1__HostHostBusAdapter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHostBusAdapter() { ns1__HostHostBusAdapter::soap_default(NULL); }
	virtual ~ns1__HostHostBusAdapter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryCapabilities
#define SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryCapabilities (2034)
/* ns1:HostInternetScsiHbaDiscoveryCapabilities */
class SOAP_CMAC ns1__HostInternetScsiHbaDiscoveryCapabilities : public ns1__DynamicData
{
public:
	bool iSnsDiscoverySettable;	/* required element of type xsd:boolean */
	bool slpDiscoverySettable;	/* required element of type xsd:boolean */
	bool staticTargetDiscoverySettable;	/* required element of type xsd:boolean */
	bool sendTargetsDiscoverySettable;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2034; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaDiscoveryCapabilities() { ns1__HostInternetScsiHbaDiscoveryCapabilities::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaDiscoveryCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryProperties
#define SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryProperties (2035)
/* ns1:HostInternetScsiHbaDiscoveryProperties */
class SOAP_CMAC ns1__HostInternetScsiHbaDiscoveryProperties : public ns1__DynamicData
{
public:
	bool iSnsDiscoveryEnabled;	/* required element of type xsd:boolean */
	std::string *iSnsDiscoveryMethod;	/* optional element of type xsd:string */
	std::string *iSnsHost;	/* optional element of type xsd:string */
	bool slpDiscoveryEnabled;	/* required element of type xsd:boolean */
	std::string *slpDiscoveryMethod;	/* optional element of type xsd:string */
	std::string *slpHost;	/* optional element of type xsd:string */
	bool staticTargetDiscoveryEnabled;	/* required element of type xsd:boolean */
	bool sendTargetsDiscoveryEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2035; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaDiscoveryProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaDiscoveryProperties() { ns1__HostInternetScsiHbaDiscoveryProperties::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaDiscoveryProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationCapabilities
#define SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationCapabilities (2036)
/* ns1:HostInternetScsiHbaAuthenticationCapabilities */
class SOAP_CMAC ns1__HostInternetScsiHbaAuthenticationCapabilities : public ns1__DynamicData
{
public:
	bool chapAuthSettable;	/* required element of type xsd:boolean */
	bool krb5AuthSettable;	/* required element of type xsd:boolean */
	bool srpAuthSettable;	/* required element of type xsd:boolean */
	bool spkmAuthSettable;	/* required element of type xsd:boolean */
	bool *mutualChapSettable;	/* optional element of type xsd:boolean */
	bool *targetChapSettable;	/* optional element of type xsd:boolean */
	bool *targetMutualChapSettable;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2036; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaAuthenticationCapabilities() { ns1__HostInternetScsiHbaAuthenticationCapabilities::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaAuthenticationCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationProperties
#define SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationProperties (2037)
/* ns1:HostInternetScsiHbaAuthenticationProperties */
class SOAP_CMAC ns1__HostInternetScsiHbaAuthenticationProperties : public ns1__DynamicData
{
public:
	bool chapAuthEnabled;	/* required element of type xsd:boolean */
	std::string *chapName;	/* optional element of type xsd:string */
	std::string *chapSecret;	/* optional element of type xsd:string */
	std::string *chapAuthenticationType;	/* optional element of type xsd:string */
	bool *chapInherited;	/* optional element of type xsd:boolean */
	std::string *mutualChapName;	/* optional element of type xsd:string */
	std::string *mutualChapSecret;	/* optional element of type xsd:string */
	std::string *mutualChapAuthenticationType;	/* optional element of type xsd:string */
	bool *mutualChapInherited;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2037; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaAuthenticationProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaAuthenticationProperties() { ns1__HostInternetScsiHbaAuthenticationProperties::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaAuthenticationProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDigestCapabilities
#define SOAP_TYPE_ns1__HostInternetScsiHbaDigestCapabilities (2038)
/* ns1:HostInternetScsiHbaDigestCapabilities */
class SOAP_CMAC ns1__HostInternetScsiHbaDigestCapabilities : public ns1__DynamicData
{
public:
	bool *headerDigestSettable;	/* optional element of type xsd:boolean */
	bool *dataDigestSettable;	/* optional element of type xsd:boolean */
	bool *targetHeaderDigestSettable;	/* optional element of type xsd:boolean */
	bool *targetDataDigestSettable;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2038; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaDigestCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaDigestCapabilities() { ns1__HostInternetScsiHbaDigestCapabilities::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaDigestCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaDigestProperties
#define SOAP_TYPE_ns1__HostInternetScsiHbaDigestProperties (2039)
/* ns1:HostInternetScsiHbaDigestProperties */
class SOAP_CMAC ns1__HostInternetScsiHbaDigestProperties : public ns1__DynamicData
{
public:
	std::string *headerDigestType;	/* optional element of type xsd:string */
	bool *headerDigestInherited;	/* optional element of type xsd:boolean */
	std::string *dataDigestType;	/* optional element of type xsd:string */
	bool *dataDigestInherited;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2039; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaDigestProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaDigestProperties() { ns1__HostInternetScsiHbaDigestProperties::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaDigestProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaIPCapabilities
#define SOAP_TYPE_ns1__HostInternetScsiHbaIPCapabilities (2040)
/* ns1:HostInternetScsiHbaIPCapabilities */
class SOAP_CMAC ns1__HostInternetScsiHbaIPCapabilities : public ns1__DynamicData
{
public:
	bool addressSettable;	/* required element of type xsd:boolean */
	bool ipConfigurationMethodSettable;	/* required element of type xsd:boolean */
	bool subnetMaskSettable;	/* required element of type xsd:boolean */
	bool defaultGatewaySettable;	/* required element of type xsd:boolean */
	bool primaryDnsServerAddressSettable;	/* required element of type xsd:boolean */
	bool alternateDnsServerAddressSettable;	/* required element of type xsd:boolean */
	bool *ipv6Supported;	/* optional element of type xsd:boolean */
	bool *arpRedirectSettable;	/* optional element of type xsd:boolean */
	bool *mtuSettable;	/* optional element of type xsd:boolean */
	bool *hostNameAsTargetAddress;	/* optional element of type xsd:boolean */
	bool *nameAliasSettable;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2040; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaIPCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaIPCapabilities() { ns1__HostInternetScsiHbaIPCapabilities::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaIPCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaIPProperties
#define SOAP_TYPE_ns1__HostInternetScsiHbaIPProperties (2041)
/* ns1:HostInternetScsiHbaIPProperties */
class SOAP_CMAC ns1__HostInternetScsiHbaIPProperties : public ns1__DynamicData
{
public:
	std::string *mac;	/* optional element of type xsd:string */
	std::string *address;	/* optional element of type xsd:string */
	bool dhcpConfigurationEnabled;	/* required element of type xsd:boolean */
	std::string *subnetMask;	/* optional element of type xsd:string */
	std::string *defaultGateway;	/* optional element of type xsd:string */
	std::string *primaryDnsServerAddress;	/* optional element of type xsd:string */
	std::string *alternateDnsServerAddress;	/* optional element of type xsd:string */
	std::string *ipv6Address;	/* optional element of type xsd:string */
	std::string *ipv6SubnetMask;	/* optional element of type xsd:string */
	std::string *ipv6DefaultGateway;	/* optional element of type xsd:string */
	bool *arpRedirectEnabled;	/* optional element of type xsd:boolean */
	int *mtu;	/* optional element of type xsd:int */
	bool *jumboFramesEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2041; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaIPProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaIPProperties() { ns1__HostInternetScsiHbaIPProperties::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaIPProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaSendTarget
#define SOAP_TYPE_ns1__HostInternetScsiHbaSendTarget (2042)
/* ns1:HostInternetScsiHbaSendTarget */
class SOAP_CMAC ns1__HostInternetScsiHbaSendTarget : public ns1__DynamicData
{
public:
	std::string address;	/* required element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	ns1__HostInternetScsiHbaAuthenticationProperties *authenticationProperties;	/* optional element of type ns1:HostInternetScsiHbaAuthenticationProperties */
	ns1__HostInternetScsiHbaDigestProperties *digestProperties;	/* optional element of type ns1:HostInternetScsiHbaDigestProperties */
	std::vector<ns1__OptionDef * >supportedAdvancedOptions;	/* optional element of type ns1:OptionDef */
	std::vector<ns1__HostInternetScsiHbaParamValue * >advancedOptions;	/* optional element of type ns1:HostInternetScsiHbaParamValue */
	std::string *parent;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2042; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaSendTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaSendTarget() { ns1__HostInternetScsiHbaSendTarget::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaSendTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaStaticTarget
#define SOAP_TYPE_ns1__HostInternetScsiHbaStaticTarget (2044)
/* ns1:HostInternetScsiHbaStaticTarget */
class SOAP_CMAC ns1__HostInternetScsiHbaStaticTarget : public ns1__DynamicData
{
public:
	std::string address;	/* required element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string iScsiName;	/* required element of type xsd:string */
	ns1__HostInternetScsiHbaAuthenticationProperties *authenticationProperties;	/* optional element of type ns1:HostInternetScsiHbaAuthenticationProperties */
	ns1__HostInternetScsiHbaDigestProperties *digestProperties;	/* optional element of type ns1:HostInternetScsiHbaDigestProperties */
	std::vector<ns1__OptionDef * >supportedAdvancedOptions;	/* optional element of type ns1:OptionDef */
	std::vector<ns1__HostInternetScsiHbaParamValue * >advancedOptions;	/* optional element of type ns1:HostInternetScsiHbaParamValue */
	std::string *parent;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2044; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaStaticTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaStaticTarget() { ns1__HostInternetScsiHbaStaticTarget::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaStaticTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaTargetSet
#define SOAP_TYPE_ns1__HostInternetScsiHbaTargetSet (2046)
/* ns1:HostInternetScsiHbaTargetSet */
class SOAP_CMAC ns1__HostInternetScsiHbaTargetSet : public ns1__DynamicData
{
public:
	std::vector<ns1__HostInternetScsiHbaStaticTarget * >staticTargets;	/* optional element of type ns1:HostInternetScsiHbaStaticTarget */
	std::vector<ns1__HostInternetScsiHbaSendTarget * >sendTargets;	/* optional element of type ns1:HostInternetScsiHbaSendTarget */
public:
	virtual int soap_type() const { return 2046; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaTargetSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaTargetSet() { ns1__HostInternetScsiHbaTargetSet::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaTargetSet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProxySwitchSpec
#define SOAP_TYPE_ns1__HostProxySwitchSpec (2048)
/* ns1:HostProxySwitchSpec */
class SOAP_CMAC ns1__HostProxySwitchSpec : public ns1__DynamicData
{
public:
	ns1__DistributedVirtualSwitchHostMemberBacking *backing;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberBacking */
public:
	virtual int soap_type() const { return 2048; } /* = unique id SOAP_TYPE_ns1__HostProxySwitchSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProxySwitchSpec() { ns1__HostProxySwitchSpec::soap_default(NULL); }
	virtual ~ns1__HostProxySwitchSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProxySwitchConfig
#define SOAP_TYPE_ns1__HostProxySwitchConfig (2049)
/* ns1:HostProxySwitchConfig */
class SOAP_CMAC ns1__HostProxySwitchConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	ns1__HostProxySwitchSpec *spec;	/* optional element of type ns1:HostProxySwitchSpec */
public:
	virtual int soap_type() const { return 2049; } /* = unique id SOAP_TYPE_ns1__HostProxySwitchConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProxySwitchConfig() { ns1__HostProxySwitchConfig::soap_default(NULL); }
	virtual ~ns1__HostProxySwitchConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProxySwitch
#define SOAP_TYPE_ns1__HostProxySwitch (2051)
/* ns1:HostProxySwitch */
class SOAP_CMAC ns1__HostProxySwitch : public ns1__DynamicData
{
public:
	std::string dvsUuid;	/* required element of type xsd:string */
	std::string dvsName;	/* required element of type xsd:string */
	std::string key;	/* required element of type xsd:string */
	int numPorts;	/* required element of type xsd:int */
	int numPortsAvailable;	/* required element of type xsd:int */
	std::vector<ns1__KeyValue * >uplinkPort;	/* optional element of type ns1:KeyValue */
	int *mtu;	/* optional element of type xsd:int */
	std::vector<std::string >pnic;	/* optional element of type xsd:string */
	ns1__HostProxySwitchSpec *spec;	/* required element of type ns1:HostProxySwitchSpec */
public:
	virtual int soap_type() const { return 2051; } /* = unique id SOAP_TYPE_ns1__HostProxySwitch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProxySwitch() { ns1__HostProxySwitch::soap_default(NULL); }
	virtual ~ns1__HostProxySwitch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6Address
#define SOAP_TYPE_ns1__HostIpConfigIpV6Address (2053)
/* ns1:HostIpConfigIpV6Address */
class SOAP_CMAC ns1__HostIpConfigIpV6Address : public ns1__DynamicData
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	std::string *origin;	/* optional element of type xsd:string */
	std::string *dadState;	/* optional element of type xsd:string */
	time_t *lifetime;	/* optional element of type xsd:dateTime */
	std::string *operation;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2053; } /* = unique id SOAP_TYPE_ns1__HostIpConfigIpV6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpConfigIpV6Address() { ns1__HostIpConfigIpV6Address::soap_default(NULL); }
	virtual ~ns1__HostIpConfigIpV6Address() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfiguration
#define SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfiguration (2055)
/* ns1:HostIpConfigIpV6AddressConfiguration */
class SOAP_CMAC ns1__HostIpConfigIpV6AddressConfiguration : public ns1__DynamicData
{
public:
	std::vector<ns1__HostIpConfigIpV6Address * >ipV6Address;	/* optional element of type ns1:HostIpConfigIpV6Address */
	bool *autoConfigurationEnabled;	/* optional element of type xsd:boolean */
	bool *dhcpV6Enabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2055; } /* = unique id SOAP_TYPE_ns1__HostIpConfigIpV6AddressConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpConfigIpV6AddressConfiguration() { ns1__HostIpConfigIpV6AddressConfiguration::soap_default(NULL); }
	virtual ~ns1__HostIpConfigIpV6AddressConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpConfig
#define SOAP_TYPE_ns1__HostIpConfig (2056)
/* ns1:HostIpConfig */
class SOAP_CMAC ns1__HostIpConfig : public ns1__DynamicData
{
public:
	bool dhcp;	/* required element of type xsd:boolean */
	std::string *ipAddress;	/* optional element of type xsd:string */
	std::string *subnetMask;	/* optional element of type xsd:string */
	ns1__HostIpConfigIpV6AddressConfiguration *ipV6Config;	/* optional element of type ns1:HostIpConfigIpV6AddressConfiguration */
public:
	virtual int soap_type() const { return 2056; } /* = unique id SOAP_TYPE_ns1__HostIpConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpConfig() { ns1__HostIpConfig::soap_default(NULL); }
	virtual ~ns1__HostIpConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteConfig
#define SOAP_TYPE_ns1__HostIpRouteConfig (2057)
/* ns1:HostIpRouteConfig */
class SOAP_CMAC ns1__HostIpRouteConfig : public ns1__DynamicData
{
public:
	std::string *defaultGateway;	/* optional element of type xsd:string */
	std::string *gatewayDevice;	/* optional element of type xsd:string */
	std::string *ipV6DefaultGateway;	/* optional element of type xsd:string */
	std::string *ipV6GatewayDevice;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2057; } /* = unique id SOAP_TYPE_ns1__HostIpRouteConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteConfig() { ns1__HostIpRouteConfig::soap_default(NULL); }
	virtual ~ns1__HostIpRouteConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteEntry
#define SOAP_TYPE_ns1__HostIpRouteEntry (2059)
/* ns1:HostIpRouteEntry */
class SOAP_CMAC ns1__HostIpRouteEntry : public ns1__DynamicData
{
public:
	std::string network;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	std::string gateway;	/* required element of type xsd:string */
	std::string *deviceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2059; } /* = unique id SOAP_TYPE_ns1__HostIpRouteEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteEntry() { ns1__HostIpRouteEntry::soap_default(NULL); }
	virtual ~ns1__HostIpRouteEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteOp
#define SOAP_TYPE_ns1__HostIpRouteOp (2061)
/* ns1:HostIpRouteOp */
class SOAP_CMAC ns1__HostIpRouteOp : public ns1__DynamicData
{
public:
	std::string changeOperation;	/* required element of type xsd:string */
	ns1__HostIpRouteEntry *route;	/* required element of type ns1:HostIpRouteEntry */
public:
	virtual int soap_type() const { return 2061; } /* = unique id SOAP_TYPE_ns1__HostIpRouteOp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteOp() { ns1__HostIpRouteOp::soap_default(NULL); }
	virtual ~ns1__HostIpRouteOp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteTableConfig
#define SOAP_TYPE_ns1__HostIpRouteTableConfig (2063)
/* ns1:HostIpRouteTableConfig */
class SOAP_CMAC ns1__HostIpRouteTableConfig : public ns1__DynamicData
{
public:
	std::vector<ns1__HostIpRouteOp * >ipRoute;	/* optional element of type ns1:HostIpRouteOp */
	std::vector<ns1__HostIpRouteOp * >ipv6Route;	/* optional element of type ns1:HostIpRouteOp */
public:
	virtual int soap_type() const { return 2063; } /* = unique id SOAP_TYPE_ns1__HostIpRouteTableConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteTableConfig() { ns1__HostIpRouteTableConfig::soap_default(NULL); }
	virtual ~ns1__HostIpRouteTableConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteTableInfo
#define SOAP_TYPE_ns1__HostIpRouteTableInfo (2064)
/* ns1:HostIpRouteTableInfo */
class SOAP_CMAC ns1__HostIpRouteTableInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostIpRouteEntry * >ipRoute;	/* optional element of type ns1:HostIpRouteEntry */
	std::vector<ns1__HostIpRouteEntry * >ipv6Route;	/* optional element of type ns1:HostIpRouteEntry */
public:
	virtual int soap_type() const { return 2064; } /* = unique id SOAP_TYPE_ns1__HostIpRouteTableInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteTableInfo() { ns1__HostIpRouteTableInfo::soap_default(NULL); }
	virtual ~ns1__HostIpRouteTableInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpmiInfo
#define SOAP_TYPE_ns1__HostIpmiInfo (2065)
/* ns1:HostIpmiInfo */
class SOAP_CMAC ns1__HostIpmiInfo : public ns1__DynamicData
{
public:
	std::string *bmcIpAddress;	/* optional element of type xsd:string */
	std::string *bmcMacAddress;	/* optional element of type xsd:string */
	std::string *login;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2065; } /* = unique id SOAP_TYPE_ns1__HostIpmiInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpmiInfo() { ns1__HostIpmiInfo::soap_default(NULL); }
	virtual ~ns1__HostIpmiInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KernelModuleSectionInfo
#define SOAP_TYPE_ns1__KernelModuleSectionInfo (2066)
/* ns1:KernelModuleSectionInfo */
class SOAP_CMAC ns1__KernelModuleSectionInfo : public ns1__DynamicData
{
public:
	LONG64 address;	/* required element of type xsd:long */
	int *length;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2066; } /* = unique id SOAP_TYPE_ns1__KernelModuleSectionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KernelModuleSectionInfo() { ns1__KernelModuleSectionInfo::soap_default(NULL); }
	virtual ~ns1__KernelModuleSectionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__KernelModuleInfo
#define SOAP_TYPE_ns1__KernelModuleInfo (2067)
/* ns1:KernelModuleInfo */
class SOAP_CMAC ns1__KernelModuleInfo : public ns1__DynamicData
{
public:
	int id;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::string filename;	/* required element of type xsd:string */
	std::string optionString;	/* required element of type xsd:string */
	bool loaded;	/* required element of type xsd:boolean */
	bool enabled;	/* required element of type xsd:boolean */
	int useCount;	/* required element of type xsd:int */
	ns1__KernelModuleSectionInfo *readOnlySection;	/* required element of type ns1:KernelModuleSectionInfo */
	ns1__KernelModuleSectionInfo *writableSection;	/* required element of type ns1:KernelModuleSectionInfo */
	ns1__KernelModuleSectionInfo *textSection;	/* required element of type ns1:KernelModuleSectionInfo */
	ns1__KernelModuleSectionInfo *dataSection;	/* required element of type ns1:KernelModuleSectionInfo */
	ns1__KernelModuleSectionInfo *bssSection;	/* required element of type ns1:KernelModuleSectionInfo */
public:
	virtual int soap_type() const { return 2067; } /* = unique id SOAP_TYPE_ns1__KernelModuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__KernelModuleInfo() { ns1__KernelModuleInfo::soap_default(NULL); }
	virtual ~ns1__KernelModuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLicenseSpec
#define SOAP_TYPE_ns1__HostLicenseSpec (2069)
/* ns1:HostLicenseSpec */
class SOAP_CMAC ns1__HostLicenseSpec : public ns1__DynamicData
{
public:
	ns1__LicenseSource *source;	/* optional element of type ns1:LicenseSource */
	std::string *editionKey;	/* optional element of type xsd:string */
	std::vector<std::string >disabledFeatureKey;	/* optional element of type xsd:string */
	std::vector<std::string >enabledFeatureKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2069; } /* = unique id SOAP_TYPE_ns1__HostLicenseSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLicenseSpec() { ns1__HostLicenseSpec::soap_default(NULL); }
	virtual ~ns1__HostLicenseSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LinkDiscoveryProtocolConfig
#define SOAP_TYPE_ns1__LinkDiscoveryProtocolConfig (2070)
/* ns1:LinkDiscoveryProtocolConfig */
class SOAP_CMAC ns1__LinkDiscoveryProtocolConfig : public ns1__DynamicData
{
public:
	std::string protocol;	/* required element of type xsd:string */
	std::string operation;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2070; } /* = unique id SOAP_TYPE_ns1__LinkDiscoveryProtocolConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LinkDiscoveryProtocolConfig() { ns1__LinkDiscoveryProtocolConfig::soap_default(NULL); }
	virtual ~ns1__LinkDiscoveryProtocolConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAccountSpec
#define SOAP_TYPE_ns1__HostAccountSpec (2071)
/* ns1:HostAccountSpec */
class SOAP_CMAC ns1__HostAccountSpec : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2071; } /* = unique id SOAP_TYPE_ns1__HostAccountSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAccountSpec() { ns1__HostAccountSpec::soap_default(NULL); }
	virtual ~ns1__HostAccountSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServiceConsoleReservationInfo
#define SOAP_TYPE_ns1__ServiceConsoleReservationInfo (2075)
/* ns1:ServiceConsoleReservationInfo */
class SOAP_CMAC ns1__ServiceConsoleReservationInfo : public ns1__DynamicData
{
public:
	LONG64 serviceConsoleReservedCfg;	/* required element of type xsd:long */
	LONG64 serviceConsoleReserved;	/* required element of type xsd:long */
	LONG64 unreserved;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2075; } /* = unique id SOAP_TYPE_ns1__ServiceConsoleReservationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServiceConsoleReservationInfo() { ns1__ServiceConsoleReservationInfo::soap_default(NULL); }
	virtual ~ns1__ServiceConsoleReservationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMemoryReservationInfo
#define SOAP_TYPE_ns1__VirtualMachineMemoryReservationInfo (2076)
/* ns1:VirtualMachineMemoryReservationInfo */
class SOAP_CMAC ns1__VirtualMachineMemoryReservationInfo : public ns1__DynamicData
{
public:
	LONG64 virtualMachineMin;	/* required element of type xsd:long */
	LONG64 virtualMachineMax;	/* required element of type xsd:long */
	LONG64 virtualMachineReserved;	/* required element of type xsd:long */
	std::string allocationPolicy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2076; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMemoryReservationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMemoryReservationInfo() { ns1__VirtualMachineMemoryReservationInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMemoryReservationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMemoryReservationSpec
#define SOAP_TYPE_ns1__VirtualMachineMemoryReservationSpec (2077)
/* ns1:VirtualMachineMemoryReservationSpec */
class SOAP_CMAC ns1__VirtualMachineMemoryReservationSpec : public ns1__DynamicData
{
public:
	LONG64 *virtualMachineReserved;	/* optional element of type xsd:long */
	std::string *allocationPolicy;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2077; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMemoryReservationSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMemoryReservationSpec() { ns1__VirtualMachineMemoryReservationSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMemoryReservationSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMemorySpec
#define SOAP_TYPE_ns1__HostMemorySpec (2078)
/* ns1:HostMemorySpec */
class SOAP_CMAC ns1__HostMemorySpec : public ns1__DynamicData
{
public:
	LONG64 *serviceConsoleReservation;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 2078; } /* = unique id SOAP_TYPE_ns1__HostMemorySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMemorySpec() { ns1__HostMemorySpec::soap_default(NULL); }
	virtual ~ns1__HostMemorySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMountInfo
#define SOAP_TYPE_ns1__HostMountInfo (2079)
/* ns1:HostMountInfo */
class SOAP_CMAC ns1__HostMountInfo : public ns1__DynamicData
{
public:
	std::string *path;	/* optional element of type xsd:string */
	std::string accessMode;	/* required element of type xsd:string */
	bool *accessible;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2079; } /* = unique id SOAP_TYPE_ns1__HostMountInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMountInfo() { ns1__HostMountInfo::soap_default(NULL); }
	virtual ~ns1__HostMountInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitPolicy
#define SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitPolicy (2080)
/* ns1:HostMultipathInfoLogicalUnitPolicy */
class SOAP_CMAC ns1__HostMultipathInfoLogicalUnitPolicy : public ns1__DynamicData
{
public:
	std::string policy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2080; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfoLogicalUnitPolicy() { ns1__HostMultipathInfoLogicalUnitPolicy::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfoLogicalUnitPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy
#define SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy (2081)
/* ns1:HostMultipathInfoLogicalUnitStorageArrayTypePolicy */
class SOAP_CMAC ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy : public ns1__DynamicData
{
public:
	std::string policy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2081; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy() { ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfoLogicalUnit
#define SOAP_TYPE_ns1__HostMultipathInfoLogicalUnit (2083)
/* ns1:HostMultipathInfoLogicalUnit */
class SOAP_CMAC ns1__HostMultipathInfoLogicalUnit : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
	std::string lun;	/* required element of type xsd:string */
	std::vector<ns1__HostMultipathInfoPath * >path;	/* required element of type ns1:HostMultipathInfoPath */
	ns1__HostMultipathInfoLogicalUnitPolicy *policy;	/* required element of type ns1:HostMultipathInfoLogicalUnitPolicy */
	ns1__HostMultipathInfoLogicalUnitStorageArrayTypePolicy *storageArrayTypePolicy;	/* optional element of type ns1:HostMultipathInfoLogicalUnitStorageArrayTypePolicy */
public:
	virtual int soap_type() const { return 2083; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfoLogicalUnit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfoLogicalUnit() { ns1__HostMultipathInfoLogicalUnit::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfoLogicalUnit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfoPath
#define SOAP_TYPE_ns1__HostMultipathInfoPath (2085)
/* ns1:HostMultipathInfoPath */
class SOAP_CMAC ns1__HostMultipathInfoPath : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string pathState;	/* required element of type xsd:string */
	std::string *state;	/* optional element of type xsd:string */
	bool *isWorkingPath;	/* optional element of type xsd:boolean */
	std::string adapter;	/* required element of type xsd:string */
	std::string lun;	/* required element of type xsd:string */
	class ns1__HostTargetTransport *transport;	/* optional element of type ns1:HostTargetTransport */
public:
	virtual int soap_type() const { return 2085; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfoPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfoPath() { ns1__HostMultipathInfoPath::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfoPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfo
#define SOAP_TYPE_ns1__HostMultipathInfo (2087)
/* ns1:HostMultipathInfo */
class SOAP_CMAC ns1__HostMultipathInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostMultipathInfoLogicalUnit * >lun;	/* optional element of type ns1:HostMultipathInfoLogicalUnit */
public:
	virtual int soap_type() const { return 2087; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfo() { ns1__HostMultipathInfo::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathStateInfoPath
#define SOAP_TYPE_ns1__HostMultipathStateInfoPath (2088)
/* ns1:HostMultipathStateInfoPath */
class SOAP_CMAC ns1__HostMultipathStateInfoPath : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string pathState;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2088; } /* = unique id SOAP_TYPE_ns1__HostMultipathStateInfoPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathStateInfoPath() { ns1__HostMultipathStateInfoPath::soap_default(NULL); }
	virtual ~ns1__HostMultipathStateInfoPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathStateInfo
#define SOAP_TYPE_ns1__HostMultipathStateInfo (2090)
/* ns1:HostMultipathStateInfo */
class SOAP_CMAC ns1__HostMultipathStateInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostMultipathStateInfoPath * >path;	/* optional element of type ns1:HostMultipathStateInfoPath */
public:
	virtual int soap_type() const { return 2090; } /* = unique id SOAP_TYPE_ns1__HostMultipathStateInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathStateInfo() { ns1__HostMultipathStateInfo::soap_default(NULL); }
	virtual ~ns1__HostMultipathStateInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNatServicePortForwardSpec
#define SOAP_TYPE_ns1__HostNatServicePortForwardSpec (2091)
/* ns1:HostNatServicePortForwardSpec */
class SOAP_CMAC ns1__HostNatServicePortForwardSpec : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int hostPort;	/* required element of type xsd:int */
	int guestPort;	/* required element of type xsd:int */
	std::string guestIpAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2091; } /* = unique id SOAP_TYPE_ns1__HostNatServicePortForwardSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNatServicePortForwardSpec() { ns1__HostNatServicePortForwardSpec::soap_default(NULL); }
	virtual ~ns1__HostNatServicePortForwardSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNatServiceNameServiceSpec
#define SOAP_TYPE_ns1__HostNatServiceNameServiceSpec (2093)
/* ns1:HostNatServiceNameServiceSpec */
class SOAP_CMAC ns1__HostNatServiceNameServiceSpec : public ns1__DynamicData
{
public:
	bool dnsAutoDetect;	/* required element of type xsd:boolean */
	std::string dnsPolicy;	/* required element of type xsd:string */
	int dnsRetries;	/* required element of type xsd:int */
	int dnsTimeout;	/* required element of type xsd:int */
	std::vector<std::string >dnsNameServer;	/* optional element of type xsd:string */
	int nbdsTimeout;	/* required element of type xsd:int */
	int nbnsRetries;	/* required element of type xsd:int */
	int nbnsTimeout;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2093; } /* = unique id SOAP_TYPE_ns1__HostNatServiceNameServiceSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNatServiceNameServiceSpec() { ns1__HostNatServiceNameServiceSpec::soap_default(NULL); }
	virtual ~ns1__HostNatServiceNameServiceSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNatServiceSpec
#define SOAP_TYPE_ns1__HostNatServiceSpec (2094)
/* ns1:HostNatServiceSpec */
class SOAP_CMAC ns1__HostNatServiceSpec : public ns1__DynamicData
{
public:
	std::string virtualSwitch;	/* required element of type xsd:string */
	bool activeFtp;	/* required element of type xsd:boolean */
	bool allowAnyOui;	/* required element of type xsd:boolean */
	bool configPort;	/* required element of type xsd:boolean */
	std::string ipGatewayAddress;	/* required element of type xsd:string */
	int udpTimeout;	/* required element of type xsd:int */
	std::vector<ns1__HostNatServicePortForwardSpec * >portForward;	/* optional element of type ns1:HostNatServicePortForwardSpec */
	ns1__HostNatServiceNameServiceSpec *nameService;	/* optional element of type ns1:HostNatServiceNameServiceSpec */
public:
	virtual int soap_type() const { return 2094; } /* = unique id SOAP_TYPE_ns1__HostNatServiceSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNatServiceSpec() { ns1__HostNatServiceSpec::soap_default(NULL); }
	virtual ~ns1__HostNatServiceSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNatServiceConfig
#define SOAP_TYPE_ns1__HostNatServiceConfig (2095)
/* ns1:HostNatServiceConfig */
class SOAP_CMAC ns1__HostNatServiceConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	std::string key;	/* required element of type xsd:string */
	ns1__HostNatServiceSpec *spec;	/* required element of type ns1:HostNatServiceSpec */
public:
	virtual int soap_type() const { return 2095; } /* = unique id SOAP_TYPE_ns1__HostNatServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNatServiceConfig() { ns1__HostNatServiceConfig::soap_default(NULL); }
	virtual ~ns1__HostNatServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNatService
#define SOAP_TYPE_ns1__HostNatService (2097)
/* ns1:HostNatService */
class SOAP_CMAC ns1__HostNatService : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__HostNatServiceSpec *spec;	/* required element of type ns1:HostNatServiceSpec */
public:
	virtual int soap_type() const { return 2097; } /* = unique id SOAP_TYPE_ns1__HostNatService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNatService() { ns1__HostNatService::soap_default(NULL); }
	virtual ~ns1__HostNatService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetCapabilities
#define SOAP_TYPE_ns1__HostNetCapabilities (2099)
/* ns1:HostNetCapabilities */
class SOAP_CMAC ns1__HostNetCapabilities : public ns1__DynamicData
{
public:
	bool canSetPhysicalNicLinkSpeed;	/* required element of type xsd:boolean */
	bool supportsNicTeaming;	/* required element of type xsd:boolean */
	std::vector<std::string >nicTeamingPolicy;	/* optional element of type xsd:string */
	bool supportsVlan;	/* required element of type xsd:boolean */
	bool usesServiceConsoleNic;	/* required element of type xsd:boolean */
	bool supportsNetworkHints;	/* required element of type xsd:boolean */
	int *maxPortGroupsPerVswitch;	/* optional element of type xsd:int */
	bool vswitchConfigSupported;	/* required element of type xsd:boolean */
	bool vnicConfigSupported;	/* required element of type xsd:boolean */
	bool ipRouteConfigSupported;	/* required element of type xsd:boolean */
	bool dnsConfigSupported;	/* required element of type xsd:boolean */
	bool dhcpOnVnicSupported;	/* required element of type xsd:boolean */
	bool *ipV6Supported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2099; } /* = unique id SOAP_TYPE_ns1__HostNetCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetCapabilities() { ns1__HostNetCapabilities::soap_default(NULL); }
	virtual ~ns1__HostNetCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetOffloadCapabilities
#define SOAP_TYPE_ns1__HostNetOffloadCapabilities (2100)
/* ns1:HostNetOffloadCapabilities */
class SOAP_CMAC ns1__HostNetOffloadCapabilities : public ns1__DynamicData
{
public:
	bool *csumOffload;	/* optional element of type xsd:boolean */
	bool *tcpSegmentation;	/* optional element of type xsd:boolean */
	bool *zeroCopyXmit;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2100; } /* = unique id SOAP_TYPE_ns1__HostNetOffloadCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetOffloadCapabilities() { ns1__HostNetOffloadCapabilities::soap_default(NULL); }
	virtual ~ns1__HostNetOffloadCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkConfigResult
#define SOAP_TYPE_ns1__HostNetworkConfigResult (2101)
/* ns1:HostNetworkConfigResult */
class SOAP_CMAC ns1__HostNetworkConfigResult : public ns1__DynamicData
{
public:
	std::vector<std::string >vnicDevice;	/* optional element of type xsd:string */
	std::vector<std::string >consoleVnicDevice;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2101; } /* = unique id SOAP_TYPE_ns1__HostNetworkConfigResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkConfigResult() { ns1__HostNetworkConfigResult::soap_default(NULL); }
	virtual ~ns1__HostNetworkConfigResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkConfig
#define SOAP_TYPE_ns1__HostNetworkConfig (2102)
/* ns1:HostNetworkConfig */
class SOAP_CMAC ns1__HostNetworkConfig : public ns1__DynamicData
{
public:
	std::vector<ns1__HostVirtualSwitchConfig * >vswitch;	/* optional element of type ns1:HostVirtualSwitchConfig */
	std::vector<ns1__HostProxySwitchConfig * >proxySwitch;	/* optional element of type ns1:HostProxySwitchConfig */
	std::vector<ns1__HostPortGroupConfig * >portgroup;	/* optional element of type ns1:HostPortGroupConfig */
	std::vector<ns1__PhysicalNicConfig * >pnic;	/* optional element of type ns1:PhysicalNicConfig */
	std::vector<ns1__HostVirtualNicConfig * >vnic;	/* optional element of type ns1:HostVirtualNicConfig */
	std::vector<ns1__HostVirtualNicConfig * >consoleVnic;	/* optional element of type ns1:HostVirtualNicConfig */
	ns1__HostDnsConfig *dnsConfig;	/* optional element of type ns1:HostDnsConfig */
	ns1__HostIpRouteConfig *ipRouteConfig;	/* optional element of type ns1:HostIpRouteConfig */
	ns1__HostIpRouteConfig *consoleIpRouteConfig;	/* optional element of type ns1:HostIpRouteConfig */
	ns1__HostIpRouteTableConfig *routeTableConfig;	/* optional element of type ns1:HostIpRouteTableConfig */
	std::vector<ns1__HostDhcpServiceConfig * >dhcp;	/* optional element of type ns1:HostDhcpServiceConfig */
	std::vector<ns1__HostNatServiceConfig * >nat;	/* optional element of type ns1:HostNatServiceConfig */
	bool *ipV6Enabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2102; } /* = unique id SOAP_TYPE_ns1__HostNetworkConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkConfig() { ns1__HostNetworkConfig::soap_default(NULL); }
	virtual ~ns1__HostNetworkConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkInfo
#define SOAP_TYPE_ns1__HostNetworkInfo (2103)
/* ns1:HostNetworkInfo */
class SOAP_CMAC ns1__HostNetworkInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostVirtualSwitch * >vswitch;	/* optional element of type ns1:HostVirtualSwitch */
	std::vector<ns1__HostProxySwitch * >proxySwitch;	/* optional element of type ns1:HostProxySwitch */
	std::vector<ns1__HostPortGroup * >portgroup;	/* optional element of type ns1:HostPortGroup */
	std::vector<ns1__PhysicalNic * >pnic;	/* optional element of type ns1:PhysicalNic */
	std::vector<ns1__HostVirtualNic * >vnic;	/* optional element of type ns1:HostVirtualNic */
	std::vector<ns1__HostVirtualNic * >consoleVnic;	/* optional element of type ns1:HostVirtualNic */
	ns1__HostDnsConfig *dnsConfig;	/* optional element of type ns1:HostDnsConfig */
	ns1__HostIpRouteConfig *ipRouteConfig;	/* optional element of type ns1:HostIpRouteConfig */
	ns1__HostIpRouteConfig *consoleIpRouteConfig;	/* optional element of type ns1:HostIpRouteConfig */
	ns1__HostIpRouteTableInfo *routeTableInfo;	/* optional element of type ns1:HostIpRouteTableInfo */
	std::vector<ns1__HostDhcpService * >dhcp;	/* optional element of type ns1:HostDhcpService */
	std::vector<ns1__HostNatService * >nat;	/* optional element of type ns1:HostNatService */
	bool *ipV6Enabled;	/* optional element of type xsd:boolean */
	bool *atBootIpV6Enabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2103; } /* = unique id SOAP_TYPE_ns1__HostNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkInfo() { ns1__HostNetworkInfo::soap_default(NULL); }
	virtual ~ns1__HostNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkSecurityPolicy
#define SOAP_TYPE_ns1__HostNetworkSecurityPolicy (2104)
/* ns1:HostNetworkSecurityPolicy */
class SOAP_CMAC ns1__HostNetworkSecurityPolicy : public ns1__DynamicData
{
public:
	bool *allowPromiscuous;	/* optional element of type xsd:boolean */
	bool *macChanges;	/* optional element of type xsd:boolean */
	bool *forgedTransmits;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2104; } /* = unique id SOAP_TYPE_ns1__HostNetworkSecurityPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkSecurityPolicy() { ns1__HostNetworkSecurityPolicy::soap_default(NULL); }
	virtual ~ns1__HostNetworkSecurityPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkTrafficShapingPolicy
#define SOAP_TYPE_ns1__HostNetworkTrafficShapingPolicy (2105)
/* ns1:HostNetworkTrafficShapingPolicy */
class SOAP_CMAC ns1__HostNetworkTrafficShapingPolicy : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	LONG64 *averageBandwidth;	/* optional element of type xsd:long */
	LONG64 *peakBandwidth;	/* optional element of type xsd:long */
	LONG64 *burstSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 2105; } /* = unique id SOAP_TYPE_ns1__HostNetworkTrafficShapingPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkTrafficShapingPolicy() { ns1__HostNetworkTrafficShapingPolicy::soap_default(NULL); }
	virtual ~ns1__HostNetworkTrafficShapingPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNicFailureCriteria
#define SOAP_TYPE_ns1__HostNicFailureCriteria (2106)
/* ns1:HostNicFailureCriteria */
class SOAP_CMAC ns1__HostNicFailureCriteria : public ns1__DynamicData
{
public:
	std::string *checkSpeed;	/* optional element of type xsd:string */
	int *speed;	/* optional element of type xsd:int */
	bool *checkDuplex;	/* optional element of type xsd:boolean */
	bool *fullDuplex;	/* optional element of type xsd:boolean */
	bool *checkErrorPercent;	/* optional element of type xsd:boolean */
	int *percentage;	/* optional element of type xsd:int */
	bool *checkBeacon;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2106; } /* = unique id SOAP_TYPE_ns1__HostNicFailureCriteria */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNicFailureCriteria() { ns1__HostNicFailureCriteria::soap_default(NULL); }
	virtual ~ns1__HostNicFailureCriteria() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNicOrderPolicy
#define SOAP_TYPE_ns1__HostNicOrderPolicy (2107)
/* ns1:HostNicOrderPolicy */
class SOAP_CMAC ns1__HostNicOrderPolicy : public ns1__DynamicData
{
public:
	std::vector<std::string >activeNic;	/* optional element of type xsd:string */
	std::vector<std::string >standbyNic;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2107; } /* = unique id SOAP_TYPE_ns1__HostNicOrderPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNicOrderPolicy() { ns1__HostNicOrderPolicy::soap_default(NULL); }
	virtual ~ns1__HostNicOrderPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNicTeamingPolicy
#define SOAP_TYPE_ns1__HostNicTeamingPolicy (2108)
/* ns1:HostNicTeamingPolicy */
class SOAP_CMAC ns1__HostNicTeamingPolicy : public ns1__DynamicData
{
public:
	std::string *policy;	/* optional element of type xsd:string */
	bool *reversePolicy;	/* optional element of type xsd:boolean */
	bool *notifySwitches;	/* optional element of type xsd:boolean */
	bool *rollingOrder;	/* optional element of type xsd:boolean */
	ns1__HostNicFailureCriteria *failureCriteria;	/* optional element of type ns1:HostNicFailureCriteria */
	ns1__HostNicOrderPolicy *nicOrder;	/* optional element of type ns1:HostNicOrderPolicy */
public:
	virtual int soap_type() const { return 2108; } /* = unique id SOAP_TYPE_ns1__HostNicTeamingPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNicTeamingPolicy() { ns1__HostNicTeamingPolicy::soap_default(NULL); }
	virtual ~ns1__HostNicTeamingPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNetworkPolicy
#define SOAP_TYPE_ns1__HostNetworkPolicy (2109)
/* ns1:HostNetworkPolicy */
class SOAP_CMAC ns1__HostNetworkPolicy : public ns1__DynamicData
{
public:
	ns1__HostNetworkSecurityPolicy *security;	/* optional element of type ns1:HostNetworkSecurityPolicy */
	ns1__HostNicTeamingPolicy *nicTeaming;	/* optional element of type ns1:HostNicTeamingPolicy */
	ns1__HostNetOffloadCapabilities *offloadPolicy;	/* optional element of type ns1:HostNetOffloadCapabilities */
	ns1__HostNetworkTrafficShapingPolicy *shapingPolicy;	/* optional element of type ns1:HostNetworkTrafficShapingPolicy */
public:
	virtual int soap_type() const { return 2109; } /* = unique id SOAP_TYPE_ns1__HostNetworkPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNetworkPolicy() { ns1__HostNetworkPolicy::soap_default(NULL); }
	virtual ~ns1__HostNetworkPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNtpConfig
#define SOAP_TYPE_ns1__HostNtpConfig (2110)
/* ns1:HostNtpConfig */
class SOAP_CMAC ns1__HostNtpConfig : public ns1__DynamicData
{
public:
	std::vector<std::string >server;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2110; } /* = unique id SOAP_TYPE_ns1__HostNtpConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNtpConfig() { ns1__HostNtpConfig::soap_default(NULL); }
	virtual ~ns1__HostNtpConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNumericSensorInfo
#define SOAP_TYPE_ns1__HostNumericSensorInfo (2111)
/* ns1:HostNumericSensorInfo */
class SOAP_CMAC ns1__HostNumericSensorInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ElementDescription *healthState;	/* optional element of type ns1:ElementDescription */
	LONG64 currentReading;	/* required element of type xsd:long */
	int unitModifier;	/* required element of type xsd:int */
	std::string baseUnits;	/* required element of type xsd:string */
	std::string *rateUnits;	/* optional element of type xsd:string */
	std::string sensorType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2111; } /* = unique id SOAP_TYPE_ns1__HostNumericSensorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNumericSensorInfo() { ns1__HostNumericSensorInfo::soap_default(NULL); }
	virtual ~ns1__HostNumericSensorInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerResult
#define SOAP_TYPE_ns1__HostPatchManagerResult (2113)
/* ns1:HostPatchManagerResult */
class SOAP_CMAC ns1__HostPatchManagerResult : public ns1__DynamicData
{
public:
	std::string version;	/* required element of type xsd:string */
	std::vector<ns1__HostPatchManagerStatus * >status;	/* optional element of type ns1:HostPatchManagerStatus */
	std::string *xmlResult;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2113; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerResult() { ns1__HostPatchManagerResult::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerStatusPrerequisitePatch
#define SOAP_TYPE_ns1__HostPatchManagerStatusPrerequisitePatch (2114)
/* ns1:HostPatchManagerStatusPrerequisitePatch */
class SOAP_CMAC ns1__HostPatchManagerStatusPrerequisitePatch : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::vector<std::string >installState;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2114; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerStatusPrerequisitePatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerStatusPrerequisitePatch() { ns1__HostPatchManagerStatusPrerequisitePatch::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerStatusPrerequisitePatch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerStatus
#define SOAP_TYPE_ns1__HostPatchManagerStatus (2116)
/* ns1:HostPatchManagerStatus */
class SOAP_CMAC ns1__HostPatchManagerStatus : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	bool applicable;	/* required element of type xsd:boolean */
	std::vector<std::string >reason;	/* optional element of type xsd:string */
	std::string *integrity;	/* optional element of type xsd:string */
	bool installed;	/* required element of type xsd:boolean */
	std::vector<std::string >installState;	/* optional element of type xsd:string */
	std::vector<ns1__HostPatchManagerStatusPrerequisitePatch * >prerequisitePatch;	/* optional element of type ns1:HostPatchManagerStatusPrerequisitePatch */
	bool restartRequired;	/* required element of type xsd:boolean */
	bool reconnectRequired;	/* required element of type xsd:boolean */
	bool vmOffRequired;	/* required element of type xsd:boolean */
	std::vector<std::string >supersededPatchIds;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2116; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerStatus() { ns1__HostPatchManagerStatus::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerLocator
#define SOAP_TYPE_ns1__HostPatchManagerLocator (2118)
/* ns1:HostPatchManagerLocator */
class SOAP_CMAC ns1__HostPatchManagerLocator : public ns1__DynamicData
{
public:
	std::string url;	/* required element of type xsd:string */
	std::string *proxy;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2118; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerLocator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerLocator() { ns1__HostPatchManagerLocator::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerLocator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPatchManagerPatchManagerOperationSpec
#define SOAP_TYPE_ns1__HostPatchManagerPatchManagerOperationSpec (2119)
/* ns1:HostPatchManagerPatchManagerOperationSpec */
class SOAP_CMAC ns1__HostPatchManagerPatchManagerOperationSpec : public ns1__DynamicData
{
public:
	std::string *proxy;	/* optional element of type xsd:string */
	int *port;	/* optional element of type xsd:int */
	std::string *userName;	/* optional element of type xsd:string */
	std::string *password;	/* optional element of type xsd:string */
	std::string *cmdOption;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2119; } /* = unique id SOAP_TYPE_ns1__HostPatchManagerPatchManagerOperationSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPatchManagerPatchManagerOperationSpec() { ns1__HostPatchManagerPatchManagerOperationSpec::soap_default(NULL); }
	virtual ~ns1__HostPatchManagerPatchManagerOperationSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPathSelectionPolicyOption
#define SOAP_TYPE_ns1__HostPathSelectionPolicyOption (2120)
/* ns1:HostPathSelectionPolicyOption */
class SOAP_CMAC ns1__HostPathSelectionPolicyOption : public ns1__DynamicData
{
public:
	ns1__ElementDescription *policy;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 2120; } /* = unique id SOAP_TYPE_ns1__HostPathSelectionPolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPathSelectionPolicyOption() { ns1__HostPathSelectionPolicyOption::soap_default(NULL); }
	virtual ~ns1__HostPathSelectionPolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPciDevice
#define SOAP_TYPE_ns1__HostPciDevice (2122)
/* ns1:HostPciDevice */
class SOAP_CMAC ns1__HostPciDevice : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	short classId;	/* required element of type xsd:short */
	char bus;	/* required element of type xsd:byte */
	char slot;	/* required element of type xsd:byte */
	char function;	/* required element of type xsd:byte */
	short vendorId;	/* required element of type xsd:short */
	short subVendorId;	/* required element of type xsd:short */
	std::string vendorName;	/* required element of type xsd:string */
	short deviceId;	/* required element of type xsd:short */
	short subDeviceId;	/* required element of type xsd:short */
	std::string *parentBridge;	/* optional element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2122; } /* = unique id SOAP_TYPE_ns1__HostPciDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPciDevice() { ns1__HostPciDevice::soap_default(NULL); }
	virtual ~ns1__HostPciDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPciPassthruConfig
#define SOAP_TYPE_ns1__HostPciPassthruConfig (2124)
/* ns1:HostPciPassthruConfig */
class SOAP_CMAC ns1__HostPciPassthruConfig : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	bool passthruEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2124; } /* = unique id SOAP_TYPE_ns1__HostPciPassthruConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPciPassthruConfig() { ns1__HostPciPassthruConfig::soap_default(NULL); }
	virtual ~ns1__HostPciPassthruConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPciPassthruInfo
#define SOAP_TYPE_ns1__HostPciPassthruInfo (2126)
/* ns1:HostPciPassthruInfo */
class SOAP_CMAC ns1__HostPciPassthruInfo : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string dependentDevice;	/* required element of type xsd:string */
	bool passthruEnabled;	/* required element of type xsd:boolean */
	bool passthruCapable;	/* required element of type xsd:boolean */
	bool passthruActive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2126; } /* = unique id SOAP_TYPE_ns1__HostPciPassthruInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPciPassthruInfo() { ns1__HostPciPassthruInfo::soap_default(NULL); }
	virtual ~ns1__HostPciPassthruInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicSpec
#define SOAP_TYPE_ns1__PhysicalNicSpec (2128)
/* ns1:PhysicalNicSpec */
class SOAP_CMAC ns1__PhysicalNicSpec : public ns1__DynamicData
{
public:
	ns1__HostIpConfig *ip;	/* optional element of type ns1:HostIpConfig */
	ns1__PhysicalNicLinkInfo *linkSpeed;	/* optional element of type ns1:PhysicalNicLinkInfo */
public:
	virtual int soap_type() const { return 2128; } /* = unique id SOAP_TYPE_ns1__PhysicalNicSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicSpec() { ns1__PhysicalNicSpec::soap_default(NULL); }
	virtual ~ns1__PhysicalNicSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicConfig
#define SOAP_TYPE_ns1__PhysicalNicConfig (2129)
/* ns1:PhysicalNicConfig */
class SOAP_CMAC ns1__PhysicalNicConfig : public ns1__DynamicData
{
public:
	std::string device;	/* required element of type xsd:string */
	ns1__PhysicalNicSpec *spec;	/* required element of type ns1:PhysicalNicSpec */
public:
	virtual int soap_type() const { return 2129; } /* = unique id SOAP_TYPE_ns1__PhysicalNicConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicConfig() { ns1__PhysicalNicConfig::soap_default(NULL); }
	virtual ~ns1__PhysicalNicConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicLinkInfo
#define SOAP_TYPE_ns1__PhysicalNicLinkInfo (2131)
/* ns1:PhysicalNicLinkInfo */
class SOAP_CMAC ns1__PhysicalNicLinkInfo : public ns1__DynamicData
{
public:
	int speedMb;	/* required element of type xsd:int */
	bool duplex;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2131; } /* = unique id SOAP_TYPE_ns1__PhysicalNicLinkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicLinkInfo() { ns1__PhysicalNicLinkInfo::soap_default(NULL); }
	virtual ~ns1__PhysicalNicLinkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicHint
#define SOAP_TYPE_ns1__PhysicalNicHint (2133)
/* ns1:PhysicalNicHint */
class SOAP_CMAC ns1__PhysicalNicHint : public ns1__DynamicData
{
public:
	int *vlanId;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2133; } /* = unique id SOAP_TYPE_ns1__PhysicalNicHint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicHint() { ns1__PhysicalNicHint::soap_default(NULL); }
	virtual ~ns1__PhysicalNicHint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicHintInfo
#define SOAP_TYPE_ns1__PhysicalNicHintInfo (2138)
/* ns1:PhysicalNicHintInfo */
class SOAP_CMAC ns1__PhysicalNicHintInfo : public ns1__DynamicData
{
public:
	std::string device;	/* required element of type xsd:string */
	std::vector<ns1__PhysicalNicIpHint * >subnet;	/* optional element of type ns1:PhysicalNicIpHint */
	std::vector<ns1__PhysicalNicNameHint * >network;	/* optional element of type ns1:PhysicalNicNameHint */
	class ns1__PhysicalNicCdpInfo *connectedSwitchPort;	/* optional element of type ns1:PhysicalNicCdpInfo */
public:
	virtual int soap_type() const { return 2138; } /* = unique id SOAP_TYPE_ns1__PhysicalNicHintInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicHintInfo() { ns1__PhysicalNicHintInfo::soap_default(NULL); }
	virtual ~ns1__PhysicalNicHintInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicCdpDeviceCapability
#define SOAP_TYPE_ns1__PhysicalNicCdpDeviceCapability (2140)
/* ns1:PhysicalNicCdpDeviceCapability */
class SOAP_CMAC ns1__PhysicalNicCdpDeviceCapability : public ns1__DynamicData
{
public:
	bool router;	/* required element of type xsd:boolean */
	bool transparentBridge;	/* required element of type xsd:boolean */
	bool sourceRouteBridge;	/* required element of type xsd:boolean */
	bool networkSwitch;	/* required element of type xsd:boolean */
	bool host;	/* required element of type xsd:boolean */
	bool igmpEnabled;	/* required element of type xsd:boolean */
	bool repeater;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2140; } /* = unique id SOAP_TYPE_ns1__PhysicalNicCdpDeviceCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicCdpDeviceCapability() { ns1__PhysicalNicCdpDeviceCapability::soap_default(NULL); }
	virtual ~ns1__PhysicalNicCdpDeviceCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicCdpInfo
#define SOAP_TYPE_ns1__PhysicalNicCdpInfo (2141)
/* ns1:PhysicalNicCdpInfo */
class SOAP_CMAC ns1__PhysicalNicCdpInfo : public ns1__DynamicData
{
public:
	int *cdpVersion;	/* optional element of type xsd:int */
	int *timeout;	/* optional element of type xsd:int */
	int *ttl;	/* optional element of type xsd:int */
	int *samples;	/* optional element of type xsd:int */
	std::string *devId;	/* optional element of type xsd:string */
	std::string *address;	/* optional element of type xsd:string */
	std::string *portId;	/* optional element of type xsd:string */
	ns1__PhysicalNicCdpDeviceCapability *deviceCapability;	/* optional element of type ns1:PhysicalNicCdpDeviceCapability */
	std::string *softwareVersion;	/* optional element of type xsd:string */
	std::string *hardwarePlatform;	/* optional element of type xsd:string */
	std::string *ipPrefix;	/* optional element of type xsd:string */
	int *ipPrefixLen;	/* optional element of type xsd:int */
	int *vlan;	/* optional element of type xsd:int */
	bool *fullDuplex;	/* optional element of type xsd:boolean */
	int *mtu;	/* optional element of type xsd:int */
	std::string *systemName;	/* optional element of type xsd:string */
	std::string *systemOID;	/* optional element of type xsd:string */
	std::string *mgmtAddr;	/* optional element of type xsd:string */
	std::string *location;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2141; } /* = unique id SOAP_TYPE_ns1__PhysicalNicCdpInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicCdpInfo() { ns1__PhysicalNicCdpInfo::soap_default(NULL); }
	virtual ~ns1__PhysicalNicCdpInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNic
#define SOAP_TYPE_ns1__PhysicalNic (2142)
/* ns1:PhysicalNic */
class SOAP_CMAC ns1__PhysicalNic : public ns1__DynamicData
{
public:
	std::string *key;	/* optional element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
	std::string pci;	/* required element of type xsd:string */
	std::string *driver;	/* optional element of type xsd:string */
	ns1__PhysicalNicLinkInfo *linkSpeed;	/* optional element of type ns1:PhysicalNicLinkInfo */
	std::vector<ns1__PhysicalNicLinkInfo * >validLinkSpecification;	/* optional element of type ns1:PhysicalNicLinkInfo */
	ns1__PhysicalNicSpec *spec;	/* required element of type ns1:PhysicalNicSpec */
	bool wakeOnLanSupported;	/* required element of type xsd:boolean */
	std::string mac;	/* required element of type xsd:string */
	bool *vmDirectPathGen2Supported;	/* optional element of type xsd:boolean */
	std::string *vmDirectPathGen2SupportedMode;	/* optional element of type xsd:string */
	bool *resourcePoolSchedulerAllowed;	/* optional element of type xsd:boolean */
	std::vector<std::string >resourcePoolSchedulerDisallowedReason;	/* optional element of type xsd:string */
	bool *autoNegotiateSupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2142; } /* = unique id SOAP_TYPE_ns1__PhysicalNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNic() { ns1__PhysicalNic::soap_default(NULL); }
	virtual ~ns1__PhysicalNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopologyAdapter
#define SOAP_TYPE_ns1__HostPlugStoreTopologyAdapter (2144)
/* ns1:HostPlugStoreTopologyAdapter */
class SOAP_CMAC ns1__HostPlugStoreTopologyAdapter : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string adapter;	/* required element of type xsd:string */
	std::vector<std::string >path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2144; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopologyAdapter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopologyAdapter() { ns1__HostPlugStoreTopologyAdapter::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopologyAdapter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopologyPath
#define SOAP_TYPE_ns1__HostPlugStoreTopologyPath (2146)
/* ns1:HostPlugStoreTopologyPath */
class SOAP_CMAC ns1__HostPlugStoreTopologyPath : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	int *channelNumber;	/* optional element of type xsd:int */
	int *targetNumber;	/* optional element of type xsd:int */
	int *lunNumber;	/* optional element of type xsd:int */
	std::string *adapter;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *device;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2146; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopologyPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopologyPath() { ns1__HostPlugStoreTopologyPath::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopologyPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopologyDevice
#define SOAP_TYPE_ns1__HostPlugStoreTopologyDevice (2148)
/* ns1:HostPlugStoreTopologyDevice */
class SOAP_CMAC ns1__HostPlugStoreTopologyDevice : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string lun;	/* required element of type xsd:string */
	std::vector<std::string >path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2148; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopologyDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopologyDevice() { ns1__HostPlugStoreTopologyDevice::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopologyDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopologyPlugin
#define SOAP_TYPE_ns1__HostPlugStoreTopologyPlugin (2150)
/* ns1:HostPlugStoreTopologyPlugin */
class SOAP_CMAC ns1__HostPlugStoreTopologyPlugin : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::vector<std::string >device;	/* optional element of type xsd:string */
	std::vector<std::string >claimedPath;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2150; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopologyPlugin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopologyPlugin() { ns1__HostPlugStoreTopologyPlugin::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopologyPlugin() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopologyTarget
#define SOAP_TYPE_ns1__HostPlugStoreTopologyTarget (2152)
/* ns1:HostPlugStoreTopologyTarget */
class SOAP_CMAC ns1__HostPlugStoreTopologyTarget : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__HostTargetTransport *transport;	/* optional element of type ns1:HostTargetTransport */
public:
	virtual int soap_type() const { return 2152; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopologyTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopologyTarget() { ns1__HostPlugStoreTopologyTarget::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopologyTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPlugStoreTopology
#define SOAP_TYPE_ns1__HostPlugStoreTopology (2154)
/* ns1:HostPlugStoreTopology */
class SOAP_CMAC ns1__HostPlugStoreTopology : public ns1__DynamicData
{
public:
	std::vector<ns1__HostPlugStoreTopologyAdapter * >adapter;	/* optional element of type ns1:HostPlugStoreTopologyAdapter */
	std::vector<ns1__HostPlugStoreTopologyPath * >path;	/* optional element of type ns1:HostPlugStoreTopologyPath */
	std::vector<ns1__HostPlugStoreTopologyTarget * >target;	/* optional element of type ns1:HostPlugStoreTopologyTarget */
	std::vector<ns1__HostPlugStoreTopologyDevice * >device;	/* optional element of type ns1:HostPlugStoreTopologyDevice */
	std::vector<ns1__HostPlugStoreTopologyPlugin * >plugin;	/* optional element of type ns1:HostPlugStoreTopologyPlugin */
public:
	virtual int soap_type() const { return 2154; } /* = unique id SOAP_TYPE_ns1__HostPlugStoreTopology */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPlugStoreTopology() { ns1__HostPlugStoreTopology::soap_default(NULL); }
	virtual ~ns1__HostPlugStoreTopology() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPortGroupSpec
#define SOAP_TYPE_ns1__HostPortGroupSpec (2155)
/* ns1:HostPortGroupSpec */
class SOAP_CMAC ns1__HostPortGroupSpec : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	int vlanId;	/* required element of type xsd:int */
	std::string vswitchName;	/* required element of type xsd:string */
	ns1__HostNetworkPolicy *policy;	/* required element of type ns1:HostNetworkPolicy */
public:
	virtual int soap_type() const { return 2155; } /* = unique id SOAP_TYPE_ns1__HostPortGroupSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPortGroupSpec() { ns1__HostPortGroupSpec::soap_default(NULL); }
	virtual ~ns1__HostPortGroupSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPortGroupConfig
#define SOAP_TYPE_ns1__HostPortGroupConfig (2156)
/* ns1:HostPortGroupConfig */
class SOAP_CMAC ns1__HostPortGroupConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	ns1__HostPortGroupSpec *spec;	/* optional element of type ns1:HostPortGroupSpec */
public:
	virtual int soap_type() const { return 2156; } /* = unique id SOAP_TYPE_ns1__HostPortGroupConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPortGroupConfig() { ns1__HostPortGroupConfig::soap_default(NULL); }
	virtual ~ns1__HostPortGroupConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPortGroupPort
#define SOAP_TYPE_ns1__HostPortGroupPort (2158)
/* ns1:HostPortGroupPort */
class SOAP_CMAC ns1__HostPortGroupPort : public ns1__DynamicData
{
public:
	std::string *key;	/* optional element of type xsd:string */
	std::vector<std::string >mac;	/* optional element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2158; } /* = unique id SOAP_TYPE_ns1__HostPortGroupPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPortGroupPort() { ns1__HostPortGroupPort::soap_default(NULL); }
	virtual ~ns1__HostPortGroupPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPortGroup
#define SOAP_TYPE_ns1__HostPortGroup (2160)
/* ns1:HostPortGroup */
class SOAP_CMAC ns1__HostPortGroup : public ns1__DynamicData
{
public:
	std::string *key;	/* optional element of type xsd:string */
	std::vector<ns1__HostPortGroupPort * >port;	/* optional element of type ns1:HostPortGroupPort */
	std::string *vswitch;	/* optional element of type xsd:string */
	ns1__HostNetworkPolicy *computedPolicy;	/* required element of type ns1:HostNetworkPolicy */
	ns1__HostPortGroupSpec *spec;	/* required element of type ns1:HostPortGroupSpec */
public:
	virtual int soap_type() const { return 2160; } /* = unique id SOAP_TYPE_ns1__HostPortGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPortGroup() { ns1__HostPortGroup::soap_default(NULL); }
	virtual ~ns1__HostPortGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPowerPolicy
#define SOAP_TYPE_ns1__HostPowerPolicy (2162)
/* ns1:HostPowerPolicy */
class SOAP_CMAC ns1__HostPowerPolicy : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string shortName;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2162; } /* = unique id SOAP_TYPE_ns1__HostPowerPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPowerPolicy() { ns1__HostPowerPolicy::soap_default(NULL); }
	virtual ~ns1__HostPowerPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerSystemCapability
#define SOAP_TYPE_ns1__PowerSystemCapability (2164)
/* ns1:PowerSystemCapability */
class SOAP_CMAC ns1__PowerSystemCapability : public ns1__DynamicData
{
public:
	std::vector<ns1__HostPowerPolicy * >availablePolicy;	/* required element of type ns1:HostPowerPolicy */
public:
	virtual int soap_type() const { return 2164; } /* = unique id SOAP_TYPE_ns1__PowerSystemCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerSystemCapability() { ns1__PowerSystemCapability::soap_default(NULL); }
	virtual ~ns1__PowerSystemCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerSystemInfo
#define SOAP_TYPE_ns1__PowerSystemInfo (2165)
/* ns1:PowerSystemInfo */
class SOAP_CMAC ns1__PowerSystemInfo : public ns1__DynamicData
{
public:
	ns1__HostPowerPolicy *currentPolicy;	/* required element of type ns1:HostPowerPolicy */
public:
	virtual int soap_type() const { return 2165; } /* = unique id SOAP_TYPE_ns1__PowerSystemInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerSystemInfo() { ns1__PowerSystemInfo::soap_default(NULL); }
	virtual ~ns1__PowerSystemInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostResignatureRescanResult
#define SOAP_TYPE_ns1__HostResignatureRescanResult (2166)
/* ns1:HostResignatureRescanResult */
class SOAP_CMAC ns1__HostResignatureRescanResult : public ns1__DynamicData
{
public:
	std::vector<ns1__HostVmfsRescanResult * >rescan;	/* optional element of type ns1:HostVmfsRescanResult */
	ns1__ManagedObjectReference *result;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2166; } /* = unique id SOAP_TYPE_ns1__HostResignatureRescanResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostResignatureRescanResult() { ns1__HostResignatureRescanResult::soap_default(NULL); }
	virtual ~ns1__HostResignatureRescanResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRule
#define SOAP_TYPE_ns1__HostFirewallRule (2167)
/* ns1:HostFirewallRule */
class SOAP_CMAC ns1__HostFirewallRule : public ns1__DynamicData
{
public:
	int port;	/* required element of type xsd:int */
	int *endPort;	/* optional element of type xsd:int */
	enum ns1__HostFirewallRuleDirection direction;	/* required element of type ns1:HostFirewallRuleDirection */
	std::string protocol;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2167; } /* = unique id SOAP_TYPE_ns1__HostFirewallRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallRule() { ns1__HostFirewallRule::soap_default(NULL); }
	virtual ~ns1__HostFirewallRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFirewallRuleset
#define SOAP_TYPE_ns1__HostFirewallRuleset (2169)
/* ns1:HostFirewallRuleset */
class SOAP_CMAC ns1__HostFirewallRuleset : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string label;	/* required element of type xsd:string */
	bool required;	/* required element of type xsd:boolean */
	std::vector<ns1__HostFirewallRule * >rule;	/* required element of type ns1:HostFirewallRule */
	std::string *service;	/* optional element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2169; } /* = unique id SOAP_TYPE_ns1__HostFirewallRuleset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFirewallRuleset() { ns1__HostFirewallRuleset::soap_default(NULL); }
	virtual ~ns1__HostFirewallRuleset() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostRuntimeInfo
#define SOAP_TYPE_ns1__HostRuntimeInfo (2171)
/* ns1:HostRuntimeInfo */
class SOAP_CMAC ns1__HostRuntimeInfo : public ns1__DynamicData
{
public:
	enum ns1__HostSystemConnectionState connectionState;	/* required element of type ns1:HostSystemConnectionState */
	enum ns1__HostSystemPowerState powerState;	/* required element of type ns1:HostSystemPowerState */
	std::string *standbyMode;	/* optional element of type xsd:string */
	bool inMaintenanceMode;	/* required element of type xsd:boolean */
	time_t *bootTime;	/* optional element of type xsd:dateTime */
	ns1__HealthSystemRuntime *healthSystemRuntime;	/* optional element of type ns1:HealthSystemRuntime */
	std::vector<ns1__HostTpmDigestInfo * >tpmPcrValues;	/* optional element of type ns1:HostTpmDigestInfo */
public:
	virtual int soap_type() const { return 2171; } /* = unique id SOAP_TYPE_ns1__HostRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostRuntimeInfo() { ns1__HostRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__HostRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiDiskPartition
#define SOAP_TYPE_ns1__HostScsiDiskPartition (2172)
/* ns1:HostScsiDiskPartition */
class SOAP_CMAC ns1__HostScsiDiskPartition : public ns1__DynamicData
{
public:
	std::string diskName;	/* required element of type xsd:string */
	int partition;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2172; } /* = unique id SOAP_TYPE_ns1__HostScsiDiskPartition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiDiskPartition() { ns1__HostScsiDiskPartition::soap_default(NULL); }
	virtual ~ns1__HostScsiDiskPartition() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunCapabilities
#define SOAP_TYPE_ns1__ScsiLunCapabilities (2176)
/* ns1:ScsiLunCapabilities */
class SOAP_CMAC ns1__ScsiLunCapabilities : public ns1__DynamicData
{
public:
	bool updateDisplayNameSupported;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2176; } /* = unique id SOAP_TYPE_ns1__ScsiLunCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunCapabilities() { ns1__ScsiLunCapabilities::soap_default(NULL); }
	virtual ~ns1__ScsiLunCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunDurableName
#define SOAP_TYPE_ns1__ScsiLunDurableName (2177)
/* ns1:ScsiLunDurableName */
class SOAP_CMAC ns1__ScsiLunDurableName : public ns1__DynamicData
{
public:
	std::string namespace_;	/* required element of type xsd:string */
	char namespaceId;	/* required element of type xsd:byte */
	std::vector<char >data;	/* optional element of type xsd:byte */
public:
	virtual int soap_type() const { return 2177; } /* = unique id SOAP_TYPE_ns1__ScsiLunDurableName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunDurableName() { ns1__ScsiLunDurableName::soap_default(NULL); }
	virtual ~ns1__ScsiLunDurableName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLunDescriptor
#define SOAP_TYPE_ns1__ScsiLunDescriptor (2179)
/* ns1:ScsiLunDescriptor */
class SOAP_CMAC ns1__ScsiLunDescriptor : public ns1__DynamicData
{
public:
	std::string quality;	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2179; } /* = unique id SOAP_TYPE_ns1__ScsiLunDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLunDescriptor() { ns1__ScsiLunDescriptor::soap_default(NULL); }
	virtual ~ns1__ScsiLunDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiTopologyInterface
#define SOAP_TYPE_ns1__HostScsiTopologyInterface (2183)
/* ns1:HostScsiTopologyInterface */
class SOAP_CMAC ns1__HostScsiTopologyInterface : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string adapter;	/* required element of type xsd:string */
	std::vector<ns1__HostScsiTopologyTarget * >target;	/* optional element of type ns1:HostScsiTopologyTarget */
public:
	virtual int soap_type() const { return 2183; } /* = unique id SOAP_TYPE_ns1__HostScsiTopologyInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiTopologyInterface() { ns1__HostScsiTopologyInterface::soap_default(NULL); }
	virtual ~ns1__HostScsiTopologyInterface() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiTopologyTarget
#define SOAP_TYPE_ns1__HostScsiTopologyTarget (2185)
/* ns1:HostScsiTopologyTarget */
class SOAP_CMAC ns1__HostScsiTopologyTarget : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	int target;	/* required element of type xsd:int */
	std::vector<ns1__HostScsiTopologyLun * >lun;	/* optional element of type ns1:HostScsiTopologyLun */
	ns1__HostTargetTransport *transport;	/* optional element of type ns1:HostTargetTransport */
public:
	virtual int soap_type() const { return 2185; } /* = unique id SOAP_TYPE_ns1__HostScsiTopologyTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiTopologyTarget() { ns1__HostScsiTopologyTarget::soap_default(NULL); }
	virtual ~ns1__HostScsiTopologyTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiTopologyLun
#define SOAP_TYPE_ns1__HostScsiTopologyLun (2187)
/* ns1:HostScsiTopologyLun */
class SOAP_CMAC ns1__HostScsiTopologyLun : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	int lun;	/* required element of type xsd:int */
	std::string scsiLun;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2187; } /* = unique id SOAP_TYPE_ns1__HostScsiTopologyLun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiTopologyLun() { ns1__HostScsiTopologyLun::soap_default(NULL); }
	virtual ~ns1__HostScsiTopologyLun() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiTopology
#define SOAP_TYPE_ns1__HostScsiTopology (2189)
/* ns1:HostScsiTopology */
class SOAP_CMAC ns1__HostScsiTopology : public ns1__DynamicData
{
public:
	std::vector<ns1__HostScsiTopologyInterface * >adapter;	/* optional element of type ns1:HostScsiTopologyInterface */
public:
	virtual int soap_type() const { return 2189; } /* = unique id SOAP_TYPE_ns1__HostScsiTopology */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiTopology() { ns1__HostScsiTopology::soap_default(NULL); }
	virtual ~ns1__HostScsiTopology() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSecuritySpec
#define SOAP_TYPE_ns1__HostSecuritySpec (2190)
/* ns1:HostSecuritySpec */
class SOAP_CMAC ns1__HostSecuritySpec : public ns1__DynamicData
{
public:
	std::string *adminPassword;	/* optional element of type xsd:string */
	std::vector<ns1__Permission * >removePermission;	/* optional element of type ns1:Permission */
	std::vector<ns1__Permission * >addPermission;	/* optional element of type ns1:Permission */
public:
	virtual int soap_type() const { return 2190; } /* = unique id SOAP_TYPE_ns1__HostSecuritySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSecuritySpec() { ns1__HostSecuritySpec::soap_default(NULL); }
	virtual ~ns1__HostSecuritySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostService
#define SOAP_TYPE_ns1__HostService (2191)
/* ns1:HostService */
class SOAP_CMAC ns1__HostService : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string label;	/* required element of type xsd:string */
	bool required;	/* required element of type xsd:boolean */
	bool uninstallable;	/* required element of type xsd:boolean */
	bool running;	/* required element of type xsd:boolean */
	std::vector<std::string >ruleset;	/* optional element of type xsd:string */
	std::string policy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2191; } /* = unique id SOAP_TYPE_ns1__HostService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostService() { ns1__HostService::soap_default(NULL); }
	virtual ~ns1__HostService() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostServiceConfig
#define SOAP_TYPE_ns1__HostServiceConfig (2193)
/* ns1:HostServiceConfig */
class SOAP_CMAC ns1__HostServiceConfig : public ns1__DynamicData
{
public:
	std::string serviceId;	/* required element of type xsd:string */
	std::string startupPolicy;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2193; } /* = unique id SOAP_TYPE_ns1__HostServiceConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostServiceConfig() { ns1__HostServiceConfig::soap_default(NULL); }
	virtual ~ns1__HostServiceConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostServiceInfo
#define SOAP_TYPE_ns1__HostServiceInfo (2195)
/* ns1:HostServiceInfo */
class SOAP_CMAC ns1__HostServiceInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostService * >service;	/* optional element of type ns1:HostService */
public:
	virtual int soap_type() const { return 2195; } /* = unique id SOAP_TYPE_ns1__HostServiceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostServiceInfo() { ns1__HostServiceInfo::soap_default(NULL); }
	virtual ~ns1__HostServiceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSnmpDestination
#define SOAP_TYPE_ns1__HostSnmpDestination (2196)
/* ns1:HostSnmpDestination */
class SOAP_CMAC ns1__HostSnmpDestination : public ns1__DynamicData
{
public:
	std::string hostName;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
	std::string community;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2196; } /* = unique id SOAP_TYPE_ns1__HostSnmpDestination */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSnmpDestination() { ns1__HostSnmpDestination::soap_default(NULL); }
	virtual ~ns1__HostSnmpDestination() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSnmpConfigSpec
#define SOAP_TYPE_ns1__HostSnmpConfigSpec (2198)
/* ns1:HostSnmpConfigSpec */
class SOAP_CMAC ns1__HostSnmpConfigSpec : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	int *port;	/* optional element of type xsd:int */
	std::vector<std::string >readOnlyCommunities;	/* optional element of type xsd:string */
	std::vector<ns1__HostSnmpDestination * >trapTargets;	/* optional element of type ns1:HostSnmpDestination */
public:
	virtual int soap_type() const { return 2198; } /* = unique id SOAP_TYPE_ns1__HostSnmpConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSnmpConfigSpec() { ns1__HostSnmpConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostSnmpConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSnmpSystemAgentLimits
#define SOAP_TYPE_ns1__HostSnmpSystemAgentLimits (2199)
/* ns1:HostSnmpSystemAgentLimits */
class SOAP_CMAC ns1__HostSnmpSystemAgentLimits : public ns1__DynamicData
{
public:
	int maxReadOnlyCommunities;	/* required element of type xsd:int */
	int maxTrapDestinations;	/* required element of type xsd:int */
	int maxCommunityLength;	/* required element of type xsd:int */
	int maxBufferSize;	/* required element of type xsd:int */
	enum ns1__HostSnmpAgentCapability *capability;	/* optional element of type ns1:HostSnmpAgentCapability */
public:
	virtual int soap_type() const { return 2199; } /* = unique id SOAP_TYPE_ns1__HostSnmpSystemAgentLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSnmpSystemAgentLimits() { ns1__HostSnmpSystemAgentLimits::soap_default(NULL); }
	virtual ~ns1__HostSnmpSystemAgentLimits() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSslThumbprintInfo
#define SOAP_TYPE_ns1__HostSslThumbprintInfo (2200)
/* ns1:HostSslThumbprintInfo */
class SOAP_CMAC ns1__HostSslThumbprintInfo : public ns1__DynamicData
{
public:
	std::string principal;	/* required element of type xsd:string */
	std::vector<std::string >sslThumbprints;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2200; } /* = unique id SOAP_TYPE_ns1__HostSslThumbprintInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSslThumbprintInfo() { ns1__HostSslThumbprintInfo::soap_default(NULL); }
	virtual ~ns1__HostSslThumbprintInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStorageArrayTypePolicyOption
#define SOAP_TYPE_ns1__HostStorageArrayTypePolicyOption (2201)
/* ns1:HostStorageArrayTypePolicyOption */
class SOAP_CMAC ns1__HostStorageArrayTypePolicyOption : public ns1__DynamicData
{
public:
	ns1__ElementDescription *policy;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 2201; } /* = unique id SOAP_TYPE_ns1__HostStorageArrayTypePolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStorageArrayTypePolicyOption() { ns1__HostStorageArrayTypePolicyOption::soap_default(NULL); }
	virtual ~ns1__HostStorageArrayTypePolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStorageDeviceInfo
#define SOAP_TYPE_ns1__HostStorageDeviceInfo (2203)
/* ns1:HostStorageDeviceInfo */
class SOAP_CMAC ns1__HostStorageDeviceInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostHostBusAdapter * >hostBusAdapter;	/* optional element of type ns1:HostHostBusAdapter */
	std::vector<ns1__ScsiLun * >scsiLun;	/* optional element of type ns1:ScsiLun */
	ns1__HostScsiTopology *scsiTopology;	/* optional element of type ns1:HostScsiTopology */
	ns1__HostMultipathInfo *multipathInfo;	/* optional element of type ns1:HostMultipathInfo */
	ns1__HostPlugStoreTopology *plugStoreTopology;	/* optional element of type ns1:HostPlugStoreTopology */
	bool softwareInternetScsiEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2203; } /* = unique id SOAP_TYPE_ns1__HostStorageDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStorageDeviceInfo() { ns1__HostStorageDeviceInfo::soap_default(NULL); }
	virtual ~ns1__HostStorageDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostHardwareSummary
#define SOAP_TYPE_ns1__HostHardwareSummary (2204)
/* ns1:HostHardwareSummary */
class SOAP_CMAC ns1__HostHardwareSummary : public ns1__DynamicData
{
public:
	std::string vendor;	/* required element of type xsd:string */
	std::string model;	/* required element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	std::vector<ns1__HostSystemIdentificationInfo * >otherIdentifyingInfo;	/* optional element of type ns1:HostSystemIdentificationInfo */
	LONG64 memorySize;	/* required element of type xsd:long */
	std::string cpuModel;	/* required element of type xsd:string */
	int cpuMhz;	/* required element of type xsd:int */
	short numCpuPkgs;	/* required element of type xsd:short */
	short numCpuCores;	/* required element of type xsd:short */
	short numCpuThreads;	/* required element of type xsd:short */
	int numNics;	/* required element of type xsd:int */
	int numHBAs;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2204; } /* = unique id SOAP_TYPE_ns1__HostHardwareSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostHardwareSummary() { ns1__HostHardwareSummary::soap_default(NULL); }
	virtual ~ns1__HostHardwareSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostListSummaryQuickStats
#define SOAP_TYPE_ns1__HostListSummaryQuickStats (2205)
/* ns1:HostListSummaryQuickStats */
class SOAP_CMAC ns1__HostListSummaryQuickStats : public ns1__DynamicData
{
public:
	int *overallCpuUsage;	/* optional element of type xsd:int */
	int *overallMemoryUsage;	/* optional element of type xsd:int */
	int *distributedCpuFairness;	/* optional element of type xsd:int */
	int *distributedMemoryFairness;	/* optional element of type xsd:int */
	int *uptime;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2205; } /* = unique id SOAP_TYPE_ns1__HostListSummaryQuickStats */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostListSummaryQuickStats() { ns1__HostListSummaryQuickStats::soap_default(NULL); }
	virtual ~ns1__HostListSummaryQuickStats() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigSummary
#define SOAP_TYPE_ns1__HostConfigSummary (2206)
/* ns1:HostConfigSummary */
class SOAP_CMAC ns1__HostConfigSummary : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
	std::string *sslThumbprint;	/* optional element of type xsd:string */
	ns1__AboutInfo *product;	/* optional element of type ns1:AboutInfo */
	bool vmotionEnabled;	/* required element of type xsd:boolean */
	bool *faultToleranceEnabled;	/* optional element of type xsd:boolean */
	std::vector<ns1__HostFeatureVersionInfo * >featureVersion;	/* optional element of type ns1:HostFeatureVersionInfo */
public:
	virtual int soap_type() const { return 2206; } /* = unique id SOAP_TYPE_ns1__HostConfigSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigSummary() { ns1__HostConfigSummary::soap_default(NULL); }
	virtual ~ns1__HostConfigSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostListSummary
#define SOAP_TYPE_ns1__HostListSummary (2207)
/* ns1:HostListSummary */
class SOAP_CMAC ns1__HostListSummary : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__HostHardwareSummary *hardware;	/* optional element of type ns1:HostHardwareSummary */
	ns1__HostRuntimeInfo *runtime;	/* optional element of type ns1:HostRuntimeInfo */
	ns1__HostConfigSummary *config;	/* required element of type ns1:HostConfigSummary */
	ns1__HostListSummaryQuickStats *quickStats;	/* required element of type ns1:HostListSummaryQuickStats */
	enum ns1__ManagedEntityStatus overallStatus;	/* required element of type ns1:ManagedEntityStatus */
	bool rebootRequired;	/* required element of type xsd:boolean */
	std::vector<ns1__CustomFieldValue * >customValue;	/* optional element of type ns1:CustomFieldValue */
	std::string *managementServerIp;	/* optional element of type xsd:string */
	std::string *maxEVCModeKey;	/* optional element of type xsd:string */
	std::string *currentEVCModeKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2207; } /* = unique id SOAP_TYPE_ns1__HostListSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostListSummary() { ns1__HostListSummary::soap_default(NULL); }
	virtual ~ns1__HostListSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemHealthInfo
#define SOAP_TYPE_ns1__HostSystemHealthInfo (2208)
/* ns1:HostSystemHealthInfo */
class SOAP_CMAC ns1__HostSystemHealthInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__HostNumericSensorInfo * >numericSensorInfo;	/* optional element of type ns1:HostNumericSensorInfo */
public:
	virtual int soap_type() const { return 2208; } /* = unique id SOAP_TYPE_ns1__HostSystemHealthInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemHealthInfo() { ns1__HostSystemHealthInfo::soap_default(NULL); }
	virtual ~ns1__HostSystemHealthInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemIdentificationInfo
#define SOAP_TYPE_ns1__HostSystemIdentificationInfo (2209)
/* ns1:HostSystemIdentificationInfo */
class SOAP_CMAC ns1__HostSystemIdentificationInfo : public ns1__DynamicData
{
public:
	std::string identifierValue;	/* required element of type xsd:string */
	ns1__ElementDescription *identifierType;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 2209; } /* = unique id SOAP_TYPE_ns1__HostSystemIdentificationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemIdentificationInfo() { ns1__HostSystemIdentificationInfo::soap_default(NULL); }
	virtual ~ns1__HostSystemIdentificationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSystemResourceInfo
#define SOAP_TYPE_ns1__HostSystemResourceInfo (2211)
/* ns1:HostSystemResourceInfo */
class SOAP_CMAC ns1__HostSystemResourceInfo : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__ResourceConfigSpec *config;	/* optional element of type ns1:ResourceConfigSpec */
	std::vector<ns1__HostSystemResourceInfo * >child;	/* optional element of type ns1:HostSystemResourceInfo */
public:
	virtual int soap_type() const { return 2211; } /* = unique id SOAP_TYPE_ns1__HostSystemResourceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSystemResourceInfo() { ns1__HostSystemResourceInfo::soap_default(NULL); }
	virtual ~ns1__HostSystemResourceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostTargetTransport
#define SOAP_TYPE_ns1__HostTargetTransport (2213)
/* ns1:HostTargetTransport */
class SOAP_CMAC ns1__HostTargetTransport : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2213; } /* = unique id SOAP_TYPE_ns1__HostTargetTransport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostTargetTransport() { ns1__HostTargetTransport::soap_default(NULL); }
	virtual ~ns1__HostTargetTransport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDigestInfo
#define SOAP_TYPE_ns1__HostDigestInfo (2218)
/* ns1:HostDigestInfo */
class SOAP_CMAC ns1__HostDigestInfo : public ns1__DynamicData
{
public:
	std::string digestMethod;	/* required element of type xsd:string */
	std::vector<char >digestValue;	/* required element of type xsd:byte */
	std::string *objectName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2218; } /* = unique id SOAP_TYPE_ns1__HostDigestInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDigestInfo() { ns1__HostDigestInfo::soap_default(NULL); }
	virtual ~ns1__HostDigestInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsExtent
#define SOAP_TYPE_ns1__HostUnresolvedVmfsExtent (2221)
/* ns1:HostUnresolvedVmfsExtent */
class SOAP_CMAC ns1__HostUnresolvedVmfsExtent : public ns1__DynamicData
{
public:
	ns1__HostScsiDiskPartition *device;	/* required element of type ns1:HostScsiDiskPartition */
	std::string devicePath;	/* required element of type xsd:string */
	std::string vmfsUuid;	/* required element of type xsd:string */
	bool isHeadExtent;	/* required element of type xsd:boolean */
	int ordinal;	/* required element of type xsd:int */
	int startBlock;	/* required element of type xsd:int */
	int endBlock;	/* required element of type xsd:int */
	std::string reason;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2221; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsExtent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsExtent() { ns1__HostUnresolvedVmfsExtent::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsExtent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsResignatureSpec
#define SOAP_TYPE_ns1__HostUnresolvedVmfsResignatureSpec (2223)
/* ns1:HostUnresolvedVmfsResignatureSpec */
class SOAP_CMAC ns1__HostUnresolvedVmfsResignatureSpec : public ns1__DynamicData
{
public:
	std::vector<std::string >extentDevicePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2223; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsResignatureSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsResignatureSpec() { ns1__HostUnresolvedVmfsResignatureSpec::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsResignatureSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionResult
#define SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionResult (2224)
/* ns1:HostUnresolvedVmfsResolutionResult */
class SOAP_CMAC ns1__HostUnresolvedVmfsResolutionResult : public ns1__DynamicData
{
public:
	ns1__HostUnresolvedVmfsResolutionSpec *spec;	/* required element of type ns1:HostUnresolvedVmfsResolutionSpec */
	ns1__HostVmfsVolume *vmfs;	/* optional element of type ns1:HostVmfsVolume */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 2224; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsResolutionResult() { ns1__HostUnresolvedVmfsResolutionResult::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsResolutionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpec
#define SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpec (2226)
/* ns1:HostUnresolvedVmfsResolutionSpec */
class SOAP_CMAC ns1__HostUnresolvedVmfsResolutionSpec : public ns1__DynamicData
{
public:
	std::vector<std::string >extentDevicePath;	/* required element of type xsd:string */
	std::string uuidResolution;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2226; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsResolutionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsResolutionSpec() { ns1__HostUnresolvedVmfsResolutionSpec::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsResolutionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsVolumeResolveStatus
#define SOAP_TYPE_ns1__HostUnresolvedVmfsVolumeResolveStatus (2228)
/* ns1:HostUnresolvedVmfsVolumeResolveStatus */
class SOAP_CMAC ns1__HostUnresolvedVmfsVolumeResolveStatus : public ns1__DynamicData
{
public:
	bool resolvable;	/* required element of type xsd:boolean */
	bool *incompleteExtents;	/* optional element of type xsd:boolean */
	bool *multipleCopies;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2228; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsVolumeResolveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsVolumeResolveStatus() { ns1__HostUnresolvedVmfsVolumeResolveStatus::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsVolumeResolveStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUnresolvedVmfsVolume
#define SOAP_TYPE_ns1__HostUnresolvedVmfsVolume (2229)
/* ns1:HostUnresolvedVmfsVolume */
class SOAP_CMAC ns1__HostUnresolvedVmfsVolume : public ns1__DynamicData
{
public:
	std::vector<ns1__HostUnresolvedVmfsExtent * >extent;	/* required element of type ns1:HostUnresolvedVmfsExtent */
	std::string vmfsLabel;	/* required element of type xsd:string */
	std::string vmfsUuid;	/* required element of type xsd:string */
	int totalBlocks;	/* required element of type xsd:int */
	ns1__HostUnresolvedVmfsVolumeResolveStatus *resolveStatus;	/* required element of type ns1:HostUnresolvedVmfsVolumeResolveStatus */
public:
	virtual int soap_type() const { return 2229; } /* = unique id SOAP_TYPE_ns1__HostUnresolvedVmfsVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUnresolvedVmfsVolume() { ns1__HostUnresolvedVmfsVolume::soap_default(NULL); }
	virtual ~ns1__HostUnresolvedVmfsVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVMotionConfig
#define SOAP_TYPE_ns1__HostVMotionConfig (2231)
/* ns1:HostVMotionConfig */
class SOAP_CMAC ns1__HostVMotionConfig : public ns1__DynamicData
{
public:
	std::string *vmotionNicKey;	/* optional element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2231; } /* = unique id SOAP_TYPE_ns1__HostVMotionConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVMotionConfig() { ns1__HostVMotionConfig::soap_default(NULL); }
	virtual ~ns1__HostVMotionConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVMotionInfo
#define SOAP_TYPE_ns1__HostVMotionInfo (2232)
/* ns1:HostVMotionInfo */
class SOAP_CMAC ns1__HostVMotionInfo : public ns1__DynamicData
{
public:
	class ns1__HostVMotionNetConfig *netConfig;	/* optional element of type ns1:HostVMotionNetConfig */
	ns1__HostIpConfig *ipConfig;	/* optional element of type ns1:HostIpConfig */
public:
	virtual int soap_type() const { return 2232; } /* = unique id SOAP_TYPE_ns1__HostVMotionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVMotionInfo() { ns1__HostVMotionInfo::soap_default(NULL); }
	virtual ~ns1__HostVMotionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVMotionNetConfig
#define SOAP_TYPE_ns1__HostVMotionNetConfig (2233)
/* ns1:HostVMotionNetConfig */
class SOAP_CMAC ns1__HostVMotionNetConfig : public ns1__DynamicData
{
public:
	std::vector<ns1__HostVirtualNic * >candidateVnic;	/* optional element of type ns1:HostVirtualNic */
	std::string *selectedVnic;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2233; } /* = unique id SOAP_TYPE_ns1__HostVMotionNetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVMotionNetConfig() { ns1__HostVMotionNetConfig::soap_default(NULL); }
	virtual ~ns1__HostVMotionNetConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicSpec
#define SOAP_TYPE_ns1__HostVirtualNicSpec (2234)
/* ns1:HostVirtualNicSpec */
class SOAP_CMAC ns1__HostVirtualNicSpec : public ns1__DynamicData
{
public:
	ns1__HostIpConfig *ip;	/* optional element of type ns1:HostIpConfig */
	std::string *mac;	/* optional element of type xsd:string */
	ns1__DistributedVirtualSwitchPortConnection *distributedVirtualPort;	/* optional element of type ns1:DistributedVirtualSwitchPortConnection */
	std::string *portgroup;	/* optional element of type xsd:string */
	int *mtu;	/* optional element of type xsd:int */
	bool *tsoEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2234; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicSpec() { ns1__HostVirtualNicSpec::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicConfig
#define SOAP_TYPE_ns1__HostVirtualNicConfig (2235)
/* ns1:HostVirtualNicConfig */
class SOAP_CMAC ns1__HostVirtualNicConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	std::string *device;	/* optional element of type xsd:string */
	std::string portgroup;	/* required element of type xsd:string */
	ns1__HostVirtualNicSpec *spec;	/* optional element of type ns1:HostVirtualNicSpec */
public:
	virtual int soap_type() const { return 2235; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicConfig() { ns1__HostVirtualNicConfig::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNic
#define SOAP_TYPE_ns1__HostVirtualNic (2237)
/* ns1:HostVirtualNic */
class SOAP_CMAC ns1__HostVirtualNic : public ns1__DynamicData
{
public:
	std::string device;	/* required element of type xsd:string */
	std::string key;	/* required element of type xsd:string */
	std::string portgroup;	/* required element of type xsd:string */
	ns1__HostVirtualNicSpec *spec;	/* required element of type ns1:HostVirtualNicSpec */
	std::string *port;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2237; } /* = unique id SOAP_TYPE_ns1__HostVirtualNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNic() { ns1__HostVirtualNic::soap_default(NULL); }
	virtual ~ns1__HostVirtualNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicConnection
#define SOAP_TYPE_ns1__HostVirtualNicConnection (2239)
/* ns1:HostVirtualNicConnection */
class SOAP_CMAC ns1__HostVirtualNicConnection : public ns1__DynamicData
{
public:
	std::string *portgroup;	/* optional element of type xsd:string */
	ns1__DistributedVirtualSwitchPortConnection *dvPort;	/* optional element of type ns1:DistributedVirtualSwitchPortConnection */
public:
	virtual int soap_type() const { return 2239; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicConnection() { ns1__HostVirtualNicConnection::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicConnection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicManagerNicTypeSelection
#define SOAP_TYPE_ns1__HostVirtualNicManagerNicTypeSelection (2240)
/* ns1:HostVirtualNicManagerNicTypeSelection */
class SOAP_CMAC ns1__HostVirtualNicManagerNicTypeSelection : public ns1__DynamicData
{
public:
	ns1__HostVirtualNicConnection *vnic;	/* required element of type ns1:HostVirtualNicConnection */
	std::vector<std::string >nicType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2240; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicManagerNicTypeSelection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicManagerNicTypeSelection() { ns1__HostVirtualNicManagerNicTypeSelection::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicManagerNicTypeSelection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualNicManagerNetConfig
#define SOAP_TYPE_ns1__VirtualNicManagerNetConfig (2242)
/* ns1:VirtualNicManagerNetConfig */
class SOAP_CMAC ns1__VirtualNicManagerNetConfig : public ns1__DynamicData
{
public:
	std::string nicType;	/* required element of type xsd:string */
	bool multiSelectAllowed;	/* required element of type xsd:boolean */
	std::vector<ns1__HostVirtualNic * >candidateVnic;	/* optional element of type ns1:HostVirtualNic */
	std::vector<std::string >selectedVnic;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2242; } /* = unique id SOAP_TYPE_ns1__VirtualNicManagerNetConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualNicManagerNetConfig() { ns1__VirtualNicManagerNetConfig::soap_default(NULL); }
	virtual ~ns1__VirtualNicManagerNetConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualNicManagerInfo
#define SOAP_TYPE_ns1__HostVirtualNicManagerInfo (2244)
/* ns1:HostVirtualNicManagerInfo */
class SOAP_CMAC ns1__HostVirtualNicManagerInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__VirtualNicManagerNetConfig * >netConfig;	/* optional element of type ns1:VirtualNicManagerNetConfig */
public:
	virtual int soap_type() const { return 2244; } /* = unique id SOAP_TYPE_ns1__HostVirtualNicManagerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualNicManagerInfo() { ns1__HostVirtualNicManagerInfo::soap_default(NULL); }
	virtual ~ns1__HostVirtualNicManagerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchBridge
#define SOAP_TYPE_ns1__HostVirtualSwitchBridge (2245)
/* ns1:HostVirtualSwitchBridge */
class SOAP_CMAC ns1__HostVirtualSwitchBridge : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2245; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchBridge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchBridge() { ns1__HostVirtualSwitchBridge::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchBridge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchBeaconConfig
#define SOAP_TYPE_ns1__HostVirtualSwitchBeaconConfig (2249)
/* ns1:HostVirtualSwitchBeaconConfig */
class SOAP_CMAC ns1__HostVirtualSwitchBeaconConfig : public ns1__DynamicData
{
public:
	int interval;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2249; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchBeaconConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchBeaconConfig() { ns1__HostVirtualSwitchBeaconConfig::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchBeaconConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchSpec
#define SOAP_TYPE_ns1__HostVirtualSwitchSpec (2250)
/* ns1:HostVirtualSwitchSpec */
class SOAP_CMAC ns1__HostVirtualSwitchSpec : public ns1__DynamicData
{
public:
	int numPorts;	/* required element of type xsd:int */
	ns1__HostVirtualSwitchBridge *bridge;	/* optional element of type ns1:HostVirtualSwitchBridge */
	ns1__HostNetworkPolicy *policy;	/* optional element of type ns1:HostNetworkPolicy */
	int *mtu;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2250; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchSpec() { ns1__HostVirtualSwitchSpec::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchConfig
#define SOAP_TYPE_ns1__HostVirtualSwitchConfig (2251)
/* ns1:HostVirtualSwitchConfig */
class SOAP_CMAC ns1__HostVirtualSwitchConfig : public ns1__DynamicData
{
public:
	std::string *changeOperation;	/* optional element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	ns1__HostVirtualSwitchSpec *spec;	/* optional element of type ns1:HostVirtualSwitchSpec */
public:
	virtual int soap_type() const { return 2251; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchConfig() { ns1__HostVirtualSwitchConfig::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitch
#define SOAP_TYPE_ns1__HostVirtualSwitch (2253)
/* ns1:HostVirtualSwitch */
class SOAP_CMAC ns1__HostVirtualSwitch : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string key;	/* required element of type xsd:string */
	int numPorts;	/* required element of type xsd:int */
	int numPortsAvailable;	/* required element of type xsd:int */
	int *mtu;	/* optional element of type xsd:int */
	std::vector<std::string >portgroup;	/* optional element of type xsd:string */
	std::vector<std::string >pnic;	/* optional element of type xsd:string */
	ns1__HostVirtualSwitchSpec *spec;	/* required element of type ns1:HostVirtualSwitchSpec */
public:
	virtual int soap_type() const { return 2253; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitch() { ns1__HostVirtualSwitch::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVmfsRescanResult
#define SOAP_TYPE_ns1__HostVmfsRescanResult (2255)
/* ns1:HostVmfsRescanResult */
class SOAP_CMAC ns1__HostVmfsRescanResult : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 2255; } /* = unique id SOAP_TYPE_ns1__HostVmfsRescanResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVmfsRescanResult() { ns1__HostVmfsRescanResult::soap_default(NULL); }
	virtual ~ns1__HostVmfsRescanResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVmfsSpec
#define SOAP_TYPE_ns1__HostVmfsSpec (2257)
/* ns1:HostVmfsSpec */
class SOAP_CMAC ns1__HostVmfsSpec : public ns1__DynamicData
{
public:
	ns1__HostScsiDiskPartition *extent;	/* required element of type ns1:HostScsiDiskPartition */
	int *blockSizeMb;	/* optional element of type xsd:int */
	int majorVersion;	/* required element of type xsd:int */
	std::string volumeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2257; } /* = unique id SOAP_TYPE_ns1__HostVmfsSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVmfsSpec() { ns1__HostVmfsSpec::soap_default(NULL); }
	virtual ~ns1__HostVmfsSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDhcpConfigInfoDhcpOptions
#define SOAP_TYPE_ns1__NetDhcpConfigInfoDhcpOptions (2259)
/* ns1:NetDhcpConfigInfoDhcpOptions */
class SOAP_CMAC ns1__NetDhcpConfigInfoDhcpOptions : public ns1__DynamicData
{
public:
	bool enable;	/* required element of type xsd:boolean */
	std::vector<ns1__KeyValue * >config;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 2259; } /* = unique id SOAP_TYPE_ns1__NetDhcpConfigInfoDhcpOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDhcpConfigInfoDhcpOptions() { ns1__NetDhcpConfigInfoDhcpOptions::soap_default(NULL); }
	virtual ~ns1__NetDhcpConfigInfoDhcpOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDhcpConfigInfo
#define SOAP_TYPE_ns1__NetDhcpConfigInfo (2260)
/* ns1:NetDhcpConfigInfo */
class SOAP_CMAC ns1__NetDhcpConfigInfo : public ns1__DynamicData
{
public:
	ns1__NetDhcpConfigInfoDhcpOptions *ipv6;	/* optional element of type ns1:NetDhcpConfigInfoDhcpOptions */
	ns1__NetDhcpConfigInfoDhcpOptions *ipv4;	/* optional element of type ns1:NetDhcpConfigInfoDhcpOptions */
public:
	virtual int soap_type() const { return 2260; } /* = unique id SOAP_TYPE_ns1__NetDhcpConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDhcpConfigInfo() { ns1__NetDhcpConfigInfo::soap_default(NULL); }
	virtual ~ns1__NetDhcpConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDhcpConfigSpecDhcpOptionsSpec
#define SOAP_TYPE_ns1__NetDhcpConfigSpecDhcpOptionsSpec (2261)
/* ns1:NetDhcpConfigSpecDhcpOptionsSpec */
class SOAP_CMAC ns1__NetDhcpConfigSpecDhcpOptionsSpec : public ns1__DynamicData
{
public:
	bool *enable;	/* optional element of type xsd:boolean */
	std::vector<ns1__KeyValue * >config;	/* required element of type ns1:KeyValue */
	std::string operation;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2261; } /* = unique id SOAP_TYPE_ns1__NetDhcpConfigSpecDhcpOptionsSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDhcpConfigSpecDhcpOptionsSpec() { ns1__NetDhcpConfigSpecDhcpOptionsSpec::soap_default(NULL); }
	virtual ~ns1__NetDhcpConfigSpecDhcpOptionsSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDhcpConfigSpec
#define SOAP_TYPE_ns1__NetDhcpConfigSpec (2262)
/* ns1:NetDhcpConfigSpec */
class SOAP_CMAC ns1__NetDhcpConfigSpec : public ns1__DynamicData
{
public:
	ns1__NetDhcpConfigSpecDhcpOptionsSpec *ipv6;	/* optional element of type ns1:NetDhcpConfigSpecDhcpOptionsSpec */
	ns1__NetDhcpConfigSpecDhcpOptionsSpec *ipv4;	/* optional element of type ns1:NetDhcpConfigSpecDhcpOptionsSpec */
public:
	virtual int soap_type() const { return 2262; } /* = unique id SOAP_TYPE_ns1__NetDhcpConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDhcpConfigSpec() { ns1__NetDhcpConfigSpec::soap_default(NULL); }
	virtual ~ns1__NetDhcpConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDnsConfigInfo
#define SOAP_TYPE_ns1__NetDnsConfigInfo (2263)
/* ns1:NetDnsConfigInfo */
class SOAP_CMAC ns1__NetDnsConfigInfo : public ns1__DynamicData
{
public:
	bool dhcp;	/* required element of type xsd:boolean */
	std::string hostName;	/* required element of type xsd:string */
	std::string domainName;	/* required element of type xsd:string */
	std::vector<std::string >ipAddress;	/* optional element of type xsd:string */
	std::vector<std::string >searchDomain;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2263; } /* = unique id SOAP_TYPE_ns1__NetDnsConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDnsConfigInfo() { ns1__NetDnsConfigInfo::soap_default(NULL); }
	virtual ~ns1__NetDnsConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetDnsConfigSpec
#define SOAP_TYPE_ns1__NetDnsConfigSpec (2264)
/* ns1:NetDnsConfigSpec */
class SOAP_CMAC ns1__NetDnsConfigSpec : public ns1__DynamicData
{
public:
	bool *dhcp;	/* optional element of type xsd:boolean */
	std::string *hostName;	/* optional element of type xsd:string */
	std::string *domainName;	/* optional element of type xsd:string */
	std::vector<std::string >ipAddress;	/* optional element of type xsd:string */
	std::vector<std::string >searchDomain;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2264; } /* = unique id SOAP_TYPE_ns1__NetDnsConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetDnsConfigSpec() { ns1__NetDnsConfigSpec::soap_default(NULL); }
	virtual ~ns1__NetDnsConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfoIpAddress
#define SOAP_TYPE_ns1__NetIpConfigInfoIpAddress (2265)
/* ns1:NetIpConfigInfoIpAddress */
class SOAP_CMAC ns1__NetIpConfigInfoIpAddress : public ns1__DynamicData
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	std::string *origin;	/* optional element of type xsd:string */
	std::string *state;	/* optional element of type xsd:string */
	time_t *lifetime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2265; } /* = unique id SOAP_TYPE_ns1__NetIpConfigInfoIpAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigInfoIpAddress() { ns1__NetIpConfigInfoIpAddress::soap_default(NULL); }
	virtual ~ns1__NetIpConfigInfoIpAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigInfo
#define SOAP_TYPE_ns1__NetIpConfigInfo (2267)
/* ns1:NetIpConfigInfo */
class SOAP_CMAC ns1__NetIpConfigInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__NetIpConfigInfoIpAddress * >ipAddress;	/* optional element of type ns1:NetIpConfigInfoIpAddress */
	ns1__NetDhcpConfigInfo *dhcp;	/* optional element of type ns1:NetDhcpConfigInfo */
	bool *autoConfigurationEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2267; } /* = unique id SOAP_TYPE_ns1__NetIpConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigInfo() { ns1__NetIpConfigInfo::soap_default(NULL); }
	virtual ~ns1__NetIpConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigSpecIpAddressSpec
#define SOAP_TYPE_ns1__NetIpConfigSpecIpAddressSpec (2268)
/* ns1:NetIpConfigSpecIpAddressSpec */
class SOAP_CMAC ns1__NetIpConfigSpecIpAddressSpec : public ns1__DynamicData
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	std::string operation;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2268; } /* = unique id SOAP_TYPE_ns1__NetIpConfigSpecIpAddressSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigSpecIpAddressSpec() { ns1__NetIpConfigSpecIpAddressSpec::soap_default(NULL); }
	virtual ~ns1__NetIpConfigSpecIpAddressSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpConfigSpec
#define SOAP_TYPE_ns1__NetIpConfigSpec (2270)
/* ns1:NetIpConfigSpec */
class SOAP_CMAC ns1__NetIpConfigSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__NetIpConfigSpecIpAddressSpec * >ipAddress;	/* optional element of type ns1:NetIpConfigSpecIpAddressSpec */
	ns1__NetDhcpConfigSpec *dhcp;	/* optional element of type ns1:NetDhcpConfigSpec */
	bool *autoConfigurationEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2270; } /* = unique id SOAP_TYPE_ns1__NetIpConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpConfigSpec() { ns1__NetIpConfigSpec::soap_default(NULL); }
	virtual ~ns1__NetIpConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigInfoGateway
#define SOAP_TYPE_ns1__NetIpRouteConfigInfoGateway (2271)
/* ns1:NetIpRouteConfigInfoGateway */
class SOAP_CMAC ns1__NetIpRouteConfigInfoGateway : public ns1__DynamicData
{
public:
	std::string *ipAddress;	/* optional element of type xsd:string */
	std::string *device;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2271; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigInfoGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigInfoGateway() { ns1__NetIpRouteConfigInfoGateway::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigInfoGateway() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigInfoIpRoute
#define SOAP_TYPE_ns1__NetIpRouteConfigInfoIpRoute (2272)
/* ns1:NetIpRouteConfigInfoIpRoute */
class SOAP_CMAC ns1__NetIpRouteConfigInfoIpRoute : public ns1__DynamicData
{
public:
	std::string network;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	ns1__NetIpRouteConfigInfoGateway *gateway;	/* required element of type ns1:NetIpRouteConfigInfoGateway */
public:
	virtual int soap_type() const { return 2272; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigInfoIpRoute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigInfoIpRoute() { ns1__NetIpRouteConfigInfoIpRoute::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigInfoIpRoute() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigInfo
#define SOAP_TYPE_ns1__NetIpRouteConfigInfo (2274)
/* ns1:NetIpRouteConfigInfo */
class SOAP_CMAC ns1__NetIpRouteConfigInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__NetIpRouteConfigInfoIpRoute * >ipRoute;	/* optional element of type ns1:NetIpRouteConfigInfoIpRoute */
public:
	virtual int soap_type() const { return 2274; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigInfo() { ns1__NetIpRouteConfigInfo::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigSpecGatewaySpec
#define SOAP_TYPE_ns1__NetIpRouteConfigSpecGatewaySpec (2275)
/* ns1:NetIpRouteConfigSpecGatewaySpec */
class SOAP_CMAC ns1__NetIpRouteConfigSpecGatewaySpec : public ns1__DynamicData
{
public:
	std::string *ipAddress;	/* optional element of type xsd:string */
	std::string *device;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2275; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigSpecGatewaySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigSpecGatewaySpec() { ns1__NetIpRouteConfigSpecGatewaySpec::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigSpecGatewaySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigSpecIpRouteSpec
#define SOAP_TYPE_ns1__NetIpRouteConfigSpecIpRouteSpec (2276)
/* ns1:NetIpRouteConfigSpecIpRouteSpec */
class SOAP_CMAC ns1__NetIpRouteConfigSpecIpRouteSpec : public ns1__DynamicData
{
public:
	std::string network;	/* required element of type xsd:string */
	int prefixLength;	/* required element of type xsd:int */
	ns1__NetIpRouteConfigSpecGatewaySpec *gateway;	/* required element of type ns1:NetIpRouteConfigSpecGatewaySpec */
	std::string operation;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2276; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigSpecIpRouteSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigSpecIpRouteSpec() { ns1__NetIpRouteConfigSpecIpRouteSpec::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigSpecIpRouteSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpRouteConfigSpec
#define SOAP_TYPE_ns1__NetIpRouteConfigSpec (2278)
/* ns1:NetIpRouteConfigSpec */
class SOAP_CMAC ns1__NetIpRouteConfigSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__NetIpRouteConfigSpecIpRouteSpec * >ipRoute;	/* optional element of type ns1:NetIpRouteConfigSpecIpRouteSpec */
public:
	virtual int soap_type() const { return 2278; } /* = unique id SOAP_TYPE_ns1__NetIpRouteConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpRouteConfigSpec() { ns1__NetIpRouteConfigSpec::soap_default(NULL); }
	virtual ~ns1__NetIpRouteConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoNetToMedia
#define SOAP_TYPE_ns1__NetIpStackInfoNetToMedia (2279)
/* ns1:NetIpStackInfoNetToMedia */
class SOAP_CMAC ns1__NetIpStackInfoNetToMedia : public ns1__DynamicData
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	std::string physicalAddress;	/* required element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2279; } /* = unique id SOAP_TYPE_ns1__NetIpStackInfoNetToMedia */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpStackInfoNetToMedia() { ns1__NetIpStackInfoNetToMedia::soap_default(NULL); }
	virtual ~ns1__NetIpStackInfoNetToMedia() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfoDefaultRouter
#define SOAP_TYPE_ns1__NetIpStackInfoDefaultRouter (2281)
/* ns1:NetIpStackInfoDefaultRouter */
class SOAP_CMAC ns1__NetIpStackInfoDefaultRouter : public ns1__DynamicData
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	std::string device;	/* required element of type xsd:string */
	time_t lifetime;	/* required element of type xsd:dateTime */
	std::string preference;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2281; } /* = unique id SOAP_TYPE_ns1__NetIpStackInfoDefaultRouter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpStackInfoDefaultRouter() { ns1__NetIpStackInfoDefaultRouter::soap_default(NULL); }
	virtual ~ns1__NetIpStackInfoDefaultRouter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetIpStackInfo
#define SOAP_TYPE_ns1__NetIpStackInfo (2283)
/* ns1:NetIpStackInfo */
class SOAP_CMAC ns1__NetIpStackInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__NetIpStackInfoNetToMedia * >neighbor;	/* optional element of type ns1:NetIpStackInfoNetToMedia */
	std::vector<ns1__NetIpStackInfoDefaultRouter * >defaultRouter;	/* optional element of type ns1:NetIpStackInfoDefaultRouter */
public:
	virtual int soap_type() const { return 2283; } /* = unique id SOAP_TYPE_ns1__NetIpStackInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetIpStackInfo() { ns1__NetIpStackInfo::soap_default(NULL); }
	virtual ~ns1__NetIpStackInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetBIOSConfigInfo
#define SOAP_TYPE_ns1__NetBIOSConfigInfo (2284)
/* ns1:NetBIOSConfigInfo */
class SOAP_CMAC ns1__NetBIOSConfigInfo : public ns1__DynamicData
{
public:
	std::string mode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2284; } /* = unique id SOAP_TYPE_ns1__NetBIOSConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetBIOSConfigInfo() { ns1__NetBIOSConfigInfo::soap_default(NULL); }
	virtual ~ns1__NetBIOSConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayUpdateSpec
#define SOAP_TYPE_ns1__ArrayUpdateSpec (2286)
/* ns1:ArrayUpdateSpec */
class SOAP_CMAC ns1__ArrayUpdateSpec : public ns1__DynamicData
{
public:
	enum ns1__ArrayUpdateOperation operation;	/* required element of type ns1:ArrayUpdateOperation */
	xsd__anyType *removeKey;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 2286; } /* = unique id SOAP_TYPE_ns1__ArrayUpdateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayUpdateSpec() { ns1__ArrayUpdateSpec::soap_default(NULL); }
	virtual ~ns1__ArrayUpdateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OptionType
#define SOAP_TYPE_ns1__OptionType (2294)
/* ns1:OptionType */
class SOAP_CMAC ns1__OptionType : public ns1__DynamicData
{
public:
	bool *valueIsReadonly;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2294; } /* = unique id SOAP_TYPE_ns1__OptionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OptionType() { ns1__OptionType::soap_default(NULL); }
	virtual ~ns1__OptionType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OptionValue
#define SOAP_TYPE_ns1__OptionValue (2295)
/* ns1:OptionValue */
class SOAP_CMAC ns1__OptionValue : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	xsd__anyType *value;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 2295; } /* = unique id SOAP_TYPE_ns1__OptionValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OptionValue() { ns1__OptionValue::soap_default(NULL); }
	virtual ~ns1__OptionValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ApplyProfile
#define SOAP_TYPE_ns1__ApplyProfile (2298)
/* ns1:ApplyProfile */
class SOAP_CMAC ns1__ApplyProfile : public ns1__DynamicData
{
public:
	bool enabled;	/* required element of type xsd:boolean */
	std::vector<ns1__ProfilePolicy * >policy;	/* optional element of type ns1:ProfilePolicy */
public:
	virtual int soap_type() const { return 2298; } /* = unique id SOAP_TYPE_ns1__ApplyProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ApplyProfile() { ns1__ApplyProfile::soap_default(NULL); }
	virtual ~ns1__ApplyProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceLocator
#define SOAP_TYPE_ns1__ComplianceLocator (2299)
/* ns1:ComplianceLocator */
class SOAP_CMAC ns1__ComplianceLocator : public ns1__DynamicData
{
public:
	std::string expressionName;	/* required element of type xsd:string */
	ns1__ProfilePropertyPath *applyPath;	/* required element of type ns1:ProfilePropertyPath */
public:
	virtual int soap_type() const { return 2299; } /* = unique id SOAP_TYPE_ns1__ComplianceLocator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplianceLocator() { ns1__ComplianceLocator::soap_default(NULL); }
	virtual ~ns1__ComplianceLocator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceProfile
#define SOAP_TYPE_ns1__ComplianceProfile (2301)
/* ns1:ComplianceProfile */
class SOAP_CMAC ns1__ComplianceProfile : public ns1__DynamicData
{
public:
	std::vector<ns1__ProfileExpression * >expression;	/* required element of type ns1:ProfileExpression */
	std::string rootExpression;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2301; } /* = unique id SOAP_TYPE_ns1__ComplianceProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplianceProfile() { ns1__ComplianceProfile::soap_default(NULL); }
	virtual ~ns1__ComplianceProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceFailure
#define SOAP_TYPE_ns1__ComplianceFailure (2302)
/* ns1:ComplianceFailure */
class SOAP_CMAC ns1__ComplianceFailure : public ns1__DynamicData
{
public:
	std::string failureType;	/* required element of type xsd:string */
	ns1__LocalizableMessage *message;	/* required element of type ns1:LocalizableMessage */
	std::string *expressionName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2302; } /* = unique id SOAP_TYPE_ns1__ComplianceFailure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplianceFailure() { ns1__ComplianceFailure::soap_default(NULL); }
	virtual ~ns1__ComplianceFailure() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComplianceResult
#define SOAP_TYPE_ns1__ComplianceResult (2304)
/* ns1:ComplianceResult */
class SOAP_CMAC ns1__ComplianceResult : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *profile;	/* optional element of type ns1:ManagedObjectReference */
	std::string complianceStatus;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
	time_t *checkTime;	/* optional element of type xsd:dateTime */
	std::vector<ns1__ComplianceFailure * >failure;	/* optional element of type ns1:ComplianceFailure */
public:
	virtual int soap_type() const { return 2304; } /* = unique id SOAP_TYPE_ns1__ComplianceResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplianceResult() { ns1__ComplianceResult::soap_default(NULL); }
	virtual ~ns1__ComplianceResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileDeferredPolicyOptionParameter
#define SOAP_TYPE_ns1__ProfileDeferredPolicyOptionParameter (2306)
/* ns1:ProfileDeferredPolicyOptionParameter */
class SOAP_CMAC ns1__ProfileDeferredPolicyOptionParameter : public ns1__DynamicData
{
public:
	ns1__ProfilePropertyPath *inputPath;	/* required element of type ns1:ProfilePropertyPath */
	std::vector<ns1__KeyAnyValue * >parameter;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 2306; } /* = unique id SOAP_TYPE_ns1__ProfileDeferredPolicyOptionParameter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileDeferredPolicyOptionParameter() { ns1__ProfileDeferredPolicyOptionParameter::soap_default(NULL); }
	virtual ~ns1__ProfileDeferredPolicyOptionParameter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExpression
#define SOAP_TYPE_ns1__ProfileExpression (2308)
/* ns1:ProfileExpression */
class SOAP_CMAC ns1__ProfileExpression : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string displayName;	/* required element of type xsd:string */
	bool negated;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2308; } /* = unique id SOAP_TYPE_ns1__ProfileExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileExpression() { ns1__ProfileExpression::soap_default(NULL); }
	virtual ~ns1__ProfileExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExpressionMetadata
#define SOAP_TYPE_ns1__ProfileExpressionMetadata (2312)
/* ns1:ProfileExpressionMetadata */
class SOAP_CMAC ns1__ProfileExpressionMetadata : public ns1__DynamicData
{
public:
	class ns1__ExtendedElementDescription *expressionId;	/* required element of type ns1:ExtendedElementDescription */
	std::vector<ns1__ProfileParameterMetadata * >parameter;	/* optional element of type ns1:ProfileParameterMetadata */
public:
	virtual int soap_type() const { return 2312; } /* = unique id SOAP_TYPE_ns1__ProfileExpressionMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileExpressionMetadata() { ns1__ProfileExpressionMetadata::soap_default(NULL); }
	virtual ~ns1__ProfileExpressionMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileParameterMetadata
#define SOAP_TYPE_ns1__ProfileParameterMetadata (2314)
/* ns1:ProfileParameterMetadata */
class SOAP_CMAC ns1__ProfileParameterMetadata : public ns1__DynamicData
{
public:
	ns1__ExtendedElementDescription *id;	/* required element of type ns1:ExtendedElementDescription */
	std::string type;	/* required element of type xsd:string */
	bool optional;	/* required element of type xsd:boolean */
	xsd__anyType *defaultValue;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 2314; } /* = unique id SOAP_TYPE_ns1__ProfileParameterMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileParameterMetadata() { ns1__ProfileParameterMetadata::soap_default(NULL); }
	virtual ~ns1__ProfileParameterMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfilePolicy
#define SOAP_TYPE_ns1__ProfilePolicy (2316)
/* ns1:ProfilePolicy */
class SOAP_CMAC ns1__ProfilePolicy : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	ns1__PolicyOption *policyOption;	/* required element of type ns1:PolicyOption */
public:
	virtual int soap_type() const { return 2316; } /* = unique id SOAP_TYPE_ns1__ProfilePolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfilePolicy() { ns1__ProfilePolicy::soap_default(NULL); }
	virtual ~ns1__ProfilePolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfilePolicyOptionMetadata
#define SOAP_TYPE_ns1__ProfilePolicyOptionMetadata (2318)
/* ns1:ProfilePolicyOptionMetadata */
class SOAP_CMAC ns1__ProfilePolicyOptionMetadata : public ns1__DynamicData
{
public:
	ns1__ExtendedElementDescription *id;	/* required element of type ns1:ExtendedElementDescription */
	std::vector<ns1__ProfileParameterMetadata * >parameter;	/* optional element of type ns1:ProfileParameterMetadata */
public:
	virtual int soap_type() const { return 2318; } /* = unique id SOAP_TYPE_ns1__ProfilePolicyOptionMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfilePolicyOptionMetadata() { ns1__ProfilePolicyOptionMetadata::soap_default(NULL); }
	virtual ~ns1__ProfilePolicyOptionMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfilePolicyMetadata
#define SOAP_TYPE_ns1__ProfilePolicyMetadata (2322)
/* ns1:ProfilePolicyMetadata */
class SOAP_CMAC ns1__ProfilePolicyMetadata : public ns1__DynamicData
{
public:
	ns1__ExtendedElementDescription *id;	/* required element of type ns1:ExtendedElementDescription */
	std::vector<ns1__ProfilePolicyOptionMetadata * >possibleOption;	/* required element of type ns1:ProfilePolicyOptionMetadata */
public:
	virtual int soap_type() const { return 2322; } /* = unique id SOAP_TYPE_ns1__ProfilePolicyMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfilePolicyMetadata() { ns1__ProfilePolicyMetadata::soap_default(NULL); }
	virtual ~ns1__ProfilePolicyMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PolicyOption
#define SOAP_TYPE_ns1__PolicyOption (2324)
/* ns1:PolicyOption */
class SOAP_CMAC ns1__PolicyOption : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >parameter;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 2324; } /* = unique id SOAP_TYPE_ns1__PolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PolicyOption() { ns1__PolicyOption::soap_default(NULL); }
	virtual ~ns1__PolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileCreateSpec
#define SOAP_TYPE_ns1__ProfileCreateSpec (2327)
/* ns1:ProfileCreateSpec */
class SOAP_CMAC ns1__ProfileCreateSpec : public ns1__DynamicData
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::string *annotation;	/* optional element of type xsd:string */
	bool *enabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2327; } /* = unique id SOAP_TYPE_ns1__ProfileCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileCreateSpec() { ns1__ProfileCreateSpec::soap_default(NULL); }
	virtual ~ns1__ProfileCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileConfigInfo
#define SOAP_TYPE_ns1__ProfileConfigInfo (2329)
/* ns1:ProfileConfigInfo */
class SOAP_CMAC ns1__ProfileConfigInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string *annotation;	/* optional element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2329; } /* = unique id SOAP_TYPE_ns1__ProfileConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileConfigInfo() { ns1__ProfileConfigInfo::soap_default(NULL); }
	virtual ~ns1__ProfileConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileDescriptionSection
#define SOAP_TYPE_ns1__ProfileDescriptionSection (2330)
/* ns1:ProfileDescriptionSection */
class SOAP_CMAC ns1__ProfileDescriptionSection : public ns1__DynamicData
{
public:
	ns1__ExtendedElementDescription *description;	/* required element of type ns1:ExtendedElementDescription */
	std::vector<ns1__LocalizableMessage * >message;	/* optional element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 2330; } /* = unique id SOAP_TYPE_ns1__ProfileDescriptionSection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileDescriptionSection() { ns1__ProfileDescriptionSection::soap_default(NULL); }
	virtual ~ns1__ProfileDescriptionSection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileDescription
#define SOAP_TYPE_ns1__ProfileDescription (2332)
/* ns1:ProfileDescription */
class SOAP_CMAC ns1__ProfileDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__ProfileDescriptionSection * >section;	/* required element of type ns1:ProfileDescriptionSection */
public:
	virtual int soap_type() const { return 2332; } /* = unique id SOAP_TYPE_ns1__ProfileDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileDescription() { ns1__ProfileDescription::soap_default(NULL); }
	virtual ~ns1__ProfileDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileMetadata
#define SOAP_TYPE_ns1__ProfileMetadata (2333)
/* ns1:ProfileMetadata */
class SOAP_CMAC ns1__ProfileMetadata : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	class ns1__ExtendedDescription *description;	/* optional element of type ns1:ExtendedDescription */
public:
	virtual int soap_type() const { return 2333; } /* = unique id SOAP_TYPE_ns1__ProfileMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileMetadata() { ns1__ProfileMetadata::soap_default(NULL); }
	virtual ~ns1__ProfileMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfilePropertyPath
#define SOAP_TYPE_ns1__ProfilePropertyPath (2335)
/* ns1:ProfilePropertyPath */
class SOAP_CMAC ns1__ProfilePropertyPath : public ns1__DynamicData
{
public:
	std::string profilePath;	/* required element of type xsd:string */
	std::string *policyId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2335; } /* = unique id SOAP_TYPE_ns1__ProfilePropertyPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfilePropertyPath() { ns1__ProfilePropertyPath::soap_default(NULL); }
	virtual ~ns1__ProfilePropertyPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExecuteError
#define SOAP_TYPE_ns1__ProfileExecuteError (2341)
/* ns1:ProfileExecuteError */
class SOAP_CMAC ns1__ProfileExecuteError : public ns1__DynamicData
{
public:
	ns1__ProfilePropertyPath *path;	/* optional element of type ns1:ProfilePropertyPath */
	ns1__LocalizableMessage *message;	/* required element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 2341; } /* = unique id SOAP_TYPE_ns1__ProfileExecuteError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileExecuteError() { ns1__ProfileExecuteError::soap_default(NULL); }
	virtual ~ns1__ProfileExecuteError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileExecuteResult
#define SOAP_TYPE_ns1__ProfileExecuteResult (2343)
/* ns1:ProfileExecuteResult */
class SOAP_CMAC ns1__ProfileExecuteResult : public ns1__DynamicData
{
public:
	std::string status;	/* required element of type xsd:string */
	ns1__HostConfigSpec *configSpec;	/* optional element of type ns1:HostConfigSpec */
	std::vector<std::string >inapplicablePath;	/* optional element of type xsd:string */
	std::vector<ns1__ProfileDeferredPolicyOptionParameter * >requireInput;	/* optional element of type ns1:ProfileDeferredPolicyOptionParameter */
	std::vector<ns1__ProfileExecuteError * >error;	/* optional element of type ns1:ProfileExecuteError */
public:
	virtual int soap_type() const { return 2343; } /* = unique id SOAP_TYPE_ns1__ProfileExecuteResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileExecuteResult() { ns1__ProfileExecuteResult::soap_default(NULL); }
	virtual ~ns1__ProfileExecuteResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileManagerConfigTaskList
#define SOAP_TYPE_ns1__HostProfileManagerConfigTaskList (2401)
/* ns1:HostProfileManagerConfigTaskList */
class SOAP_CMAC ns1__HostProfileManagerConfigTaskList : public ns1__DynamicData
{
public:
	ns1__HostConfigSpec *configSpec;	/* optional element of type ns1:HostConfigSpec */
	std::vector<ns1__LocalizableMessage * >taskDescription;	/* optional element of type ns1:LocalizableMessage */
public:
	virtual int soap_type() const { return 2401; } /* = unique id SOAP_TYPE_ns1__HostProfileManagerConfigTaskList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileManagerConfigTaskList() { ns1__HostProfileManagerConfigTaskList::soap_default(NULL); }
	virtual ~ns1__HostProfileManagerConfigTaskList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskDescription
#define SOAP_TYPE_ns1__ScheduledTaskDescription (2404)
/* ns1:ScheduledTaskDescription */
class SOAP_CMAC ns1__ScheduledTaskDescription : public ns1__DynamicData
{
public:
	std::vector<ns1__TypeDescription * >action;	/* required element of type ns1:TypeDescription */
	std::vector<ns1__ScheduledTaskDetail * >schedulerInfo;	/* required element of type ns1:ScheduledTaskDetail */
	std::vector<ns1__ElementDescription * >state;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >dayOfWeek;	/* required element of type ns1:ElementDescription */
	std::vector<ns1__ElementDescription * >weekOfMonth;	/* required element of type ns1:ElementDescription */
public:
	virtual int soap_type() const { return 2404; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskDescription() { ns1__ScheduledTaskDescription::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskScheduler
#define SOAP_TYPE_ns1__TaskScheduler (2406)
/* ns1:TaskScheduler */
class SOAP_CMAC ns1__TaskScheduler : public ns1__DynamicData
{
public:
	time_t *activeTime;	/* optional element of type xsd:dateTime */
	time_t *expireTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2406; } /* = unique id SOAP_TYPE_ns1__TaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskScheduler() { ns1__TaskScheduler::soap_default(NULL); }
	virtual ~ns1__TaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskSpec
#define SOAP_TYPE_ns1__ScheduledTaskSpec (2416)
/* ns1:ScheduledTaskSpec */
class SOAP_CMAC ns1__ScheduledTaskSpec : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	bool enabled;	/* required element of type xsd:boolean */
	ns1__TaskScheduler *scheduler;	/* required element of type ns1:TaskScheduler */
	ns1__Action *action;	/* required element of type ns1:Action */
	std::string *notification;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2416; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskSpec() { ns1__ScheduledTaskSpec::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppCloneSpecNetworkMappingPair
#define SOAP_TYPE_ns1__VAppCloneSpecNetworkMappingPair (2417)
/* ns1:VAppCloneSpecNetworkMappingPair */
class SOAP_CMAC ns1__VAppCloneSpecNetworkMappingPair : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *source;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *destination;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2417; } /* = unique id SOAP_TYPE_ns1__VAppCloneSpecNetworkMappingPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppCloneSpecNetworkMappingPair() { ns1__VAppCloneSpecNetworkMappingPair::soap_default(NULL); }
	virtual ~ns1__VAppCloneSpecNetworkMappingPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppCloneSpecResourceMap
#define SOAP_TYPE_ns1__VAppCloneSpecResourceMap (2419)
/* ns1:VAppCloneSpecResourceMap */
class SOAP_CMAC ns1__VAppCloneSpecResourceMap : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *source;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *parent;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ResourceConfigSpec *resourceSpec;	/* optional element of type ns1:ResourceConfigSpec */
	ns1__ManagedObjectReference *location;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2419; } /* = unique id SOAP_TYPE_ns1__VAppCloneSpecResourceMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppCloneSpecResourceMap() { ns1__VAppCloneSpecResourceMap::soap_default(NULL); }
	virtual ~ns1__VAppCloneSpecResourceMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppCloneSpec
#define SOAP_TYPE_ns1__VAppCloneSpec (2421)
/* ns1:VAppCloneSpec */
class SOAP_CMAC ns1__VAppCloneSpec : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *location;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ResourceConfigSpec *resourceSpec;	/* optional element of type ns1:ResourceConfigSpec */
	ns1__ManagedObjectReference *vmFolder;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__VAppCloneSpecNetworkMappingPair * >networkMapping;	/* optional element of type ns1:VAppCloneSpecNetworkMappingPair */
	std::vector<ns1__KeyValue * >property;	/* optional element of type ns1:KeyValue */
	std::vector<ns1__VAppCloneSpecResourceMap * >resourceMapping;	/* optional element of type ns1:VAppCloneSpecResourceMap */
	std::string *provisioning;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2421; } /* = unique id SOAP_TYPE_ns1__VAppCloneSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppCloneSpec() { ns1__VAppCloneSpec::soap_default(NULL); }
	virtual ~ns1__VAppCloneSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppEntityConfigInfo
#define SOAP_TYPE_ns1__VAppEntityConfigInfo (2422)
/* ns1:VAppEntityConfigInfo */
class SOAP_CMAC ns1__VAppEntityConfigInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* optional element of type ns1:ManagedObjectReference */
	std::string *tag;	/* optional element of type xsd:string */
	int *startOrder;	/* optional element of type xsd:int */
	int *startDelay;	/* optional element of type xsd:int */
	bool *waitingForGuest;	/* optional element of type xsd:boolean */
	std::string *startAction;	/* optional element of type xsd:string */
	int *stopDelay;	/* optional element of type xsd:int */
	std::string *stopAction;	/* optional element of type xsd:string */
	bool *destroyWithParent;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2422; } /* = unique id SOAP_TYPE_ns1__VAppEntityConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppEntityConfigInfo() { ns1__VAppEntityConfigInfo::soap_default(NULL); }
	virtual ~ns1__VAppEntityConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppIPAssignmentInfo
#define SOAP_TYPE_ns1__VAppIPAssignmentInfo (2424)
/* ns1:VAppIPAssignmentInfo */
class SOAP_CMAC ns1__VAppIPAssignmentInfo : public ns1__DynamicData
{
public:
	std::vector<std::string >supportedAllocationScheme;	/* optional element of type xsd:string */
	std::string *ipAllocationPolicy;	/* optional element of type xsd:string */
	std::vector<std::string >supportedIpProtocol;	/* optional element of type xsd:string */
	std::string *ipProtocol;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2424; } /* = unique id SOAP_TYPE_ns1__VAppIPAssignmentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppIPAssignmentInfo() { ns1__VAppIPAssignmentInfo::soap_default(NULL); }
	virtual ~ns1__VAppIPAssignmentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpPoolIpPoolConfigInfo
#define SOAP_TYPE_ns1__IpPoolIpPoolConfigInfo (2425)
/* ns1:IpPoolIpPoolConfigInfo */
class SOAP_CMAC ns1__IpPoolIpPoolConfigInfo : public ns1__DynamicData
{
public:
	std::string *subnetAddress;	/* optional element of type xsd:string */
	std::string *netmask;	/* optional element of type xsd:string */
	std::string *gateway;	/* optional element of type xsd:string */
	std::string *range;	/* optional element of type xsd:string */
	std::vector<std::string >dns;	/* optional element of type xsd:string */
	bool *dhcpServerAvailable;	/* optional element of type xsd:boolean */
	bool *ipPoolEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2425; } /* = unique id SOAP_TYPE_ns1__IpPoolIpPoolConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpPoolIpPoolConfigInfo() { ns1__IpPoolIpPoolConfigInfo::soap_default(NULL); }
	virtual ~ns1__IpPoolIpPoolConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpPoolAssociation
#define SOAP_TYPE_ns1__IpPoolAssociation (2426)
/* ns1:IpPoolAssociation */
class SOAP_CMAC ns1__IpPoolAssociation : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *network;	/* optional element of type ns1:ManagedObjectReference */
	std::string networkName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2426; } /* = unique id SOAP_TYPE_ns1__IpPoolAssociation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpPoolAssociation() { ns1__IpPoolAssociation::soap_default(NULL); }
	virtual ~ns1__IpPoolAssociation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpPool
#define SOAP_TYPE_ns1__IpPool (2428)
/* ns1:IpPool */
class SOAP_CMAC ns1__IpPool : public ns1__DynamicData
{
public:
	int *id;	/* optional element of type xsd:int */
	std::string *name;	/* optional element of type xsd:string */
	ns1__IpPoolIpPoolConfigInfo *ipv4Config;	/* optional element of type ns1:IpPoolIpPoolConfigInfo */
	ns1__IpPoolIpPoolConfigInfo *ipv6Config;	/* optional element of type ns1:IpPoolIpPoolConfigInfo */
	std::string *dnsDomain;	/* optional element of type xsd:string */
	std::string *dnsSearchPath;	/* optional element of type xsd:string */
	std::string *hostPrefix;	/* optional element of type xsd:string */
	std::string *httpProxy;	/* optional element of type xsd:string */
	std::vector<ns1__IpPoolAssociation * >networkAssociation;	/* optional element of type ns1:IpPoolAssociation */
public:
	virtual int soap_type() const { return 2428; } /* = unique id SOAP_TYPE_ns1__IpPool */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpPool() { ns1__IpPool::soap_default(NULL); }
	virtual ~ns1__IpPool() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppOvfSectionInfo
#define SOAP_TYPE_ns1__VAppOvfSectionInfo (2430)
/* ns1:VAppOvfSectionInfo */
class SOAP_CMAC ns1__VAppOvfSectionInfo : public ns1__DynamicData
{
public:
	int *key;	/* optional element of type xsd:int */
	std::string *namespace_;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	bool *atEnvelopeLevel;	/* optional element of type xsd:boolean */
	std::string *contents;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2430; } /* = unique id SOAP_TYPE_ns1__VAppOvfSectionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppOvfSectionInfo() { ns1__VAppOvfSectionInfo::soap_default(NULL); }
	virtual ~ns1__VAppOvfSectionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppProductInfo
#define SOAP_TYPE_ns1__VAppProductInfo (2432)
/* ns1:VAppProductInfo */
class SOAP_CMAC ns1__VAppProductInfo : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::string *classId;	/* optional element of type xsd:string */
	std::string *instanceId;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	std::string *vendor;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	std::string *fullVersion;	/* optional element of type xsd:string */
	std::string *vendorUrl;	/* optional element of type xsd:string */
	std::string *productUrl;	/* optional element of type xsd:string */
	std::string *appUrl;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2432; } /* = unique id SOAP_TYPE_ns1__VAppProductInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppProductInfo() { ns1__VAppProductInfo::soap_default(NULL); }
	virtual ~ns1__VAppProductInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppPropertyInfo
#define SOAP_TYPE_ns1__VAppPropertyInfo (2434)
/* ns1:VAppPropertyInfo */
class SOAP_CMAC ns1__VAppPropertyInfo : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::string *classId;	/* optional element of type xsd:string */
	std::string *instanceId;	/* optional element of type xsd:string */
	std::string *id;	/* optional element of type xsd:string */
	std::string *category;	/* optional element of type xsd:string */
	std::string *label;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
	bool *userConfigurable;	/* optional element of type xsd:boolean */
	std::string *defaultValue;	/* optional element of type xsd:string */
	std::string *value;	/* optional element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2434; } /* = unique id SOAP_TYPE_ns1__VAppPropertyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppPropertyInfo() { ns1__VAppPropertyInfo::soap_default(NULL); }
	virtual ~ns1__VAppPropertyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigInfo
#define SOAP_TYPE_ns1__VmConfigInfo (2439)
/* ns1:VmConfigInfo */
class SOAP_CMAC ns1__VmConfigInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__VAppProductInfo * >product;	/* optional element of type ns1:VAppProductInfo */
	std::vector<ns1__VAppPropertyInfo * >property;	/* optional element of type ns1:VAppPropertyInfo */
	ns1__VAppIPAssignmentInfo *ipAssignment;	/* required element of type ns1:VAppIPAssignmentInfo */
	std::vector<std::string >eula;	/* optional element of type xsd:string */
	std::vector<ns1__VAppOvfSectionInfo * >ovfSection;	/* optional element of type ns1:VAppOvfSectionInfo */
	std::vector<std::string >ovfEnvironmentTransport;	/* optional element of type xsd:string */
	bool installBootRequired;	/* required element of type xsd:boolean */
	int installBootStopDelay;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2439; } /* = unique id SOAP_TYPE_ns1__VmConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigInfo() { ns1__VmConfigInfo::soap_default(NULL); }
	virtual ~ns1__VmConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigSpec
#define SOAP_TYPE_ns1__VmConfigSpec (2440)
/* ns1:VmConfigSpec */
class SOAP_CMAC ns1__VmConfigSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__VAppProductSpec * >product;	/* optional element of type ns1:VAppProductSpec */
	std::vector<ns1__VAppPropertySpec * >property;	/* optional element of type ns1:VAppPropertySpec */
	ns1__VAppIPAssignmentInfo *ipAssignment;	/* optional element of type ns1:VAppIPAssignmentInfo */
	std::vector<std::string >eula;	/* optional element of type xsd:string */
	std::vector<ns1__VAppOvfSectionSpec * >ovfSection;	/* optional element of type ns1:VAppOvfSectionSpec */
	std::vector<std::string >ovfEnvironmentTransport;	/* optional element of type xsd:string */
	bool *installBootRequired;	/* optional element of type xsd:boolean */
	int *installBootStopDelay;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2440; } /* = unique id SOAP_TYPE_ns1__VmConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigSpec() { ns1__VmConfigSpec::soap_default(NULL); }
	virtual ~ns1__VmConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineAffinityInfo
#define SOAP_TYPE_ns1__VirtualMachineAffinityInfo (2447)
/* ns1:VirtualMachineAffinityInfo */
class SOAP_CMAC ns1__VirtualMachineAffinityInfo : public ns1__DynamicData
{
public:
	std::vector<int >affinitySet;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2447; } /* = unique id SOAP_TYPE_ns1__VirtualMachineAffinityInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineAffinityInfo() { ns1__VirtualMachineAffinityInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineAffinityInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineBootOptions
#define SOAP_TYPE_ns1__VirtualMachineBootOptions (2448)
/* ns1:VirtualMachineBootOptions */
class SOAP_CMAC ns1__VirtualMachineBootOptions : public ns1__DynamicData
{
public:
	LONG64 *bootDelay;	/* optional element of type xsd:long */
	bool *enterBIOSSetup;	/* optional element of type xsd:boolean */
	bool *bootRetryEnabled;	/* optional element of type xsd:boolean */
	LONG64 *bootRetryDelay;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 2448; } /* = unique id SOAP_TYPE_ns1__VirtualMachineBootOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineBootOptions() { ns1__VirtualMachineBootOptions::soap_default(NULL); }
	virtual ~ns1__VirtualMachineBootOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineCapability
#define SOAP_TYPE_ns1__VirtualMachineCapability (2449)
/* ns1:VirtualMachineCapability */
class SOAP_CMAC ns1__VirtualMachineCapability : public ns1__DynamicData
{
public:
	bool snapshotOperationsSupported;	/* required element of type xsd:boolean */
	bool multipleSnapshotsSupported;	/* required element of type xsd:boolean */
	bool snapshotConfigSupported;	/* required element of type xsd:boolean */
	bool poweredOffSnapshotsSupported;	/* required element of type xsd:boolean */
	bool memorySnapshotsSupported;	/* required element of type xsd:boolean */
	bool revertToSnapshotSupported;	/* required element of type xsd:boolean */
	bool quiescedSnapshotsSupported;	/* required element of type xsd:boolean */
	bool disableSnapshotsSupported;	/* required element of type xsd:boolean */
	bool lockSnapshotsSupported;	/* required element of type xsd:boolean */
	bool consolePreferencesSupported;	/* required element of type xsd:boolean */
	bool cpuFeatureMaskSupported;	/* required element of type xsd:boolean */
	bool s1AcpiManagementSupported;	/* required element of type xsd:boolean */
	bool settingScreenResolutionSupported;	/* required element of type xsd:boolean */
	bool toolsAutoUpdateSupported;	/* required element of type xsd:boolean */
	bool vmNpivWwnSupported;	/* required element of type xsd:boolean */
	bool npivWwnOnNonRdmVmSupported;	/* required element of type xsd:boolean */
	bool *vmNpivWwnDisableSupported;	/* optional element of type xsd:boolean */
	bool *vmNpivWwnUpdateSupported;	/* optional element of type xsd:boolean */
	bool swapPlacementSupported;	/* required element of type xsd:boolean */
	bool toolsSyncTimeSupported;	/* required element of type xsd:boolean */
	bool virtualMmuUsageSupported;	/* required element of type xsd:boolean */
	bool diskSharesSupported;	/* required element of type xsd:boolean */
	bool bootOptionsSupported;	/* required element of type xsd:boolean */
	bool *bootRetryOptionsSupported;	/* optional element of type xsd:boolean */
	bool settingVideoRamSizeSupported;	/* required element of type xsd:boolean */
	bool *settingDisplayTopologySupported;	/* optional element of type xsd:boolean */
	bool *recordReplaySupported;	/* optional element of type xsd:boolean */
	bool *changeTrackingSupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2449; } /* = unique id SOAP_TYPE_ns1__VirtualMachineCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineCapability() { ns1__VirtualMachineCapability::soap_default(NULL); }
	virtual ~ns1__VirtualMachineCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineCloneSpec
#define SOAP_TYPE_ns1__VirtualMachineCloneSpec (2452)
/* ns1:VirtualMachineCloneSpec */
class SOAP_CMAC ns1__VirtualMachineCloneSpec : public ns1__DynamicData
{
public:
	ns1__VirtualMachineRelocateSpec *location;	/* required element of type ns1:VirtualMachineRelocateSpec */
	bool template_;	/* required element of type xsd:boolean */
	ns1__VirtualMachineConfigSpec *config;	/* optional element of type ns1:VirtualMachineConfigSpec */
	ns1__CustomizationSpec *customization;	/* optional element of type ns1:CustomizationSpec */
	bool powerOn;	/* required element of type xsd:boolean */
	ns1__ManagedObjectReference *snapshot;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2452; } /* = unique id SOAP_TYPE_ns1__VirtualMachineCloneSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineCloneSpec() { ns1__VirtualMachineCloneSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineCloneSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfoDatastoreUrlPair
#define SOAP_TYPE_ns1__VirtualMachineConfigInfoDatastoreUrlPair (2453)
/* ns1:VirtualMachineConfigInfoDatastoreUrlPair */
class SOAP_CMAC ns1__VirtualMachineConfigInfoDatastoreUrlPair : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2453; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigInfoDatastoreUrlPair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigInfoDatastoreUrlPair() { ns1__VirtualMachineConfigInfoDatastoreUrlPair::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigInfoDatastoreUrlPair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigInfo
#define SOAP_TYPE_ns1__VirtualMachineConfigInfo (2455)
/* ns1:VirtualMachineConfigInfo */
class SOAP_CMAC ns1__VirtualMachineConfigInfo : public ns1__DynamicData
{
public:
	std::string changeVersion;	/* required element of type xsd:string */
	time_t modified;	/* required element of type xsd:dateTime */
	std::string name;	/* required element of type xsd:string */
	std::string guestFullName;	/* required element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
	std::vector<LONG64 >npivNodeWorldWideName;	/* optional element of type xsd:long */
	std::vector<LONG64 >npivPortWorldWideName;	/* optional element of type xsd:long */
	std::string *npivWorldWideNameType;	/* optional element of type xsd:string */
	short *npivDesiredNodeWwns;	/* optional element of type xsd:short */
	short *npivDesiredPortWwns;	/* optional element of type xsd:short */
	bool *npivTemporaryDisabled;	/* optional element of type xsd:boolean */
	bool *npivOnNonRdmDisks;	/* optional element of type xsd:boolean */
	std::string *locationId;	/* optional element of type xsd:string */
	bool template_;	/* required element of type xsd:boolean */
	std::string guestId;	/* required element of type xsd:string */
	std::string alternateGuestName;	/* required element of type xsd:string */
	std::string *annotation;	/* optional element of type xsd:string */
	class ns1__VirtualMachineFileInfo *files;	/* required element of type ns1:VirtualMachineFileInfo */
	class ns1__ToolsConfigInfo *tools;	/* optional element of type ns1:ToolsConfigInfo */
	class ns1__VirtualMachineFlagInfo *flags;	/* required element of type ns1:VirtualMachineFlagInfo */
	class ns1__VirtualMachineConsolePreferences *consolePreferences;	/* optional element of type ns1:VirtualMachineConsolePreferences */
	class ns1__VirtualMachineDefaultPowerOpInfo *defaultPowerOps;	/* required element of type ns1:VirtualMachineDefaultPowerOpInfo */
	class ns1__VirtualHardware *hardware;	/* required element of type ns1:VirtualHardware */
	ns1__ResourceAllocationInfo *cpuAllocation;	/* optional element of type ns1:ResourceAllocationInfo */
	ns1__ResourceAllocationInfo *memoryAllocation;	/* optional element of type ns1:ResourceAllocationInfo */
	bool *memoryHotAddEnabled;	/* optional element of type xsd:boolean */
	bool *cpuHotAddEnabled;	/* optional element of type xsd:boolean */
	bool *cpuHotRemoveEnabled;	/* optional element of type xsd:boolean */
	LONG64 *hotPlugMemoryLimit;	/* optional element of type xsd:long */
	LONG64 *hotPlugMemoryIncrementSize;	/* optional element of type xsd:long */
	ns1__VirtualMachineAffinityInfo *cpuAffinity;	/* optional element of type ns1:VirtualMachineAffinityInfo */
	ns1__VirtualMachineAffinityInfo *memoryAffinity;	/* optional element of type ns1:VirtualMachineAffinityInfo */
	class ns1__VirtualMachineNetworkShaperInfo *networkShaper;	/* optional element of type ns1:VirtualMachineNetworkShaperInfo */
	std::vector<ns1__OptionValue * >extraConfig;	/* optional element of type ns1:OptionValue */
	std::vector<ns1__HostCpuIdInfo * >cpuFeatureMask;	/* optional element of type ns1:HostCpuIdInfo */
	std::vector<ns1__VirtualMachineConfigInfoDatastoreUrlPair * >datastoreUrl;	/* optional element of type ns1:VirtualMachineConfigInfoDatastoreUrlPair */
	std::string *swapPlacement;	/* optional element of type xsd:string */
	ns1__VirtualMachineBootOptions *bootOptions;	/* optional element of type ns1:VirtualMachineBootOptions */
	class ns1__FaultToleranceConfigInfo *ftInfo;	/* optional element of type ns1:FaultToleranceConfigInfo */
	ns1__VmConfigInfo *vAppConfig;	/* optional element of type ns1:VmConfigInfo */
	bool *vAssertsEnabled;	/* optional element of type xsd:boolean */
	bool *changeTrackingEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2455; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigInfo() { ns1__VirtualMachineConfigInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigOption
#define SOAP_TYPE_ns1__VirtualMachineConfigOption (2456)
/* ns1:VirtualMachineConfigOption */
class SOAP_CMAC ns1__VirtualMachineConfigOption : public ns1__DynamicData
{
public:
	std::string version;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	std::vector<ns1__GuestOsDescriptor * >guestOSDescriptor;	/* required element of type ns1:GuestOsDescriptor */
	int guestOSDefaultIndex;	/* required element of type xsd:int */
	class ns1__VirtualHardwareOption *hardwareOptions;	/* required element of type ns1:VirtualHardwareOption */
	ns1__VirtualMachineCapability *capabilities;	/* required element of type ns1:VirtualMachineCapability */
	class ns1__DatastoreOption *datastore;	/* required element of type ns1:DatastoreOption */
	std::vector<ns1__VirtualDevice * >defaultDevice;	/* optional element of type ns1:VirtualDevice */
	std::vector<std::string >supportedMonitorType;	/* required element of type xsd:string */
	std::vector<std::string >supportedOvfEnvironmentTransport;	/* optional element of type xsd:string */
	std::vector<std::string >supportedOvfInstallTransport;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2456; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigOption() { ns1__VirtualMachineConfigOption::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigOptionDescriptor
#define SOAP_TYPE_ns1__VirtualMachineConfigOptionDescriptor (2457)
/* ns1:VirtualMachineConfigOptionDescriptor */
class SOAP_CMAC ns1__VirtualMachineConfigOptionDescriptor : public ns1__DynamicData
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
	bool *createSupported;	/* optional element of type xsd:boolean */
	bool *defaultConfigOption;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2457; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigOptionDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigOptionDescriptor() { ns1__VirtualMachineConfigOptionDescriptor::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigOptionDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigSpec
#define SOAP_TYPE_ns1__VirtualMachineConfigSpec (2461)
/* ns1:VirtualMachineConfigSpec */
class SOAP_CMAC ns1__VirtualMachineConfigSpec : public ns1__DynamicData
{
public:
	std::string *changeVersion;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
	std::string *version;	/* optional element of type xsd:string */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
	std::vector<LONG64 >npivNodeWorldWideName;	/* optional element of type xsd:long */
	std::vector<LONG64 >npivPortWorldWideName;	/* optional element of type xsd:long */
	std::string *npivWorldWideNameType;	/* optional element of type xsd:string */
	short *npivDesiredNodeWwns;	/* optional element of type xsd:short */
	short *npivDesiredPortWwns;	/* optional element of type xsd:short */
	bool *npivTemporaryDisabled;	/* optional element of type xsd:boolean */
	bool *npivOnNonRdmDisks;	/* optional element of type xsd:boolean */
	std::string *npivWorldWideNameOp;	/* optional element of type xsd:string */
	std::string *locationId;	/* optional element of type xsd:string */
	std::string *guestId;	/* optional element of type xsd:string */
	std::string *alternateGuestName;	/* optional element of type xsd:string */
	std::string *annotation;	/* optional element of type xsd:string */
	ns1__VirtualMachineFileInfo *files;	/* optional element of type ns1:VirtualMachineFileInfo */
	ns1__ToolsConfigInfo *tools;	/* optional element of type ns1:ToolsConfigInfo */
	ns1__VirtualMachineFlagInfo *flags;	/* optional element of type ns1:VirtualMachineFlagInfo */
	ns1__VirtualMachineConsolePreferences *consolePreferences;	/* optional element of type ns1:VirtualMachineConsolePreferences */
	ns1__VirtualMachineDefaultPowerOpInfo *powerOpInfo;	/* optional element of type ns1:VirtualMachineDefaultPowerOpInfo */
	int *numCPUs;	/* optional element of type xsd:int */
	LONG64 *memoryMB;	/* optional element of type xsd:long */
	bool *memoryHotAddEnabled;	/* optional element of type xsd:boolean */
	bool *cpuHotAddEnabled;	/* optional element of type xsd:boolean */
	bool *cpuHotRemoveEnabled;	/* optional element of type xsd:boolean */
	std::vector<ns1__VirtualDeviceConfigSpec * >deviceChange;	/* optional element of type ns1:VirtualDeviceConfigSpec */
	ns1__ResourceAllocationInfo *cpuAllocation;	/* optional element of type ns1:ResourceAllocationInfo */
	ns1__ResourceAllocationInfo *memoryAllocation;	/* optional element of type ns1:ResourceAllocationInfo */
	ns1__VirtualMachineAffinityInfo *cpuAffinity;	/* optional element of type ns1:VirtualMachineAffinityInfo */
	ns1__VirtualMachineAffinityInfo *memoryAffinity;	/* optional element of type ns1:VirtualMachineAffinityInfo */
	ns1__VirtualMachineNetworkShaperInfo *networkShaper;	/* optional element of type ns1:VirtualMachineNetworkShaperInfo */
	std::vector<ns1__VirtualMachineCpuIdInfoSpec * >cpuFeatureMask;	/* optional element of type ns1:VirtualMachineCpuIdInfoSpec */
	std::vector<ns1__OptionValue * >extraConfig;	/* optional element of type ns1:OptionValue */
	std::string *swapPlacement;	/* optional element of type xsd:string */
	ns1__VirtualMachineBootOptions *bootOptions;	/* optional element of type ns1:VirtualMachineBootOptions */
	ns1__VmConfigSpec *vAppConfig;	/* optional element of type ns1:VmConfigSpec */
	ns1__FaultToleranceConfigInfo *ftInfo;	/* optional element of type ns1:FaultToleranceConfigInfo */
	bool *vAppConfigRemoved;	/* optional element of type xsd:boolean */
	bool *vAssertsEnabled;	/* optional element of type xsd:boolean */
	bool *changeTrackingEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2461; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigSpec() { ns1__VirtualMachineConfigSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConfigTarget
#define SOAP_TYPE_ns1__ConfigTarget (2462)
/* ns1:ConfigTarget */
class SOAP_CMAC ns1__ConfigTarget : public ns1__DynamicData
{
public:
	int numCpus;	/* required element of type xsd:int */
	int numCpuCores;	/* required element of type xsd:int */
	int numNumaNodes;	/* required element of type xsd:int */
	std::vector<ns1__VirtualMachineDatastoreInfo * >datastore;	/* optional element of type ns1:VirtualMachineDatastoreInfo */
	std::vector<ns1__VirtualMachineNetworkInfo * >network;	/* optional element of type ns1:VirtualMachineNetworkInfo */
	std::vector<ns1__DistributedVirtualPortgroupInfo * >distributedVirtualPortgroup;	/* optional element of type ns1:DistributedVirtualPortgroupInfo */
	std::vector<ns1__DistributedVirtualSwitchInfo * >distributedVirtualSwitch;	/* optional element of type ns1:DistributedVirtualSwitchInfo */
	std::vector<ns1__VirtualMachineCdromInfo * >cdRom;	/* optional element of type ns1:VirtualMachineCdromInfo */
	std::vector<ns1__VirtualMachineSerialInfo * >serial;	/* optional element of type ns1:VirtualMachineSerialInfo */
	std::vector<ns1__VirtualMachineParallelInfo * >parallel;	/* optional element of type ns1:VirtualMachineParallelInfo */
	std::vector<ns1__VirtualMachineSoundInfo * >sound;	/* optional element of type ns1:VirtualMachineSoundInfo */
	std::vector<ns1__VirtualMachineUsbInfo * >usb;	/* optional element of type ns1:VirtualMachineUsbInfo */
	std::vector<ns1__VirtualMachineFloppyInfo * >floppy;	/* optional element of type ns1:VirtualMachineFloppyInfo */
	std::vector<ns1__VirtualMachineLegacyNetworkSwitchInfo * >legacyNetworkInfo;	/* optional element of type ns1:VirtualMachineLegacyNetworkSwitchInfo */
	std::vector<ns1__VirtualMachineScsiPassthroughInfo * >scsiPassthrough;	/* optional element of type ns1:VirtualMachineScsiPassthroughInfo */
	std::vector<ns1__VirtualMachineScsiDiskDeviceInfo * >scsiDisk;	/* optional element of type ns1:VirtualMachineScsiDiskDeviceInfo */
	std::vector<ns1__VirtualMachineIdeDiskDeviceInfo * >ideDisk;	/* optional element of type ns1:VirtualMachineIdeDiskDeviceInfo */
	int maxMemMBOptimalPerf;	/* required element of type xsd:int */
	ns1__ResourcePoolRuntimeInfo *resourcePool;	/* optional element of type ns1:ResourcePoolRuntimeInfo */
	bool *autoVmotion;	/* optional element of type xsd:boolean */
	std::vector<ns1__VirtualMachinePciPassthroughInfo * >pciPassthrough;	/* optional element of type ns1:VirtualMachinePciPassthroughInfo */
public:
	virtual int soap_type() const { return 2462; } /* = unique id SOAP_TYPE_ns1__ConfigTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConfigTarget() { ns1__ConfigTarget::soap_default(NULL); }
	virtual ~ns1__ConfigTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConsolePreferences
#define SOAP_TYPE_ns1__VirtualMachineConsolePreferences (2463)
/* ns1:VirtualMachineConsolePreferences */
class SOAP_CMAC ns1__VirtualMachineConsolePreferences : public ns1__DynamicData
{
public:
	bool *powerOnWhenOpened;	/* optional element of type xsd:boolean */
	bool *enterFullScreenOnPowerOn;	/* optional element of type xsd:boolean */
	bool *closeOnPowerOffOrSuspend;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2463; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConsolePreferences */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConsolePreferences() { ns1__VirtualMachineConsolePreferences::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConsolePreferences() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDatastoreVolumeOption
#define SOAP_TYPE_ns1__VirtualMachineDatastoreVolumeOption (2466)
/* ns1:VirtualMachineDatastoreVolumeOption */
class SOAP_CMAC ns1__VirtualMachineDatastoreVolumeOption : public ns1__DynamicData
{
public:
	std::string fileSystemType;	/* required element of type xsd:string */
	int *majorVersion;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2466; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDatastoreVolumeOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDatastoreVolumeOption() { ns1__VirtualMachineDatastoreVolumeOption::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDatastoreVolumeOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreOption
#define SOAP_TYPE_ns1__DatastoreOption (2468)
/* ns1:DatastoreOption */
class SOAP_CMAC ns1__DatastoreOption : public ns1__DynamicData
{
public:
	std::vector<ns1__VirtualMachineDatastoreVolumeOption * >unsupportedVolumes;	/* optional element of type ns1:VirtualMachineDatastoreVolumeOption */
public:
	virtual int soap_type() const { return 2468; } /* = unique id SOAP_TYPE_ns1__DatastoreOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreOption() { ns1__DatastoreOption::soap_default(NULL); }
	virtual ~ns1__DatastoreOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDefaultPowerOpInfo
#define SOAP_TYPE_ns1__VirtualMachineDefaultPowerOpInfo (2469)
/* ns1:VirtualMachineDefaultPowerOpInfo */
class SOAP_CMAC ns1__VirtualMachineDefaultPowerOpInfo : public ns1__DynamicData
{
public:
	std::string *powerOffType;	/* optional element of type xsd:string */
	std::string *suspendType;	/* optional element of type xsd:string */
	std::string *resetType;	/* optional element of type xsd:string */
	std::string *defaultPowerOffType;	/* optional element of type xsd:string */
	std::string *defaultSuspendType;	/* optional element of type xsd:string */
	std::string *defaultResetType;	/* optional element of type xsd:string */
	std::string *standbyAction;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2469; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDefaultPowerOpInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDefaultPowerOpInfo() { ns1__VirtualMachineDefaultPowerOpInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDefaultPowerOpInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState (2470)
/* ns1:VirtualMachineDeviceRuntimeInfoDeviceRuntimeState */
class SOAP_CMAC ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2470; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState() { ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfo
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfo (2472)
/* ns1:VirtualMachineDeviceRuntimeInfo */
class SOAP_CMAC ns1__VirtualMachineDeviceRuntimeInfo : public ns1__DynamicData
{
public:
	ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState *runtimeState;	/* required element of type ns1:VirtualMachineDeviceRuntimeInfoDeviceRuntimeState */
	int key;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2472; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDeviceRuntimeInfo() { ns1__VirtualMachineDeviceRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDeviceRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceConfigInfo
#define SOAP_TYPE_ns1__FaultToleranceConfigInfo (2475)
/* ns1:FaultToleranceConfigInfo */
class SOAP_CMAC ns1__FaultToleranceConfigInfo : public ns1__DynamicData
{
public:
	int role;	/* required element of type xsd:int */
	std::vector<std::string >instanceUuids;	/* required element of type xsd:string */
	std::vector<std::string >configPaths;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2475; } /* = unique id SOAP_TYPE_ns1__FaultToleranceConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceConfigInfo() { ns1__FaultToleranceConfigInfo::soap_default(NULL); }
	virtual ~ns1__FaultToleranceConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceSecondaryOpResult
#define SOAP_TYPE_ns1__FaultToleranceSecondaryOpResult (2478)
/* ns1:FaultToleranceSecondaryOpResult */
class SOAP_CMAC ns1__FaultToleranceSecondaryOpResult : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	bool powerOnAttempted;	/* required element of type xsd:boolean */
	ns1__ClusterPowerOnVmResult *powerOnResult;	/* optional element of type ns1:ClusterPowerOnVmResult */
public:
	virtual int soap_type() const { return 2478; } /* = unique id SOAP_TYPE_ns1__FaultToleranceSecondaryOpResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceSecondaryOpResult() { ns1__FaultToleranceSecondaryOpResult::soap_default(NULL); }
	virtual ~ns1__FaultToleranceSecondaryOpResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileInfo
#define SOAP_TYPE_ns1__VirtualMachineFileInfo (2479)
/* ns1:VirtualMachineFileInfo */
class SOAP_CMAC ns1__VirtualMachineFileInfo : public ns1__DynamicData
{
public:
	std::string *vmPathName;	/* optional element of type xsd:string */
	std::string *snapshotDirectory;	/* optional element of type xsd:string */
	std::string *suspendDirectory;	/* optional element of type xsd:string */
	std::string *logDirectory;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2479; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileInfo() { ns1__VirtualMachineFileInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutDiskLayout
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutDiskLayout (2480)
/* ns1:VirtualMachineFileLayoutDiskLayout */
class SOAP_CMAC ns1__VirtualMachineFileLayoutDiskLayout : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::vector<std::string >diskFile;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2480; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutDiskLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutDiskLayout() { ns1__VirtualMachineFileLayoutDiskLayout::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutDiskLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutSnapshotLayout
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutSnapshotLayout (2482)
/* ns1:VirtualMachineFileLayoutSnapshotLayout */
class SOAP_CMAC ns1__VirtualMachineFileLayoutSnapshotLayout : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	std::vector<std::string >snapshotFile;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2482; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutSnapshotLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutSnapshotLayout() { ns1__VirtualMachineFileLayoutSnapshotLayout::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutSnapshotLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayout
#define SOAP_TYPE_ns1__VirtualMachineFileLayout (2484)
/* ns1:VirtualMachineFileLayout */
class SOAP_CMAC ns1__VirtualMachineFileLayout : public ns1__DynamicData
{
public:
	std::vector<std::string >configFile;	/* optional element of type xsd:string */
	std::vector<std::string >logFile;	/* optional element of type xsd:string */
	std::vector<ns1__VirtualMachineFileLayoutDiskLayout * >disk;	/* optional element of type ns1:VirtualMachineFileLayoutDiskLayout */
	std::vector<ns1__VirtualMachineFileLayoutSnapshotLayout * >snapshot;	/* optional element of type ns1:VirtualMachineFileLayoutSnapshotLayout */
	std::string *swapFile;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2484; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayout() { ns1__VirtualMachineFileLayout::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileInfo
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileInfo (2485)
/* ns1:VirtualMachineFileLayoutExFileInfo */
class SOAP_CMAC ns1__VirtualMachineFileLayoutExFileInfo : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	LONG64 size;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2485; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutExFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutExFileInfo() { ns1__VirtualMachineFileLayoutExFileInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutExFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskUnit
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskUnit (2487)
/* ns1:VirtualMachineFileLayoutExDiskUnit */
class SOAP_CMAC ns1__VirtualMachineFileLayoutExDiskUnit : public ns1__DynamicData
{
public:
	std::vector<int >fileKey;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2487; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskUnit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutExDiskUnit() { ns1__VirtualMachineFileLayoutExDiskUnit::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutExDiskUnit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskLayout
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskLayout (2489)
/* ns1:VirtualMachineFileLayoutExDiskLayout */
class SOAP_CMAC ns1__VirtualMachineFileLayoutExDiskLayout : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	std::vector<ns1__VirtualMachineFileLayoutExDiskUnit * >chain;	/* optional element of type ns1:VirtualMachineFileLayoutExDiskUnit */
public:
	virtual int soap_type() const { return 2489; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutExDiskLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutExDiskLayout() { ns1__VirtualMachineFileLayoutExDiskLayout::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutExDiskLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutExSnapshotLayout
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutExSnapshotLayout (2491)
/* ns1:VirtualMachineFileLayoutExSnapshotLayout */
class SOAP_CMAC ns1__VirtualMachineFileLayoutExSnapshotLayout : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *key;	/* required element of type ns1:ManagedObjectReference */
	int dataKey;	/* required element of type xsd:int */
	std::vector<ns1__VirtualMachineFileLayoutExDiskLayout * >disk;	/* optional element of type ns1:VirtualMachineFileLayoutExDiskLayout */
public:
	virtual int soap_type() const { return 2491; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutExSnapshotLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutExSnapshotLayout() { ns1__VirtualMachineFileLayoutExSnapshotLayout::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutExSnapshotLayout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFileLayoutEx
#define SOAP_TYPE_ns1__VirtualMachineFileLayoutEx (2493)
/* ns1:VirtualMachineFileLayoutEx */
class SOAP_CMAC ns1__VirtualMachineFileLayoutEx : public ns1__DynamicData
{
public:
	std::vector<ns1__VirtualMachineFileLayoutExFileInfo * >file;	/* optional element of type ns1:VirtualMachineFileLayoutExFileInfo */
	std::vector<ns1__VirtualMachineFileLayoutExDiskLayout * >disk;	/* optional element of type ns1:VirtualMachineFileLayoutExDiskLayout */
	std::vector<ns1__VirtualMachineFileLayoutExSnapshotLayout * >snapshot;	/* optional element of type ns1:VirtualMachineFileLayoutExSnapshotLayout */
	time_t timestamp;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2493; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFileLayoutEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFileLayoutEx() { ns1__VirtualMachineFileLayoutEx::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFileLayoutEx() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFlagInfo
#define SOAP_TYPE_ns1__VirtualMachineFlagInfo (2494)
/* ns1:VirtualMachineFlagInfo */
class SOAP_CMAC ns1__VirtualMachineFlagInfo : public ns1__DynamicData
{
public:
	bool *disableAcceleration;	/* optional element of type xsd:boolean */
	bool *enableLogging;	/* optional element of type xsd:boolean */
	bool *useToe;	/* optional element of type xsd:boolean */
	bool *runWithDebugInfo;	/* optional element of type xsd:boolean */
	std::string *monitorType;	/* optional element of type xsd:string */
	std::string *htSharing;	/* optional element of type xsd:string */
	bool *snapshotDisabled;	/* optional element of type xsd:boolean */
	bool *snapshotLocked;	/* optional element of type xsd:boolean */
	bool *diskUuidEnabled;	/* optional element of type xsd:boolean */
	std::string *virtualMmuUsage;	/* optional element of type xsd:string */
	std::string *virtualExecUsage;	/* optional element of type xsd:string */
	std::string *snapshotPowerOffBehavior;	/* optional element of type xsd:string */
	bool *recordReplayEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2494; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFlagInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFlagInfo() { ns1__VirtualMachineFlagInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFlagInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestDiskInfo
#define SOAP_TYPE_ns1__GuestDiskInfo (2497)
/* ns1:GuestDiskInfo */
class SOAP_CMAC ns1__GuestDiskInfo : public ns1__DynamicData
{
public:
	std::string *diskPath;	/* optional element of type xsd:string */
	LONG64 *capacity;	/* optional element of type xsd:long */
	LONG64 *freeSpace;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 2497; } /* = unique id SOAP_TYPE_ns1__GuestDiskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestDiskInfo() { ns1__GuestDiskInfo::soap_default(NULL); }
	virtual ~ns1__GuestDiskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestNicInfo
#define SOAP_TYPE_ns1__GuestNicInfo (2499)
/* ns1:GuestNicInfo */
class SOAP_CMAC ns1__GuestNicInfo : public ns1__DynamicData
{
public:
	std::string *network;	/* optional element of type xsd:string */
	std::vector<std::string >ipAddress;	/* optional element of type xsd:string */
	std::string *macAddress;	/* optional element of type xsd:string */
	bool connected;	/* required element of type xsd:boolean */
	int deviceConfigId;	/* required element of type xsd:int */
	ns1__NetDnsConfigInfo *dnsConfig;	/* optional element of type ns1:NetDnsConfigInfo */
	ns1__NetIpConfigInfo *ipConfig;	/* optional element of type ns1:NetIpConfigInfo */
	ns1__NetBIOSConfigInfo *netBIOSConfig;	/* optional element of type ns1:NetBIOSConfigInfo */
public:
	virtual int soap_type() const { return 2499; } /* = unique id SOAP_TYPE_ns1__GuestNicInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestNicInfo() { ns1__GuestNicInfo::soap_default(NULL); }
	virtual ~ns1__GuestNicInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestStackInfo
#define SOAP_TYPE_ns1__GuestStackInfo (2501)
/* ns1:GuestStackInfo */
class SOAP_CMAC ns1__GuestStackInfo : public ns1__DynamicData
{
public:
	ns1__NetDnsConfigInfo *dnsConfig;	/* optional element of type ns1:NetDnsConfigInfo */
	ns1__NetIpRouteConfigInfo *ipRouteConfig;	/* optional element of type ns1:NetIpRouteConfigInfo */
	std::vector<ns1__KeyValue * >ipStackConfig;	/* optional element of type ns1:KeyValue */
	ns1__NetDhcpConfigInfo *dhcpConfig;	/* optional element of type ns1:NetDhcpConfigInfo */
public:
	virtual int soap_type() const { return 2501; } /* = unique id SOAP_TYPE_ns1__GuestStackInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestStackInfo() { ns1__GuestStackInfo::soap_default(NULL); }
	virtual ~ns1__GuestStackInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestScreenInfo
#define SOAP_TYPE_ns1__GuestScreenInfo (2503)
/* ns1:GuestScreenInfo */
class SOAP_CMAC ns1__GuestScreenInfo : public ns1__DynamicData
{
public:
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2503; } /* = unique id SOAP_TYPE_ns1__GuestScreenInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestScreenInfo() { ns1__GuestScreenInfo::soap_default(NULL); }
	virtual ~ns1__GuestScreenInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestInfo
#define SOAP_TYPE_ns1__GuestInfo (2504)
/* ns1:GuestInfo */
class SOAP_CMAC ns1__GuestInfo : public ns1__DynamicData
{
public:
	enum ns1__VirtualMachineToolsStatus *toolsStatus;	/* optional element of type ns1:VirtualMachineToolsStatus */
	std::string *toolsVersionStatus;	/* optional element of type xsd:string */
	std::string *toolsRunningStatus;	/* optional element of type xsd:string */
	std::string *toolsVersion;	/* optional element of type xsd:string */
	std::string *guestId;	/* optional element of type xsd:string */
	std::string *guestFamily;	/* optional element of type xsd:string */
	std::string *guestFullName;	/* optional element of type xsd:string */
	std::string *hostName;	/* optional element of type xsd:string */
	std::string *ipAddress;	/* optional element of type xsd:string */
	std::vector<ns1__GuestNicInfo * >net;	/* optional element of type ns1:GuestNicInfo */
	std::vector<ns1__GuestStackInfo * >ipStack;	/* optional element of type ns1:GuestStackInfo */
	std::vector<ns1__GuestDiskInfo * >disk;	/* optional element of type ns1:GuestDiskInfo */
	ns1__GuestScreenInfo *screen;	/* optional element of type ns1:GuestScreenInfo */
	std::string guestState;	/* required element of type xsd:string */
	std::string *appHeartbeatStatus;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2504; } /* = unique id SOAP_TYPE_ns1__GuestInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestInfo() { ns1__GuestInfo::soap_default(NULL); }
	virtual ~ns1__GuestInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GuestOsDescriptor
#define SOAP_TYPE_ns1__GuestOsDescriptor (2505)
/* ns1:GuestOsDescriptor */
class SOAP_CMAC ns1__GuestOsDescriptor : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string family;	/* required element of type xsd:string */
	std::string fullName;	/* required element of type xsd:string */
	int supportedMaxCPUs;	/* required element of type xsd:int */
	int supportedMinMemMB;	/* required element of type xsd:int */
	int supportedMaxMemMB;	/* required element of type xsd:int */
	int recommendedMemMB;	/* required element of type xsd:int */
	int recommendedColorDepth;	/* required element of type xsd:int */
	std::vector<std::string >supportedDiskControllerList;	/* required element of type xsd:string */
	std::string *recommendedSCSIController;	/* optional element of type xsd:string */
	std::string recommendedDiskController;	/* required element of type xsd:string */
	int supportedNumDisks;	/* required element of type xsd:int */
	int recommendedDiskSizeMB;	/* required element of type xsd:int */
	std::vector<std::string >supportedEthernetCard;	/* required element of type xsd:string */
	std::string *recommendedEthernetCard;	/* optional element of type xsd:string */
	bool *supportsSlaveDisk;	/* optional element of type xsd:boolean */
	std::vector<ns1__HostCpuIdInfo * >cpuFeatureMask;	/* optional element of type ns1:HostCpuIdInfo */
	bool supportsWakeOnLan;	/* required element of type xsd:boolean */
	bool *supportsVMI;	/* optional element of type xsd:boolean */
	bool *supportsMemoryHotAdd;	/* optional element of type xsd:boolean */
	bool *supportsCpuHotAdd;	/* optional element of type xsd:boolean */
	bool *supportsCpuHotRemove;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2505; } /* = unique id SOAP_TYPE_ns1__GuestOsDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GuestOsDescriptor() { ns1__GuestOsDescriptor::soap_default(NULL); }
	virtual ~ns1__GuestOsDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineIdeDiskDevicePartitionInfo
#define SOAP_TYPE_ns1__VirtualMachineIdeDiskDevicePartitionInfo (2507)
/* ns1:VirtualMachineIdeDiskDevicePartitionInfo */
class SOAP_CMAC ns1__VirtualMachineIdeDiskDevicePartitionInfo : public ns1__DynamicData
{
public:
	int id;	/* required element of type xsd:int */
	int capacity;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2507; } /* = unique id SOAP_TYPE_ns1__VirtualMachineIdeDiskDevicePartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineIdeDiskDevicePartitionInfo() { ns1__VirtualMachineIdeDiskDevicePartitionInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineIdeDiskDevicePartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineLegacyNetworkSwitchInfo
#define SOAP_TYPE_ns1__VirtualMachineLegacyNetworkSwitchInfo (2511)
/* ns1:VirtualMachineLegacyNetworkSwitchInfo */
class SOAP_CMAC ns1__VirtualMachineLegacyNetworkSwitchInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2511; } /* = unique id SOAP_TYPE_ns1__VirtualMachineLegacyNetworkSwitchInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineLegacyNetworkSwitchInfo() { ns1__VirtualMachineLegacyNetworkSwitchInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineLegacyNetworkSwitchInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineMessage
#define SOAP_TYPE_ns1__VirtualMachineMessage (2513)
/* ns1:VirtualMachineMessage */
class SOAP_CMAC ns1__VirtualMachineMessage : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::vector<xsd__anyType * >argument;	/* optional element of type xsd:anyType */
	std::string *text;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2513; } /* = unique id SOAP_TYPE_ns1__VirtualMachineMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineMessage() { ns1__VirtualMachineMessage::soap_default(NULL); }
	virtual ~ns1__VirtualMachineMessage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineNetworkShaperInfo
#define SOAP_TYPE_ns1__VirtualMachineNetworkShaperInfo (2517)
/* ns1:VirtualMachineNetworkShaperInfo */
class SOAP_CMAC ns1__VirtualMachineNetworkShaperInfo : public ns1__DynamicData
{
public:
	bool *enabled;	/* optional element of type xsd:boolean */
	LONG64 *peakBps;	/* optional element of type xsd:long */
	LONG64 *averageBps;	/* optional element of type xsd:long */
	LONG64 *burstSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 2517; } /* = unique id SOAP_TYPE_ns1__VirtualMachineNetworkShaperInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineNetworkShaperInfo() { ns1__VirtualMachineNetworkShaperInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineNetworkShaperInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineQuestionInfo
#define SOAP_TYPE_ns1__VirtualMachineQuestionInfo (2522)
/* ns1:VirtualMachineQuestionInfo */
class SOAP_CMAC ns1__VirtualMachineQuestionInfo : public ns1__DynamicData
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string text;	/* required element of type xsd:string */
	class ns1__ChoiceOption *choice;	/* required element of type ns1:ChoiceOption */
	std::vector<ns1__VirtualMachineMessage * >message;	/* optional element of type ns1:VirtualMachineMessage */
public:
	virtual int soap_type() const { return 2522; } /* = unique id SOAP_TYPE_ns1__VirtualMachineQuestionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineQuestionInfo() { ns1__VirtualMachineQuestionInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineQuestionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateSpecDiskLocator
#define SOAP_TYPE_ns1__VirtualMachineRelocateSpecDiskLocator (2523)
/* ns1:VirtualMachineRelocateSpecDiskLocator */
class SOAP_CMAC ns1__VirtualMachineRelocateSpecDiskLocator : public ns1__DynamicData
{
public:
	int diskId;	/* required element of type xsd:int */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	std::string *diskMoveType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2523; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRelocateSpecDiskLocator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRelocateSpecDiskLocator() { ns1__VirtualMachineRelocateSpecDiskLocator::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRelocateSpecDiskLocator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRelocateSpec
#define SOAP_TYPE_ns1__VirtualMachineRelocateSpec (2525)
/* ns1:VirtualMachineRelocateSpec */
class SOAP_CMAC ns1__VirtualMachineRelocateSpec : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
	std::string *diskMoveType;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__VirtualMachineRelocateSpecDiskLocator * >disk;	/* optional element of type ns1:VirtualMachineRelocateSpecDiskLocator */
	enum ns1__VirtualMachineRelocateTransformation *transform;	/* optional element of type ns1:VirtualMachineRelocateTransformation */
public:
	virtual int soap_type() const { return 2525; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRelocateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRelocateSpec() { ns1__VirtualMachineRelocateSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRelocateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineRuntimeInfo
#define SOAP_TYPE_ns1__VirtualMachineRuntimeInfo (2526)
/* ns1:VirtualMachineRuntimeInfo */
class SOAP_CMAC ns1__VirtualMachineRuntimeInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__VirtualMachineDeviceRuntimeInfo * >device;	/* optional element of type ns1:VirtualMachineDeviceRuntimeInfo */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	enum ns1__VirtualMachineConnectionState connectionState;	/* required element of type ns1:VirtualMachineConnectionState */
	enum ns1__VirtualMachinePowerState powerState;	/* required element of type ns1:VirtualMachinePowerState */
	enum ns1__VirtualMachineFaultToleranceState *faultToleranceState;	/* optional element of type ns1:VirtualMachineFaultToleranceState */
	bool toolsInstallerMounted;	/* required element of type xsd:boolean */
	time_t *suspendTime;	/* optional element of type xsd:dateTime */
	time_t *bootTime;	/* optional element of type xsd:dateTime */
	LONG64 *suspendInterval;	/* optional element of type xsd:long */
	ns1__VirtualMachineQuestionInfo *question;	/* optional element of type ns1:VirtualMachineQuestionInfo */
	LONG64 *memoryOverhead;	/* optional element of type xsd:long */
	int *maxCpuUsage;	/* optional element of type xsd:int */
	int *maxMemoryUsage;	/* optional element of type xsd:int */
	int numMksConnections;	/* required element of type xsd:int */
	enum ns1__VirtualMachineRecordReplayState *recordReplayState;	/* optional element of type ns1:VirtualMachineRecordReplayState */
	bool *cleanPowerOff;	/* optional element of type xsd:boolean */
	std::string *needSecondaryReason;	/* optional element of type xsd:string */
	std::string *minRequiredEVCModeKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2526; } /* = unique id SOAP_TYPE_ns1__VirtualMachineRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineRuntimeInfo() { ns1__VirtualMachineRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineSnapshotInfo
#define SOAP_TYPE_ns1__VirtualMachineSnapshotInfo (2533)
/* ns1:VirtualMachineSnapshotInfo */
class SOAP_CMAC ns1__VirtualMachineSnapshotInfo : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *currentSnapshot;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__VirtualMachineSnapshotTree * >rootSnapshotList;	/* required element of type ns1:VirtualMachineSnapshotTree */
public:
	virtual int soap_type() const { return 2533; } /* = unique id SOAP_TYPE_ns1__VirtualMachineSnapshotInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineSnapshotInfo() { ns1__VirtualMachineSnapshotInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineSnapshotInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineSnapshotTree
#define SOAP_TYPE_ns1__VirtualMachineSnapshotTree (2534)
/* ns1:VirtualMachineSnapshotTree */
class SOAP_CMAC ns1__VirtualMachineSnapshotTree : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *snapshot;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
	std::string description;	/* required element of type xsd:string */
	int *id;	/* optional element of type xsd:int */
	time_t createTime;	/* required element of type xsd:dateTime */
	enum ns1__VirtualMachinePowerState state;	/* required element of type ns1:VirtualMachinePowerState */
	bool quiesced;	/* required element of type xsd:boolean */
	std::string *backupManifest;	/* optional element of type xsd:string */
	std::vector<ns1__VirtualMachineSnapshotTree * >childSnapshotList;	/* optional element of type ns1:VirtualMachineSnapshotTree */
	bool *replaySupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2534; } /* = unique id SOAP_TYPE_ns1__VirtualMachineSnapshotTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineSnapshotTree() { ns1__VirtualMachineSnapshotTree::soap_default(NULL); }
	virtual ~ns1__VirtualMachineSnapshotTree() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsageOnDatastore
#define SOAP_TYPE_ns1__VirtualMachineUsageOnDatastore (2538)
/* ns1:VirtualMachineUsageOnDatastore */
class SOAP_CMAC ns1__VirtualMachineUsageOnDatastore : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	LONG64 committed;	/* required element of type xsd:long */
	LONG64 uncommitted;	/* required element of type xsd:long */
	LONG64 unshared;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2538; } /* = unique id SOAP_TYPE_ns1__VirtualMachineUsageOnDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineUsageOnDatastore() { ns1__VirtualMachineUsageOnDatastore::soap_default(NULL); }
	virtual ~ns1__VirtualMachineUsageOnDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineStorageInfo
#define SOAP_TYPE_ns1__VirtualMachineStorageInfo (2540)
/* ns1:VirtualMachineStorageInfo */
class SOAP_CMAC ns1__VirtualMachineStorageInfo : public ns1__DynamicData
{
public:
	std::vector<ns1__VirtualMachineUsageOnDatastore * >perDatastoreUsage;	/* optional element of type ns1:VirtualMachineUsageOnDatastore */
	time_t timestamp;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2540; } /* = unique id SOAP_TYPE_ns1__VirtualMachineStorageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineStorageInfo() { ns1__VirtualMachineStorageInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineStorageInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineConfigSummary
#define SOAP_TYPE_ns1__VirtualMachineConfigSummary (2541)
/* ns1:VirtualMachineConfigSummary */
class SOAP_CMAC ns1__VirtualMachineConfigSummary : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	bool template_;	/* required element of type xsd:boolean */
	std::string vmPathName;	/* required element of type xsd:string */
	int *memorySizeMB;	/* optional element of type xsd:int */
	int *cpuReservation;	/* optional element of type xsd:int */
	int *memoryReservation;	/* optional element of type xsd:int */
	int *numCpu;	/* optional element of type xsd:int */
	int *numEthernetCards;	/* optional element of type xsd:int */
	int *numVirtualDisks;	/* optional element of type xsd:int */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
	std::string *guestId;	/* optional element of type xsd:string */
	std::string *guestFullName;	/* optional element of type xsd:string */
	std::string *annotation;	/* optional element of type xsd:string */
	ns1__VAppProductInfo *product;	/* optional element of type ns1:VAppProductInfo */
	bool *installBootRequired;	/* optional element of type xsd:boolean */
	ns1__FaultToleranceConfigInfo *ftInfo;	/* optional element of type ns1:FaultToleranceConfigInfo */
public:
	virtual int soap_type() const { return 2541; } /* = unique id SOAP_TYPE_ns1__VirtualMachineConfigSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineConfigSummary() { ns1__VirtualMachineConfigSummary::soap_default(NULL); }
	virtual ~ns1__VirtualMachineConfigSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineQuickStats
#define SOAP_TYPE_ns1__VirtualMachineQuickStats (2542)
/* ns1:VirtualMachineQuickStats */
class SOAP_CMAC ns1__VirtualMachineQuickStats : public ns1__DynamicData
{
public:
	int *overallCpuUsage;	/* optional element of type xsd:int */
	int *overallCpuDemand;	/* optional element of type xsd:int */
	int *guestMemoryUsage;	/* optional element of type xsd:int */
	int *hostMemoryUsage;	/* optional element of type xsd:int */
	enum ns1__ManagedEntityStatus guestHeartbeatStatus;	/* required element of type ns1:ManagedEntityStatus */
	int *distributedCpuEntitlement;	/* optional element of type xsd:int */
	int *distributedMemoryEntitlement;	/* optional element of type xsd:int */
	int *staticCpuEntitlement;	/* optional element of type xsd:int */
	int *staticMemoryEntitlement;	/* optional element of type xsd:int */
	int *privateMemory;	/* optional element of type xsd:int */
	int *sharedMemory;	/* optional element of type xsd:int */
	int *swappedMemory;	/* optional element of type xsd:int */
	int *balloonedMemory;	/* optional element of type xsd:int */
	int *consumedOverheadMemory;	/* optional element of type xsd:int */
	int *ftLogBandwidth;	/* optional element of type xsd:int */
	int *ftSecondaryLatency;	/* optional element of type xsd:int */
	enum ns1__ManagedEntityStatus *ftLatencyStatus;	/* optional element of type ns1:ManagedEntityStatus */
	LONG64 *compressedMemory;	/* optional element of type xsd:long */
	int *uptimeSeconds;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2542; } /* = unique id SOAP_TYPE_ns1__VirtualMachineQuickStats */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineQuickStats() { ns1__VirtualMachineQuickStats::soap_default(NULL); }
	virtual ~ns1__VirtualMachineQuickStats() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineGuestSummary
#define SOAP_TYPE_ns1__VirtualMachineGuestSummary (2543)
/* ns1:VirtualMachineGuestSummary */
class SOAP_CMAC ns1__VirtualMachineGuestSummary : public ns1__DynamicData
{
public:
	std::string *guestId;	/* optional element of type xsd:string */
	std::string *guestFullName;	/* optional element of type xsd:string */
	enum ns1__VirtualMachineToolsStatus *toolsStatus;	/* optional element of type ns1:VirtualMachineToolsStatus */
	std::string *toolsVersionStatus;	/* optional element of type xsd:string */
	std::string *toolsRunningStatus;	/* optional element of type xsd:string */
	std::string *hostName;	/* optional element of type xsd:string */
	std::string *ipAddress;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2543; } /* = unique id SOAP_TYPE_ns1__VirtualMachineGuestSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineGuestSummary() { ns1__VirtualMachineGuestSummary::soap_default(NULL); }
	virtual ~ns1__VirtualMachineGuestSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineStorageSummary
#define SOAP_TYPE_ns1__VirtualMachineStorageSummary (2544)
/* ns1:VirtualMachineStorageSummary */
class SOAP_CMAC ns1__VirtualMachineStorageSummary : public ns1__DynamicData
{
public:
	LONG64 committed;	/* required element of type xsd:long */
	LONG64 uncommitted;	/* required element of type xsd:long */
	LONG64 unshared;	/* required element of type xsd:long */
	time_t timestamp;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2544; } /* = unique id SOAP_TYPE_ns1__VirtualMachineStorageSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineStorageSummary() { ns1__VirtualMachineStorageSummary::soap_default(NULL); }
	virtual ~ns1__VirtualMachineStorageSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineSummary
#define SOAP_TYPE_ns1__VirtualMachineSummary (2545)
/* ns1:VirtualMachineSummary */
class SOAP_CMAC ns1__VirtualMachineSummary : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* optional element of type ns1:ManagedObjectReference */
	ns1__VirtualMachineRuntimeInfo *runtime;	/* required element of type ns1:VirtualMachineRuntimeInfo */
	ns1__VirtualMachineGuestSummary *guest;	/* optional element of type ns1:VirtualMachineGuestSummary */
	ns1__VirtualMachineConfigSummary *config;	/* required element of type ns1:VirtualMachineConfigSummary */
	ns1__VirtualMachineStorageSummary *storage;	/* optional element of type ns1:VirtualMachineStorageSummary */
	ns1__VirtualMachineQuickStats *quickStats;	/* required element of type ns1:VirtualMachineQuickStats */
	enum ns1__ManagedEntityStatus overallStatus;	/* required element of type ns1:ManagedEntityStatus */
	std::vector<ns1__CustomFieldValue * >customValue;	/* optional element of type ns1:CustomFieldValue */
public:
	virtual int soap_type() const { return 2545; } /* = unique id SOAP_TYPE_ns1__VirtualMachineSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineSummary() { ns1__VirtualMachineSummary::soap_default(NULL); }
	virtual ~ns1__VirtualMachineSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineTargetInfo
#define SOAP_TYPE_ns1__VirtualMachineTargetInfo (2547)
/* ns1:VirtualMachineTargetInfo */
class SOAP_CMAC ns1__VirtualMachineTargetInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::vector<std::string >configurationTag;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2547; } /* = unique id SOAP_TYPE_ns1__VirtualMachineTargetInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineTargetInfo() { ns1__VirtualMachineTargetInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineTargetInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsConfigInfo
#define SOAP_TYPE_ns1__ToolsConfigInfo (2548)
/* ns1:ToolsConfigInfo */
class SOAP_CMAC ns1__ToolsConfigInfo : public ns1__DynamicData
{
public:
	int *toolsVersion;	/* optional element of type xsd:int */
	bool *afterPowerOn;	/* optional element of type xsd:boolean */
	bool *afterResume;	/* optional element of type xsd:boolean */
	bool *beforeGuestStandby;	/* optional element of type xsd:boolean */
	bool *beforeGuestShutdown;	/* optional element of type xsd:boolean */
	bool *beforeGuestReboot;	/* optional element of type xsd:boolean */
	std::string *toolsUpgradePolicy;	/* optional element of type xsd:string */
	std::string *pendingCustomization;	/* optional element of type xsd:string */
	bool *syncTimeWithHost;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2548; } /* = unique id SOAP_TYPE_ns1__ToolsConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsConfigInfo() { ns1__ToolsConfigInfo::soap_default(NULL); }
	virtual ~ns1__ToolsConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualHardware
#define SOAP_TYPE_ns1__VirtualHardware (2551)
/* ns1:VirtualHardware */
class SOAP_CMAC ns1__VirtualHardware : public ns1__DynamicData
{
public:
	int numCPU;	/* required element of type xsd:int */
	int memoryMB;	/* required element of type xsd:int */
	std::vector<ns1__VirtualDevice * >device;	/* optional element of type ns1:VirtualDevice */
public:
	virtual int soap_type() const { return 2551; } /* = unique id SOAP_TYPE_ns1__VirtualHardware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualHardware() { ns1__VirtualHardware::soap_default(NULL); }
	virtual ~ns1__VirtualHardware() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualHardwareOption
#define SOAP_TYPE_ns1__VirtualHardwareOption (2552)
/* ns1:VirtualHardwareOption */
class SOAP_CMAC ns1__VirtualHardwareOption : public ns1__DynamicData
{
public:
	int hwVersion;	/* required element of type xsd:int */
	std::vector<ns1__VirtualDeviceOption * >virtualDeviceOption;	/* required element of type ns1:VirtualDeviceOption */
	bool deviceListReadonly;	/* required element of type xsd:boolean */
	std::vector<int >numCPU;	/* required element of type xsd:int */
	bool numCpuReadonly;	/* required element of type xsd:boolean */
	ns1__LongOption *memoryMB;	/* required element of type ns1:LongOption */
	ns1__IntOption *numPCIControllers;	/* required element of type ns1:IntOption */
	ns1__IntOption *numIDEControllers;	/* required element of type ns1:IntOption */
	ns1__IntOption *numUSBControllers;	/* required element of type ns1:IntOption */
	ns1__IntOption *numSIOControllers;	/* required element of type ns1:IntOption */
	ns1__IntOption *numPS2Controllers;	/* required element of type ns1:IntOption */
	std::vector<std::string >licensingLimit;	/* optional element of type xsd:string */
	ns1__IntOption *numSupportedWwnPorts;	/* optional element of type ns1:IntOption */
	ns1__IntOption *numSupportedWwnNodes;	/* optional element of type ns1:IntOption */
	ns1__ResourceConfigOption *resourceConfigOption;	/* optional element of type ns1:ResourceConfigOption */
public:
	virtual int soap_type() const { return 2552; } /* = unique id SOAP_TYPE_ns1__VirtualHardwareOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualHardwareOption() { ns1__VirtualHardwareOption::soap_default(NULL); }
	virtual ~ns1__VirtualHardwareOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckResult
#define SOAP_TYPE_ns1__CheckResult (2554)
/* ns1:CheckResult */
class SOAP_CMAC ns1__CheckResult : public ns1__DynamicData
{
public:
	ns1__ManagedObjectReference *vm;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__LocalizedMethodFault * >warning;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 2554; } /* = unique id SOAP_TYPE_ns1__CheckResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckResult() { ns1__CheckResult::soap_default(NULL); }
	virtual ~ns1__CheckResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSpec
#define SOAP_TYPE_ns1__CustomizationSpec (2556)
/* ns1:CustomizationSpec */
class SOAP_CMAC ns1__CustomizationSpec : public ns1__DynamicData
{
public:
	class ns1__CustomizationOptions *options;	/* optional element of type ns1:CustomizationOptions */
	class ns1__CustomizationIdentitySettings *identity;	/* required element of type ns1:CustomizationIdentitySettings */
	class ns1__CustomizationGlobalIPSettings *globalIPSettings;	/* required element of type ns1:CustomizationGlobalIPSettings */
	std::vector<ns1__CustomizationAdapterMapping * >nicSettingMap;	/* optional element of type ns1:CustomizationAdapterMapping */
	std::vector<char >encryptionKey;	/* optional element of type xsd:byte */
public:
	virtual int soap_type() const { return 2556; } /* = unique id SOAP_TYPE_ns1__CustomizationSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSpec() { ns1__CustomizationSpec::soap_default(NULL); }
	virtual ~ns1__CustomizationSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationName
#define SOAP_TYPE_ns1__CustomizationName (2557)
/* ns1:CustomizationName */
class SOAP_CMAC ns1__CustomizationName : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2557; } /* = unique id SOAP_TYPE_ns1__CustomizationName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationName() { ns1__CustomizationName::soap_default(NULL); }
	virtual ~ns1__CustomizationName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationPassword
#define SOAP_TYPE_ns1__CustomizationPassword (2563)
/* ns1:CustomizationPassword */
class SOAP_CMAC ns1__CustomizationPassword : public ns1__DynamicData
{
public:
	std::string value;	/* required element of type xsd:string */
	bool plainText;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2563; } /* = unique id SOAP_TYPE_ns1__CustomizationPassword */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationPassword() { ns1__CustomizationPassword::soap_default(NULL); }
	virtual ~ns1__CustomizationPassword() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationOptions
#define SOAP_TYPE_ns1__CustomizationOptions (2564)
/* ns1:CustomizationOptions */
class SOAP_CMAC ns1__CustomizationOptions : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2564; } /* = unique id SOAP_TYPE_ns1__CustomizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationOptions() { ns1__CustomizationOptions::soap_default(NULL); }
	virtual ~ns1__CustomizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationGuiUnattended
#define SOAP_TYPE_ns1__CustomizationGuiUnattended (2567)
/* ns1:CustomizationGuiUnattended */
class SOAP_CMAC ns1__CustomizationGuiUnattended : public ns1__DynamicData
{
public:
	ns1__CustomizationPassword *password;	/* optional element of type ns1:CustomizationPassword */
	int timeZone;	/* required element of type xsd:int */
	bool autoLogon;	/* required element of type xsd:boolean */
	int autoLogonCount;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2567; } /* = unique id SOAP_TYPE_ns1__CustomizationGuiUnattended */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationGuiUnattended() { ns1__CustomizationGuiUnattended::soap_default(NULL); }
	virtual ~ns1__CustomizationGuiUnattended() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationUserData
#define SOAP_TYPE_ns1__CustomizationUserData (2568)
/* ns1:CustomizationUserData */
class SOAP_CMAC ns1__CustomizationUserData : public ns1__DynamicData
{
public:
	std::string fullName;	/* required element of type xsd:string */
	std::string orgName;	/* required element of type xsd:string */
	ns1__CustomizationName *computerName;	/* required element of type ns1:CustomizationName */
	std::string productId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2568; } /* = unique id SOAP_TYPE_ns1__CustomizationUserData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationUserData() { ns1__CustomizationUserData::soap_default(NULL); }
	virtual ~ns1__CustomizationUserData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationGuiRunOnce
#define SOAP_TYPE_ns1__CustomizationGuiRunOnce (2569)
/* ns1:CustomizationGuiRunOnce */
class SOAP_CMAC ns1__CustomizationGuiRunOnce : public ns1__DynamicData
{
public:
	std::vector<std::string >commandList;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2569; } /* = unique id SOAP_TYPE_ns1__CustomizationGuiRunOnce */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationGuiRunOnce() { ns1__CustomizationGuiRunOnce::soap_default(NULL); }
	virtual ~ns1__CustomizationGuiRunOnce() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIdentification
#define SOAP_TYPE_ns1__CustomizationIdentification (2570)
/* ns1:CustomizationIdentification */
class SOAP_CMAC ns1__CustomizationIdentification : public ns1__DynamicData
{
public:
	std::string *joinWorkgroup;	/* optional element of type xsd:string */
	std::string *joinDomain;	/* optional element of type xsd:string */
	std::string *domainAdmin;	/* optional element of type xsd:string */
	ns1__CustomizationPassword *domainAdminPassword;	/* optional element of type ns1:CustomizationPassword */
public:
	virtual int soap_type() const { return 2570; } /* = unique id SOAP_TYPE_ns1__CustomizationIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIdentification() { ns1__CustomizationIdentification::soap_default(NULL); }
	virtual ~ns1__CustomizationIdentification() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLicenseFilePrintData
#define SOAP_TYPE_ns1__CustomizationLicenseFilePrintData (2571)
/* ns1:CustomizationLicenseFilePrintData */
class SOAP_CMAC ns1__CustomizationLicenseFilePrintData : public ns1__DynamicData
{
public:
	enum ns1__CustomizationLicenseDataMode autoMode;	/* required element of type ns1:CustomizationLicenseDataMode */
	int *autoUsers;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2571; } /* = unique id SOAP_TYPE_ns1__CustomizationLicenseFilePrintData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationLicenseFilePrintData() { ns1__CustomizationLicenseFilePrintData::soap_default(NULL); }
	virtual ~ns1__CustomizationLicenseFilePrintData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIdentitySettings
#define SOAP_TYPE_ns1__CustomizationIdentitySettings (2572)
/* ns1:CustomizationIdentitySettings */
class SOAP_CMAC ns1__CustomizationIdentitySettings : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2572; } /* = unique id SOAP_TYPE_ns1__CustomizationIdentitySettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIdentitySettings() { ns1__CustomizationIdentitySettings::soap_default(NULL); }
	virtual ~ns1__CustomizationIdentitySettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationGlobalIPSettings
#define SOAP_TYPE_ns1__CustomizationGlobalIPSettings (2576)
/* ns1:CustomizationGlobalIPSettings */
class SOAP_CMAC ns1__CustomizationGlobalIPSettings : public ns1__DynamicData
{
public:
	std::vector<std::string >dnsSuffixList;	/* optional element of type xsd:string */
	std::vector<std::string >dnsServerList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2576; } /* = unique id SOAP_TYPE_ns1__CustomizationGlobalIPSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationGlobalIPSettings() { ns1__CustomizationGlobalIPSettings::soap_default(NULL); }
	virtual ~ns1__CustomizationGlobalIPSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIPSettingsIpV6AddressSpec
#define SOAP_TYPE_ns1__CustomizationIPSettingsIpV6AddressSpec (2577)
/* ns1:CustomizationIPSettingsIpV6AddressSpec */
class SOAP_CMAC ns1__CustomizationIPSettingsIpV6AddressSpec : public ns1__DynamicData
{
public:
	std::vector<ns1__CustomizationIpV6Generator * >ip;	/* required element of type ns1:CustomizationIpV6Generator */
	std::vector<std::string >gateway;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2577; } /* = unique id SOAP_TYPE_ns1__CustomizationIPSettingsIpV6AddressSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIPSettingsIpV6AddressSpec() { ns1__CustomizationIPSettingsIpV6AddressSpec::soap_default(NULL); }
	virtual ~ns1__CustomizationIPSettingsIpV6AddressSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIPSettings
#define SOAP_TYPE_ns1__CustomizationIPSettings (2578)
/* ns1:CustomizationIPSettings */
class SOAP_CMAC ns1__CustomizationIPSettings : public ns1__DynamicData
{
public:
	class ns1__CustomizationIpGenerator *ip;	/* required element of type ns1:CustomizationIpGenerator */
	std::string *subnetMask;	/* optional element of type xsd:string */
	std::vector<std::string >gateway;	/* optional element of type xsd:string */
	ns1__CustomizationIPSettingsIpV6AddressSpec *ipV6Spec;	/* optional element of type ns1:CustomizationIPSettingsIpV6AddressSpec */
	std::vector<std::string >dnsServerList;	/* optional element of type xsd:string */
	std::string *dnsDomain;	/* optional element of type xsd:string */
	std::string *primaryWINS;	/* optional element of type xsd:string */
	std::string *secondaryWINS;	/* optional element of type xsd:string */
	enum ns1__CustomizationNetBIOSMode *netBIOS;	/* optional element of type ns1:CustomizationNetBIOSMode */
public:
	virtual int soap_type() const { return 2578; } /* = unique id SOAP_TYPE_ns1__CustomizationIPSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIPSettings() { ns1__CustomizationIPSettings::soap_default(NULL); }
	virtual ~ns1__CustomizationIPSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIpGenerator
#define SOAP_TYPE_ns1__CustomizationIpGenerator (2579)
/* ns1:CustomizationIpGenerator */
class SOAP_CMAC ns1__CustomizationIpGenerator : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2579; } /* = unique id SOAP_TYPE_ns1__CustomizationIpGenerator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIpGenerator() { ns1__CustomizationIpGenerator::soap_default(NULL); }
	virtual ~ns1__CustomizationIpGenerator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationIpV6Generator
#define SOAP_TYPE_ns1__CustomizationIpV6Generator (2584)
/* ns1:CustomizationIpV6Generator */
class SOAP_CMAC ns1__CustomizationIpV6Generator : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2584; } /* = unique id SOAP_TYPE_ns1__CustomizationIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationIpV6Generator() { ns1__CustomizationIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationAdapterMapping
#define SOAP_TYPE_ns1__CustomizationAdapterMapping (2592)
/* ns1:CustomizationAdapterMapping */
class SOAP_CMAC ns1__CustomizationAdapterMapping : public ns1__DynamicData
{
public:
	std::string *macAddress;	/* optional element of type xsd:string */
	ns1__CustomizationIPSettings *adapter;	/* required element of type ns1:CustomizationIPSettings */
public:
	virtual int soap_type() const { return 2592; } /* = unique id SOAP_TYPE_ns1__CustomizationAdapterMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationAdapterMapping() { ns1__CustomizationAdapterMapping::soap_default(NULL); }
	virtual ~ns1__CustomizationAdapterMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskMappingPartitionInfo
#define SOAP_TYPE_ns1__HostDiskMappingPartitionInfo (2594)
/* ns1:HostDiskMappingPartitionInfo */
class SOAP_CMAC ns1__HostDiskMappingPartitionInfo : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string fileSystem;	/* required element of type xsd:string */
	LONG64 capacityInKb;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2594; } /* = unique id SOAP_TYPE_ns1__HostDiskMappingPartitionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskMappingPartitionInfo() { ns1__HostDiskMappingPartitionInfo::soap_default(NULL); }
	virtual ~ns1__HostDiskMappingPartitionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskMappingInfo
#define SOAP_TYPE_ns1__HostDiskMappingInfo (2595)
/* ns1:HostDiskMappingInfo */
class SOAP_CMAC ns1__HostDiskMappingInfo : public ns1__DynamicData
{
public:
	ns1__HostDiskMappingPartitionInfo *physicalPartition;	/* optional element of type ns1:HostDiskMappingPartitionInfo */
	std::string name;	/* required element of type xsd:string */
	bool *exclusive;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2595; } /* = unique id SOAP_TYPE_ns1__HostDiskMappingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskMappingInfo() { ns1__HostDiskMappingInfo::soap_default(NULL); }
	virtual ~ns1__HostDiskMappingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskMappingPartitionOption
#define SOAP_TYPE_ns1__HostDiskMappingPartitionOption (2596)
/* ns1:HostDiskMappingPartitionOption */
class SOAP_CMAC ns1__HostDiskMappingPartitionOption : public ns1__DynamicData
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string fileSystem;	/* required element of type xsd:string */
	LONG64 capacityInKb;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2596; } /* = unique id SOAP_TYPE_ns1__HostDiskMappingPartitionOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskMappingPartitionOption() { ns1__HostDiskMappingPartitionOption::soap_default(NULL); }
	virtual ~ns1__HostDiskMappingPartitionOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDiskMappingOption
#define SOAP_TYPE_ns1__HostDiskMappingOption (2598)
/* ns1:HostDiskMappingOption */
class SOAP_CMAC ns1__HostDiskMappingOption : public ns1__DynamicData
{
public:
	std::vector<ns1__HostDiskMappingPartitionOption * >physicalPartition;	/* optional element of type ns1:HostDiskMappingPartitionOption */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2598; } /* = unique id SOAP_TYPE_ns1__HostDiskMappingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDiskMappingOption() { ns1__HostDiskMappingOption::soap_default(NULL); }
	virtual ~ns1__HostDiskMappingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualDeviceBackingInfo (2617)
/* ns1:VirtualDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualDeviceBackingInfo : public ns1__DynamicData
{
public:
	virtual int soap_type() const { return 2617; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceBackingInfo() { ns1__VirtualDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConnectInfo
#define SOAP_TYPE_ns1__VirtualDeviceConnectInfo (2623)
/* ns1:VirtualDeviceConnectInfo */
class SOAP_CMAC ns1__VirtualDeviceConnectInfo : public ns1__DynamicData
{
public:
	bool startConnected;	/* required element of type xsd:boolean */
	bool allowGuestControl;	/* required element of type xsd:boolean */
	bool connected;	/* required element of type xsd:boolean */
	std::string *status;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2623; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConnectInfo() { ns1__VirtualDeviceConnectInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDevice
#define SOAP_TYPE_ns1__VirtualDevice (2624)
/* ns1:VirtualDevice */
class SOAP_CMAC ns1__VirtualDevice : public ns1__DynamicData
{
public:
	int key;	/* required element of type xsd:int */
	ns1__Description *deviceInfo;	/* optional element of type ns1:Description */
	ns1__VirtualDeviceBackingInfo *backing;	/* optional element of type ns1:VirtualDeviceBackingInfo */
	ns1__VirtualDeviceConnectInfo *connectable;	/* optional element of type ns1:VirtualDeviceConnectInfo */
	int *controllerKey;	/* optional element of type xsd:int */
	int *unitNumber;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2624; } /* = unique id SOAP_TYPE_ns1__VirtualDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDevice() { ns1__VirtualDevice::soap_default(NULL); }
	virtual ~ns1__VirtualDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualDeviceBackingOption (2626)
/* ns1:VirtualDeviceBackingOption */
class SOAP_CMAC ns1__VirtualDeviceBackingOption : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2626; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceBackingOption() { ns1__VirtualDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConnectOption
#define SOAP_TYPE_ns1__VirtualDeviceConnectOption (2633)
/* ns1:VirtualDeviceConnectOption */
class SOAP_CMAC ns1__VirtualDeviceConnectOption : public ns1__DynamicData
{
public:
	ns1__BoolOption *startConnected;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *allowGuestControl;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2633; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConnectOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConnectOption() { ns1__VirtualDeviceConnectOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConnectOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceOption
#define SOAP_TYPE_ns1__VirtualDeviceOption (2634)
/* ns1:VirtualDeviceOption */
class SOAP_CMAC ns1__VirtualDeviceOption : public ns1__DynamicData
{
public:
	std::string type;	/* required element of type xsd:string */
	ns1__VirtualDeviceConnectOption *connectOption;	/* optional element of type ns1:VirtualDeviceConnectOption */
	std::string *controllerType;	/* optional element of type xsd:string */
	ns1__BoolOption *autoAssignController;	/* optional element of type ns1:BoolOption */
	std::vector<ns1__VirtualDeviceBackingOption * >backingOption;	/* optional element of type ns1:VirtualDeviceBackingOption */
	int *defaultBackingOptionIndex;	/* optional element of type xsd:int */
	std::vector<std::string >licensingLimit;	/* optional element of type xsd:string */
	bool deprecated;	/* required element of type xsd:boolean */
	bool plugAndPlay;	/* required element of type xsd:boolean */
	bool *hotRemoveSupported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2634; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceOption() { ns1__VirtualDeviceOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceConfigSpec
#define SOAP_TYPE_ns1__VirtualDeviceConfigSpec (2636)
/* ns1:VirtualDeviceConfigSpec */
class SOAP_CMAC ns1__VirtualDeviceConfigSpec : public ns1__DynamicData
{
public:
	enum ns1__VirtualDeviceConfigSpecOperation *operation;	/* optional element of type ns1:VirtualDeviceConfigSpecOperation */
	enum ns1__VirtualDeviceConfigSpecFileOperation *fileOperation;	/* optional element of type ns1:VirtualDeviceConfigSpecFileOperation */
	ns1__VirtualDevice *device;	/* required element of type ns1:VirtualDevice */
public:
	virtual int soap_type() const { return 2636; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceConfigSpec() { ns1__VirtualDeviceConfigSpec::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCommunication
#define SOAP_TYPE_ns1__HostCommunication (45)
/* ns1:HostCommunication */
class SOAP_CMAC ns1__HostCommunication : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns1__HostCommunication */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCommunication() { ns1__HostCommunication::soap_default(NULL); }
	virtual ~ns1__HostCommunication() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidArgument
#define SOAP_TYPE_ns1__InvalidArgument (48)
/* ns1:InvalidArgument */
class SOAP_CMAC ns1__InvalidArgument : public ns1__RuntimeFault
{
public:
	std::string *invalidProperty;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns1__InvalidArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidArgument() { ns1__InvalidArgument::soap_default(NULL); }
	virtual ~ns1__InvalidArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidRequest
#define SOAP_TYPE_ns1__InvalidRequest (49)
/* ns1:InvalidRequest */
class SOAP_CMAC ns1__InvalidRequest : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns1__InvalidRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidRequest() { ns1__InvalidRequest::soap_default(NULL); }
	virtual ~ns1__InvalidRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ManagedObjectNotFound
#define SOAP_TYPE_ns1__ManagedObjectNotFound (51)
/* ns1:ManagedObjectNotFound */
class SOAP_CMAC ns1__ManagedObjectNotFound : public ns1__RuntimeFault
{
public:
	ns1__ManagedObjectReference *obj;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns1__ManagedObjectNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ManagedObjectNotFound() { ns1__ManagedObjectNotFound::soap_default(NULL); }
	virtual ~ns1__ManagedObjectNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotEnoughLicenses
#define SOAP_TYPE_ns1__NotEnoughLicenses (53)
/* ns1:NotEnoughLicenses */
class SOAP_CMAC ns1__NotEnoughLicenses : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns1__NotEnoughLicenses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotEnoughLicenses() { ns1__NotEnoughLicenses::soap_default(NULL); }
	virtual ~ns1__NotEnoughLicenses() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotImplemented
#define SOAP_TYPE_ns1__NotImplemented (54)
/* ns1:NotImplemented */
class SOAP_CMAC ns1__NotImplemented : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns1__NotImplemented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotImplemented() { ns1__NotImplemented::soap_default(NULL); }
	virtual ~ns1__NotImplemented() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupported
#define SOAP_TYPE_ns1__NotSupported (55)
/* ns1:NotSupported */
class SOAP_CMAC ns1__NotSupported : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns1__NotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupported() { ns1__NotSupported::soap_default(NULL); }
	virtual ~ns1__NotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RequestCanceled
#define SOAP_TYPE_ns1__RequestCanceled (56)
/* ns1:RequestCanceled */
class SOAP_CMAC ns1__RequestCanceled : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns1__RequestCanceled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RequestCanceled() { ns1__RequestCanceled::soap_default(NULL); }
	virtual ~ns1__RequestCanceled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecurityError
#define SOAP_TYPE_ns1__SecurityError (57)
/* ns1:SecurityError */
class SOAP_CMAC ns1__SecurityError : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns1__SecurityError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecurityError() { ns1__SecurityError::soap_default(NULL); }
	virtual ~ns1__SecurityError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SystemError
#define SOAP_TYPE_ns1__SystemError (58)
/* ns1:SystemError */
class SOAP_CMAC ns1__SystemError : public ns1__RuntimeFault
{
public:
	std::string reason;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns1__SystemError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SystemError() { ns1__SystemError::soap_default(NULL); }
	virtual ~ns1__SystemError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnexpectedFault
#define SOAP_TYPE_ns1__UnexpectedFault (59)
/* ns1:UnexpectedFault */
class SOAP_CMAC ns1__UnexpectedFault : public ns1__RuntimeFault
{
public:
	std::string faultName;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns1__UnexpectedFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnexpectedFault() { ns1__UnexpectedFault::soap_default(NULL); }
	virtual ~ns1__UnexpectedFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TraversalSpec
#define SOAP_TYPE_ns1__TraversalSpec (82)
/* ns1:TraversalSpec */
class SOAP_CMAC ns1__TraversalSpec : public ns1__SelectionSpec
{
public:
	std::string type;	/* required element of type xsd:string */
	std::string path;	/* required element of type xsd:string */
	bool *skip;	/* optional element of type xsd:boolean */
	std::vector<ns1__SelectionSpec * >selectSet;	/* optional element of type ns1:SelectionSpec */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns1__TraversalSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TraversalSpec() { ns1__TraversalSpec::soap_default(NULL); }
	virtual ~ns1__TraversalSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BoolPolicy
#define SOAP_TYPE_ns1__BoolPolicy (586)
/* ns1:BoolPolicy */
class SOAP_CMAC ns1__BoolPolicy : public ns1__InheritablePolicy
{
public:
	bool *value;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_ns1__BoolPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BoolPolicy() { ns1__BoolPolicy::soap_default(NULL); }
	virtual ~ns1__BoolPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterComputeResourceSummary
#define SOAP_TYPE_ns1__ClusterComputeResourceSummary (588)
/* ns1:ClusterComputeResourceSummary */
class SOAP_CMAC ns1__ClusterComputeResourceSummary : public ns1__ComputeResourceSummary
{
public:
	int currentFailoverLevel;	/* required element of type xsd:int */
	ns1__ClusterDasAdmissionControlInfo *admissionControlInfo;	/* optional element of type ns1:ClusterDasAdmissionControlInfo */
	int numVmotions;	/* required element of type xsd:int */
	int *targetBalance;	/* optional element of type xsd:int */
	int *currentBalance;	/* optional element of type xsd:int */
	std::string *currentEVCModeKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_ns1__ClusterComputeResourceSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterComputeResourceSummary() { ns1__ClusterComputeResourceSummary::soap_default(NULL); }
	virtual ~ns1__ClusterComputeResourceSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldStringValue
#define SOAP_TYPE_ns1__CustomFieldStringValue (596)
/* ns1:CustomFieldStringValue */
class SOAP_CMAC ns1__CustomFieldStringValue : public ns1__CustomFieldValue
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_ns1__CustomFieldStringValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldStringValue() { ns1__CustomFieldStringValue::soap_default(NULL); }
	virtual ~ns1__CustomFieldStringValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSNameArrayUplinkPortPolicy
#define SOAP_TYPE_ns1__DVSNameArrayUplinkPortPolicy (619)
/* ns1:DVSNameArrayUplinkPortPolicy */
class SOAP_CMAC ns1__DVSNameArrayUplinkPortPolicy : public ns1__DVSUplinkPortPolicy
{
public:
	std::vector<std::string >uplinkPortName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_ns1__DVSNameArrayUplinkPortPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSNameArrayUplinkPortPolicy() { ns1__DVSNameArrayUplinkPortPolicy::soap_default(NULL); }
	virtual ~ns1__DVSNameArrayUplinkPortPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ElementDescription
#define SOAP_TYPE_ns1__ElementDescription (625)
/* ns1:ElementDescription */
class SOAP_CMAC ns1__ElementDescription : public ns1__Description
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_ns1__ElementDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ElementDescription() { ns1__ElementDescription::soap_default(NULL); }
	virtual ~ns1__ElementDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendedDescription
#define SOAP_TYPE_ns1__ExtendedDescription (629)
/* ns1:ExtendedDescription */
class SOAP_CMAC ns1__ExtendedDescription : public ns1__Description
{
public:
	std::string messageCatalogKeyPrefix;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >messageArg;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_ns1__ExtendedDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendedDescription() { ns1__ExtendedDescription::soap_default(NULL); }
	virtual ~ns1__ExtendedDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IntPolicy
#define SOAP_TYPE_ns1__IntPolicy (661)
/* ns1:IntPolicy */
class SOAP_CMAC ns1__IntPolicy : public ns1__InheritablePolicy
{
public:
	int *value;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_ns1__IntPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IntPolicy() { ns1__IntPolicy::soap_default(NULL); }
	virtual ~ns1__IntPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseServerSource
#define SOAP_TYPE_ns1__LicenseServerSource (667)
/* ns1:LicenseServerSource */
class SOAP_CMAC ns1__LicenseServerSource : public ns1__LicenseSource
{
public:
	std::string licenseServer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_ns1__LicenseServerSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseServerSource() { ns1__LicenseServerSource::soap_default(NULL); }
	virtual ~ns1__LicenseServerSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalLicenseSource
#define SOAP_TYPE_ns1__LocalLicenseSource (668)
/* ns1:LocalLicenseSource */
class SOAP_CMAC ns1__LocalLicenseSource : public ns1__LicenseSource
{
public:
	std::string licenseKeys;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_ns1__LocalLicenseSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalLicenseSource() { ns1__LocalLicenseSource::soap_default(NULL); }
	virtual ~ns1__LocalLicenseSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EvaluationLicenseSource
#define SOAP_TYPE_ns1__EvaluationLicenseSource (669)
/* ns1:EvaluationLicenseSource */
class SOAP_CMAC ns1__EvaluationLicenseSource : public ns1__LicenseSource
{
public:
	LONG64 *remainingHours;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_ns1__EvaluationLicenseSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EvaluationLicenseSource() { ns1__EvaluationLicenseSource::soap_default(NULL); }
	virtual ~ns1__EvaluationLicenseSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LongPolicy
#define SOAP_TYPE_ns1__LongPolicy (683)
/* ns1:LongPolicy */
class SOAP_CMAC ns1__LongPolicy : public ns1__InheritablePolicy
{
public:
	LONG64 *value;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_ns1__LongPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LongPolicy() { ns1__LongPolicy::soap_default(NULL); }
	virtual ~ns1__LongPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodDescription
#define SOAP_TYPE_ns1__MethodDescription (684)
/* ns1:MethodDescription */
class SOAP_CMAC ns1__MethodDescription : public ns1__Description
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_ns1__MethodDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodDescription() { ns1__MethodDescription::soap_default(NULL); }
	virtual ~ns1__MethodDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfValidateHostParams
#define SOAP_TYPE_ns1__OvfValidateHostParams (691)
/* ns1:OvfValidateHostParams */
class SOAP_CMAC ns1__OvfValidateHostParams : public ns1__OvfManagerCommonParams
{
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_ns1__OvfValidateHostParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfValidateHostParams() { ns1__OvfValidateHostParams::soap_default(NULL); }
	virtual ~ns1__OvfValidateHostParams() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfParseDescriptorParams
#define SOAP_TYPE_ns1__OvfParseDescriptorParams (693)
/* ns1:OvfParseDescriptorParams */
class SOAP_CMAC ns1__OvfParseDescriptorParams : public ns1__OvfManagerCommonParams
{
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_ns1__OvfParseDescriptorParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfParseDescriptorParams() { ns1__OvfParseDescriptorParams::soap_default(NULL); }
	virtual ~ns1__OvfParseDescriptorParams() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfCreateImportSpecParams
#define SOAP_TYPE_ns1__OvfCreateImportSpecParams (697)
/* ns1:OvfCreateImportSpecParams */
class SOAP_CMAC ns1__OvfCreateImportSpecParams : public ns1__OvfManagerCommonParams
{
public:
	std::string entityName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *hostSystem;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__OvfNetworkMapping * >networkMapping;	/* optional element of type ns1:OvfNetworkMapping */
	std::string *ipAllocationPolicy;	/* optional element of type xsd:string */
	std::string *ipProtocol;	/* optional element of type xsd:string */
	std::vector<ns1__KeyValue * >propertyMapping;	/* optional element of type ns1:KeyValue */
	std::vector<ns1__OvfResourceMap * >resourceMapping;	/* optional element of type ns1:OvfResourceMap */
	std::string *diskProvisioning;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_ns1__OvfCreateImportSpecParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfCreateImportSpecParams() { ns1__OvfCreateImportSpecParams::soap_default(NULL); }
	virtual ~ns1__OvfCreateImportSpecParams() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfMetricIntSeries
#define SOAP_TYPE_ns1__PerfMetricIntSeries (722)
/* ns1:PerfMetricIntSeries */
class SOAP_CMAC ns1__PerfMetricIntSeries : public ns1__PerfMetricSeries
{
public:
	std::vector<LONG64 >value;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_ns1__PerfMetricIntSeries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfMetricIntSeries() { ns1__PerfMetricIntSeries::soap_default(NULL); }
	virtual ~ns1__PerfMetricIntSeries() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfMetricSeriesCSV
#define SOAP_TYPE_ns1__PerfMetricSeriesCSV (723)
/* ns1:PerfMetricSeriesCSV */
class SOAP_CMAC ns1__PerfMetricSeriesCSV : public ns1__PerfMetricSeries
{
public:
	std::string *value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_ns1__PerfMetricSeriesCSV */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfMetricSeriesCSV() { ns1__PerfMetricSeriesCSV::soap_default(NULL); }
	virtual ~ns1__PerfMetricSeriesCSV() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfEntityMetric
#define SOAP_TYPE_ns1__PerfEntityMetric (727)
/* ns1:PerfEntityMetric */
class SOAP_CMAC ns1__PerfEntityMetric : public ns1__PerfEntityMetricBase
{
public:
	std::vector<ns1__PerfSampleInfo * >sampleInfo;	/* optional element of type ns1:PerfSampleInfo */
	std::vector<ns1__PerfMetricSeries * >value;	/* optional element of type ns1:PerfMetricSeries */
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_ns1__PerfEntityMetric */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfEntityMetric() { ns1__PerfEntityMetric::soap_default(NULL); }
	virtual ~ns1__PerfEntityMetric() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PerfEntityMetricCSV
#define SOAP_TYPE_ns1__PerfEntityMetricCSV (728)
/* ns1:PerfEntityMetricCSV */
class SOAP_CMAC ns1__PerfEntityMetricCSV : public ns1__PerfEntityMetricBase
{
public:
	std::string sampleInfoCSV;	/* required element of type xsd:string */
	std::vector<ns1__PerfMetricSeriesCSV * >value;	/* optional element of type ns1:PerfMetricSeriesCSV */
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_ns1__PerfEntityMetricCSV */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PerfEntityMetricCSV() { ns1__PerfEntityMetricCSV::soap_default(NULL); }
	virtual ~ns1__PerfEntityMetricCSV() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PosixUserSearchResult
#define SOAP_TYPE_ns1__PosixUserSearchResult (732)
/* ns1:PosixUserSearchResult */
class SOAP_CMAC ns1__PosixUserSearchResult : public ns1__UserSearchResult
{
public:
	int id;	/* required element of type xsd:int */
	bool *shellAccess;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_ns1__PosixUserSearchResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PosixUserSearchResult() { ns1__PosixUserSearchResult::soap_default(NULL); }
	virtual ~ns1__PosixUserSearchResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StringPolicy
#define SOAP_TYPE_ns1__StringPolicy (762)
/* ns1:StringPolicy */
class SOAP_CMAC ns1__StringPolicy : public ns1__InheritablePolicy
{
public:
	std::string *value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE_ns1__StringPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StringPolicy() { ns1__StringPolicy::soap_default(NULL); }
	virtual ~ns1__StringPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskReasonSystem
#define SOAP_TYPE_ns1__TaskReasonSystem (774)
/* ns1:TaskReasonSystem */
class SOAP_CMAC ns1__TaskReasonSystem : public ns1__TaskReason
{
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_ns1__TaskReasonSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskReasonSystem() { ns1__TaskReasonSystem::soap_default(NULL); }
	virtual ~ns1__TaskReasonSystem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskReasonUser
#define SOAP_TYPE_ns1__TaskReasonUser (775)
/* ns1:TaskReasonUser */
class SOAP_CMAC ns1__TaskReasonUser : public ns1__TaskReason
{
public:
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE_ns1__TaskReasonUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskReasonUser() { ns1__TaskReasonUser::soap_default(NULL); }
	virtual ~ns1__TaskReasonUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskReasonAlarm
#define SOAP_TYPE_ns1__TaskReasonAlarm (776)
/* ns1:TaskReasonAlarm */
class SOAP_CMAC ns1__TaskReasonAlarm : public ns1__TaskReason
{
public:
	std::string alarmName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *alarm;	/* required element of type ns1:ManagedObjectReference */
	std::string entityName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE_ns1__TaskReasonAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskReasonAlarm() { ns1__TaskReasonAlarm::soap_default(NULL); }
	virtual ~ns1__TaskReasonAlarm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskReasonSchedule
#define SOAP_TYPE_ns1__TaskReasonSchedule (777)
/* ns1:TaskReasonSchedule */
class SOAP_CMAC ns1__TaskReasonSchedule : public ns1__TaskReason
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *scheduledTask;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE_ns1__TaskReasonSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskReasonSchedule() { ns1__TaskReasonSchedule::soap_default(NULL); }
	virtual ~ns1__TaskReasonSchedule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TypeDescription
#define SOAP_TYPE_ns1__TypeDescription (778)
/* ns1:TypeDescription */
class SOAP_CMAC ns1__TypeDescription : public ns1__Description
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_ns1__TypeDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TypeDescription() { ns1__TypeDescription::soap_default(NULL); }
	virtual ~ns1__TypeDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualAppSummary
#define SOAP_TYPE_ns1__VirtualAppSummary (785)
/* ns1:VirtualAppSummary */
class SOAP_CMAC ns1__VirtualAppSummary : public ns1__ResourcePoolSummary
{
public:
	ns1__VAppProductInfo *product;	/* optional element of type ns1:VAppProductInfo */
	enum ns1__VirtualAppVAppState *vAppState;	/* optional element of type ns1:VirtualAppVAppState */
	bool *suspended;	/* optional element of type xsd:boolean */
	bool *installBootRequired;	/* optional element of type xsd:boolean */
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE_ns1__VirtualAppSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualAppSummary() { ns1__VirtualAppSummary::soap_default(NULL); }
	virtual ~ns1__VirtualAppSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileBackedVirtualDiskSpec
#define SOAP_TYPE_ns1__FileBackedVirtualDiskSpec (789)
/* ns1:FileBackedVirtualDiskSpec */
class SOAP_CMAC ns1__FileBackedVirtualDiskSpec : public ns1__VirtualDiskSpec
{
public:
	LONG64 capacityKb;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE_ns1__FileBackedVirtualDiskSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileBackedVirtualDiskSpec() { ns1__FileBackedVirtualDiskSpec::soap_default(NULL); }
	virtual ~ns1__FileBackedVirtualDiskSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceBackedVirtualDiskSpec
#define SOAP_TYPE_ns1__DeviceBackedVirtualDiskSpec (790)
/* ns1:DeviceBackedVirtualDiskSpec */
class SOAP_CMAC ns1__DeviceBackedVirtualDiskSpec : public ns1__VirtualDiskSpec
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE_ns1__DeviceBackedVirtualDiskSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceBackedVirtualDiskSpec() { ns1__DeviceBackedVirtualDiskSpec::soap_default(NULL); }
	virtual ~ns1__DeviceBackedVirtualDiskSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodAction
#define SOAP_TYPE_ns1__MethodAction (801)
/* ns1:MethodAction */
class SOAP_CMAC ns1__MethodAction : public ns1__Action
{
public:
	std::string name;	/* required element of type xsd:string */
	std::vector<ns1__MethodActionArgument * >argument;	/* optional element of type ns1:MethodActionArgument */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE_ns1__MethodAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodAction() { ns1__MethodAction::soap_default(NULL); }
	virtual ~ns1__MethodAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SendEmailAction
#define SOAP_TYPE_ns1__SendEmailAction (802)
/* ns1:SendEmailAction */
class SOAP_CMAC ns1__SendEmailAction : public ns1__Action
{
public:
	std::string toList;	/* required element of type xsd:string */
	std::string ccList;	/* required element of type xsd:string */
	std::string subject;	/* required element of type xsd:string */
	std::string body;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE_ns1__SendEmailAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SendEmailAction() { ns1__SendEmailAction::soap_default(NULL); }
	virtual ~ns1__SendEmailAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SendSNMPAction
#define SOAP_TYPE_ns1__SendSNMPAction (803)
/* ns1:SendSNMPAction */
class SOAP_CMAC ns1__SendSNMPAction : public ns1__Action
{
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE_ns1__SendSNMPAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SendSNMPAction() { ns1__SendSNMPAction::soap_default(NULL); }
	virtual ~ns1__SendSNMPAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RunScriptAction
#define SOAP_TYPE_ns1__RunScriptAction (804)
/* ns1:RunScriptAction */
class SOAP_CMAC ns1__RunScriptAction : public ns1__Action
{
public:
	std::string script;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE_ns1__RunScriptAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RunScriptAction() { ns1__RunScriptAction::soap_default(NULL); }
	virtual ~ns1__RunScriptAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateTaskAction
#define SOAP_TYPE_ns1__CreateTaskAction (805)
/* ns1:CreateTaskAction */
class SOAP_CMAC ns1__CreateTaskAction : public ns1__Action
{
public:
	std::string taskTypeId;	/* required element of type xsd:string */
	bool cancelable;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE_ns1__CreateTaskAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateTaskAction() { ns1__CreateTaskAction::soap_default(NULL); }
	virtual ~ns1__CreateTaskAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmTriggeringAction
#define SOAP_TYPE_ns1__AlarmTriggeringAction (810)
/* ns1:AlarmTriggeringAction */
class SOAP_CMAC ns1__AlarmTriggeringAction : public ns1__AlarmAction
{
public:
	ns1__Action *action;	/* required element of type ns1:Action */
	std::vector<ns1__AlarmTriggeringActionTransitionSpec * >transitionSpecs;	/* optional element of type ns1:AlarmTriggeringActionTransitionSpec */
	bool green2yellow;	/* required element of type xsd:boolean */
	bool yellow2red;	/* required element of type xsd:boolean */
	bool red2yellow;	/* required element of type xsd:boolean */
	bool yellow2green;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE_ns1__AlarmTriggeringAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmTriggeringAction() { ns1__AlarmTriggeringAction::soap_default(NULL); }
	virtual ~ns1__AlarmTriggeringAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GroupAlarmAction
#define SOAP_TYPE_ns1__GroupAlarmAction (811)
/* ns1:GroupAlarmAction */
class SOAP_CMAC ns1__GroupAlarmAction : public ns1__AlarmAction
{
public:
	std::vector<ns1__AlarmAction * >action;	/* required element of type ns1:AlarmAction */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE_ns1__GroupAlarmAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GroupAlarmAction() { ns1__GroupAlarmAction::soap_default(NULL); }
	virtual ~ns1__GroupAlarmAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AndAlarmExpression
#define SOAP_TYPE_ns1__AndAlarmExpression (815)
/* ns1:AndAlarmExpression */
class SOAP_CMAC ns1__AndAlarmExpression : public ns1__AlarmExpression
{
public:
	std::vector<ns1__AlarmExpression * >expression;	/* required element of type ns1:AlarmExpression */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE_ns1__AndAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AndAlarmExpression() { ns1__AndAlarmExpression::soap_default(NULL); }
	virtual ~ns1__AndAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OrAlarmExpression
#define SOAP_TYPE_ns1__OrAlarmExpression (816)
/* ns1:OrAlarmExpression */
class SOAP_CMAC ns1__OrAlarmExpression : public ns1__AlarmExpression
{
public:
	std::vector<ns1__AlarmExpression * >expression;	/* required element of type ns1:AlarmExpression */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE_ns1__OrAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OrAlarmExpression() { ns1__OrAlarmExpression::soap_default(NULL); }
	virtual ~ns1__OrAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StateAlarmExpression
#define SOAP_TYPE_ns1__StateAlarmExpression (817)
/* ns1:StateAlarmExpression */
class SOAP_CMAC ns1__StateAlarmExpression : public ns1__AlarmExpression
{
public:
	enum ns1__StateAlarmOperator operator_;	/* required element of type ns1:StateAlarmOperator */
	std::string type;	/* required element of type xsd:string */
	std::string statePath;	/* required element of type xsd:string */
	std::string *yellow;	/* optional element of type xsd:string */
	std::string *red;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE_ns1__StateAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StateAlarmExpression() { ns1__StateAlarmExpression::soap_default(NULL); }
	virtual ~ns1__StateAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventAlarmExpression
#define SOAP_TYPE_ns1__EventAlarmExpression (820)
/* ns1:EventAlarmExpression */
class SOAP_CMAC ns1__EventAlarmExpression : public ns1__AlarmExpression
{
public:
	std::vector<ns1__EventAlarmExpressionComparison * >comparisons;	/* optional element of type ns1:EventAlarmExpressionComparison */
	std::string eventType;	/* required element of type xsd:string */
	std::string *eventTypeId;	/* optional element of type xsd:string */
	std::string *objectType;	/* optional element of type xsd:string */
	enum ns1__ManagedEntityStatus *status;	/* optional element of type ns1:ManagedEntityStatus */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE_ns1__EventAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventAlarmExpression() { ns1__EventAlarmExpression::soap_default(NULL); }
	virtual ~ns1__EventAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MetricAlarmExpression
#define SOAP_TYPE_ns1__MetricAlarmExpression (821)
/* ns1:MetricAlarmExpression */
class SOAP_CMAC ns1__MetricAlarmExpression : public ns1__AlarmExpression
{
public:
	enum ns1__MetricAlarmOperator operator_;	/* required element of type ns1:MetricAlarmOperator */
	std::string type;	/* required element of type xsd:string */
	ns1__PerfMetricId *metric;	/* required element of type ns1:PerfMetricId */
	int *yellow;	/* optional element of type xsd:int */
	int *yellowInterval;	/* optional element of type xsd:int */
	int *red;	/* optional element of type xsd:int */
	int *redInterval;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_ns1__MetricAlarmExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MetricAlarmExpression() { ns1__MetricAlarmExpression::soap_default(NULL); }
	virtual ~ns1__MetricAlarmExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmInfo
#define SOAP_TYPE_ns1__AlarmInfo (822)
/* ns1:AlarmInfo */
class SOAP_CMAC ns1__AlarmInfo : public ns1__AlarmSpec
{
public:
	std::string key;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *alarm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	time_t lastModifiedTime;	/* required element of type xsd:dateTime */
	std::string lastModifiedUser;	/* required element of type xsd:string */
	int creationEventId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE_ns1__AlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmInfo() { ns1__AlarmInfo::soap_default(NULL); }
	virtual ~ns1__AlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterAffinityRuleSpec
#define SOAP_TYPE_ns1__ClusterAffinityRuleSpec (831)
/* ns1:ClusterAffinityRuleSpec */
class SOAP_CMAC ns1__ClusterAffinityRuleSpec : public ns1__ClusterRuleInfo
{
public:
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE_ns1__ClusterAffinityRuleSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterAffinityRuleSpec() { ns1__ClusterAffinityRuleSpec::soap_default(NULL); }
	virtual ~ns1__ClusterAffinityRuleSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterAntiAffinityRuleSpec
#define SOAP_TYPE_ns1__ClusterAntiAffinityRuleSpec (832)
/* ns1:ClusterAntiAffinityRuleSpec */
class SOAP_CMAC ns1__ClusterAntiAffinityRuleSpec : public ns1__ClusterRuleInfo
{
public:
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE_ns1__ClusterAntiAffinityRuleSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterAntiAffinityRuleSpec() { ns1__ClusterAntiAffinityRuleSpec::soap_default(NULL); }
	virtual ~ns1__ClusterAntiAffinityRuleSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterConfigInfoEx
#define SOAP_TYPE_ns1__ClusterConfigInfoEx (839)
/* ns1:ClusterConfigInfoEx */
class SOAP_CMAC ns1__ClusterConfigInfoEx : public ns1__ComputeResourceConfigInfo
{
public:
	ns1__ClusterDasConfigInfo *dasConfig;	/* required element of type ns1:ClusterDasConfigInfo */
	std::vector<ns1__ClusterDasVmConfigInfo * >dasVmConfig;	/* optional element of type ns1:ClusterDasVmConfigInfo */
	ns1__ClusterDrsConfigInfo *drsConfig;	/* required element of type ns1:ClusterDrsConfigInfo */
	std::vector<ns1__ClusterDrsVmConfigInfo * >drsVmConfig;	/* optional element of type ns1:ClusterDrsVmConfigInfo */
	std::vector<ns1__ClusterRuleInfo * >rule;	/* optional element of type ns1:ClusterRuleInfo */
	ns1__ClusterDpmConfigInfo *dpmConfigInfo;	/* optional element of type ns1:ClusterDpmConfigInfo */
	std::vector<ns1__ClusterDpmHostConfigInfo * >dpmHostConfig;	/* optional element of type ns1:ClusterDpmHostConfigInfo */
	std::vector<ns1__ClusterGroupInfo * >group;	/* optional element of type ns1:ClusterGroupInfo */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_ns1__ClusterConfigInfoEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterConfigInfoEx() { ns1__ClusterConfigInfoEx::soap_default(NULL); }
	virtual ~ns1__ClusterConfigInfoEx() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasVmConfigSpec
#define SOAP_TYPE_ns1__ClusterDasVmConfigSpec (844)
/* ns1:ClusterDasVmConfigSpec */
class SOAP_CMAC ns1__ClusterDasVmConfigSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__ClusterDasVmConfigInfo *info;	/* optional element of type ns1:ClusterDasVmConfigInfo */
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE_ns1__ClusterDasVmConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasVmConfigSpec() { ns1__ClusterDasVmConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterDasVmConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDrsVmConfigSpec
#define SOAP_TYPE_ns1__ClusterDrsVmConfigSpec (846)
/* ns1:ClusterDrsVmConfigSpec */
class SOAP_CMAC ns1__ClusterDrsVmConfigSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__ClusterDrsVmConfigInfo *info;	/* optional element of type ns1:ClusterDrsVmConfigInfo */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_ns1__ClusterDrsVmConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDrsVmConfigSpec() { ns1__ClusterDrsVmConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterDrsVmConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterRuleSpec
#define SOAP_TYPE_ns1__ClusterRuleSpec (848)
/* ns1:ClusterRuleSpec */
class SOAP_CMAC ns1__ClusterRuleSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__ClusterRuleInfo *info;	/* optional element of type ns1:ClusterRuleInfo */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE_ns1__ClusterRuleSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterRuleSpec() { ns1__ClusterRuleSpec::soap_default(NULL); }
	virtual ~ns1__ClusterRuleSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterConfigSpecEx
#define SOAP_TYPE_ns1__ClusterConfigSpecEx (850)
/* ns1:ClusterConfigSpecEx */
class SOAP_CMAC ns1__ClusterConfigSpecEx : public ns1__ComputeResourceConfigSpec
{
public:
	ns1__ClusterDasConfigInfo *dasConfig;	/* optional element of type ns1:ClusterDasConfigInfo */
	std::vector<ns1__ClusterDasVmConfigSpec * >dasVmConfigSpec;	/* optional element of type ns1:ClusterDasVmConfigSpec */
	ns1__ClusterDrsConfigInfo *drsConfig;	/* optional element of type ns1:ClusterDrsConfigInfo */
	std::vector<ns1__ClusterDrsVmConfigSpec * >drsVmConfigSpec;	/* optional element of type ns1:ClusterDrsVmConfigSpec */
	std::vector<ns1__ClusterRuleSpec * >rulesSpec;	/* optional element of type ns1:ClusterRuleSpec */
	ns1__ClusterDpmConfigInfo *dpmConfig;	/* optional element of type ns1:ClusterDpmConfigInfo */
	std::vector<ns1__ClusterDpmHostConfigSpec * >dpmHostConfigSpec;	/* optional element of type ns1:ClusterDpmHostConfigSpec */
	std::vector<ns1__ClusterGroupSpec * >groupSpec;	/* optional element of type ns1:ClusterGroupSpec */
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE_ns1__ClusterConfigSpecEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterConfigSpecEx() { ns1__ClusterConfigSpecEx::soap_default(NULL); }
	virtual ~ns1__ClusterConfigSpecEx() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDpmHostConfigSpec
#define SOAP_TYPE_ns1__ClusterDpmHostConfigSpec (851)
/* ns1:ClusterDpmHostConfigSpec */
class SOAP_CMAC ns1__ClusterDpmHostConfigSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__ClusterDpmHostConfigInfo *info;	/* optional element of type ns1:ClusterDpmHostConfigInfo */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_ns1__ClusterDpmHostConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDpmHostConfigSpec() { ns1__ClusterDpmHostConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterDpmHostConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterGroupSpec
#define SOAP_TYPE_ns1__ClusterGroupSpec (853)
/* ns1:ClusterGroupSpec */
class SOAP_CMAC ns1__ClusterGroupSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__ClusterGroupInfo *info;	/* optional element of type ns1:ClusterGroupInfo */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_ns1__ClusterGroupSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterGroupSpec() { ns1__ClusterGroupSpec::soap_default(NULL); }
	virtual ~ns1__ClusterGroupSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasAamHostInfo
#define SOAP_TYPE_ns1__ClusterDasAamHostInfo (855)
/* ns1:ClusterDasAamHostInfo */
class SOAP_CMAC ns1__ClusterDasAamHostInfo : public ns1__ClusterDasHostInfo
{
public:
	std::vector<ns1__ClusterDasAamNodeState * >hostDasState;	/* optional element of type ns1:ClusterDasAamNodeState */
	std::vector<std::string >primaryHosts;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE_ns1__ClusterDasAamHostInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasAamHostInfo() { ns1__ClusterDasAamHostInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasAamHostInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo
#define SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo (865)
/* ns1:ClusterDasFailoverLevelAdvancedRuntimeInfo */
class SOAP_CMAC ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo : public ns1__ClusterDasAdvancedRuntimeInfo
{
public:
	ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo *slotInfo;	/* required element of type ns1:ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo */
	int totalSlots;	/* required element of type xsd:int */
	int usedSlots;	/* required element of type xsd:int */
	int unreservedSlots;	/* required element of type xsd:int */
	int totalVms;	/* required element of type xsd:int */
	int totalHosts;	/* required element of type xsd:int */
	int totalGoodHosts;	/* required element of type xsd:int */
	std::vector<ns1__ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots * >hostSlots;	/* optional element of type ns1:ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE_ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo() { ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo::soap_default(NULL); }
	virtual ~ns1__ClusterDasFailoverLevelAdvancedRuntimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfo
#define SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfo (881)
/* ns1:ClusterFailoverHostAdmissionControlInfo */
class SOAP_CMAC ns1__ClusterFailoverHostAdmissionControlInfo : public ns1__ClusterDasAdmissionControlInfo
{
public:
	std::vector<ns1__ClusterFailoverHostAdmissionControlInfoHostStatus * >hostStatus;	/* optional element of type ns1:ClusterFailoverHostAdmissionControlInfoHostStatus */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverHostAdmissionControlInfo() { ns1__ClusterFailoverHostAdmissionControlInfo::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverHostAdmissionControlInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlPolicy
#define SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlPolicy (882)
/* ns1:ClusterFailoverHostAdmissionControlPolicy */
class SOAP_CMAC ns1__ClusterFailoverHostAdmissionControlPolicy : public ns1__ClusterDasAdmissionControlPolicy
{
public:
	std::vector<ns1__ManagedObjectReference * >failoverHosts;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverHostAdmissionControlPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverHostAdmissionControlPolicy() { ns1__ClusterFailoverHostAdmissionControlPolicy::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverHostAdmissionControlPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlInfo
#define SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlInfo (883)
/* ns1:ClusterFailoverLevelAdmissionControlInfo */
class SOAP_CMAC ns1__ClusterFailoverLevelAdmissionControlInfo : public ns1__ClusterDasAdmissionControlInfo
{
public:
	int currentFailoverLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverLevelAdmissionControlInfo() { ns1__ClusterFailoverLevelAdmissionControlInfo::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverLevelAdmissionControlInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlPolicy
#define SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlPolicy (884)
/* ns1:ClusterFailoverLevelAdmissionControlPolicy */
class SOAP_CMAC ns1__ClusterFailoverLevelAdmissionControlPolicy : public ns1__ClusterDasAdmissionControlPolicy
{
public:
	int failoverLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 884; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverLevelAdmissionControlPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverLevelAdmissionControlPolicy() { ns1__ClusterFailoverLevelAdmissionControlPolicy::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverLevelAdmissionControlPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlInfo
#define SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlInfo (885)
/* ns1:ClusterFailoverResourcesAdmissionControlInfo */
class SOAP_CMAC ns1__ClusterFailoverResourcesAdmissionControlInfo : public ns1__ClusterDasAdmissionControlInfo
{
public:
	int currentCpuFailoverResourcesPercent;	/* required element of type xsd:int */
	int currentMemoryFailoverResourcesPercent;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 885; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverResourcesAdmissionControlInfo() { ns1__ClusterFailoverResourcesAdmissionControlInfo::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverResourcesAdmissionControlInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlPolicy
#define SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlPolicy (886)
/* ns1:ClusterFailoverResourcesAdmissionControlPolicy */
class SOAP_CMAC ns1__ClusterFailoverResourcesAdmissionControlPolicy : public ns1__ClusterDasAdmissionControlPolicy
{
public:
	int cpuFailoverResourcesPercent;	/* required element of type xsd:int */
	int memoryFailoverResourcesPercent;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 886; } /* = unique id SOAP_TYPE_ns1__ClusterFailoverResourcesAdmissionControlPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterFailoverResourcesAdmissionControlPolicy() { ns1__ClusterFailoverResourcesAdmissionControlPolicy::soap_default(NULL); }
	virtual ~ns1__ClusterFailoverResourcesAdmissionControlPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterHostGroup
#define SOAP_TYPE_ns1__ClusterHostGroup (889)
/* ns1:ClusterHostGroup */
class SOAP_CMAC ns1__ClusterHostGroup : public ns1__ClusterGroupInfo
{
public:
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 889; } /* = unique id SOAP_TYPE_ns1__ClusterHostGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterHostGroup() { ns1__ClusterHostGroup::soap_default(NULL); }
	virtual ~ns1__ClusterHostGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterHostPowerAction
#define SOAP_TYPE_ns1__ClusterHostPowerAction (890)
/* ns1:ClusterHostPowerAction */
class SOAP_CMAC ns1__ClusterHostPowerAction : public ns1__ClusterAction
{
public:
	enum ns1__HostPowerOperationType operationType;	/* required element of type ns1:HostPowerOperationType */
	int *powerConsumptionWatt;	/* optional element of type xsd:int */
	int *cpuCapacityMHz;	/* optional element of type xsd:int */
	int *memCapacityMB;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 890; } /* = unique id SOAP_TYPE_ns1__ClusterHostPowerAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterHostPowerAction() { ns1__ClusterHostPowerAction::soap_default(NULL); }
	virtual ~ns1__ClusterHostPowerAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterInitialPlacementAction
#define SOAP_TYPE_ns1__ClusterInitialPlacementAction (893)
/* ns1:ClusterInitialPlacementAction */
class SOAP_CMAC ns1__ClusterInitialPlacementAction : public ns1__ClusterAction
{
public:
	ns1__ManagedObjectReference *targetHost;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *pool;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE_ns1__ClusterInitialPlacementAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterInitialPlacementAction() { ns1__ClusterInitialPlacementAction::soap_default(NULL); }
	virtual ~ns1__ClusterInitialPlacementAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterMigrationAction
#define SOAP_TYPE_ns1__ClusterMigrationAction (894)
/* ns1:ClusterMigrationAction */
class SOAP_CMAC ns1__ClusterMigrationAction : public ns1__ClusterAction
{
public:
	ns1__ClusterDrsMigration *drsMigration;	/* optional element of type ns1:ClusterDrsMigration */
public:
	virtual int soap_type() const { return 894; } /* = unique id SOAP_TYPE_ns1__ClusterMigrationAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterMigrationAction() { ns1__ClusterMigrationAction::soap_default(NULL); }
	virtual ~ns1__ClusterMigrationAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterVmGroup
#define SOAP_TYPE_ns1__ClusterVmGroup (902)
/* ns1:ClusterVmGroup */
class SOAP_CMAC ns1__ClusterVmGroup : public ns1__ClusterGroupInfo
{
public:
	std::vector<ns1__ManagedObjectReference * >vm;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE_ns1__ClusterVmGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterVmGroup() { ns1__ClusterVmGroup::soap_default(NULL); }
	virtual ~ns1__ClusterVmGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterVmHostRuleInfo
#define SOAP_TYPE_ns1__ClusterVmHostRuleInfo (903)
/* ns1:ClusterVmHostRuleInfo */
class SOAP_CMAC ns1__ClusterVmHostRuleInfo : public ns1__ClusterRuleInfo
{
public:
	std::string *vmGroupName;	/* optional element of type xsd:string */
	std::string *affineHostGroupName;	/* optional element of type xsd:string */
	std::string *antiAffineHostGroupName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE_ns1__ClusterVmHostRuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterVmHostRuleInfo() { ns1__ClusterVmHostRuleInfo::soap_default(NULL); }
	virtual ~ns1__ClusterVmHostRuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSTrafficShapingPolicy
#define SOAP_TYPE_ns1__DVSTrafficShapingPolicy (908)
/* ns1:DVSTrafficShapingPolicy */
class SOAP_CMAC ns1__DVSTrafficShapingPolicy : public ns1__InheritablePolicy
{
public:
	ns1__BoolPolicy *enabled;	/* optional element of type ns1:BoolPolicy */
	ns1__LongPolicy *averageBandwidth;	/* optional element of type ns1:LongPolicy */
	ns1__LongPolicy *peakBandwidth;	/* optional element of type ns1:LongPolicy */
	ns1__LongPolicy *burstSize;	/* optional element of type ns1:LongPolicy */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE_ns1__DVSTrafficShapingPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSTrafficShapingPolicy() { ns1__DVSTrafficShapingPolicy::soap_default(NULL); }
	virtual ~ns1__DVSTrafficShapingPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSVendorSpecificConfig
#define SOAP_TYPE_ns1__DVSVendorSpecificConfig (909)
/* ns1:DVSVendorSpecificConfig */
class SOAP_CMAC ns1__DVSVendorSpecificConfig : public ns1__InheritablePolicy
{
public:
	std::vector<ns1__DistributedVirtualSwitchKeyedOpaqueBlob * >keyValue;	/* optional element of type ns1:DistributedVirtualSwitchKeyedOpaqueBlob */
public:
	virtual int soap_type() const { return 909; } /* = unique id SOAP_TYPE_ns1__DVSVendorSpecificConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSVendorSpecificConfig() { ns1__DVSVendorSpecificConfig::soap_default(NULL); }
	virtual ~ns1__DVSVendorSpecificConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostArrayFilter
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostArrayFilter (929)
/* ns1:DistributedVirtualSwitchManagerHostArrayFilter */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerHostArrayFilter : public ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec
{
public:
	std::vector<ns1__ManagedObjectReference * >host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 929; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostArrayFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerHostArrayFilter() { ns1__DistributedVirtualSwitchManagerHostArrayFilter::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerHostArrayFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainerFilter
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainerFilter (930)
/* ns1:DistributedVirtualSwitchManagerHostContainerFilter */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerHostContainerFilter : public ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec
{
public:
	ns1__DistributedVirtualSwitchManagerHostContainer *hostContainer;	/* required element of type ns1:DistributedVirtualSwitchManagerHostContainer */
public:
	virtual int soap_type() const { return 930; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostContainerFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerHostContainerFilter() { ns1__DistributedVirtualSwitchManagerHostContainerFilter::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerHostContainerFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter
#define SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter (931)
/* ns1:DistributedVirtualSwitchManagerHostDvsMembershipFilter */
class SOAP_CMAC ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter : public ns1__DistributedVirtualSwitchManagerHostDvsFilterSpec
{
public:
	ns1__ManagedObjectReference *distributedVirtualSwitch;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 931; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter() { ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchManagerHostDvsMembershipFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicBacking
#define SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicBacking (938)
/* ns1:DistributedVirtualSwitchHostMemberPnicBacking */
class SOAP_CMAC ns1__DistributedVirtualSwitchHostMemberPnicBacking : public ns1__DistributedVirtualSwitchHostMemberBacking
{
public:
	std::vector<ns1__DistributedVirtualSwitchHostMemberPnicSpec * >pnicSpec;	/* optional element of type ns1:DistributedVirtualSwitchHostMemberPnicSpec */
public:
	virtual int soap_type() const { return 938; } /* = unique id SOAP_TYPE_ns1__DistributedVirtualSwitchHostMemberPnicBacking */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DistributedVirtualSwitchHostMemberPnicBacking() { ns1__DistributedVirtualSwitchHostMemberPnicBacking::soap_default(NULL); }
	virtual ~ns1__DistributedVirtualSwitchHostMemberPnicBacking() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSFeatureCapability
#define SOAP_TYPE_ns1__VMwareDVSFeatureCapability (957)
/* ns1:VMwareDVSFeatureCapability */
class SOAP_CMAC ns1__VMwareDVSFeatureCapability : public ns1__DVSFeatureCapability
{
public:
	virtual int soap_type() const { return 957; } /* = unique id SOAP_TYPE_ns1__VMwareDVSFeatureCapability */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSFeatureCapability() { ns1__VMwareDVSFeatureCapability::soap_default(NULL); }
	virtual ~ns1__VMwareDVSFeatureCapability() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSConfigInfo
#define SOAP_TYPE_ns1__VMwareDVSConfigInfo (958)
/* ns1:VMwareDVSConfigInfo */
class SOAP_CMAC ns1__VMwareDVSConfigInfo : public ns1__DVSConfigInfo
{
public:
	std::vector<ns1__VMwareDVSPvlanMapEntry * >pvlanConfig;	/* optional element of type ns1:VMwareDVSPvlanMapEntry */
	int maxMtu;	/* required element of type xsd:int */
	ns1__LinkDiscoveryProtocolConfig *linkDiscoveryProtocolConfig;	/* optional element of type ns1:LinkDiscoveryProtocolConfig */
public:
	virtual int soap_type() const { return 958; } /* = unique id SOAP_TYPE_ns1__VMwareDVSConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSConfigInfo() { ns1__VMwareDVSConfigInfo::soap_default(NULL); }
	virtual ~ns1__VMwareDVSConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSConfigSpec
#define SOAP_TYPE_ns1__VMwareDVSConfigSpec (959)
/* ns1:VMwareDVSConfigSpec */
class SOAP_CMAC ns1__VMwareDVSConfigSpec : public ns1__DVSConfigSpec
{
public:
	std::vector<ns1__VMwareDVSPvlanConfigSpec * >pvlanConfigSpec;	/* optional element of type ns1:VMwareDVSPvlanConfigSpec */
	int *maxMtu;	/* optional element of type xsd:int */
	ns1__LinkDiscoveryProtocolConfig *linkDiscoveryProtocolConfig;	/* optional element of type ns1:LinkDiscoveryProtocolConfig */
public:
	virtual int soap_type() const { return 959; } /* = unique id SOAP_TYPE_ns1__VMwareDVSConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSConfigSpec() { ns1__VMwareDVSConfigSpec::soap_default(NULL); }
	virtual ~ns1__VMwareDVSConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareUplinkPortOrderPolicy
#define SOAP_TYPE_ns1__VMwareUplinkPortOrderPolicy (960)
/* ns1:VMwareUplinkPortOrderPolicy */
class SOAP_CMAC ns1__VMwareUplinkPortOrderPolicy : public ns1__InheritablePolicy
{
public:
	std::vector<std::string >activeUplinkPort;	/* optional element of type xsd:string */
	std::vector<std::string >standbyUplinkPort;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 960; } /* = unique id SOAP_TYPE_ns1__VMwareUplinkPortOrderPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareUplinkPortOrderPolicy() { ns1__VMwareUplinkPortOrderPolicy::soap_default(NULL); }
	virtual ~ns1__VMwareUplinkPortOrderPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSFailureCriteria
#define SOAP_TYPE_ns1__DVSFailureCriteria (961)
/* ns1:DVSFailureCriteria */
class SOAP_CMAC ns1__DVSFailureCriteria : public ns1__InheritablePolicy
{
public:
	ns1__StringPolicy *checkSpeed;	/* optional element of type ns1:StringPolicy */
	ns1__IntPolicy *speed;	/* optional element of type ns1:IntPolicy */
	ns1__BoolPolicy *checkDuplex;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *fullDuplex;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *checkErrorPercent;	/* optional element of type ns1:BoolPolicy */
	ns1__IntPolicy *percentage;	/* optional element of type ns1:IntPolicy */
	ns1__BoolPolicy *checkBeacon;	/* optional element of type ns1:BoolPolicy */
public:
	virtual int soap_type() const { return 961; } /* = unique id SOAP_TYPE_ns1__DVSFailureCriteria */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSFailureCriteria() { ns1__DVSFailureCriteria::soap_default(NULL); }
	virtual ~ns1__DVSFailureCriteria() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareUplinkPortTeamingPolicy
#define SOAP_TYPE_ns1__VmwareUplinkPortTeamingPolicy (962)
/* ns1:VmwareUplinkPortTeamingPolicy */
class SOAP_CMAC ns1__VmwareUplinkPortTeamingPolicy : public ns1__InheritablePolicy
{
public:
	ns1__StringPolicy *policy;	/* optional element of type ns1:StringPolicy */
	ns1__BoolPolicy *reversePolicy;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *notifySwitches;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *rollingOrder;	/* optional element of type ns1:BoolPolicy */
	ns1__DVSFailureCriteria *failureCriteria;	/* optional element of type ns1:DVSFailureCriteria */
	ns1__VMwareUplinkPortOrderPolicy *uplinkPortOrder;	/* optional element of type ns1:VMwareUplinkPortOrderPolicy */
public:
	virtual int soap_type() const { return 962; } /* = unique id SOAP_TYPE_ns1__VmwareUplinkPortTeamingPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareUplinkPortTeamingPolicy() { ns1__VmwareUplinkPortTeamingPolicy::soap_default(NULL); }
	virtual ~ns1__VmwareUplinkPortTeamingPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanSpec
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanSpec (963)
/* ns1:VmwareDistributedVirtualSwitchVlanSpec */
class SOAP_CMAC ns1__VmwareDistributedVirtualSwitchVlanSpec : public ns1__InheritablePolicy
{
public:
	virtual int soap_type() const { return 963; } /* = unique id SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareDistributedVirtualSwitchVlanSpec() { ns1__VmwareDistributedVirtualSwitchVlanSpec::soap_default(NULL); }
	virtual ~ns1__VmwareDistributedVirtualSwitchVlanSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVSSecurityPolicy
#define SOAP_TYPE_ns1__DVSSecurityPolicy (967)
/* ns1:DVSSecurityPolicy */
class SOAP_CMAC ns1__DVSSecurityPolicy : public ns1__InheritablePolicy
{
public:
	ns1__BoolPolicy *allowPromiscuous;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *macChanges;	/* optional element of type ns1:BoolPolicy */
	ns1__BoolPolicy *forgedTransmits;	/* optional element of type ns1:BoolPolicy */
public:
	virtual int soap_type() const { return 967; } /* = unique id SOAP_TYPE_ns1__DVSSecurityPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVSSecurityPolicy() { ns1__DVSSecurityPolicy::soap_default(NULL); }
	virtual ~ns1__DVSSecurityPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSPortSetting
#define SOAP_TYPE_ns1__VMwareDVSPortSetting (968)
/* ns1:VMwareDVSPortSetting */
class SOAP_CMAC ns1__VMwareDVSPortSetting : public ns1__DVPortSetting
{
public:
	ns1__VmwareDistributedVirtualSwitchVlanSpec *vlan;	/* optional element of type ns1:VmwareDistributedVirtualSwitchVlanSpec */
	ns1__IntPolicy *qosTag;	/* optional element of type ns1:IntPolicy */
	ns1__VmwareUplinkPortTeamingPolicy *uplinkTeamingPolicy;	/* optional element of type ns1:VmwareUplinkPortTeamingPolicy */
	ns1__DVSSecurityPolicy *securityPolicy;	/* optional element of type ns1:DVSSecurityPolicy */
	ns1__BoolPolicy *txUplink;	/* optional element of type ns1:BoolPolicy */
public:
	virtual int soap_type() const { return 968; } /* = unique id SOAP_TYPE_ns1__VMwareDVSPortSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSPortSetting() { ns1__VMwareDVSPortSetting::soap_default(NULL); }
	virtual ~ns1__VMwareDVSPortSetting() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMwareDVSPortgroupPolicy
#define SOAP_TYPE_ns1__VMwareDVSPortgroupPolicy (969)
/* ns1:VMwareDVSPortgroupPolicy */
class SOAP_CMAC ns1__VMwareDVSPortgroupPolicy : public ns1__DVPortgroupPolicy
{
public:
	bool vlanOverrideAllowed;	/* required element of type xsd:boolean */
	bool uplinkTeamingOverrideAllowed;	/* required element of type xsd:boolean */
	bool securityPolicyOverrideAllowed;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 969; } /* = unique id SOAP_TYPE_ns1__VMwareDVSPortgroupPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMwareDVSPortgroupPolicy() { ns1__VMwareDVSPortgroupPolicy::soap_default(NULL); }
	virtual ~ns1__VMwareDVSPortgroupPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EventEx
#define SOAP_TYPE_ns1__EventEx (976)
/* ns1:EventEx */
class SOAP_CMAC ns1__EventEx : public ns1__Event
{
public:
	std::string eventTypeId;	/* required element of type xsd:string */
	std::string *severity;	/* optional element of type xsd:string */
	std::string *message;	/* optional element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >arguments;	/* optional element of type ns1:KeyAnyValue */
	std::string *objectId;	/* optional element of type xsd:string */
	std::string *objectType;	/* optional element of type xsd:string */
	std::string *objectName;	/* optional element of type xsd:string */
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 976; } /* = unique id SOAP_TYPE_ns1__EventEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EventEx() { ns1__EventEx::soap_default(NULL); }
	virtual ~ns1__EventEx() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralEvent
#define SOAP_TYPE_ns1__GeneralEvent (977)
/* ns1:GeneralEvent */
class SOAP_CMAC ns1__GeneralEvent : public ns1__Event
{
public:
	std::string message;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 977; } /* = unique id SOAP_TYPE_ns1__GeneralEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralEvent() { ns1__GeneralEvent::soap_default(NULL); }
	virtual ~ns1__GeneralEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HealthStatusChangedEvent
#define SOAP_TYPE_ns1__HealthStatusChangedEvent (988)
/* ns1:HealthStatusChangedEvent */
class SOAP_CMAC ns1__HealthStatusChangedEvent : public ns1__Event
{
public:
	std::string componentId;	/* required element of type xsd:string */
	std::string oldStatus;	/* required element of type xsd:string */
	std::string newStatus;	/* required element of type xsd:string */
	std::string componentName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 988; } /* = unique id SOAP_TYPE_ns1__HealthStatusChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HealthStatusChangedEvent() { ns1__HealthStatusChangedEvent::soap_default(NULL); }
	virtual ~ns1__HealthStatusChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInventoryUnreadableEvent
#define SOAP_TYPE_ns1__HostInventoryUnreadableEvent (989)
/* ns1:HostInventoryUnreadableEvent */
class SOAP_CMAC ns1__HostInventoryUnreadableEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 989; } /* = unique id SOAP_TYPE_ns1__HostInventoryUnreadableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInventoryUnreadableEvent() { ns1__HostInventoryUnreadableEvent::soap_default(NULL); }
	virtual ~ns1__HostInventoryUnreadableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterEvent
#define SOAP_TYPE_ns1__DatacenterEvent (990)
/* ns1:DatacenterEvent */
class SOAP_CMAC ns1__DatacenterEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 990; } /* = unique id SOAP_TYPE_ns1__DatacenterEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterEvent() { ns1__DatacenterEvent::soap_default(NULL); }
	virtual ~ns1__DatacenterEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SessionEvent
#define SOAP_TYPE_ns1__SessionEvent (993)
/* ns1:SessionEvent */
class SOAP_CMAC ns1__SessionEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 993; } /* = unique id SOAP_TYPE_ns1__SessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SessionEvent() { ns1__SessionEvent::soap_default(NULL); }
	virtual ~ns1__SessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpgradeEvent
#define SOAP_TYPE_ns1__UpgradeEvent (1002)
/* ns1:UpgradeEvent */
class SOAP_CMAC ns1__UpgradeEvent : public ns1__Event
{
public:
	std::string message;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1002; } /* = unique id SOAP_TYPE_ns1__UpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpgradeEvent() { ns1__UpgradeEvent::soap_default(NULL); }
	virtual ~ns1__UpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostEvent
#define SOAP_TYPE_ns1__HostEvent (1007)
/* ns1:HostEvent */
class SOAP_CMAC ns1__HostEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1007; } /* = unique id SOAP_TYPE_ns1__HostEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostEvent() { ns1__HostEvent::soap_default(NULL); }
	virtual ~ns1__HostEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileEvent
#define SOAP_TYPE_ns1__ProfileEvent (1089)
/* ns1:ProfileEvent */
class SOAP_CMAC ns1__ProfileEvent : public ns1__Event
{
public:
	class ns1__ProfileEventArgument *profile;	/* required element of type ns1:ProfileEventArgument */
public:
	virtual int soap_type() const { return 1089; } /* = unique id SOAP_TYPE_ns1__ProfileEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileEvent() { ns1__ProfileEvent::soap_default(NULL); }
	virtual ~ns1__ProfileEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmEvent
#define SOAP_TYPE_ns1__VmEvent (1109)
/* ns1:VmEvent */
class SOAP_CMAC ns1__VmEvent : public ns1__Event
{
public:
	bool template_;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1109; } /* = unique id SOAP_TYPE_ns1__VmEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmEvent() { ns1__VmEvent::soap_default(NULL); }
	virtual ~ns1__VmEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskEvent
#define SOAP_TYPE_ns1__ScheduledTaskEvent (1230)
/* ns1:ScheduledTaskEvent */
class SOAP_CMAC ns1__ScheduledTaskEvent : public ns1__Event
{
public:
	class ns1__ScheduledTaskEventArgument *scheduledTask;	/* required element of type ns1:ScheduledTaskEventArgument */
	class ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1230; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskEvent() { ns1__ScheduledTaskEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmEvent
#define SOAP_TYPE_ns1__AlarmEvent (1239)
/* ns1:AlarmEvent */
class SOAP_CMAC ns1__AlarmEvent : public ns1__Event
{
public:
	class ns1__AlarmEventArgument *alarm;	/* required element of type ns1:AlarmEventArgument */
public:
	virtual int soap_type() const { return 1239; } /* = unique id SOAP_TYPE_ns1__AlarmEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmEvent() { ns1__AlarmEvent::soap_default(NULL); }
	virtual ~ns1__AlarmEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldEvent
#define SOAP_TYPE_ns1__CustomFieldEvent (1251)
/* ns1:CustomFieldEvent */
class SOAP_CMAC ns1__CustomFieldEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1251; } /* = unique id SOAP_TYPE_ns1__CustomFieldEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldEvent() { ns1__CustomFieldEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthorizationEvent
#define SOAP_TYPE_ns1__AuthorizationEvent (1257)
/* ns1:AuthorizationEvent */
class SOAP_CMAC ns1__AuthorizationEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1257; } /* = unique id SOAP_TYPE_ns1__AuthorizationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthorizationEvent() { ns1__AuthorizationEvent::soap_default(NULL); }
	virtual ~ns1__AuthorizationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreEvent
#define SOAP_TYPE_ns1__DatastoreEvent (1266)
/* ns1:DatastoreEvent */
class SOAP_CMAC ns1__DatastoreEvent : public ns1__Event
{
public:
	ns1__DatastoreEventArgument *datastore;	/* optional element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1266; } /* = unique id SOAP_TYPE_ns1__DatastoreEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreEvent() { ns1__DatastoreEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskEvent
#define SOAP_TYPE_ns1__TaskEvent (1277)
/* ns1:TaskEvent */
class SOAP_CMAC ns1__TaskEvent : public ns1__Event
{
public:
	ns1__TaskInfo *info;	/* required element of type ns1:TaskInfo */
public:
	virtual int soap_type() const { return 1277; } /* = unique id SOAP_TYPE_ns1__TaskEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskEvent() { ns1__TaskEvent::soap_default(NULL); }
	virtual ~ns1__TaskEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseEvent
#define SOAP_TYPE_ns1__LicenseEvent (1279)
/* ns1:LicenseEvent */
class SOAP_CMAC ns1__LicenseEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1279; } /* = unique id SOAP_TYPE_ns1__LicenseEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseEvent() { ns1__LicenseEvent::soap_default(NULL); }
	virtual ~ns1__LicenseEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseExpiredEvent
#define SOAP_TYPE_ns1__LicenseExpiredEvent (1286)
/* ns1:LicenseExpiredEvent */
class SOAP_CMAC ns1__LicenseExpiredEvent : public ns1__Event
{
public:
	ns1__LicenseFeatureInfo *feature;	/* required element of type ns1:LicenseFeatureInfo */
public:
	virtual int soap_type() const { return 1286; } /* = unique id SOAP_TYPE_ns1__LicenseExpiredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseExpiredEvent() { ns1__LicenseExpiredEvent::soap_default(NULL); }
	virtual ~ns1__LicenseExpiredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterEvent
#define SOAP_TYPE_ns1__ClusterEvent (1302)
/* ns1:ClusterEvent */
class SOAP_CMAC ns1__ClusterEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1302; } /* = unique id SOAP_TYPE_ns1__ClusterEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterEvent() { ns1__ClusterEvent::soap_default(NULL); }
	virtual ~ns1__ClusterEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolEvent
#define SOAP_TYPE_ns1__ResourcePoolEvent (1325)
/* ns1:ResourcePoolEvent */
class SOAP_CMAC ns1__ResourcePoolEvent : public ns1__Event
{
public:
	class ns1__ResourcePoolEventArgument *resourcePool;	/* required element of type ns1:ResourcePoolEventArgument */
public:
	virtual int soap_type() const { return 1325; } /* = unique id SOAP_TYPE_ns1__ResourcePoolEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolEvent() { ns1__ResourcePoolEvent::soap_default(NULL); }
	virtual ~ns1__ResourcePoolEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateUpgradeEvent
#define SOAP_TYPE_ns1__TemplateUpgradeEvent (1332)
/* ns1:TemplateUpgradeEvent */
class SOAP_CMAC ns1__TemplateUpgradeEvent : public ns1__Event
{
public:
	std::string legacyTemplate;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1332; } /* = unique id SOAP_TYPE_ns1__TemplateUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateUpgradeEvent() { ns1__TemplateUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__TemplateUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LockerMisconfiguredEvent
#define SOAP_TYPE_ns1__LockerMisconfiguredEvent (1344)
/* ns1:LockerMisconfiguredEvent */
class SOAP_CMAC ns1__LockerMisconfiguredEvent : public ns1__Event
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1344; } /* = unique id SOAP_TYPE_ns1__LockerMisconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LockerMisconfiguredEvent() { ns1__LockerMisconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__LockerMisconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LockerReconfiguredEvent
#define SOAP_TYPE_ns1__LockerReconfiguredEvent (1345)
/* ns1:LockerReconfiguredEvent */
class SOAP_CMAC ns1__LockerReconfiguredEvent : public ns1__Event
{
public:
	ns1__DatastoreEventArgument *oldDatastore;	/* optional element of type ns1:DatastoreEventArgument */
	ns1__DatastoreEventArgument *newDatastore;	/* optional element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1345; } /* = unique id SOAP_TYPE_ns1__LockerReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LockerReconfiguredEvent() { ns1__LockerReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__LockerReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsEvent
#define SOAP_TYPE_ns1__DvsEvent (1352)
/* ns1:DvsEvent */
class SOAP_CMAC ns1__DvsEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1352; } /* = unique id SOAP_TYPE_ns1__DvsEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsEvent() { ns1__DvsEvent::soap_default(NULL); }
	virtual ~ns1__DvsEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupEvent
#define SOAP_TYPE_ns1__DVPortgroupEvent (1383)
/* ns1:DVPortgroupEvent */
class SOAP_CMAC ns1__DVPortgroupEvent : public ns1__Event
{
public:
	virtual int soap_type() const { return 1383; } /* = unique id SOAP_TYPE_ns1__DVPortgroupEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupEvent() { ns1__DVPortgroupEvent::soap_default(NULL); }
	virtual ~ns1__DVPortgroupEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RoleEventArgument
#define SOAP_TYPE_ns1__RoleEventArgument (1393)
/* ns1:RoleEventArgument */
class SOAP_CMAC ns1__RoleEventArgument : public ns1__EventArgument
{
public:
	int roleId;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1393; } /* = unique id SOAP_TYPE_ns1__RoleEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RoleEventArgument() { ns1__RoleEventArgument::soap_default(NULL); }
	virtual ~ns1__RoleEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EntityEventArgument
#define SOAP_TYPE_ns1__EntityEventArgument (1394)
/* ns1:EntityEventArgument */
class SOAP_CMAC ns1__EntityEventArgument : public ns1__EventArgument
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1394; } /* = unique id SOAP_TYPE_ns1__EntityEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EntityEventArgument() { ns1__EntityEventArgument::soap_default(NULL); }
	virtual ~ns1__EntityEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileEventArgument
#define SOAP_TYPE_ns1__ProfileEventArgument (1408)
/* ns1:ProfileEventArgument */
class SOAP_CMAC ns1__ProfileEventArgument : public ns1__EventArgument
{
public:
	ns1__ManagedObjectReference *profile;	/* required element of type ns1:ManagedObjectReference */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1408; } /* = unique id SOAP_TYPE_ns1__ProfileEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileEventArgument() { ns1__ProfileEventArgument::soap_default(NULL); }
	virtual ~ns1__ProfileEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ActiveDirectoryFault
#define SOAP_TYPE_ns1__ActiveDirectoryFault (1419)
/* ns1:ActiveDirectoryFault */
class SOAP_CMAC ns1__ActiveDirectoryFault : public ns1__VimFault
{
public:
	int *errorCode;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1419; } /* = unique id SOAP_TYPE_ns1__ActiveDirectoryFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ActiveDirectoryFault() { ns1__ActiveDirectoryFault::soap_default(NULL); }
	virtual ~ns1__ActiveDirectoryFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlreadyExists
#define SOAP_TYPE_ns1__AlreadyExists (1426)
/* ns1:AlreadyExists */
class SOAP_CMAC ns1__AlreadyExists : public ns1__VimFault
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1426; } /* = unique id SOAP_TYPE_ns1__AlreadyExists */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlreadyExists() { ns1__AlreadyExists::soap_default(NULL); }
	virtual ~ns1__AlreadyExists() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlreadyUpgraded
#define SOAP_TYPE_ns1__AlreadyUpgraded (1427)
/* ns1:AlreadyUpgraded */
class SOAP_CMAC ns1__AlreadyUpgraded : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1427; } /* = unique id SOAP_TYPE_ns1__AlreadyUpgraded */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlreadyUpgraded() { ns1__AlreadyUpgraded::soap_default(NULL); }
	virtual ~ns1__AlreadyUpgraded() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthMinimumAdminPermission
#define SOAP_TYPE_ns1__AuthMinimumAdminPermission (1429)
/* ns1:AuthMinimumAdminPermission */
class SOAP_CMAC ns1__AuthMinimumAdminPermission : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1429; } /* = unique id SOAP_TYPE_ns1__AuthMinimumAdminPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthMinimumAdminPermission() { ns1__AuthMinimumAdminPermission::soap_default(NULL); }
	virtual ~ns1__AuthMinimumAdminPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessLocalSource
#define SOAP_TYPE_ns1__CannotAccessLocalSource (1432)
/* ns1:CannotAccessLocalSource */
class SOAP_CMAC ns1__CannotAccessLocalSource : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1432; } /* = unique id SOAP_TYPE_ns1__CannotAccessLocalSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessLocalSource() { ns1__CannotAccessLocalSource::soap_default(NULL); }
	virtual ~ns1__CannotAccessLocalSource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotDisableDrsOnClustersWithVApps
#define SOAP_TYPE_ns1__CannotDisableDrsOnClustersWithVApps (1446)
/* ns1:CannotDisableDrsOnClustersWithVApps */
class SOAP_CMAC ns1__CannotDisableDrsOnClustersWithVApps : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 1446; } /* = unique id SOAP_TYPE_ns1__CannotDisableDrsOnClustersWithVApps */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotDisableDrsOnClustersWithVApps() { ns1__CannotDisableDrsOnClustersWithVApps::soap_default(NULL); }
	virtual ~ns1__CannotDisableDrsOnClustersWithVApps() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotDisconnectHostWithFaultToleranceVm
#define SOAP_TYPE_ns1__CannotDisconnectHostWithFaultToleranceVm (1448)
/* ns1:CannotDisconnectHostWithFaultToleranceVm */
class SOAP_CMAC ns1__CannotDisconnectHostWithFaultToleranceVm : public ns1__VimFault
{
public:
	std::string hostName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1448; } /* = unique id SOAP_TYPE_ns1__CannotDisconnectHostWithFaultToleranceVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotDisconnectHostWithFaultToleranceVm() { ns1__CannotDisconnectHostWithFaultToleranceVm::soap_default(NULL); }
	virtual ~ns1__CannotDisconnectHostWithFaultToleranceVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotMoveFaultToleranceVm
#define SOAP_TYPE_ns1__CannotMoveFaultToleranceVm (1450)
/* ns1:CannotMoveFaultToleranceVm */
class SOAP_CMAC ns1__CannotMoveFaultToleranceVm : public ns1__VimFault
{
public:
	std::string moveType;	/* required element of type xsd:string */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1450; } /* = unique id SOAP_TYPE_ns1__CannotMoveFaultToleranceVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotMoveFaultToleranceVm() { ns1__CannotMoveFaultToleranceVm::soap_default(NULL); }
	virtual ~ns1__CannotMoveFaultToleranceVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotMoveHostWithFaultToleranceVm
#define SOAP_TYPE_ns1__CannotMoveHostWithFaultToleranceVm (1451)
/* ns1:CannotMoveHostWithFaultToleranceVm */
class SOAP_CMAC ns1__CannotMoveHostWithFaultToleranceVm : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1451; } /* = unique id SOAP_TYPE_ns1__CannotMoveHostWithFaultToleranceVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotMoveHostWithFaultToleranceVm() { ns1__CannotMoveHostWithFaultToleranceVm::soap_default(NULL); }
	virtual ~ns1__CannotMoveHostWithFaultToleranceVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConcurrentAccess
#define SOAP_TYPE_ns1__ConcurrentAccess (1454)
/* ns1:ConcurrentAccess */
class SOAP_CMAC ns1__ConcurrentAccess : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1454; } /* = unique id SOAP_TYPE_ns1__ConcurrentAccess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConcurrentAccess() { ns1__ConcurrentAccess::soap_default(NULL); }
	virtual ~ns1__ConcurrentAccess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationFault
#define SOAP_TYPE_ns1__CustomizationFault (1461)
/* ns1:CustomizationFault */
class SOAP_CMAC ns1__CustomizationFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1461; } /* = unique id SOAP_TYPE_ns1__CustomizationFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationFault() { ns1__CustomizationFault::soap_default(NULL); }
	virtual ~ns1__CustomizationFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasConfigFault
#define SOAP_TYPE_ns1__DasConfigFault (1464)
/* ns1:DasConfigFault */
class SOAP_CMAC ns1__DasConfigFault : public ns1__VimFault
{
public:
	std::string *reason;	/* optional element of type xsd:string */
	std::string *output;	/* optional element of type xsd:string */
	std::vector<ns1__Event * >event;	/* optional element of type ns1:Event */
public:
	virtual int soap_type() const { return 1464; } /* = unique id SOAP_TYPE_ns1__DasConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasConfigFault() { ns1__DasConfigFault::soap_default(NULL); }
	virtual ~ns1__DasConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatabaseError
#define SOAP_TYPE_ns1__DatabaseError (1465)
/* ns1:DatabaseError */
class SOAP_CMAC ns1__DatabaseError : public ns1__RuntimeFault
{
public:
	virtual int soap_type() const { return 1465; } /* = unique id SOAP_TYPE_ns1__DatabaseError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatabaseError() { ns1__DatabaseError::soap_default(NULL); }
	virtual ~ns1__DatabaseError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisallowedOperationOnFailoverHost
#define SOAP_TYPE_ns1__DisallowedOperationOnFailoverHost (1481)
/* ns1:DisallowedOperationOnFailoverHost */
class SOAP_CMAC ns1__DisallowedOperationOnFailoverHost : public ns1__RuntimeFault
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::string hostname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1481; } /* = unique id SOAP_TYPE_ns1__DisallowedOperationOnFailoverHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisallowedOperationOnFailoverHost() { ns1__DisallowedOperationOnFailoverHost::soap_default(NULL); }
	virtual ~ns1__DisallowedOperationOnFailoverHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsDisabledOnVm
#define SOAP_TYPE_ns1__DrsDisabledOnVm (1485)
/* ns1:DrsDisabledOnVm */
class SOAP_CMAC ns1__DrsDisabledOnVm : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1485; } /* = unique id SOAP_TYPE_ns1__DrsDisabledOnVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsDisabledOnVm() { ns1__DrsDisabledOnVm::soap_default(NULL); }
	virtual ~ns1__DrsDisabledOnVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DuplicateName
#define SOAP_TYPE_ns1__DuplicateName (1487)
/* ns1:DuplicateName */
class SOAP_CMAC ns1__DuplicateName : public ns1__VimFault
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *object;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1487; } /* = unique id SOAP_TYPE_ns1__DuplicateName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DuplicateName() { ns1__DuplicateName::soap_default(NULL); }
	virtual ~ns1__DuplicateName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsFault
#define SOAP_TYPE_ns1__DvsFault (1488)
/* ns1:DvsFault */
class SOAP_CMAC ns1__DvsFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1488; } /* = unique id SOAP_TYPE_ns1__DvsFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsFault() { ns1__DvsFault::soap_default(NULL); }
	virtual ~ns1__DvsFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendedFault
#define SOAP_TYPE_ns1__ExtendedFault (1508)
/* ns1:ExtendedFault */
class SOAP_CMAC ns1__ExtendedFault : public ns1__VimFault
{
public:
	std::string faultTypeId;	/* required element of type xsd:string */
	std::vector<ns1__KeyValue * >data;	/* optional element of type ns1:KeyValue */
public:
	virtual int soap_type() const { return 1508; } /* = unique id SOAP_TYPE_ns1__ExtendedFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendedFault() { ns1__ExtendedFault::soap_default(NULL); }
	virtual ~ns1__ExtendedFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FailToLockFaultToleranceVMs
#define SOAP_TYPE_ns1__FailToLockFaultToleranceVMs (1509)
/* ns1:FailToLockFaultToleranceVMs */
class SOAP_CMAC ns1__FailToLockFaultToleranceVMs : public ns1__RuntimeFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *alreadyLockedVm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1509; } /* = unique id SOAP_TYPE_ns1__FailToLockFaultToleranceVMs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FailToLockFaultToleranceVMs() { ns1__FailToLockFaultToleranceVMs::soap_default(NULL); }
	virtual ~ns1__FailToLockFaultToleranceVMs() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileFault
#define SOAP_TYPE_ns1__FileFault (1519)
/* ns1:FileFault */
class SOAP_CMAC ns1__FileFault : public ns1__VimFault
{
public:
	std::string file;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1519; } /* = unique id SOAP_TYPE_ns1__FileFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileFault() { ns1__FileFault::soap_default(NULL); }
	virtual ~ns1__FileFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GenericDrsFault
#define SOAP_TYPE_ns1__GenericDrsFault (1527)
/* ns1:GenericDrsFault */
class SOAP_CMAC ns1__GenericDrsFault : public ns1__VimFault
{
public:
	std::vector<ns1__LocalizedMethodFault * >hostFaults;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1527; } /* = unique id SOAP_TYPE_ns1__GenericDrsFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GenericDrsFault() { ns1__GenericDrsFault::soap_default(NULL); }
	virtual ~ns1__GenericDrsFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigFault
#define SOAP_TYPE_ns1__HostConfigFault (1531)
/* ns1:HostConfigFault */
class SOAP_CMAC ns1__HostConfigFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1531; } /* = unique id SOAP_TYPE_ns1__HostConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigFault() { ns1__HostConfigFault::soap_default(NULL); }
	virtual ~ns1__HostConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectFault
#define SOAP_TYPE_ns1__HostConnectFault (1532)
/* ns1:HostConnectFault */
class SOAP_CMAC ns1__HostConnectFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1532; } /* = unique id SOAP_TYPE_ns1__HostConnectFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectFault() { ns1__HostConnectFault::soap_default(NULL); }
	virtual ~ns1__HostConnectFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForRecordReplay
#define SOAP_TYPE_ns1__HostIncompatibleForRecordReplay (1535)
/* ns1:HostIncompatibleForRecordReplay */
class SOAP_CMAC ns1__HostIncompatibleForRecordReplay : public ns1__VimFault
{
public:
	std::string *hostName;	/* optional element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1535; } /* = unique id SOAP_TYPE_ns1__HostIncompatibleForRecordReplay */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIncompatibleForRecordReplay() { ns1__HostIncompatibleForRecordReplay::soap_default(NULL); }
	virtual ~ns1__HostIncompatibleForRecordReplay() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPowerOpFailed
#define SOAP_TYPE_ns1__HostPowerOpFailed (1537)
/* ns1:HostPowerOpFailed */
class SOAP_CMAC ns1__HostPowerOpFailed : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1537; } /* = unique id SOAP_TYPE_ns1__HostPowerOpFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPowerOpFailed() { ns1__HostPowerOpFailed::soap_default(NULL); }
	virtual ~ns1__HostPowerOpFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IORMNotSupportedHostOnDatastore
#define SOAP_TYPE_ns1__IORMNotSupportedHostOnDatastore (1540)
/* ns1:IORMNotSupportedHostOnDatastore */
class SOAP_CMAC ns1__IORMNotSupportedHostOnDatastore : public ns1__VimFault
{
public:
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	std::string datastoreName;	/* required element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1540; } /* = unique id SOAP_TYPE_ns1__IORMNotSupportedHostOnDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IORMNotSupportedHostOnDatastore() { ns1__IORMNotSupportedHostOnDatastore::soap_default(NULL); }
	virtual ~ns1__IORMNotSupportedHostOnDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientResourcesFault
#define SOAP_TYPE_ns1__InsufficientResourcesFault (1556)
/* ns1:InsufficientResourcesFault */
class SOAP_CMAC ns1__InsufficientResourcesFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1556; } /* = unique id SOAP_TYPE_ns1__InsufficientResourcesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientResourcesFault() { ns1__InsufficientResourcesFault::soap_default(NULL); }
	virtual ~ns1__InsufficientResourcesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidAffinitySettingFault
#define SOAP_TYPE_ns1__InvalidAffinitySettingFault (1560)
/* ns1:InvalidAffinitySettingFault */
class SOAP_CMAC ns1__InvalidAffinitySettingFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1560; } /* = unique id SOAP_TYPE_ns1__InvalidAffinitySettingFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidAffinitySettingFault() { ns1__InvalidAffinitySettingFault::soap_default(NULL); }
	virtual ~ns1__InvalidAffinitySettingFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidBmcRole
#define SOAP_TYPE_ns1__InvalidBmcRole (1561)
/* ns1:InvalidBmcRole */
class SOAP_CMAC ns1__InvalidBmcRole : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1561; } /* = unique id SOAP_TYPE_ns1__InvalidBmcRole */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidBmcRole() { ns1__InvalidBmcRole::soap_default(NULL); }
	virtual ~ns1__InvalidBmcRole() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDatastore
#define SOAP_TYPE_ns1__InvalidDatastore (1566)
/* ns1:InvalidDatastore */
class SOAP_CMAC ns1__InvalidDatastore : public ns1__VimFault
{
public:
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1566; } /* = unique id SOAP_TYPE_ns1__InvalidDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDatastore() { ns1__InvalidDatastore::soap_default(NULL); }
	virtual ~ns1__InvalidDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidEvent
#define SOAP_TYPE_ns1__InvalidEvent (1574)
/* ns1:InvalidEvent */
class SOAP_CMAC ns1__InvalidEvent : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1574; } /* = unique id SOAP_TYPE_ns1__InvalidEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidEvent() { ns1__InvalidEvent::soap_default(NULL); }
	virtual ~ns1__InvalidEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidFolder
#define SOAP_TYPE_ns1__InvalidFolder (1575)
/* ns1:InvalidFolder */
class SOAP_CMAC ns1__InvalidFolder : public ns1__VimFault
{
public:
	ns1__ManagedObjectReference *target;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1575; } /* = unique id SOAP_TYPE_ns1__InvalidFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidFolder() { ns1__InvalidFolder::soap_default(NULL); }
	virtual ~ns1__InvalidFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidIpmiLoginInfo
#define SOAP_TYPE_ns1__InvalidIpmiLoginInfo (1580)
/* ns1:InvalidIpmiLoginInfo */
class SOAP_CMAC ns1__InvalidIpmiLoginInfo : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1580; } /* = unique id SOAP_TYPE_ns1__InvalidIpmiLoginInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidIpmiLoginInfo() { ns1__InvalidIpmiLoginInfo::soap_default(NULL); }
	virtual ~ns1__InvalidIpmiLoginInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidIpmiMacAddress
#define SOAP_TYPE_ns1__InvalidIpmiMacAddress (1581)
/* ns1:InvalidIpmiMacAddress */
class SOAP_CMAC ns1__InvalidIpmiMacAddress : public ns1__VimFault
{
public:
	std::string userProvidedMacAddress;	/* required element of type xsd:string */
	std::string observedMacAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1581; } /* = unique id SOAP_TYPE_ns1__InvalidIpmiMacAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidIpmiMacAddress() { ns1__InvalidIpmiMacAddress::soap_default(NULL); }
	virtual ~ns1__InvalidIpmiMacAddress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidLicense
#define SOAP_TYPE_ns1__InvalidLicense (1582)
/* ns1:InvalidLicense */
class SOAP_CMAC ns1__InvalidLicense : public ns1__VimFault
{
public:
	std::string licenseContent;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1582; } /* = unique id SOAP_TYPE_ns1__InvalidLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidLicense() { ns1__InvalidLicense::soap_default(NULL); }
	virtual ~ns1__InvalidLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidLocale
#define SOAP_TYPE_ns1__InvalidLocale (1583)
/* ns1:InvalidLocale */
class SOAP_CMAC ns1__InvalidLocale : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1583; } /* = unique id SOAP_TYPE_ns1__InvalidLocale */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidLocale() { ns1__InvalidLocale::soap_default(NULL); }
	virtual ~ns1__InvalidLocale() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidLogin
#define SOAP_TYPE_ns1__InvalidLogin (1584)
/* ns1:InvalidLogin */
class SOAP_CMAC ns1__InvalidLogin : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1584; } /* = unique id SOAP_TYPE_ns1__InvalidLogin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidLogin() { ns1__InvalidLogin::soap_default(NULL); }
	virtual ~ns1__InvalidLogin() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidName
#define SOAP_TYPE_ns1__InvalidName (1585)
/* ns1:InvalidName */
class SOAP_CMAC ns1__InvalidName : public ns1__VimFault
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1585; } /* = unique id SOAP_TYPE_ns1__InvalidName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidName() { ns1__InvalidName::soap_default(NULL); }
	virtual ~ns1__InvalidName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidPrivilege
#define SOAP_TYPE_ns1__InvalidPrivilege (1591)
/* ns1:InvalidPrivilege */
class SOAP_CMAC ns1__InvalidPrivilege : public ns1__VimFault
{
public:
	std::string privilege;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1591; } /* = unique id SOAP_TYPE_ns1__InvalidPrivilege */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidPrivilege() { ns1__InvalidPrivilege::soap_default(NULL); }
	virtual ~ns1__InvalidPrivilege() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidState
#define SOAP_TYPE_ns1__InvalidState (1596)
/* ns1:InvalidState */
class SOAP_CMAC ns1__InvalidState : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1596; } /* = unique id SOAP_TYPE_ns1__InvalidState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidState() { ns1__InvalidState::soap_default(NULL); }
	virtual ~ns1__InvalidState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseAssignmentFailed
#define SOAP_TYPE_ns1__LicenseAssignmentFailed (1601)
/* ns1:LicenseAssignmentFailed */
class SOAP_CMAC ns1__LicenseAssignmentFailed : public ns1__RuntimeFault
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1601; } /* = unique id SOAP_TYPE_ns1__LicenseAssignmentFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseAssignmentFailed() { ns1__LicenseAssignmentFailed::soap_default(NULL); }
	virtual ~ns1__LicenseAssignmentFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseEntityNotFound
#define SOAP_TYPE_ns1__LicenseEntityNotFound (1603)
/* ns1:LicenseEntityNotFound */
class SOAP_CMAC ns1__LicenseEntityNotFound : public ns1__VimFault
{
public:
	std::string entityId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1603; } /* = unique id SOAP_TYPE_ns1__LicenseEntityNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseEntityNotFound() { ns1__LicenseEntityNotFound::soap_default(NULL); }
	virtual ~ns1__LicenseEntityNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseServerUnavailable
#define SOAP_TYPE_ns1__LicenseServerUnavailable (1607)
/* ns1:LicenseServerUnavailable */
class SOAP_CMAC ns1__LicenseServerUnavailable : public ns1__VimFault
{
public:
	std::string licenseServer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1607; } /* = unique id SOAP_TYPE_ns1__LicenseServerUnavailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseServerUnavailable() { ns1__LicenseServerUnavailable::soap_default(NULL); }
	virtual ~ns1__LicenseServerUnavailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LimitExceeded
#define SOAP_TYPE_ns1__LimitExceeded (1609)
/* ns1:LimitExceeded */
class SOAP_CMAC ns1__LimitExceeded : public ns1__VimFault
{
public:
	std::string *property;	/* optional element of type xsd:string */
	int *limit;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1609; } /* = unique id SOAP_TYPE_ns1__LimitExceeded */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LimitExceeded() { ns1__LimitExceeded::soap_default(NULL); }
	virtual ~ns1__LimitExceeded() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LogBundlingFailed
#define SOAP_TYPE_ns1__LogBundlingFailed (1611)
/* ns1:LogBundlingFailed */
class SOAP_CMAC ns1__LogBundlingFailed : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1611; } /* = unique id SOAP_TYPE_ns1__LogBundlingFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LogBundlingFailed() { ns1__LogBundlingFailed::soap_default(NULL); }
	virtual ~ns1__LogBundlingFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodAlreadyDisabledFault
#define SOAP_TYPE_ns1__MethodAlreadyDisabledFault (1617)
/* ns1:MethodAlreadyDisabledFault */
class SOAP_CMAC ns1__MethodAlreadyDisabledFault : public ns1__RuntimeFault
{
public:
	std::string sourceId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1617; } /* = unique id SOAP_TYPE_ns1__MethodAlreadyDisabledFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodAlreadyDisabledFault() { ns1__MethodAlreadyDisabledFault::soap_default(NULL); }
	virtual ~ns1__MethodAlreadyDisabledFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodDisabled
#define SOAP_TYPE_ns1__MethodDisabled (1618)
/* ns1:MethodDisabled */
class SOAP_CMAC ns1__MethodDisabled : public ns1__RuntimeFault
{
public:
	std::string *source;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1618; } /* = unique id SOAP_TYPE_ns1__MethodDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodDisabled() { ns1__MethodDisabled::soap_default(NULL); }
	virtual ~ns1__MethodDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationFault
#define SOAP_TYPE_ns1__MigrationFault (1620)
/* ns1:MigrationFault */
class SOAP_CMAC ns1__MigrationFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1620; } /* = unique id SOAP_TYPE_ns1__MigrationFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationFault() { ns1__MigrationFault::soap_default(NULL); }
	virtual ~ns1__MigrationFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MismatchedBundle
#define SOAP_TYPE_ns1__MismatchedBundle (1623)
/* ns1:MismatchedBundle */
class SOAP_CMAC ns1__MismatchedBundle : public ns1__VimFault
{
public:
	std::string bundleUuid;	/* required element of type xsd:string */
	std::string hostUuid;	/* required element of type xsd:string */
	int bundleBuildNumber;	/* required element of type xsd:int */
	int hostBuildNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1623; } /* = unique id SOAP_TYPE_ns1__MismatchedBundle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MismatchedBundle() { ns1__MismatchedBundle::soap_default(NULL); }
	virtual ~ns1__MismatchedBundle() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingBmcSupport
#define SOAP_TYPE_ns1__MissingBmcSupport (1626)
/* ns1:MissingBmcSupport */
class SOAP_CMAC ns1__MissingBmcSupport : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1626; } /* = unique id SOAP_TYPE_ns1__MissingBmcSupport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingBmcSupport() { ns1__MissingBmcSupport::soap_default(NULL); }
	virtual ~ns1__MissingBmcSupport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoClientCertificate
#define SOAP_TYPE_ns1__NoClientCertificate (1648)
/* ns1:NoClientCertificate */
class SOAP_CMAC ns1__NoClientCertificate : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1648; } /* = unique id SOAP_TYPE_ns1__NoClientCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoClientCertificate() { ns1__NoClientCertificate::soap_default(NULL); }
	virtual ~ns1__NoClientCertificate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoCompatibleHost
#define SOAP_TYPE_ns1__NoCompatibleHost (1650)
/* ns1:NoCompatibleHost */
class SOAP_CMAC ns1__NoCompatibleHost : public ns1__VimFault
{
public:
	std::vector<ns1__ManagedObjectReference * >host;	/* optional element of type ns1:ManagedObjectReference */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1650; } /* = unique id SOAP_TYPE_ns1__NoCompatibleHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoCompatibleHost() { ns1__NoCompatibleHost::soap_default(NULL); }
	virtual ~ns1__NoCompatibleHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoDiskFound
#define SOAP_TYPE_ns1__NoDiskFound (1653)
/* ns1:NoDiskFound */
class SOAP_CMAC ns1__NoDiskFound : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1653; } /* = unique id SOAP_TYPE_ns1__NoDiskFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoDiskFound() { ns1__NoDiskFound::soap_default(NULL); }
	virtual ~ns1__NoDiskFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoSubjectName
#define SOAP_TYPE_ns1__NoSubjectName (1666)
/* ns1:NoSubjectName */
class SOAP_CMAC ns1__NoSubjectName : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1666; } /* = unique id SOAP_TYPE_ns1__NoSubjectName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoSubjectName() { ns1__NoSubjectName::soap_default(NULL); }
	virtual ~ns1__NoSubjectName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotFound
#define SOAP_TYPE_ns1__NotFound (1676)
/* ns1:NotFound */
class SOAP_CMAC ns1__NotFound : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1676; } /* = unique id SOAP_TYPE_ns1__NotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotFound() { ns1__NotFound::soap_default(NULL); }
	virtual ~ns1__NotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OutOfBounds
#define SOAP_TYPE_ns1__OutOfBounds (1685)
/* ns1:OutOfBounds */
class SOAP_CMAC ns1__OutOfBounds : public ns1__VimFault
{
public:
	std::string argumentName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1685; } /* = unique id SOAP_TYPE_ns1__OutOfBounds */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OutOfBounds() { ns1__OutOfBounds::soap_default(NULL); }
	virtual ~ns1__OutOfBounds() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfFault
#define SOAP_TYPE_ns1__OvfFault (1699)
/* ns1:OvfFault */
class SOAP_CMAC ns1__OvfFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1699; } /* = unique id SOAP_TYPE_ns1__OvfFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfFault() { ns1__OvfFault::soap_default(NULL); }
	virtual ~ns1__OvfFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchBinariesNotFound
#define SOAP_TYPE_ns1__PatchBinariesNotFound (1752)
/* ns1:PatchBinariesNotFound */
class SOAP_CMAC ns1__PatchBinariesNotFound : public ns1__VimFault
{
public:
	std::string patchID;	/* required element of type xsd:string */
	std::vector<std::string >binary;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1752; } /* = unique id SOAP_TYPE_ns1__PatchBinariesNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchBinariesNotFound() { ns1__PatchBinariesNotFound::soap_default(NULL); }
	virtual ~ns1__PatchBinariesNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchMetadataInvalid
#define SOAP_TYPE_ns1__PatchMetadataInvalid (1756)
/* ns1:PatchMetadataInvalid */
class SOAP_CMAC ns1__PatchMetadataInvalid : public ns1__VimFault
{
public:
	std::string patchID;	/* required element of type xsd:string */
	std::vector<std::string >metaData;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1756; } /* = unique id SOAP_TYPE_ns1__PatchMetadataInvalid */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchMetadataInvalid() { ns1__PatchMetadataInvalid::soap_default(NULL); }
	virtual ~ns1__PatchMetadataInvalid() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchNotApplicable
#define SOAP_TYPE_ns1__PatchNotApplicable (1759)
/* ns1:PatchNotApplicable */
class SOAP_CMAC ns1__PatchNotApplicable : public ns1__VimFault
{
public:
	std::string patchID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1759; } /* = unique id SOAP_TYPE_ns1__PatchNotApplicable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchNotApplicable() { ns1__PatchNotApplicable::soap_default(NULL); }
	virtual ~ns1__PatchNotApplicable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileUpdateFailed
#define SOAP_TYPE_ns1__ProfileUpdateFailed (1767)
/* ns1:ProfileUpdateFailed */
class SOAP_CMAC ns1__ProfileUpdateFailed : public ns1__VimFault
{
public:
	std::vector<ns1__ProfileUpdateFailedUpdateFailure * >failure;	/* required element of type ns1:ProfileUpdateFailedUpdateFailure */
public:
	virtual int soap_type() const { return 1767; } /* = unique id SOAP_TYPE_ns1__ProfileUpdateFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileUpdateFailed() { ns1__ProfileUpdateFailed::soap_default(NULL); }
	virtual ~ns1__ProfileUpdateFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RebootRequired
#define SOAP_TYPE_ns1__RebootRequired (1776)
/* ns1:RebootRequired */
class SOAP_CMAC ns1__RebootRequired : public ns1__VimFault
{
public:
	std::string *patch;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1776; } /* = unique id SOAP_TYPE_ns1__RebootRequired */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RebootRequired() { ns1__RebootRequired::soap_default(NULL); }
	virtual ~ns1__RebootRequired() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RecordReplayDisabled
#define SOAP_TYPE_ns1__RecordReplayDisabled (1777)
/* ns1:RecordReplayDisabled */
class SOAP_CMAC ns1__RecordReplayDisabled : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1777; } /* = unique id SOAP_TYPE_ns1__RecordReplayDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RecordReplayDisabled() { ns1__RecordReplayDisabled::soap_default(NULL); }
	virtual ~ns1__RecordReplayDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveFailed
#define SOAP_TYPE_ns1__RemoveFailed (1779)
/* ns1:RemoveFailed */
class SOAP_CMAC ns1__RemoveFailed : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1779; } /* = unique id SOAP_TYPE_ns1__RemoveFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveFailed() { ns1__RemoveFailed::soap_default(NULL); }
	virtual ~ns1__RemoveFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceInUse
#define SOAP_TYPE_ns1__ResourceInUse (1780)
/* ns1:ResourceInUse */
class SOAP_CMAC ns1__ResourceInUse : public ns1__VimFault
{
public:
	std::string *type;	/* optional element of type xsd:string */
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1780; } /* = unique id SOAP_TYPE_ns1__ResourceInUse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceInUse() { ns1__ResourceInUse::soap_default(NULL); }
	virtual ~ns1__ResourceInUse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceNotAvailable
#define SOAP_TYPE_ns1__ResourceNotAvailable (1781)
/* ns1:ResourceNotAvailable */
class SOAP_CMAC ns1__ResourceNotAvailable : public ns1__VimFault
{
public:
	std::string *containerType;	/* optional element of type xsd:string */
	std::string *containerName;	/* optional element of type xsd:string */
	std::string *type;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1781; } /* = unique id SOAP_TYPE_ns1__ResourceNotAvailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceNotAvailable() { ns1__ResourceNotAvailable::soap_default(NULL); }
	virtual ~ns1__ResourceNotAvailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SSPIChallenge
#define SOAP_TYPE_ns1__SSPIChallenge (1786)
/* ns1:SSPIChallenge */
class SOAP_CMAC ns1__SSPIChallenge : public ns1__VimFault
{
public:
	std::string base64Token;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1786; } /* = unique id SOAP_TYPE_ns1__SSPIChallenge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SSPIChallenge() { ns1__SSPIChallenge::soap_default(NULL); }
	virtual ~ns1__SSPIChallenge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotFault
#define SOAP_TYPE_ns1__SnapshotFault (1795)
/* ns1:SnapshotFault */
class SOAP_CMAC ns1__SnapshotFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1795; } /* = unique id SOAP_TYPE_ns1__SnapshotFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotFault() { ns1__SnapshotFault::soap_default(NULL); }
	virtual ~ns1__SnapshotFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SwapDatastoreUnset
#define SOAP_TYPE_ns1__SwapDatastoreUnset (1808)
/* ns1:SwapDatastoreUnset */
class SOAP_CMAC ns1__SwapDatastoreUnset : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1808; } /* = unique id SOAP_TYPE_ns1__SwapDatastoreUnset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SwapDatastoreUnset() { ns1__SwapDatastoreUnset::soap_default(NULL); }
	virtual ~ns1__SwapDatastoreUnset() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskInProgress
#define SOAP_TYPE_ns1__TaskInProgress (1811)
/* ns1:TaskInProgress */
class SOAP_CMAC ns1__TaskInProgress : public ns1__VimFault
{
public:
	ns1__ManagedObjectReference *task;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1811; } /* = unique id SOAP_TYPE_ns1__TaskInProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskInProgress() { ns1__TaskInProgress::soap_default(NULL); }
	virtual ~ns1__TaskInProgress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Timedout
#define SOAP_TYPE_ns1__Timedout (1812)
/* ns1:Timedout */
class SOAP_CMAC ns1__Timedout : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1812; } /* = unique id SOAP_TYPE_ns1__Timedout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Timedout() { ns1__Timedout::soap_default(NULL); }
	virtual ~ns1__Timedout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TooManyConsecutiveOverrides
#define SOAP_TYPE_ns1__TooManyConsecutiveOverrides (1813)
/* ns1:TooManyConsecutiveOverrides */
class SOAP_CMAC ns1__TooManyConsecutiveOverrides : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1813; } /* = unique id SOAP_TYPE_ns1__TooManyConsecutiveOverrides */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TooManyConsecutiveOverrides() { ns1__TooManyConsecutiveOverrides::soap_default(NULL); }
	virtual ~ns1__TooManyConsecutiveOverrides() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsUnavailable
#define SOAP_TYPE_ns1__ToolsUnavailable (1823)
/* ns1:ToolsUnavailable */
class SOAP_CMAC ns1__ToolsUnavailable : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1823; } /* = unique id SOAP_TYPE_ns1__ToolsUnavailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsUnavailable() { ns1__ToolsUnavailable::soap_default(NULL); }
	virtual ~ns1__ToolsUnavailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnrecognizedHost
#define SOAP_TYPE_ns1__UnrecognizedHost (1829)
/* ns1:UnrecognizedHost */
class SOAP_CMAC ns1__UnrecognizedHost : public ns1__VimFault
{
public:
	std::string hostName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1829; } /* = unique id SOAP_TYPE_ns1__UnrecognizedHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnrecognizedHost() { ns1__UnrecognizedHost::soap_default(NULL); }
	virtual ~ns1__UnrecognizedHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnsupportedVimApiVersion
#define SOAP_TYPE_ns1__UnsupportedVimApiVersion (1833)
/* ns1:UnsupportedVimApiVersion */
class SOAP_CMAC ns1__UnsupportedVimApiVersion : public ns1__VimFault
{
public:
	std::string *version;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1833; } /* = unique id SOAP_TYPE_ns1__UnsupportedVimApiVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnsupportedVimApiVersion() { ns1__UnsupportedVimApiVersion::soap_default(NULL); }
	virtual ~ns1__UnsupportedVimApiVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserNotFound
#define SOAP_TYPE_ns1__UserNotFound (1836)
/* ns1:UserNotFound */
class SOAP_CMAC ns1__UserNotFound : public ns1__VimFault
{
public:
	std::string principal;	/* required element of type xsd:string */
	bool unresolved;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1836; } /* = unique id SOAP_TYPE_ns1__UserNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserNotFound() { ns1__UserNotFound::soap_default(NULL); }
	virtual ~ns1__UserNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppConfigFault
#define SOAP_TYPE_ns1__VAppConfigFault (1837)
/* ns1:VAppConfigFault */
class SOAP_CMAC ns1__VAppConfigFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1837; } /* = unique id SOAP_TYPE_ns1__VAppConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppConfigFault() { ns1__VAppConfigFault::soap_default(NULL); }
	virtual ~ns1__VAppConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigFault
#define SOAP_TYPE_ns1__VmConfigFault (1858)
/* ns1:VmConfigFault */
class SOAP_CMAC ns1__VmConfigFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1858; } /* = unique id SOAP_TYPE_ns1__VmConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigFault() { ns1__VmConfigFault::soap_default(NULL); }
	virtual ~ns1__VmConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceIssue
#define SOAP_TYPE_ns1__VmFaultToleranceIssue (1864)
/* ns1:VmFaultToleranceIssue */
class SOAP_CMAC ns1__VmFaultToleranceIssue : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1864; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceIssue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceIssue() { ns1__VmFaultToleranceIssue::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceIssue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMonitorIncompatibleForFaultTolerance
#define SOAP_TYPE_ns1__VmMonitorIncompatibleForFaultTolerance (1869)
/* ns1:VmMonitorIncompatibleForFaultTolerance */
class SOAP_CMAC ns1__VmMonitorIncompatibleForFaultTolerance : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1869; } /* = unique id SOAP_TYPE_ns1__VmMonitorIncompatibleForFaultTolerance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMonitorIncompatibleForFaultTolerance() { ns1__VmMonitorIncompatibleForFaultTolerance::soap_default(NULL); }
	virtual ~ns1__VmMonitorIncompatibleForFaultTolerance() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmToolsUpgradeFault
#define SOAP_TYPE_ns1__VmToolsUpgradeFault (1871)
/* ns1:VmToolsUpgradeFault */
class SOAP_CMAC ns1__VmToolsUpgradeFault : public ns1__VimFault
{
public:
	virtual int soap_type() const { return 1871; } /* = unique id SOAP_TYPE_ns1__VmToolsUpgradeFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmToolsUpgradeFault() { ns1__VmToolsUpgradeFault::soap_default(NULL); }
	virtual ~ns1__VmToolsUpgradeFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmValidateMaxDevice
#define SOAP_TYPE_ns1__VmValidateMaxDevice (1872)
/* ns1:VmValidateMaxDevice */
class SOAP_CMAC ns1__VmValidateMaxDevice : public ns1__VimFault
{
public:
	std::string device;	/* required element of type xsd:string */
	int max_;	/* required element of type xsd:int */
	int count;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1872; } /* = unique id SOAP_TYPE_ns1__VmValidateMaxDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmValidateMaxDevice() { ns1__VmValidateMaxDevice::soap_default(NULL); }
	virtual ~ns1__VmValidateMaxDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNewNetworkConnectInfo
#define SOAP_TYPE_ns1__HostNewNetworkConnectInfo (1903)
/* ns1:HostNewNetworkConnectInfo */
class SOAP_CMAC ns1__HostNewNetworkConnectInfo : public ns1__HostConnectInfoNetworkInfo
{
public:
	virtual int soap_type() const { return 1903; } /* = unique id SOAP_TYPE_ns1__HostNewNetworkConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNewNetworkConnectInfo() { ns1__HostNewNetworkConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostNewNetworkConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreExistsConnectInfo
#define SOAP_TYPE_ns1__HostDatastoreExistsConnectInfo (1906)
/* ns1:HostDatastoreExistsConnectInfo */
class SOAP_CMAC ns1__HostDatastoreExistsConnectInfo : public ns1__HostDatastoreConnectInfo
{
public:
	std::string newDatastoreName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1906; } /* = unique id SOAP_TYPE_ns1__HostDatastoreExistsConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreExistsConnectInfo() { ns1__HostDatastoreExistsConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostDatastoreExistsConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDatastoreNameConflictConnectInfo
#define SOAP_TYPE_ns1__HostDatastoreNameConflictConnectInfo (1907)
/* ns1:HostDatastoreNameConflictConnectInfo */
class SOAP_CMAC ns1__HostDatastoreNameConflictConnectInfo : public ns1__HostDatastoreConnectInfo
{
public:
	std::string newDatastoreName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1907; } /* = unique id SOAP_TYPE_ns1__HostDatastoreNameConflictConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDatastoreNameConflictConnectInfo() { ns1__HostDatastoreNameConflictConnectInfo::soap_default(NULL); }
	virtual ~ns1__HostDatastoreNameConflictConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigFileQuery
#define SOAP_TYPE_ns1__VmConfigFileQuery (1921)
/* ns1:VmConfigFileQuery */
class SOAP_CMAC ns1__VmConfigFileQuery : public ns1__FileQuery
{
public:
	ns1__VmConfigFileQueryFilter *filter;	/* optional element of type ns1:VmConfigFileQueryFilter */
	ns1__VmConfigFileQueryFlags *details;	/* optional element of type ns1:VmConfigFileQueryFlags */
public:
	virtual int soap_type() const { return 1921; } /* = unique id SOAP_TYPE_ns1__VmConfigFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigFileQuery() { ns1__VmConfigFileQuery::soap_default(NULL); }
	virtual ~ns1__VmConfigFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiskFileQuery
#define SOAP_TYPE_ns1__VmDiskFileQuery (1925)
/* ns1:VmDiskFileQuery */
class SOAP_CMAC ns1__VmDiskFileQuery : public ns1__FileQuery
{
public:
	ns1__VmDiskFileQueryFilter *filter;	/* optional element of type ns1:VmDiskFileQueryFilter */
	ns1__VmDiskFileQueryFlags *details;	/* optional element of type ns1:VmDiskFileQueryFlags */
public:
	virtual int soap_type() const { return 1925; } /* = unique id SOAP_TYPE_ns1__VmDiskFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiskFileQuery() { ns1__VmDiskFileQuery::soap_default(NULL); }
	virtual ~ns1__VmDiskFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FolderFileQuery
#define SOAP_TYPE_ns1__FolderFileQuery (1926)
/* ns1:FolderFileQuery */
class SOAP_CMAC ns1__FolderFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1926; } /* = unique id SOAP_TYPE_ns1__FolderFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FolderFileQuery() { ns1__FolderFileQuery::soap_default(NULL); }
	virtual ~ns1__FolderFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSnapshotFileQuery
#define SOAP_TYPE_ns1__VmSnapshotFileQuery (1927)
/* ns1:VmSnapshotFileQuery */
class SOAP_CMAC ns1__VmSnapshotFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1927; } /* = unique id SOAP_TYPE_ns1__VmSnapshotFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSnapshotFileQuery() { ns1__VmSnapshotFileQuery::soap_default(NULL); }
	virtual ~ns1__VmSnapshotFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IsoImageFileQuery
#define SOAP_TYPE_ns1__IsoImageFileQuery (1928)
/* ns1:IsoImageFileQuery */
class SOAP_CMAC ns1__IsoImageFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1928; } /* = unique id SOAP_TYPE_ns1__IsoImageFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IsoImageFileQuery() { ns1__IsoImageFileQuery::soap_default(NULL); }
	virtual ~ns1__IsoImageFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FloppyImageFileQuery
#define SOAP_TYPE_ns1__FloppyImageFileQuery (1929)
/* ns1:FloppyImageFileQuery */
class SOAP_CMAC ns1__FloppyImageFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1929; } /* = unique id SOAP_TYPE_ns1__FloppyImageFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FloppyImageFileQuery() { ns1__FloppyImageFileQuery::soap_default(NULL); }
	virtual ~ns1__FloppyImageFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmNvramFileQuery
#define SOAP_TYPE_ns1__VmNvramFileQuery (1930)
/* ns1:VmNvramFileQuery */
class SOAP_CMAC ns1__VmNvramFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1930; } /* = unique id SOAP_TYPE_ns1__VmNvramFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmNvramFileQuery() { ns1__VmNvramFileQuery::soap_default(NULL); }
	virtual ~ns1__VmNvramFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmLogFileQuery
#define SOAP_TYPE_ns1__VmLogFileQuery (1931)
/* ns1:VmLogFileQuery */
class SOAP_CMAC ns1__VmLogFileQuery : public ns1__FileQuery
{
public:
	virtual int soap_type() const { return 1931; } /* = unique id SOAP_TYPE_ns1__VmLogFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmLogFileQuery() { ns1__VmLogFileQuery::soap_default(NULL); }
	virtual ~ns1__VmLogFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigFileInfo
#define SOAP_TYPE_ns1__VmConfigFileInfo (1932)
/* ns1:VmConfigFileInfo */
class SOAP_CMAC ns1__VmConfigFileInfo : public ns1__FileInfo
{
public:
	int *configVersion;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1932; } /* = unique id SOAP_TYPE_ns1__VmConfigFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigFileInfo() { ns1__VmConfigFileInfo::soap_default(NULL); }
	virtual ~ns1__VmConfigFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiskFileInfo
#define SOAP_TYPE_ns1__VmDiskFileInfo (1934)
/* ns1:VmDiskFileInfo */
class SOAP_CMAC ns1__VmDiskFileInfo : public ns1__FileInfo
{
public:
	std::string *diskType;	/* optional element of type xsd:string */
	LONG64 *capacityKb;	/* optional element of type xsd:long */
	int *hardwareVersion;	/* optional element of type xsd:int */
	std::string *controllerType;	/* optional element of type xsd:string */
	std::vector<std::string >diskExtents;	/* optional element of type xsd:string */
	bool *thin;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1934; } /* = unique id SOAP_TYPE_ns1__VmDiskFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiskFileInfo() { ns1__VmDiskFileInfo::soap_default(NULL); }
	virtual ~ns1__VmDiskFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FolderFileInfo
#define SOAP_TYPE_ns1__FolderFileInfo (1935)
/* ns1:FolderFileInfo */
class SOAP_CMAC ns1__FolderFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1935; } /* = unique id SOAP_TYPE_ns1__FolderFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FolderFileInfo() { ns1__FolderFileInfo::soap_default(NULL); }
	virtual ~ns1__FolderFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSnapshotFileInfo
#define SOAP_TYPE_ns1__VmSnapshotFileInfo (1936)
/* ns1:VmSnapshotFileInfo */
class SOAP_CMAC ns1__VmSnapshotFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1936; } /* = unique id SOAP_TYPE_ns1__VmSnapshotFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSnapshotFileInfo() { ns1__VmSnapshotFileInfo::soap_default(NULL); }
	virtual ~ns1__VmSnapshotFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IsoImageFileInfo
#define SOAP_TYPE_ns1__IsoImageFileInfo (1937)
/* ns1:IsoImageFileInfo */
class SOAP_CMAC ns1__IsoImageFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1937; } /* = unique id SOAP_TYPE_ns1__IsoImageFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IsoImageFileInfo() { ns1__IsoImageFileInfo::soap_default(NULL); }
	virtual ~ns1__IsoImageFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FloppyImageFileInfo
#define SOAP_TYPE_ns1__FloppyImageFileInfo (1938)
/* ns1:FloppyImageFileInfo */
class SOAP_CMAC ns1__FloppyImageFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1938; } /* = unique id SOAP_TYPE_ns1__FloppyImageFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FloppyImageFileInfo() { ns1__FloppyImageFileInfo::soap_default(NULL); }
	virtual ~ns1__FloppyImageFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmNvramFileInfo
#define SOAP_TYPE_ns1__VmNvramFileInfo (1939)
/* ns1:VmNvramFileInfo */
class SOAP_CMAC ns1__VmNvramFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1939; } /* = unique id SOAP_TYPE_ns1__VmNvramFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmNvramFileInfo() { ns1__VmNvramFileInfo::soap_default(NULL); }
	virtual ~ns1__VmNvramFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmLogFileInfo
#define SOAP_TYPE_ns1__VmLogFileInfo (1940)
/* ns1:VmLogFileInfo */
class SOAP_CMAC ns1__VmLogFileInfo : public ns1__FileInfo
{
public:
	virtual int soap_type() const { return 1940; } /* = unique id SOAP_TYPE_ns1__VmLogFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmLogFileInfo() { ns1__VmLogFileInfo::soap_default(NULL); }
	virtual ~ns1__VmLogFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreInfo
#define SOAP_TYPE_ns1__VmfsDatastoreInfo (1945)
/* ns1:VmfsDatastoreInfo */
class SOAP_CMAC ns1__VmfsDatastoreInfo : public ns1__DatastoreInfo
{
public:
	ns1__HostVmfsVolume *vmfs;	/* optional element of type ns1:HostVmfsVolume */
public:
	virtual int soap_type() const { return 1945; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreInfo() { ns1__VmfsDatastoreInfo::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasDatastoreInfo
#define SOAP_TYPE_ns1__NasDatastoreInfo (1946)
/* ns1:NasDatastoreInfo */
class SOAP_CMAC ns1__NasDatastoreInfo : public ns1__DatastoreInfo
{
public:
	class ns1__HostNasVolume *nas;	/* optional element of type ns1:HostNasVolume */
public:
	virtual int soap_type() const { return 1946; } /* = unique id SOAP_TYPE_ns1__NasDatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasDatastoreInfo() { ns1__NasDatastoreInfo::soap_default(NULL); }
	virtual ~ns1__NasDatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalDatastoreInfo
#define SOAP_TYPE_ns1__LocalDatastoreInfo (1947)
/* ns1:LocalDatastoreInfo */
class SOAP_CMAC ns1__LocalDatastoreInfo : public ns1__DatastoreInfo
{
public:
	std::string *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1947; } /* = unique id SOAP_TYPE_ns1__LocalDatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalDatastoreInfo() { ns1__LocalDatastoreInfo::soap_default(NULL); }
	virtual ~ns1__LocalDatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreCreateSpec
#define SOAP_TYPE_ns1__VmfsDatastoreCreateSpec (1949)
/* ns1:VmfsDatastoreCreateSpec */
class SOAP_CMAC ns1__VmfsDatastoreCreateSpec : public ns1__VmfsDatastoreSpec
{
public:
	ns1__HostDiskPartitionSpec *partition;	/* required element of type ns1:HostDiskPartitionSpec */
	ns1__HostVmfsSpec *vmfs;	/* required element of type ns1:HostVmfsSpec */
	std::vector<ns1__HostScsiDiskPartition * >extent;	/* optional element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 1949; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreCreateSpec() { ns1__VmfsDatastoreCreateSpec::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreExtendSpec
#define SOAP_TYPE_ns1__VmfsDatastoreExtendSpec (1950)
/* ns1:VmfsDatastoreExtendSpec */
class SOAP_CMAC ns1__VmfsDatastoreExtendSpec : public ns1__VmfsDatastoreSpec
{
public:
	ns1__HostDiskPartitionSpec *partition;	/* required element of type ns1:HostDiskPartitionSpec */
	std::vector<ns1__HostScsiDiskPartition * >extent;	/* required element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 1950; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreExtendSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreExtendSpec() { ns1__VmfsDatastoreExtendSpec::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreExtendSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreExpandSpec
#define SOAP_TYPE_ns1__VmfsDatastoreExpandSpec (1951)
/* ns1:VmfsDatastoreExpandSpec */
class SOAP_CMAC ns1__VmfsDatastoreExpandSpec : public ns1__VmfsDatastoreSpec
{
public:
	ns1__HostDiskPartitionSpec *partition;	/* required element of type ns1:HostDiskPartitionSpec */
	ns1__HostScsiDiskPartition *extent;	/* required element of type ns1:HostScsiDiskPartition */
public:
	virtual int soap_type() const { return 1951; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreExpandSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreExpandSpec() { ns1__VmfsDatastoreExpandSpec::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreExpandSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreSingleExtentOption
#define SOAP_TYPE_ns1__VmfsDatastoreSingleExtentOption (1953)
/* ns1:VmfsDatastoreSingleExtentOption */
class SOAP_CMAC ns1__VmfsDatastoreSingleExtentOption : public ns1__VmfsDatastoreBaseOption
{
public:
	ns1__HostDiskPartitionBlockRange *vmfsExtent;	/* required element of type ns1:HostDiskPartitionBlockRange */
public:
	virtual int soap_type() const { return 1953; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreSingleExtentOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreSingleExtentOption() { ns1__VmfsDatastoreSingleExtentOption::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreSingleExtentOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreMultipleExtentOption
#define SOAP_TYPE_ns1__VmfsDatastoreMultipleExtentOption (1955)
/* ns1:VmfsDatastoreMultipleExtentOption */
class SOAP_CMAC ns1__VmfsDatastoreMultipleExtentOption : public ns1__VmfsDatastoreBaseOption
{
public:
	std::vector<ns1__HostDiskPartitionBlockRange * >vmfsExtent;	/* required element of type ns1:HostDiskPartitionBlockRange */
public:
	virtual int soap_type() const { return 1955; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreMultipleExtentOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreMultipleExtentOption() { ns1__VmfsDatastoreMultipleExtentOption::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreMultipleExtentOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDirectoryStoreInfo
#define SOAP_TYPE_ns1__HostDirectoryStoreInfo (1974)
/* ns1:HostDirectoryStoreInfo */
class SOAP_CMAC ns1__HostDirectoryStoreInfo : public ns1__HostAuthenticationStoreInfo
{
public:
	virtual int soap_type() const { return 1974; } /* = unique id SOAP_TYPE_ns1__HostDirectoryStoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDirectoryStoreInfo() { ns1__HostDirectoryStoreInfo::soap_default(NULL); }
	virtual ~ns1__HostDirectoryStoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDnsConfigSpec
#define SOAP_TYPE_ns1__HostDnsConfigSpec (1987)
/* ns1:HostDnsConfigSpec */
class SOAP_CMAC ns1__HostDnsConfigSpec : public ns1__HostDnsConfig
{
public:
	ns1__HostVirtualNicConnection *virtualNicConnection;	/* optional element of type ns1:HostVirtualNicConnection */
public:
	virtual int soap_type() const { return 1987; } /* = unique id SOAP_TYPE_ns1__HostDnsConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDnsConfigSpec() { ns1__HostDnsConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostDnsConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNasVolume
#define SOAP_TYPE_ns1__HostNasVolume (1999)
/* ns1:HostNasVolume */
class SOAP_CMAC ns1__HostNasVolume : public ns1__HostFileSystemVolume
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
	std::string *userName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1999; } /* = unique id SOAP_TYPE_ns1__HostNasVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNasVolume() { ns1__HostNasVolume::soap_default(NULL); }
	virtual ~ns1__HostNasVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLocalFileSystemVolume
#define SOAP_TYPE_ns1__HostLocalFileSystemVolume (2001)
/* ns1:HostLocalFileSystemVolume */
class SOAP_CMAC ns1__HostLocalFileSystemVolume : public ns1__HostFileSystemVolume
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2001; } /* = unique id SOAP_TYPE_ns1__HostLocalFileSystemVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLocalFileSystemVolume() { ns1__HostLocalFileSystemVolume::soap_default(NULL); }
	virtual ~ns1__HostLocalFileSystemVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStorageElementInfo
#define SOAP_TYPE_ns1__HostStorageElementInfo (2023)
/* ns1:HostStorageElementInfo */
class SOAP_CMAC ns1__HostStorageElementInfo : public ns1__HostHardwareElementInfo
{
public:
	std::vector<ns1__HostStorageOperationalInfo * >operationalInfo;	/* optional element of type ns1:HostStorageOperationalInfo */
public:
	virtual int soap_type() const { return 2023; } /* = unique id SOAP_TYPE_ns1__HostStorageElementInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStorageElementInfo() { ns1__HostStorageElementInfo::soap_default(NULL); }
	virtual ~ns1__HostStorageElementInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostParallelScsiHba
#define SOAP_TYPE_ns1__HostParallelScsiHba (2029)
/* ns1:HostParallelScsiHba */
class SOAP_CMAC ns1__HostParallelScsiHba : public ns1__HostHostBusAdapter
{
public:
	virtual int soap_type() const { return 2029; } /* = unique id SOAP_TYPE_ns1__HostParallelScsiHba */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostParallelScsiHba() { ns1__HostParallelScsiHba::soap_default(NULL); }
	virtual ~ns1__HostParallelScsiHba() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostBlockHba
#define SOAP_TYPE_ns1__HostBlockHba (2030)
/* ns1:HostBlockHba */
class SOAP_CMAC ns1__HostBlockHba : public ns1__HostHostBusAdapter
{
public:
	virtual int soap_type() const { return 2030; } /* = unique id SOAP_TYPE_ns1__HostBlockHba */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostBlockHba() { ns1__HostBlockHba::soap_default(NULL); }
	virtual ~ns1__HostBlockHba() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFibreChannelHba
#define SOAP_TYPE_ns1__HostFibreChannelHba (2031)
/* ns1:HostFibreChannelHba */
class SOAP_CMAC ns1__HostFibreChannelHba : public ns1__HostHostBusAdapter
{
public:
	LONG64 portWorldWideName;	/* required element of type xsd:long */
	LONG64 nodeWorldWideName;	/* required element of type xsd:long */
	enum ns1__FibreChannelPortType portType;	/* required element of type ns1:FibreChannelPortType */
	LONG64 speed;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2031; } /* = unique id SOAP_TYPE_ns1__HostFibreChannelHba */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFibreChannelHba() { ns1__HostFibreChannelHba::soap_default(NULL); }
	virtual ~ns1__HostFibreChannelHba() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHbaParamValue
#define SOAP_TYPE_ns1__HostInternetScsiHbaParamValue (2032)
/* ns1:HostInternetScsiHbaParamValue */
class SOAP_CMAC ns1__HostInternetScsiHbaParamValue : public ns1__OptionValue
{
public:
	bool *isInherited;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2032; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHbaParamValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHbaParamValue() { ns1__HostInternetScsiHbaParamValue::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHbaParamValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiHba
#define SOAP_TYPE_ns1__HostInternetScsiHba (2047)
/* ns1:HostInternetScsiHba */
class SOAP_CMAC ns1__HostInternetScsiHba : public ns1__HostHostBusAdapter
{
public:
	bool isSoftwareBased;	/* required element of type xsd:boolean */
	ns1__HostInternetScsiHbaDiscoveryCapabilities *discoveryCapabilities;	/* required element of type ns1:HostInternetScsiHbaDiscoveryCapabilities */
	ns1__HostInternetScsiHbaDiscoveryProperties *discoveryProperties;	/* required element of type ns1:HostInternetScsiHbaDiscoveryProperties */
	ns1__HostInternetScsiHbaAuthenticationCapabilities *authenticationCapabilities;	/* required element of type ns1:HostInternetScsiHbaAuthenticationCapabilities */
	ns1__HostInternetScsiHbaAuthenticationProperties *authenticationProperties;	/* required element of type ns1:HostInternetScsiHbaAuthenticationProperties */
	ns1__HostInternetScsiHbaDigestCapabilities *digestCapabilities;	/* optional element of type ns1:HostInternetScsiHbaDigestCapabilities */
	ns1__HostInternetScsiHbaDigestProperties *digestProperties;	/* optional element of type ns1:HostInternetScsiHbaDigestProperties */
	ns1__HostInternetScsiHbaIPCapabilities *ipCapabilities;	/* required element of type ns1:HostInternetScsiHbaIPCapabilities */
	ns1__HostInternetScsiHbaIPProperties *ipProperties;	/* required element of type ns1:HostInternetScsiHbaIPProperties */
	std::vector<ns1__OptionDef * >supportedAdvancedOptions;	/* optional element of type ns1:OptionDef */
	std::vector<ns1__HostInternetScsiHbaParamValue * >advancedOptions;	/* optional element of type ns1:HostInternetScsiHbaParamValue */
	std::string iScsiName;	/* required element of type xsd:string */
	std::string *iScsiAlias;	/* optional element of type xsd:string */
	std::vector<ns1__HostInternetScsiHbaSendTarget * >configuredSendTarget;	/* optional element of type ns1:HostInternetScsiHbaSendTarget */
	std::vector<ns1__HostInternetScsiHbaStaticTarget * >configuredStaticTarget;	/* optional element of type ns1:HostInternetScsiHbaStaticTarget */
	int *maxSpeedMb;	/* optional element of type xsd:int */
	int *currentSpeedMb;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2047; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiHba */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiHba() { ns1__HostInternetScsiHba::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiHba() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpRouteConfigSpec
#define SOAP_TYPE_ns1__HostIpRouteConfigSpec (2058)
/* ns1:HostIpRouteConfigSpec */
class SOAP_CMAC ns1__HostIpRouteConfigSpec : public ns1__HostIpRouteConfig
{
public:
	ns1__HostVirtualNicConnection *gatewayDeviceConnection;	/* optional element of type ns1:HostVirtualNicConnection */
	ns1__HostVirtualNicConnection *ipV6GatewayDeviceConnection;	/* optional element of type ns1:HostVirtualNicConnection */
public:
	virtual int soap_type() const { return 2058; } /* = unique id SOAP_TYPE_ns1__HostIpRouteConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpRouteConfigSpec() { ns1__HostIpRouteConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostIpRouteConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPosixAccountSpec
#define SOAP_TYPE_ns1__HostPosixAccountSpec (2073)
/* ns1:HostPosixAccountSpec */
class SOAP_CMAC ns1__HostPosixAccountSpec : public ns1__HostAccountSpec
{
public:
	int *posixId;	/* optional element of type xsd:int */
	bool *shellAccess;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2073; } /* = unique id SOAP_TYPE_ns1__HostPosixAccountSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPosixAccountSpec() { ns1__HostPosixAccountSpec::soap_default(NULL); }
	virtual ~ns1__HostPosixAccountSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLocalAuthenticationInfo
#define SOAP_TYPE_ns1__HostLocalAuthenticationInfo (2074)
/* ns1:HostLocalAuthenticationInfo */
class SOAP_CMAC ns1__HostLocalAuthenticationInfo : public ns1__HostAuthenticationStoreInfo
{
public:
	virtual int soap_type() const { return 2074; } /* = unique id SOAP_TYPE_ns1__HostLocalAuthenticationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLocalAuthenticationInfo() { ns1__HostLocalAuthenticationInfo::soap_default(NULL); }
	virtual ~ns1__HostLocalAuthenticationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMultipathInfoFixedLogicalUnitPolicy
#define SOAP_TYPE_ns1__HostMultipathInfoFixedLogicalUnitPolicy (2082)
/* ns1:HostMultipathInfoFixedLogicalUnitPolicy */
class SOAP_CMAC ns1__HostMultipathInfoFixedLogicalUnitPolicy : public ns1__HostMultipathInfoLogicalUnitPolicy
{
public:
	std::string prefer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2082; } /* = unique id SOAP_TYPE_ns1__HostMultipathInfoFixedLogicalUnitPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMultipathInfoFixedLogicalUnitPolicy() { ns1__HostMultipathInfoFixedLogicalUnitPolicy::soap_default(NULL); }
	virtual ~ns1__HostMultipathInfoFixedLogicalUnitPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicIpHint
#define SOAP_TYPE_ns1__PhysicalNicIpHint (2134)
/* ns1:PhysicalNicIpHint */
class SOAP_CMAC ns1__PhysicalNicIpHint : public ns1__PhysicalNicHint
{
public:
	std::string ipSubnet;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2134; } /* = unique id SOAP_TYPE_ns1__PhysicalNicIpHint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicIpHint() { ns1__PhysicalNicIpHint::soap_default(NULL); }
	virtual ~ns1__PhysicalNicIpHint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicNameHint
#define SOAP_TYPE_ns1__PhysicalNicNameHint (2136)
/* ns1:PhysicalNicNameHint */
class SOAP_CMAC ns1__PhysicalNicNameHint : public ns1__PhysicalNicHint
{
public:
	std::string network;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2136; } /* = unique id SOAP_TYPE_ns1__PhysicalNicNameHint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicNameHint() { ns1__PhysicalNicNameHint::soap_default(NULL); }
	virtual ~ns1__PhysicalNicNameHint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScsiLun
#define SOAP_TYPE_ns1__ScsiLun (2181)
/* ns1:ScsiLun */
class SOAP_CMAC ns1__ScsiLun : public ns1__HostDevice
{
public:
	std::string *key;	/* optional element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	std::vector<ns1__ScsiLunDescriptor * >descriptor;	/* optional element of type ns1:ScsiLunDescriptor */
	std::string *canonicalName;	/* optional element of type xsd:string */
	std::string *displayName;	/* optional element of type xsd:string */
	std::string lunType;	/* required element of type xsd:string */
	std::string *vendor;	/* optional element of type xsd:string */
	std::string *model;	/* optional element of type xsd:string */
	std::string *revision;	/* optional element of type xsd:string */
	int *scsiLevel;	/* optional element of type xsd:int */
	std::string *serialNumber;	/* optional element of type xsd:string */
	ns1__ScsiLunDurableName *durableName;	/* optional element of type ns1:ScsiLunDurableName */
	std::vector<ns1__ScsiLunDurableName * >alternateName;	/* optional element of type ns1:ScsiLunDurableName */
	std::vector<char >standardInquiry;	/* optional element of type xsd:byte */
	int *queueDepth;	/* optional element of type xsd:int */
	std::vector<std::string >operationalState;	/* required element of type xsd:string */
	ns1__ScsiLunCapabilities *capabilities;	/* optional element of type ns1:ScsiLunCapabilities */
	std::string *vStorageSupport;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2181; } /* = unique id SOAP_TYPE_ns1__ScsiLun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScsiLun() { ns1__ScsiLun::soap_default(NULL); }
	virtual ~ns1__ScsiLun() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostParallelScsiTargetTransport
#define SOAP_TYPE_ns1__HostParallelScsiTargetTransport (2214)
/* ns1:HostParallelScsiTargetTransport */
class SOAP_CMAC ns1__HostParallelScsiTargetTransport : public ns1__HostTargetTransport
{
public:
	virtual int soap_type() const { return 2214; } /* = unique id SOAP_TYPE_ns1__HostParallelScsiTargetTransport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostParallelScsiTargetTransport() { ns1__HostParallelScsiTargetTransport::soap_default(NULL); }
	virtual ~ns1__HostParallelScsiTargetTransport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostBlockAdapterTargetTransport
#define SOAP_TYPE_ns1__HostBlockAdapterTargetTransport (2215)
/* ns1:HostBlockAdapterTargetTransport */
class SOAP_CMAC ns1__HostBlockAdapterTargetTransport : public ns1__HostTargetTransport
{
public:
	virtual int soap_type() const { return 2215; } /* = unique id SOAP_TYPE_ns1__HostBlockAdapterTargetTransport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostBlockAdapterTargetTransport() { ns1__HostBlockAdapterTargetTransport::soap_default(NULL); }
	virtual ~ns1__HostBlockAdapterTargetTransport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostFibreChannelTargetTransport
#define SOAP_TYPE_ns1__HostFibreChannelTargetTransport (2216)
/* ns1:HostFibreChannelTargetTransport */
class SOAP_CMAC ns1__HostFibreChannelTargetTransport : public ns1__HostTargetTransport
{
public:
	LONG64 portWorldWideName;	/* required element of type xsd:long */
	LONG64 nodeWorldWideName;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2216; } /* = unique id SOAP_TYPE_ns1__HostFibreChannelTargetTransport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostFibreChannelTargetTransport() { ns1__HostFibreChannelTargetTransport::soap_default(NULL); }
	virtual ~ns1__HostFibreChannelTargetTransport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInternetScsiTargetTransport
#define SOAP_TYPE_ns1__HostInternetScsiTargetTransport (2217)
/* ns1:HostInternetScsiTargetTransport */
class SOAP_CMAC ns1__HostInternetScsiTargetTransport : public ns1__HostTargetTransport
{
public:
	std::string iScsiName;	/* required element of type xsd:string */
	std::string iScsiAlias;	/* required element of type xsd:string */
	std::vector<std::string >address;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2217; } /* = unique id SOAP_TYPE_ns1__HostInternetScsiTargetTransport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInternetScsiTargetTransport() { ns1__HostInternetScsiTargetTransport::soap_default(NULL); }
	virtual ~ns1__HostInternetScsiTargetTransport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostTpmDigestInfo
#define SOAP_TYPE_ns1__HostTpmDigestInfo (2219)
/* ns1:HostTpmDigestInfo */
class SOAP_CMAC ns1__HostTpmDigestInfo : public ns1__HostDigestInfo
{
public:
	int pcrNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2219; } /* = unique id SOAP_TYPE_ns1__HostTpmDigestInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostTpmDigestInfo() { ns1__HostTpmDigestInfo::soap_default(NULL); }
	virtual ~ns1__HostTpmDigestInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchAutoBridge
#define SOAP_TYPE_ns1__HostVirtualSwitchAutoBridge (2246)
/* ns1:HostVirtualSwitchAutoBridge */
class SOAP_CMAC ns1__HostVirtualSwitchAutoBridge : public ns1__HostVirtualSwitchBridge
{
public:
	std::vector<std::string >excludedNicDevice;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2246; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchAutoBridge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchAutoBridge() { ns1__HostVirtualSwitchAutoBridge::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchAutoBridge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchSimpleBridge
#define SOAP_TYPE_ns1__HostVirtualSwitchSimpleBridge (2247)
/* ns1:HostVirtualSwitchSimpleBridge */
class SOAP_CMAC ns1__HostVirtualSwitchSimpleBridge : public ns1__HostVirtualSwitchBridge
{
public:
	std::string nicDevice;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2247; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchSimpleBridge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchSimpleBridge() { ns1__HostVirtualSwitchSimpleBridge::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchSimpleBridge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVirtualSwitchBondBridge
#define SOAP_TYPE_ns1__HostVirtualSwitchBondBridge (2248)
/* ns1:HostVirtualSwitchBondBridge */
class SOAP_CMAC ns1__HostVirtualSwitchBondBridge : public ns1__HostVirtualSwitchBridge
{
public:
	std::vector<std::string >nicDevice;	/* required element of type xsd:string */
	ns1__HostVirtualSwitchBeaconConfig *beacon;	/* optional element of type ns1:HostVirtualSwitchBeaconConfig */
	ns1__LinkDiscoveryProtocolConfig *linkDiscoveryProtocolConfig;	/* optional element of type ns1:LinkDiscoveryProtocolConfig */
public:
	virtual int soap_type() const { return 2248; } /* = unique id SOAP_TYPE_ns1__HostVirtualSwitchBondBridge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVirtualSwitchBondBridge() { ns1__HostVirtualSwitchBondBridge::soap_default(NULL); }
	virtual ~ns1__HostVirtualSwitchBondBridge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVmfsVolume
#define SOAP_TYPE_ns1__HostVmfsVolume (2258)
/* ns1:HostVmfsVolume */
class SOAP_CMAC ns1__HostVmfsVolume : public ns1__HostFileSystemVolume
{
public:
	int blockSizeMb;	/* required element of type xsd:int */
	int maxBlocks;	/* required element of type xsd:int */
	int majorVersion;	/* required element of type xsd:int */
	std::string version;	/* required element of type xsd:string */
	std::string uuid;	/* required element of type xsd:string */
	std::vector<ns1__HostScsiDiskPartition * >extent;	/* required element of type ns1:HostScsiDiskPartition */
	bool vmfsUpgradable;	/* required element of type xsd:boolean */
	ns1__HostForceMountedInfo *forceMountedInfo;	/* optional element of type ns1:HostForceMountedInfo */
public:
	virtual int soap_type() const { return 2258; } /* = unique id SOAP_TYPE_ns1__HostVmfsVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVmfsVolume() { ns1__HostVmfsVolume::soap_default(NULL); }
	virtual ~ns1__HostVmfsVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WinNetBIOSConfigInfo
#define SOAP_TYPE_ns1__WinNetBIOSConfigInfo (2285)
/* ns1:WinNetBIOSConfigInfo */
class SOAP_CMAC ns1__WinNetBIOSConfigInfo : public ns1__NetBIOSConfigInfo
{
public:
	std::string primaryWINS;	/* required element of type xsd:string */
	std::string *secondaryWINS;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2285; } /* = unique id SOAP_TYPE_ns1__WinNetBIOSConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WinNetBIOSConfigInfo() { ns1__WinNetBIOSConfigInfo::soap_default(NULL); }
	virtual ~ns1__WinNetBIOSConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BoolOption
#define SOAP_TYPE_ns1__BoolOption (2287)
/* ns1:BoolOption */
class SOAP_CMAC ns1__BoolOption : public ns1__OptionType
{
public:
	bool supported;	/* required element of type xsd:boolean */
	bool defaultValue;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2287; } /* = unique id SOAP_TYPE_ns1__BoolOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BoolOption() { ns1__BoolOption::soap_default(NULL); }
	virtual ~ns1__BoolOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChoiceOption
#define SOAP_TYPE_ns1__ChoiceOption (2288)
/* ns1:ChoiceOption */
class SOAP_CMAC ns1__ChoiceOption : public ns1__OptionType
{
public:
	std::vector<ns1__ElementDescription * >choiceInfo;	/* required element of type ns1:ElementDescription */
	int *defaultIndex;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2288; } /* = unique id SOAP_TYPE_ns1__ChoiceOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChoiceOption() { ns1__ChoiceOption::soap_default(NULL); }
	virtual ~ns1__ChoiceOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FloatOption
#define SOAP_TYPE_ns1__FloatOption (2289)
/* ns1:FloatOption */
class SOAP_CMAC ns1__FloatOption : public ns1__OptionType
{
public:
	float min_;	/* required element of type xsd:float */
	float max_;	/* required element of type xsd:float */
	float defaultValue;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 2289; } /* = unique id SOAP_TYPE_ns1__FloatOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FloatOption() { ns1__FloatOption::soap_default(NULL); }
	virtual ~ns1__FloatOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IntOption
#define SOAP_TYPE_ns1__IntOption (2290)
/* ns1:IntOption */
class SOAP_CMAC ns1__IntOption : public ns1__OptionType
{
public:
	int min_;	/* required element of type xsd:int */
	int max_;	/* required element of type xsd:int */
	int defaultValue;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2290; } /* = unique id SOAP_TYPE_ns1__IntOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IntOption() { ns1__IntOption::soap_default(NULL); }
	virtual ~ns1__IntOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LongOption
#define SOAP_TYPE_ns1__LongOption (2291)
/* ns1:LongOption */
class SOAP_CMAC ns1__LongOption : public ns1__OptionType
{
public:
	LONG64 min_;	/* required element of type xsd:long */
	LONG64 max_;	/* required element of type xsd:long */
	LONG64 defaultValue;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 2291; } /* = unique id SOAP_TYPE_ns1__LongOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LongOption() { ns1__LongOption::soap_default(NULL); }
	virtual ~ns1__LongOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StringOption
#define SOAP_TYPE_ns1__StringOption (2297)
/* ns1:StringOption */
class SOAP_CMAC ns1__StringOption : public ns1__OptionType
{
public:
	std::string defaultValue;	/* required element of type xsd:string */
	std::string *validCharacters;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2297; } /* = unique id SOAP_TYPE_ns1__StringOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StringOption() { ns1__StringOption::soap_default(NULL); }
	virtual ~ns1__StringOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileSimpleExpression
#define SOAP_TYPE_ns1__ProfileSimpleExpression (2310)
/* ns1:ProfileSimpleExpression */
class SOAP_CMAC ns1__ProfileSimpleExpression : public ns1__ProfileExpression
{
public:
	std::string expressionType;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >parameter;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 2310; } /* = unique id SOAP_TYPE_ns1__ProfileSimpleExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileSimpleExpression() { ns1__ProfileSimpleExpression::soap_default(NULL); }
	virtual ~ns1__ProfileSimpleExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileCompositeExpression
#define SOAP_TYPE_ns1__ProfileCompositeExpression (2311)
/* ns1:ProfileCompositeExpression */
class SOAP_CMAC ns1__ProfileCompositeExpression : public ns1__ProfileExpression
{
public:
	std::string operator_;	/* required element of type xsd:string */
	std::vector<std::string >expressionName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2311; } /* = unique id SOAP_TYPE_ns1__ProfileCompositeExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileCompositeExpression() { ns1__ProfileCompositeExpression::soap_default(NULL); }
	virtual ~ns1__ProfileCompositeExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileCompositePolicyOptionMetadata
#define SOAP_TYPE_ns1__ProfileCompositePolicyOptionMetadata (2320)
/* ns1:ProfileCompositePolicyOptionMetadata */
class SOAP_CMAC ns1__ProfileCompositePolicyOptionMetadata : public ns1__ProfilePolicyOptionMetadata
{
public:
	std::vector<std::string >option;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2320; } /* = unique id SOAP_TYPE_ns1__ProfileCompositePolicyOptionMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileCompositePolicyOptionMetadata() { ns1__ProfileCompositePolicyOptionMetadata::soap_default(NULL); }
	virtual ~ns1__ProfileCompositePolicyOptionMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserInputRequiredParameterMetadata
#define SOAP_TYPE_ns1__UserInputRequiredParameterMetadata (2321)
/* ns1:UserInputRequiredParameterMetadata */
class SOAP_CMAC ns1__UserInputRequiredParameterMetadata : public ns1__ProfilePolicyOptionMetadata
{
public:
	std::vector<ns1__ProfileParameterMetadata * >userInputParameter;	/* optional element of type ns1:ProfileParameterMetadata */
public:
	virtual int soap_type() const { return 2321; } /* = unique id SOAP_TYPE_ns1__UserInputRequiredParameterMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserInputRequiredParameterMetadata() { ns1__UserInputRequiredParameterMetadata::soap_default(NULL); }
	virtual ~ns1__UserInputRequiredParameterMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CompositePolicyOption
#define SOAP_TYPE_ns1__CompositePolicyOption (2326)
/* ns1:CompositePolicyOption */
class SOAP_CMAC ns1__CompositePolicyOption : public ns1__PolicyOption
{
public:
	std::vector<ns1__PolicyOption * >option;	/* optional element of type ns1:PolicyOption */
public:
	virtual int soap_type() const { return 2326; } /* = unique id SOAP_TYPE_ns1__CompositePolicyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CompositePolicyOption() { ns1__CompositePolicyOption::soap_default(NULL); }
	virtual ~ns1__CompositePolicyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileSerializedCreateSpec
#define SOAP_TYPE_ns1__ProfileSerializedCreateSpec (2328)
/* ns1:ProfileSerializedCreateSpec */
class SOAP_CMAC ns1__ProfileSerializedCreateSpec : public ns1__ProfileCreateSpec
{
public:
	std::string profileConfigString;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2328; } /* = unique id SOAP_TYPE_ns1__ProfileSerializedCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileSerializedCreateSpec() { ns1__ProfileSerializedCreateSpec::soap_default(NULL); }
	virtual ~ns1__ProfileSerializedCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileConfigInfo
#define SOAP_TYPE_ns1__ClusterProfileConfigInfo (2336)
/* ns1:ClusterProfileConfigInfo */
class SOAP_CMAC ns1__ClusterProfileConfigInfo : public ns1__ProfileConfigInfo
{
public:
	ns1__ComplianceProfile *complyProfile;	/* optional element of type ns1:ComplianceProfile */
public:
	virtual int soap_type() const { return 2336; } /* = unique id SOAP_TYPE_ns1__ClusterProfileConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileConfigInfo() { ns1__ClusterProfileConfigInfo::soap_default(NULL); }
	virtual ~ns1__ClusterProfileConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileCreateSpec
#define SOAP_TYPE_ns1__ClusterProfileCreateSpec (2337)
/* ns1:ClusterProfileCreateSpec */
class SOAP_CMAC ns1__ClusterProfileCreateSpec : public ns1__ProfileCreateSpec
{
public:
	virtual int soap_type() const { return 2337; } /* = unique id SOAP_TYPE_ns1__ClusterProfileCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileCreateSpec() { ns1__ClusterProfileCreateSpec::soap_default(NULL); }
	virtual ~ns1__ClusterProfileCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostApplyProfile
#define SOAP_TYPE_ns1__HostApplyProfile (2344)
/* ns1:HostApplyProfile */
class SOAP_CMAC ns1__HostApplyProfile : public ns1__ApplyProfile
{
public:
	class ns1__HostMemoryProfile *memory;	/* optional element of type ns1:HostMemoryProfile */
	class ns1__StorageProfile *storage;	/* optional element of type ns1:StorageProfile */
	class ns1__NetworkProfile *network;	/* optional element of type ns1:NetworkProfile */
	class ns1__DateTimeProfile *datetime;	/* optional element of type ns1:DateTimeProfile */
	class ns1__FirewallProfile *firewall;	/* optional element of type ns1:FirewallProfile */
	class ns1__SecurityProfile *security;	/* optional element of type ns1:SecurityProfile */
	std::vector<ns1__ServiceProfile * >service;	/* optional element of type ns1:ServiceProfile */
	std::vector<ns1__OptionProfile * >option;	/* optional element of type ns1:OptionProfile */
	std::vector<ns1__UserProfile * >userAccount;	/* optional element of type ns1:UserProfile */
	std::vector<ns1__UserGroupProfile * >usergroupAccount;	/* optional element of type ns1:UserGroupProfile */
	class ns1__AuthenticationProfile *authentication;	/* optional element of type ns1:AuthenticationProfile */
public:
	virtual int soap_type() const { return 2344; } /* = unique id SOAP_TYPE_ns1__HostApplyProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostApplyProfile() { ns1__HostApplyProfile::soap_default(NULL); }
	virtual ~ns1__HostApplyProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysicalNicProfile
#define SOAP_TYPE_ns1__PhysicalNicProfile (2345)
/* ns1:PhysicalNicProfile */
class SOAP_CMAC ns1__PhysicalNicProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2345; } /* = unique id SOAP_TYPE_ns1__PhysicalNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysicalNicProfile() { ns1__PhysicalNicProfile::soap_default(NULL); }
	virtual ~ns1__PhysicalNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMemoryProfile
#define SOAP_TYPE_ns1__HostMemoryProfile (2347)
/* ns1:HostMemoryProfile */
class SOAP_CMAC ns1__HostMemoryProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2347; } /* = unique id SOAP_TYPE_ns1__HostMemoryProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMemoryProfile() { ns1__HostMemoryProfile::soap_default(NULL); }
	virtual ~ns1__HostMemoryProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserProfile
#define SOAP_TYPE_ns1__UserProfile (2348)
/* ns1:UserProfile */
class SOAP_CMAC ns1__UserProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2348; } /* = unique id SOAP_TYPE_ns1__UserProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserProfile() { ns1__UserProfile::soap_default(NULL); }
	virtual ~ns1__UserProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserGroupProfile
#define SOAP_TYPE_ns1__UserGroupProfile (2350)
/* ns1:UserGroupProfile */
class SOAP_CMAC ns1__UserGroupProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2350; } /* = unique id SOAP_TYPE_ns1__UserGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserGroupProfile() { ns1__UserGroupProfile::soap_default(NULL); }
	virtual ~ns1__UserGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecurityProfile
#define SOAP_TYPE_ns1__SecurityProfile (2352)
/* ns1:SecurityProfile */
class SOAP_CMAC ns1__SecurityProfile : public ns1__ApplyProfile
{
public:
	std::vector<ns1__PermissionProfile * >permission;	/* optional element of type ns1:PermissionProfile */
public:
	virtual int soap_type() const { return 2352; } /* = unique id SOAP_TYPE_ns1__SecurityProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecurityProfile() { ns1__SecurityProfile::soap_default(NULL); }
	virtual ~ns1__SecurityProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OptionProfile
#define SOAP_TYPE_ns1__OptionProfile (2353)
/* ns1:OptionProfile */
class SOAP_CMAC ns1__OptionProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2353; } /* = unique id SOAP_TYPE_ns1__OptionProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OptionProfile() { ns1__OptionProfile::soap_default(NULL); }
	virtual ~ns1__OptionProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DateTimeProfile
#define SOAP_TYPE_ns1__DateTimeProfile (2355)
/* ns1:DateTimeProfile */
class SOAP_CMAC ns1__DateTimeProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2355; } /* = unique id SOAP_TYPE_ns1__DateTimeProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DateTimeProfile() { ns1__DateTimeProfile::soap_default(NULL); }
	virtual ~ns1__DateTimeProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServiceProfile
#define SOAP_TYPE_ns1__ServiceProfile (2356)
/* ns1:ServiceProfile */
class SOAP_CMAC ns1__ServiceProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2356; } /* = unique id SOAP_TYPE_ns1__ServiceProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServiceProfile() { ns1__ServiceProfile::soap_default(NULL); }
	virtual ~ns1__ServiceProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FirewallProfileRulesetProfile
#define SOAP_TYPE_ns1__FirewallProfileRulesetProfile (2358)
/* ns1:FirewallProfileRulesetProfile */
class SOAP_CMAC ns1__FirewallProfileRulesetProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2358; } /* = unique id SOAP_TYPE_ns1__FirewallProfileRulesetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FirewallProfileRulesetProfile() { ns1__FirewallProfileRulesetProfile::soap_default(NULL); }
	virtual ~ns1__FirewallProfileRulesetProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FirewallProfile
#define SOAP_TYPE_ns1__FirewallProfile (2360)
/* ns1:FirewallProfile */
class SOAP_CMAC ns1__FirewallProfile : public ns1__ApplyProfile
{
public:
	std::vector<ns1__FirewallProfileRulesetProfile * >ruleset;	/* optional element of type ns1:FirewallProfileRulesetProfile */
public:
	virtual int soap_type() const { return 2360; } /* = unique id SOAP_TYPE_ns1__FirewallProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FirewallProfile() { ns1__FirewallProfile::soap_default(NULL); }
	virtual ~ns1__FirewallProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasStorageProfile
#define SOAP_TYPE_ns1__NasStorageProfile (2361)
/* ns1:NasStorageProfile */
class SOAP_CMAC ns1__NasStorageProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2361; } /* = unique id SOAP_TYPE_ns1__NasStorageProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasStorageProfile() { ns1__NasStorageProfile::soap_default(NULL); }
	virtual ~ns1__NasStorageProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageProfile
#define SOAP_TYPE_ns1__StorageProfile (2363)
/* ns1:StorageProfile */
class SOAP_CMAC ns1__StorageProfile : public ns1__ApplyProfile
{
public:
	std::vector<ns1__NasStorageProfile * >nasStorage;	/* optional element of type ns1:NasStorageProfile */
public:
	virtual int soap_type() const { return 2363; } /* = unique id SOAP_TYPE_ns1__StorageProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageProfile() { ns1__StorageProfile::soap_default(NULL); }
	virtual ~ns1__StorageProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkProfileDnsConfigProfile
#define SOAP_TYPE_ns1__NetworkProfileDnsConfigProfile (2364)
/* ns1:NetworkProfileDnsConfigProfile */
class SOAP_CMAC ns1__NetworkProfileDnsConfigProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2364; } /* = unique id SOAP_TYPE_ns1__NetworkProfileDnsConfigProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkProfileDnsConfigProfile() { ns1__NetworkProfileDnsConfigProfile::soap_default(NULL); }
	virtual ~ns1__NetworkProfileDnsConfigProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkProfile
#define SOAP_TYPE_ns1__NetworkProfile (2365)
/* ns1:NetworkProfile */
class SOAP_CMAC ns1__NetworkProfile : public ns1__ApplyProfile
{
public:
	std::vector<ns1__VirtualSwitchProfile * >vswitch;	/* optional element of type ns1:VirtualSwitchProfile */
	std::vector<ns1__VmPortGroupProfile * >vmPortGroup;	/* optional element of type ns1:VmPortGroupProfile */
	std::vector<ns1__HostPortGroupProfile * >hostPortGroup;	/* optional element of type ns1:HostPortGroupProfile */
	std::vector<ns1__ServiceConsolePortGroupProfile * >serviceConsolePortGroup;	/* optional element of type ns1:ServiceConsolePortGroupProfile */
	ns1__NetworkProfileDnsConfigProfile *dnsConfig;	/* optional element of type ns1:NetworkProfileDnsConfigProfile */
	class ns1__IpRouteProfile *ipRouteConfig;	/* optional element of type ns1:IpRouteProfile */
	ns1__IpRouteProfile *consoleIpRouteConfig;	/* optional element of type ns1:IpRouteProfile */
	std::vector<ns1__PhysicalNicProfile * >pnic;	/* optional element of type ns1:PhysicalNicProfile */
	std::vector<ns1__DvsProfile * >dvswitch;	/* optional element of type ns1:DvsProfile */
	std::vector<ns1__DvsServiceConsoleVNicProfile * >dvsServiceConsoleNic;	/* optional element of type ns1:DvsServiceConsoleVNicProfile */
	std::vector<ns1__DvsHostVNicProfile * >dvsHostNic;	/* optional element of type ns1:DvsHostVNicProfile */
public:
	virtual int soap_type() const { return 2365; } /* = unique id SOAP_TYPE_ns1__NetworkProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkProfile() { ns1__NetworkProfile::soap_default(NULL); }
	virtual ~ns1__NetworkProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsVNicProfile
#define SOAP_TYPE_ns1__DvsVNicProfile (2366)
/* ns1:DvsVNicProfile */
class SOAP_CMAC ns1__DvsVNicProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
	class ns1__IpAddressProfile *ipConfig;	/* required element of type ns1:IpAddressProfile */
public:
	virtual int soap_type() const { return 2366; } /* = unique id SOAP_TYPE_ns1__DvsVNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsVNicProfile() { ns1__DvsVNicProfile::soap_default(NULL); }
	virtual ~ns1__DvsVNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsProfile
#define SOAP_TYPE_ns1__DvsProfile (2371)
/* ns1:DvsProfile */
class SOAP_CMAC ns1__DvsProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::vector<ns1__PnicUplinkProfile * >uplink;	/* optional element of type ns1:PnicUplinkProfile */
public:
	virtual int soap_type() const { return 2371; } /* = unique id SOAP_TYPE_ns1__DvsProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsProfile() { ns1__DvsProfile::soap_default(NULL); }
	virtual ~ns1__DvsProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PnicUplinkProfile
#define SOAP_TYPE_ns1__PnicUplinkProfile (2373)
/* ns1:PnicUplinkProfile */
class SOAP_CMAC ns1__PnicUplinkProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2373; } /* = unique id SOAP_TYPE_ns1__PnicUplinkProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PnicUplinkProfile() { ns1__PnicUplinkProfile::soap_default(NULL); }
	virtual ~ns1__PnicUplinkProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpRouteProfile
#define SOAP_TYPE_ns1__IpRouteProfile (2375)
/* ns1:IpRouteProfile */
class SOAP_CMAC ns1__IpRouteProfile : public ns1__ApplyProfile
{
public:
	std::vector<ns1__StaticRouteProfile * >staticRoute;	/* optional element of type ns1:StaticRouteProfile */
public:
	virtual int soap_type() const { return 2375; } /* = unique id SOAP_TYPE_ns1__IpRouteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpRouteProfile() { ns1__IpRouteProfile::soap_default(NULL); }
	virtual ~ns1__IpRouteProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StaticRouteProfile
#define SOAP_TYPE_ns1__StaticRouteProfile (2376)
/* ns1:StaticRouteProfile */
class SOAP_CMAC ns1__StaticRouteProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2376; } /* = unique id SOAP_TYPE_ns1__StaticRouteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StaticRouteProfile() { ns1__StaticRouteProfile::soap_default(NULL); }
	virtual ~ns1__StaticRouteProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LinkProfile
#define SOAP_TYPE_ns1__LinkProfile (2378)
/* ns1:LinkProfile */
class SOAP_CMAC ns1__LinkProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2378; } /* = unique id SOAP_TYPE_ns1__LinkProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LinkProfile() { ns1__LinkProfile::soap_default(NULL); }
	virtual ~ns1__LinkProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumPortsProfile
#define SOAP_TYPE_ns1__NumPortsProfile (2379)
/* ns1:NumPortsProfile */
class SOAP_CMAC ns1__NumPortsProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2379; } /* = unique id SOAP_TYPE_ns1__NumPortsProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumPortsProfile() { ns1__NumPortsProfile::soap_default(NULL); }
	virtual ~ns1__NumPortsProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSwitchProfile
#define SOAP_TYPE_ns1__VirtualSwitchProfile (2380)
/* ns1:VirtualSwitchProfile */
class SOAP_CMAC ns1__VirtualSwitchProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	ns1__LinkProfile *link;	/* required element of type ns1:LinkProfile */
	ns1__NumPortsProfile *numPorts;	/* required element of type ns1:NumPortsProfile */
	class ns1__NetworkPolicyProfile *networkPolicy;	/* required element of type ns1:NetworkPolicyProfile */
public:
	virtual int soap_type() const { return 2380; } /* = unique id SOAP_TYPE_ns1__VirtualSwitchProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSwitchProfile() { ns1__VirtualSwitchProfile::soap_default(NULL); }
	virtual ~ns1__VirtualSwitchProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VlanProfile
#define SOAP_TYPE_ns1__VlanProfile (2382)
/* ns1:VlanProfile */
class SOAP_CMAC ns1__VlanProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2382; } /* = unique id SOAP_TYPE_ns1__VlanProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VlanProfile() { ns1__VlanProfile::soap_default(NULL); }
	virtual ~ns1__VlanProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSwitchSelectionProfile
#define SOAP_TYPE_ns1__VirtualSwitchSelectionProfile (2383)
/* ns1:VirtualSwitchSelectionProfile */
class SOAP_CMAC ns1__VirtualSwitchSelectionProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2383; } /* = unique id SOAP_TYPE_ns1__VirtualSwitchSelectionProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSwitchSelectionProfile() { ns1__VirtualSwitchSelectionProfile::soap_default(NULL); }
	virtual ~ns1__VirtualSwitchSelectionProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PortGroupProfile
#define SOAP_TYPE_ns1__PortGroupProfile (2384)
/* ns1:PortGroupProfile */
class SOAP_CMAC ns1__PortGroupProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	ns1__VlanProfile *vlan;	/* required element of type ns1:VlanProfile */
	ns1__VirtualSwitchSelectionProfile *vswitch;	/* required element of type ns1:VirtualSwitchSelectionProfile */
	ns1__NetworkPolicyProfile *networkPolicy;	/* required element of type ns1:NetworkPolicyProfile */
public:
	virtual int soap_type() const { return 2384; } /* = unique id SOAP_TYPE_ns1__PortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PortGroupProfile() { ns1__PortGroupProfile::soap_default(NULL); }
	virtual ~ns1__PortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkPolicyProfile
#define SOAP_TYPE_ns1__NetworkPolicyProfile (2391)
/* ns1:NetworkPolicyProfile */
class SOAP_CMAC ns1__NetworkPolicyProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2391; } /* = unique id SOAP_TYPE_ns1__NetworkPolicyProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkPolicyProfile() { ns1__NetworkPolicyProfile::soap_default(NULL); }
	virtual ~ns1__NetworkPolicyProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpAddressProfile
#define SOAP_TYPE_ns1__IpAddressProfile (2392)
/* ns1:IpAddressProfile */
class SOAP_CMAC ns1__IpAddressProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2392; } /* = unique id SOAP_TYPE_ns1__IpAddressProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpAddressProfile() { ns1__IpAddressProfile::soap_default(NULL); }
	virtual ~ns1__IpAddressProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AuthenticationProfile
#define SOAP_TYPE_ns1__AuthenticationProfile (2393)
/* ns1:AuthenticationProfile */
class SOAP_CMAC ns1__AuthenticationProfile : public ns1__ApplyProfile
{
public:
	class ns1__ActiveDirectoryProfile *activeDirectory;	/* optional element of type ns1:ActiveDirectoryProfile */
public:
	virtual int soap_type() const { return 2393; } /* = unique id SOAP_TYPE_ns1__AuthenticationProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AuthenticationProfile() { ns1__AuthenticationProfile::soap_default(NULL); }
	virtual ~ns1__AuthenticationProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ActiveDirectoryProfile
#define SOAP_TYPE_ns1__ActiveDirectoryProfile (2394)
/* ns1:ActiveDirectoryProfile */
class SOAP_CMAC ns1__ActiveDirectoryProfile : public ns1__ApplyProfile
{
public:
	virtual int soap_type() const { return 2394; } /* = unique id SOAP_TYPE_ns1__ActiveDirectoryProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ActiveDirectoryProfile() { ns1__ActiveDirectoryProfile::soap_default(NULL); }
	virtual ~ns1__ActiveDirectoryProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PermissionProfile
#define SOAP_TYPE_ns1__PermissionProfile (2395)
/* ns1:PermissionProfile */
class SOAP_CMAC ns1__PermissionProfile : public ns1__ApplyProfile
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2395; } /* = unique id SOAP_TYPE_ns1__PermissionProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PermissionProfile() { ns1__PermissionProfile::soap_default(NULL); }
	virtual ~ns1__PermissionProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileConfigInfo
#define SOAP_TYPE_ns1__HostProfileConfigInfo (2397)
/* ns1:HostProfileConfigInfo */
class SOAP_CMAC ns1__HostProfileConfigInfo : public ns1__ProfileConfigInfo
{
public:
	ns1__HostApplyProfile *applyProfile;	/* optional element of type ns1:HostApplyProfile */
	ns1__ComplianceProfile *defaultComplyProfile;	/* optional element of type ns1:ComplianceProfile */
	std::vector<ns1__ComplianceLocator * >defaultComplyLocator;	/* optional element of type ns1:ComplianceLocator */
	ns1__ComplianceProfile *customComplyProfile;	/* optional element of type ns1:ComplianceProfile */
	std::vector<std::string >disabledExpressionList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2397; } /* = unique id SOAP_TYPE_ns1__HostProfileConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileConfigInfo() { ns1__HostProfileConfigInfo::soap_default(NULL); }
	virtual ~ns1__HostProfileConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileConfigSpec
#define SOAP_TYPE_ns1__HostProfileConfigSpec (2398)
/* ns1:HostProfileConfigSpec */
class SOAP_CMAC ns1__HostProfileConfigSpec : public ns1__ProfileCreateSpec
{
public:
	virtual int soap_type() const { return 2398; } /* = unique id SOAP_TYPE_ns1__HostProfileConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileConfigSpec() { ns1__HostProfileConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostProfileConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskInfo
#define SOAP_TYPE_ns1__ScheduledTaskInfo (2405)
/* ns1:ScheduledTaskInfo */
class SOAP_CMAC ns1__ScheduledTaskInfo : public ns1__ScheduledTaskSpec
{
public:
	ns1__ManagedObjectReference *scheduledTask;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
	time_t lastModifiedTime;	/* required element of type xsd:dateTime */
	std::string lastModifiedUser;	/* required element of type xsd:string */
	time_t *nextRunTime;	/* optional element of type xsd:dateTime */
	time_t *prevRunTime;	/* optional element of type xsd:dateTime */
	enum ns1__TaskInfoState state;	/* required element of type ns1:TaskInfoState */
	ns1__LocalizedMethodFault *error;	/* optional element of type ns1:LocalizedMethodFault */
	xsd__anyType *result;	/* optional element of type xsd:anyType */
	int *progress;	/* optional element of type xsd:int */
	ns1__ManagedObjectReference *activeTask;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *taskObject;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2405; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskInfo() { ns1__ScheduledTaskInfo::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AfterStartupTaskScheduler
#define SOAP_TYPE_ns1__AfterStartupTaskScheduler (2407)
/* ns1:AfterStartupTaskScheduler */
class SOAP_CMAC ns1__AfterStartupTaskScheduler : public ns1__TaskScheduler
{
public:
	int minute;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2407; } /* = unique id SOAP_TYPE_ns1__AfterStartupTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AfterStartupTaskScheduler() { ns1__AfterStartupTaskScheduler::soap_default(NULL); }
	virtual ~ns1__AfterStartupTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OnceTaskScheduler
#define SOAP_TYPE_ns1__OnceTaskScheduler (2408)
/* ns1:OnceTaskScheduler */
class SOAP_CMAC ns1__OnceTaskScheduler : public ns1__TaskScheduler
{
public:
	time_t *runAt;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 2408; } /* = unique id SOAP_TYPE_ns1__OnceTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OnceTaskScheduler() { ns1__OnceTaskScheduler::soap_default(NULL); }
	virtual ~ns1__OnceTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RecurrentTaskScheduler
#define SOAP_TYPE_ns1__RecurrentTaskScheduler (2409)
/* ns1:RecurrentTaskScheduler */
class SOAP_CMAC ns1__RecurrentTaskScheduler : public ns1__TaskScheduler
{
public:
	int interval;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2409; } /* = unique id SOAP_TYPE_ns1__RecurrentTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RecurrentTaskScheduler() { ns1__RecurrentTaskScheduler::soap_default(NULL); }
	virtual ~ns1__RecurrentTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppConfigInfo
#define SOAP_TYPE_ns1__VAppConfigInfo (2436)
/* ns1:VAppConfigInfo */
class SOAP_CMAC ns1__VAppConfigInfo : public ns1__VmConfigInfo
{
public:
	std::vector<ns1__VAppEntityConfigInfo * >entityConfig;	/* optional element of type ns1:VAppEntityConfigInfo */
	std::string annotation;	/* required element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2436; } /* = unique id SOAP_TYPE_ns1__VAppConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppConfigInfo() { ns1__VAppConfigInfo::soap_default(NULL); }
	virtual ~ns1__VAppConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppConfigSpec
#define SOAP_TYPE_ns1__VAppConfigSpec (2437)
/* ns1:VAppConfigSpec */
class SOAP_CMAC ns1__VAppConfigSpec : public ns1__VmConfigSpec
{
public:
	std::vector<ns1__VAppEntityConfigInfo * >entityConfig;	/* optional element of type ns1:VAppEntityConfigInfo */
	std::string *annotation;	/* optional element of type xsd:string */
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2437; } /* = unique id SOAP_TYPE_ns1__VAppConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppConfigSpec() { ns1__VAppConfigSpec::soap_default(NULL); }
	virtual ~ns1__VAppConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualAppImportSpec
#define SOAP_TYPE_ns1__VirtualAppImportSpec (2438)
/* ns1:VirtualAppImportSpec */
class SOAP_CMAC ns1__VirtualAppImportSpec : public ns1__ImportSpec
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__VAppConfigSpec *vAppConfigSpec;	/* required element of type ns1:VAppConfigSpec */
	ns1__ResourceConfigSpec *resourcePoolSpec;	/* required element of type ns1:ResourceConfigSpec */
	std::vector<ns1__ImportSpec * >child;	/* optional element of type ns1:ImportSpec */
public:
	virtual int soap_type() const { return 2438; } /* = unique id SOAP_TYPE_ns1__VirtualAppImportSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualAppImportSpec() { ns1__VirtualAppImportSpec::soap_default(NULL); }
	virtual ~ns1__VirtualAppImportSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppProductSpec
#define SOAP_TYPE_ns1__VAppProductSpec (2441)
/* ns1:VAppProductSpec */
class SOAP_CMAC ns1__VAppProductSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__VAppProductInfo *info;	/* optional element of type ns1:VAppProductInfo */
public:
	virtual int soap_type() const { return 2441; } /* = unique id SOAP_TYPE_ns1__VAppProductSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppProductSpec() { ns1__VAppProductSpec::soap_default(NULL); }
	virtual ~ns1__VAppProductSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppPropertySpec
#define SOAP_TYPE_ns1__VAppPropertySpec (2443)
/* ns1:VAppPropertySpec */
class SOAP_CMAC ns1__VAppPropertySpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__VAppPropertyInfo *info;	/* optional element of type ns1:VAppPropertyInfo */
public:
	virtual int soap_type() const { return 2443; } /* = unique id SOAP_TYPE_ns1__VAppPropertySpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppPropertySpec() { ns1__VAppPropertySpec::soap_default(NULL); }
	virtual ~ns1__VAppPropertySpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppOvfSectionSpec
#define SOAP_TYPE_ns1__VAppOvfSectionSpec (2445)
/* ns1:VAppOvfSectionSpec */
class SOAP_CMAC ns1__VAppOvfSectionSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__VAppOvfSectionInfo *info;	/* optional element of type ns1:VAppOvfSectionInfo */
public:
	virtual int soap_type() const { return 2445; } /* = unique id SOAP_TYPE_ns1__VAppOvfSectionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppOvfSectionSpec() { ns1__VAppOvfSectionSpec::soap_default(NULL); }
	virtual ~ns1__VAppOvfSectionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineCdromInfo
#define SOAP_TYPE_ns1__VirtualMachineCdromInfo (2450)
/* ns1:VirtualMachineCdromInfo */
class SOAP_CMAC ns1__VirtualMachineCdromInfo : public ns1__VirtualMachineTargetInfo
{
public:
	virtual int soap_type() const { return 2450; } /* = unique id SOAP_TYPE_ns1__VirtualMachineCdromInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineCdromInfo() { ns1__VirtualMachineCdromInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineCdromInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineCpuIdInfoSpec
#define SOAP_TYPE_ns1__VirtualMachineCpuIdInfoSpec (2459)
/* ns1:VirtualMachineCpuIdInfoSpec */
class SOAP_CMAC ns1__VirtualMachineCpuIdInfoSpec : public ns1__ArrayUpdateSpec
{
public:
	ns1__HostCpuIdInfo *info;	/* optional element of type ns1:HostCpuIdInfo */
public:
	virtual int soap_type() const { return 2459; } /* = unique id SOAP_TYPE_ns1__VirtualMachineCpuIdInfoSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineCpuIdInfoSpec() { ns1__VirtualMachineCpuIdInfoSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineCpuIdInfoSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDatastoreInfo
#define SOAP_TYPE_ns1__VirtualMachineDatastoreInfo (2464)
/* ns1:VirtualMachineDatastoreInfo */
class SOAP_CMAC ns1__VirtualMachineDatastoreInfo : public ns1__VirtualMachineTargetInfo
{
public:
	ns1__DatastoreSummary *datastore;	/* required element of type ns1:DatastoreSummary */
	ns1__DatastoreCapability *capability;	/* required element of type ns1:DatastoreCapability */
	LONG64 maxFileSize;	/* required element of type xsd:long */
	std::string mode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2464; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDatastoreInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDatastoreInfo() { ns1__VirtualMachineDatastoreInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDatastoreInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState
#define SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState (2471)
/* ns1:VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState */
class SOAP_CMAC ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState : public ns1__VirtualMachineDeviceRuntimeInfoDeviceRuntimeState
{
public:
	bool vmDirectPathGen2Active;	/* required element of type xsd:boolean */
	std::vector<std::string >vmDirectPathGen2InactiveReasonVm;	/* optional element of type xsd:string */
	std::vector<std::string >vmDirectPathGen2InactiveReasonOther;	/* optional element of type xsd:string */
	std::string *vmDirectPathGen2InactiveReasonExtended;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2471; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState() { ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineDiskDeviceInfo
#define SOAP_TYPE_ns1__VirtualMachineDiskDeviceInfo (2474)
/* ns1:VirtualMachineDiskDeviceInfo */
class SOAP_CMAC ns1__VirtualMachineDiskDeviceInfo : public ns1__VirtualMachineTargetInfo
{
public:
	LONG64 *capacity;	/* optional element of type xsd:long */
	std::vector<ns1__ManagedObjectReference * >vm;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2474; } /* = unique id SOAP_TYPE_ns1__VirtualMachineDiskDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineDiskDeviceInfo() { ns1__VirtualMachineDiskDeviceInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineDiskDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultTolerancePrimaryConfigInfo
#define SOAP_TYPE_ns1__FaultTolerancePrimaryConfigInfo (2476)
/* ns1:FaultTolerancePrimaryConfigInfo */
class SOAP_CMAC ns1__FaultTolerancePrimaryConfigInfo : public ns1__FaultToleranceConfigInfo
{
public:
	std::vector<ns1__ManagedObjectReference * >secondaries;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2476; } /* = unique id SOAP_TYPE_ns1__FaultTolerancePrimaryConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultTolerancePrimaryConfigInfo() { ns1__FaultTolerancePrimaryConfigInfo::soap_default(NULL); }
	virtual ~ns1__FaultTolerancePrimaryConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceSecondaryConfigInfo
#define SOAP_TYPE_ns1__FaultToleranceSecondaryConfigInfo (2477)
/* ns1:FaultToleranceSecondaryConfigInfo */
class SOAP_CMAC ns1__FaultToleranceSecondaryConfigInfo : public ns1__FaultToleranceConfigInfo
{
public:
	ns1__ManagedObjectReference *primaryVM;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2477; } /* = unique id SOAP_TYPE_ns1__FaultToleranceSecondaryConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceSecondaryConfigInfo() { ns1__FaultToleranceSecondaryConfigInfo::soap_default(NULL); }
	virtual ~ns1__FaultToleranceSecondaryConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineFloppyInfo
#define SOAP_TYPE_ns1__VirtualMachineFloppyInfo (2495)
/* ns1:VirtualMachineFloppyInfo */
class SOAP_CMAC ns1__VirtualMachineFloppyInfo : public ns1__VirtualMachineTargetInfo
{
public:
	virtual int soap_type() const { return 2495; } /* = unique id SOAP_TYPE_ns1__VirtualMachineFloppyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineFloppyInfo() { ns1__VirtualMachineFloppyInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineFloppyInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineNetworkInfo
#define SOAP_TYPE_ns1__VirtualMachineNetworkInfo (2515)
/* ns1:VirtualMachineNetworkInfo */
class SOAP_CMAC ns1__VirtualMachineNetworkInfo : public ns1__VirtualMachineTargetInfo
{
public:
	ns1__NetworkSummary *network;	/* required element of type ns1:NetworkSummary */
public:
	virtual int soap_type() const { return 2515; } /* = unique id SOAP_TYPE_ns1__VirtualMachineNetworkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineNetworkInfo() { ns1__VirtualMachineNetworkInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineNetworkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineParallelInfo
#define SOAP_TYPE_ns1__VirtualMachineParallelInfo (2518)
/* ns1:VirtualMachineParallelInfo */
class SOAP_CMAC ns1__VirtualMachineParallelInfo : public ns1__VirtualMachineTargetInfo
{
public:
	virtual int soap_type() const { return 2518; } /* = unique id SOAP_TYPE_ns1__VirtualMachineParallelInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineParallelInfo() { ns1__VirtualMachineParallelInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineParallelInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachinePciPassthroughInfo
#define SOAP_TYPE_ns1__VirtualMachinePciPassthroughInfo (2520)
/* ns1:VirtualMachinePciPassthroughInfo */
class SOAP_CMAC ns1__VirtualMachinePciPassthroughInfo : public ns1__VirtualMachineTargetInfo
{
public:
	ns1__HostPciDevice *pciDevice;	/* required element of type ns1:HostPciDevice */
	std::string systemId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2520; } /* = unique id SOAP_TYPE_ns1__VirtualMachinePciPassthroughInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachinePciPassthroughInfo() { ns1__VirtualMachinePciPassthroughInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachinePciPassthroughInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineScsiPassthroughInfo
#define SOAP_TYPE_ns1__VirtualMachineScsiPassthroughInfo (2529)
/* ns1:VirtualMachineScsiPassthroughInfo */
class SOAP_CMAC ns1__VirtualMachineScsiPassthroughInfo : public ns1__VirtualMachineTargetInfo
{
public:
	std::string scsiClass;	/* required element of type xsd:string */
	std::string vendor;	/* required element of type xsd:string */
	int physicalUnitNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2529; } /* = unique id SOAP_TYPE_ns1__VirtualMachineScsiPassthroughInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineScsiPassthroughInfo() { ns1__VirtualMachineScsiPassthroughInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineScsiPassthroughInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineSerialInfo
#define SOAP_TYPE_ns1__VirtualMachineSerialInfo (2531)
/* ns1:VirtualMachineSerialInfo */
class SOAP_CMAC ns1__VirtualMachineSerialInfo : public ns1__VirtualMachineTargetInfo
{
public:
	virtual int soap_type() const { return 2531; } /* = unique id SOAP_TYPE_ns1__VirtualMachineSerialInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineSerialInfo() { ns1__VirtualMachineSerialInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineSerialInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineSoundInfo
#define SOAP_TYPE_ns1__VirtualMachineSoundInfo (2536)
/* ns1:VirtualMachineSoundInfo */
class SOAP_CMAC ns1__VirtualMachineSoundInfo : public ns1__VirtualMachineTargetInfo
{
public:
	virtual int soap_type() const { return 2536; } /* = unique id SOAP_TYPE_ns1__VirtualMachineSoundInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineSoundInfo() { ns1__VirtualMachineSoundInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineSoundInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineUsbInfo
#define SOAP_TYPE_ns1__VirtualMachineUsbInfo (2549)
/* ns1:VirtualMachineUsbInfo */
class SOAP_CMAC ns1__VirtualMachineUsbInfo : public ns1__VirtualMachineTargetInfo
{
public:
	std::string description;	/* required element of type xsd:string */
	int vendor;	/* required element of type xsd:int */
	int product;	/* required element of type xsd:int */
	std::string physicalPath;	/* required element of type xsd:string */
	std::vector<std::string >family;	/* optional element of type xsd:string */
	std::vector<std::string >speed;	/* optional element of type xsd:string */
	ns1__VirtualMachineSummary *summary;	/* optional element of type ns1:VirtualMachineSummary */
public:
	virtual int soap_type() const { return 2549; } /* = unique id SOAP_TYPE_ns1__VirtualMachineUsbInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineUsbInfo() { ns1__VirtualMachineUsbInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineUsbInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineImportSpec
#define SOAP_TYPE_ns1__VirtualMachineImportSpec (2553)
/* ns1:VirtualMachineImportSpec */
class SOAP_CMAC ns1__VirtualMachineImportSpec : public ns1__ImportSpec
{
public:
	ns1__VirtualMachineConfigSpec *configSpec;	/* required element of type ns1:VirtualMachineConfigSpec */
	ns1__ManagedObjectReference *resPoolEntity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2553; } /* = unique id SOAP_TYPE_ns1__VirtualMachineImportSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineImportSpec() { ns1__VirtualMachineImportSpec::soap_default(NULL); }
	virtual ~ns1__VirtualMachineImportSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationFixedName
#define SOAP_TYPE_ns1__CustomizationFixedName (2558)
/* ns1:CustomizationFixedName */
class SOAP_CMAC ns1__CustomizationFixedName : public ns1__CustomizationName
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2558; } /* = unique id SOAP_TYPE_ns1__CustomizationFixedName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationFixedName() { ns1__CustomizationFixedName::soap_default(NULL); }
	virtual ~ns1__CustomizationFixedName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationPrefixName
#define SOAP_TYPE_ns1__CustomizationPrefixName (2559)
/* ns1:CustomizationPrefixName */
class SOAP_CMAC ns1__CustomizationPrefixName : public ns1__CustomizationName
{
public:
	std::string base;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2559; } /* = unique id SOAP_TYPE_ns1__CustomizationPrefixName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationPrefixName() { ns1__CustomizationPrefixName::soap_default(NULL); }
	virtual ~ns1__CustomizationPrefixName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationVirtualMachineName
#define SOAP_TYPE_ns1__CustomizationVirtualMachineName (2560)
/* ns1:CustomizationVirtualMachineName */
class SOAP_CMAC ns1__CustomizationVirtualMachineName : public ns1__CustomizationName
{
public:
	virtual int soap_type() const { return 2560; } /* = unique id SOAP_TYPE_ns1__CustomizationVirtualMachineName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationVirtualMachineName() { ns1__CustomizationVirtualMachineName::soap_default(NULL); }
	virtual ~ns1__CustomizationVirtualMachineName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationUnknownName
#define SOAP_TYPE_ns1__CustomizationUnknownName (2561)
/* ns1:CustomizationUnknownName */
class SOAP_CMAC ns1__CustomizationUnknownName : public ns1__CustomizationName
{
public:
	virtual int soap_type() const { return 2561; } /* = unique id SOAP_TYPE_ns1__CustomizationUnknownName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationUnknownName() { ns1__CustomizationUnknownName::soap_default(NULL); }
	virtual ~ns1__CustomizationUnknownName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationCustomName
#define SOAP_TYPE_ns1__CustomizationCustomName (2562)
/* ns1:CustomizationCustomName */
class SOAP_CMAC ns1__CustomizationCustomName : public ns1__CustomizationName
{
public:
	std::string *argument;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2562; } /* = unique id SOAP_TYPE_ns1__CustomizationCustomName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationCustomName() { ns1__CustomizationCustomName::soap_default(NULL); }
	virtual ~ns1__CustomizationCustomName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationWinOptions
#define SOAP_TYPE_ns1__CustomizationWinOptions (2565)
/* ns1:CustomizationWinOptions */
class SOAP_CMAC ns1__CustomizationWinOptions : public ns1__CustomizationOptions
{
public:
	bool changeSID;	/* required element of type xsd:boolean */
	bool deleteAccounts;	/* required element of type xsd:boolean */
	enum ns1__CustomizationSysprepRebootOption *reboot;	/* optional element of type ns1:CustomizationSysprepRebootOption */
public:
	virtual int soap_type() const { return 2565; } /* = unique id SOAP_TYPE_ns1__CustomizationWinOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationWinOptions() { ns1__CustomizationWinOptions::soap_default(NULL); }
	virtual ~ns1__CustomizationWinOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLinuxOptions
#define SOAP_TYPE_ns1__CustomizationLinuxOptions (2566)
/* ns1:CustomizationLinuxOptions */
class SOAP_CMAC ns1__CustomizationLinuxOptions : public ns1__CustomizationOptions
{
public:
	virtual int soap_type() const { return 2566; } /* = unique id SOAP_TYPE_ns1__CustomizationLinuxOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationLinuxOptions() { ns1__CustomizationLinuxOptions::soap_default(NULL); }
	virtual ~ns1__CustomizationLinuxOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSysprepText
#define SOAP_TYPE_ns1__CustomizationSysprepText (2573)
/* ns1:CustomizationSysprepText */
class SOAP_CMAC ns1__CustomizationSysprepText : public ns1__CustomizationIdentitySettings
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2573; } /* = unique id SOAP_TYPE_ns1__CustomizationSysprepText */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSysprepText() { ns1__CustomizationSysprepText::soap_default(NULL); }
	virtual ~ns1__CustomizationSysprepText() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSysprep
#define SOAP_TYPE_ns1__CustomizationSysprep (2574)
/* ns1:CustomizationSysprep */
class SOAP_CMAC ns1__CustomizationSysprep : public ns1__CustomizationIdentitySettings
{
public:
	ns1__CustomizationGuiUnattended *guiUnattended;	/* required element of type ns1:CustomizationGuiUnattended */
	ns1__CustomizationUserData *userData;	/* required element of type ns1:CustomizationUserData */
	ns1__CustomizationGuiRunOnce *guiRunOnce;	/* optional element of type ns1:CustomizationGuiRunOnce */
	ns1__CustomizationIdentification *identification;	/* required element of type ns1:CustomizationIdentification */
	ns1__CustomizationLicenseFilePrintData *licenseFilePrintData;	/* optional element of type ns1:CustomizationLicenseFilePrintData */
public:
	virtual int soap_type() const { return 2574; } /* = unique id SOAP_TYPE_ns1__CustomizationSysprep */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSysprep() { ns1__CustomizationSysprep::soap_default(NULL); }
	virtual ~ns1__CustomizationSysprep() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLinuxPrep
#define SOAP_TYPE_ns1__CustomizationLinuxPrep (2575)
/* ns1:CustomizationLinuxPrep */
class SOAP_CMAC ns1__CustomizationLinuxPrep : public ns1__CustomizationIdentitySettings
{
public:
	ns1__CustomizationName *hostName;	/* required element of type ns1:CustomizationName */
	std::string domain;	/* required element of type xsd:string */
	std::string *timeZone;	/* optional element of type xsd:string */
	bool *hwClockUTC;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2575; } /* = unique id SOAP_TYPE_ns1__CustomizationLinuxPrep */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationLinuxPrep() { ns1__CustomizationLinuxPrep::soap_default(NULL); }
	virtual ~ns1__CustomizationLinuxPrep() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationDhcpIpGenerator
#define SOAP_TYPE_ns1__CustomizationDhcpIpGenerator (2580)
/* ns1:CustomizationDhcpIpGenerator */
class SOAP_CMAC ns1__CustomizationDhcpIpGenerator : public ns1__CustomizationIpGenerator
{
public:
	virtual int soap_type() const { return 2580; } /* = unique id SOAP_TYPE_ns1__CustomizationDhcpIpGenerator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationDhcpIpGenerator() { ns1__CustomizationDhcpIpGenerator::soap_default(NULL); }
	virtual ~ns1__CustomizationDhcpIpGenerator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationFixedIp
#define SOAP_TYPE_ns1__CustomizationFixedIp (2581)
/* ns1:CustomizationFixedIp */
class SOAP_CMAC ns1__CustomizationFixedIp : public ns1__CustomizationIpGenerator
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2581; } /* = unique id SOAP_TYPE_ns1__CustomizationFixedIp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationFixedIp() { ns1__CustomizationFixedIp::soap_default(NULL); }
	virtual ~ns1__CustomizationFixedIp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationUnknownIpGenerator
#define SOAP_TYPE_ns1__CustomizationUnknownIpGenerator (2582)
/* ns1:CustomizationUnknownIpGenerator */
class SOAP_CMAC ns1__CustomizationUnknownIpGenerator : public ns1__CustomizationIpGenerator
{
public:
	virtual int soap_type() const { return 2582; } /* = unique id SOAP_TYPE_ns1__CustomizationUnknownIpGenerator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationUnknownIpGenerator() { ns1__CustomizationUnknownIpGenerator::soap_default(NULL); }
	virtual ~ns1__CustomizationUnknownIpGenerator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationCustomIpGenerator
#define SOAP_TYPE_ns1__CustomizationCustomIpGenerator (2583)
/* ns1:CustomizationCustomIpGenerator */
class SOAP_CMAC ns1__CustomizationCustomIpGenerator : public ns1__CustomizationIpGenerator
{
public:
	std::string *argument;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2583; } /* = unique id SOAP_TYPE_ns1__CustomizationCustomIpGenerator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationCustomIpGenerator() { ns1__CustomizationCustomIpGenerator::soap_default(NULL); }
	virtual ~ns1__CustomizationCustomIpGenerator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationDhcpIpV6Generator
#define SOAP_TYPE_ns1__CustomizationDhcpIpV6Generator (2586)
/* ns1:CustomizationDhcpIpV6Generator */
class SOAP_CMAC ns1__CustomizationDhcpIpV6Generator : public ns1__CustomizationIpV6Generator
{
public:
	virtual int soap_type() const { return 2586; } /* = unique id SOAP_TYPE_ns1__CustomizationDhcpIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationDhcpIpV6Generator() { ns1__CustomizationDhcpIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationDhcpIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationStatelessIpV6Generator
#define SOAP_TYPE_ns1__CustomizationStatelessIpV6Generator (2587)
/* ns1:CustomizationStatelessIpV6Generator */
class SOAP_CMAC ns1__CustomizationStatelessIpV6Generator : public ns1__CustomizationIpV6Generator
{
public:
	virtual int soap_type() const { return 2587; } /* = unique id SOAP_TYPE_ns1__CustomizationStatelessIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationStatelessIpV6Generator() { ns1__CustomizationStatelessIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationStatelessIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationFixedIpV6
#define SOAP_TYPE_ns1__CustomizationFixedIpV6 (2588)
/* ns1:CustomizationFixedIpV6 */
class SOAP_CMAC ns1__CustomizationFixedIpV6 : public ns1__CustomizationIpV6Generator
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	int subnetMask;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2588; } /* = unique id SOAP_TYPE_ns1__CustomizationFixedIpV6 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationFixedIpV6() { ns1__CustomizationFixedIpV6::soap_default(NULL); }
	virtual ~ns1__CustomizationFixedIpV6() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationAutoIpV6Generator
#define SOAP_TYPE_ns1__CustomizationAutoIpV6Generator (2589)
/* ns1:CustomizationAutoIpV6Generator */
class SOAP_CMAC ns1__CustomizationAutoIpV6Generator : public ns1__CustomizationIpV6Generator
{
public:
	virtual int soap_type() const { return 2589; } /* = unique id SOAP_TYPE_ns1__CustomizationAutoIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationAutoIpV6Generator() { ns1__CustomizationAutoIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationAutoIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationUnknownIpV6Generator
#define SOAP_TYPE_ns1__CustomizationUnknownIpV6Generator (2590)
/* ns1:CustomizationUnknownIpV6Generator */
class SOAP_CMAC ns1__CustomizationUnknownIpV6Generator : public ns1__CustomizationIpV6Generator
{
public:
	virtual int soap_type() const { return 2590; } /* = unique id SOAP_TYPE_ns1__CustomizationUnknownIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationUnknownIpV6Generator() { ns1__CustomizationUnknownIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationUnknownIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationCustomIpV6Generator
#define SOAP_TYPE_ns1__CustomizationCustomIpV6Generator (2591)
/* ns1:CustomizationCustomIpV6Generator */
class SOAP_CMAC ns1__CustomizationCustomIpV6Generator : public ns1__CustomizationIpV6Generator
{
public:
	std::string *argument;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2591; } /* = unique id SOAP_TYPE_ns1__CustomizationCustomIpV6Generator */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationCustomIpV6Generator() { ns1__CustomizationCustomIpV6Generator::soap_default(NULL); }
	virtual ~ns1__CustomizationCustomIpV6Generator() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdrom
#define SOAP_TYPE_ns1__VirtualCdrom (2608)
/* ns1:VirtualCdrom */
class SOAP_CMAC ns1__VirtualCdrom : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2608; } /* = unique id SOAP_TYPE_ns1__VirtualCdrom */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdrom() { ns1__VirtualCdrom::soap_default(NULL); }
	virtual ~ns1__VirtualCdrom() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromOption
#define SOAP_TYPE_ns1__VirtualCdromOption (2614)
/* ns1:VirtualCdromOption */
class SOAP_CMAC ns1__VirtualCdromOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2614; } /* = unique id SOAP_TYPE_ns1__VirtualCdromOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromOption() { ns1__VirtualCdromOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualController
#define SOAP_TYPE_ns1__VirtualController (2615)
/* ns1:VirtualController */
class SOAP_CMAC ns1__VirtualController : public ns1__VirtualDevice
{
public:
	int busNumber;	/* required element of type xsd:int */
	std::vector<int >device;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2615; } /* = unique id SOAP_TYPE_ns1__VirtualController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualController() { ns1__VirtualController::soap_default(NULL); }
	virtual ~ns1__VirtualController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualControllerOption
#define SOAP_TYPE_ns1__VirtualControllerOption (2616)
/* ns1:VirtualControllerOption */
class SOAP_CMAC ns1__VirtualControllerOption : public ns1__VirtualDeviceOption
{
public:
	ns1__IntOption *devices;	/* required element of type ns1:IntOption */
	std::vector<std::string >supportedDevice;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2616; } /* = unique id SOAP_TYPE_ns1__VirtualControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualControllerOption() { ns1__VirtualControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceFileBackingInfo
#define SOAP_TYPE_ns1__VirtualDeviceFileBackingInfo (2618)
/* ns1:VirtualDeviceFileBackingInfo */
class SOAP_CMAC ns1__VirtualDeviceFileBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	std::string fileName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2618; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceFileBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceFileBackingInfo() { ns1__VirtualDeviceFileBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceFileBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualDeviceDeviceBackingInfo (2619)
/* ns1:VirtualDeviceDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualDeviceDeviceBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	std::string deviceName;	/* required element of type xsd:string */
	bool *useAutoDetect;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2619; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceDeviceBackingInfo() { ns1__VirtualDeviceDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingInfo (2620)
/* ns1:VirtualDeviceRemoteDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualDeviceRemoteDeviceBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	std::string deviceName;	/* required element of type xsd:string */
	bool *useAutoDetect;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2620; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceRemoteDeviceBackingInfo() { ns1__VirtualDeviceRemoteDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceRemoteDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDevicePipeBackingInfo
#define SOAP_TYPE_ns1__VirtualDevicePipeBackingInfo (2621)
/* ns1:VirtualDevicePipeBackingInfo */
class SOAP_CMAC ns1__VirtualDevicePipeBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	std::string pipeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2621; } /* = unique id SOAP_TYPE_ns1__VirtualDevicePipeBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDevicePipeBackingInfo() { ns1__VirtualDevicePipeBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDevicePipeBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceURIBackingInfo
#define SOAP_TYPE_ns1__VirtualDeviceURIBackingInfo (2622)
/* ns1:VirtualDeviceURIBackingInfo */
class SOAP_CMAC ns1__VirtualDeviceURIBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	std::string serviceURI;	/* required element of type xsd:string */
	std::string direction;	/* required element of type xsd:string */
	std::string *proxyURI;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2622; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceURIBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceURIBackingInfo() { ns1__VirtualDeviceURIBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceURIBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceFileBackingOption
#define SOAP_TYPE_ns1__VirtualDeviceFileBackingOption (2628)
/* ns1:VirtualDeviceFileBackingOption */
class SOAP_CMAC ns1__VirtualDeviceFileBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	ns1__ChoiceOption *fileNameExtensions;	/* optional element of type ns1:ChoiceOption */
public:
	virtual int soap_type() const { return 2628; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceFileBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceFileBackingOption() { ns1__VirtualDeviceFileBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceFileBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualDeviceDeviceBackingOption (2629)
/* ns1:VirtualDeviceDeviceBackingOption */
class SOAP_CMAC ns1__VirtualDeviceDeviceBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	ns1__BoolOption *autoDetectAvailable;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2629; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceDeviceBackingOption() { ns1__VirtualDeviceDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingOption (2630)
/* ns1:VirtualDeviceRemoteDeviceBackingOption */
class SOAP_CMAC ns1__VirtualDeviceRemoteDeviceBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	ns1__BoolOption *autoDetectAvailable;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2630; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceRemoteDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceRemoteDeviceBackingOption() { ns1__VirtualDeviceRemoteDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceRemoteDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDevicePipeBackingOption
#define SOAP_TYPE_ns1__VirtualDevicePipeBackingOption (2631)
/* ns1:VirtualDevicePipeBackingOption */
class SOAP_CMAC ns1__VirtualDevicePipeBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2631; } /* = unique id SOAP_TYPE_ns1__VirtualDevicePipeBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDevicePipeBackingOption() { ns1__VirtualDevicePipeBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDevicePipeBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDeviceURIBackingOption
#define SOAP_TYPE_ns1__VirtualDeviceURIBackingOption (2632)
/* ns1:VirtualDeviceURIBackingOption */
class SOAP_CMAC ns1__VirtualDeviceURIBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	ns1__ChoiceOption *directions;	/* required element of type ns1:ChoiceOption */
public:
	virtual int soap_type() const { return 2632; } /* = unique id SOAP_TYPE_ns1__VirtualDeviceURIBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDeviceURIBackingOption() { ns1__VirtualDeviceURIBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDeviceURIBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDisk
#define SOAP_TYPE_ns1__VirtualDisk (2645)
/* ns1:VirtualDisk */
class SOAP_CMAC ns1__VirtualDisk : public ns1__VirtualDevice
{
public:
	LONG64 capacityInKB;	/* required element of type xsd:long */
	ns1__SharesInfo *shares;	/* optional element of type ns1:SharesInfo */
	ns1__StorageIOAllocationInfo *storageIOAllocation;	/* optional element of type ns1:StorageIOAllocationInfo */
public:
	virtual int soap_type() const { return 2645; } /* = unique id SOAP_TYPE_ns1__VirtualDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDisk() { ns1__VirtualDisk::soap_default(NULL); }
	virtual ~ns1__VirtualDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskOption
#define SOAP_TYPE_ns1__VirtualDiskOption (2654)
/* ns1:VirtualDiskOption */
class SOAP_CMAC ns1__VirtualDiskOption : public ns1__VirtualDeviceOption
{
public:
	ns1__LongOption *capacityInKB;	/* required element of type ns1:LongOption */
	ns1__StorageIOAllocationOption *ioAllocationOption;	/* optional element of type ns1:StorageIOAllocationOption */
public:
	virtual int soap_type() const { return 2654; } /* = unique id SOAP_TYPE_ns1__VirtualDiskOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskOption() { ns1__VirtualDiskOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo
#define SOAP_TYPE_ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo (2661)
/* ns1:VirtualEthernetCardDistributedVirtualPortBackingInfo */
class SOAP_CMAC ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo : public ns1__VirtualDeviceBackingInfo
{
public:
	ns1__DistributedVirtualSwitchPortConnection *port;	/* required element of type ns1:DistributedVirtualSwitchPortConnection */
public:
	virtual int soap_type() const { return 2661; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo() { ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardDistributedVirtualPortBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCard
#define SOAP_TYPE_ns1__VirtualEthernetCard (2662)
/* ns1:VirtualEthernetCard */
class SOAP_CMAC ns1__VirtualEthernetCard : public ns1__VirtualDevice
{
public:
	std::string *addressType;	/* optional element of type xsd:string */
	std::string *macAddress;	/* optional element of type xsd:string */
	bool *wakeOnLanEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2662; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCard() { ns1__VirtualEthernetCard::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardDVPortBackingOption
#define SOAP_TYPE_ns1__VirtualEthernetCardDVPortBackingOption (2665)
/* ns1:VirtualEthernetCardDVPortBackingOption */
class SOAP_CMAC ns1__VirtualEthernetCardDVPortBackingOption : public ns1__VirtualDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2665; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardDVPortBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardDVPortBackingOption() { ns1__VirtualEthernetCardDVPortBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardDVPortBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardOption
#define SOAP_TYPE_ns1__VirtualEthernetCardOption (2666)
/* ns1:VirtualEthernetCardOption */
class SOAP_CMAC ns1__VirtualEthernetCardOption : public ns1__VirtualDeviceOption
{
public:
	ns1__ChoiceOption *supportedOUI;	/* required element of type ns1:ChoiceOption */
	ns1__ChoiceOption *macType;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *wakeOnLanEnabled;	/* required element of type ns1:BoolOption */
	bool *vmDirectPathGen2Supported;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2666; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardOption() { ns1__VirtualEthernetCardOption::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppy
#define SOAP_TYPE_ns1__VirtualFloppy (2670)
/* ns1:VirtualFloppy */
class SOAP_CMAC ns1__VirtualFloppy : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2670; } /* = unique id SOAP_TYPE_ns1__VirtualFloppy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppy() { ns1__VirtualFloppy::soap_default(NULL); }
	virtual ~ns1__VirtualFloppy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyOption
#define SOAP_TYPE_ns1__VirtualFloppyOption (2674)
/* ns1:VirtualFloppyOption */
class SOAP_CMAC ns1__VirtualFloppyOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2674; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyOption() { ns1__VirtualFloppyOption::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualKeyboard
#define SOAP_TYPE_ns1__VirtualKeyboard (2677)
/* ns1:VirtualKeyboard */
class SOAP_CMAC ns1__VirtualKeyboard : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2677; } /* = unique id SOAP_TYPE_ns1__VirtualKeyboard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualKeyboard() { ns1__VirtualKeyboard::soap_default(NULL); }
	virtual ~ns1__VirtualKeyboard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualKeyboardOption
#define SOAP_TYPE_ns1__VirtualKeyboardOption (2678)
/* ns1:VirtualKeyboardOption */
class SOAP_CMAC ns1__VirtualKeyboardOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2678; } /* = unique id SOAP_TYPE_ns1__VirtualKeyboardOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualKeyboardOption() { ns1__VirtualKeyboardOption::soap_default(NULL); }
	virtual ~ns1__VirtualKeyboardOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIPassthrough
#define SOAP_TYPE_ns1__VirtualPCIPassthrough (2686)
/* ns1:VirtualPCIPassthrough */
class SOAP_CMAC ns1__VirtualPCIPassthrough : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2686; } /* = unique id SOAP_TYPE_ns1__VirtualPCIPassthrough */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIPassthrough() { ns1__VirtualPCIPassthrough::soap_default(NULL); }
	virtual ~ns1__VirtualPCIPassthrough() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIPassthroughOption
#define SOAP_TYPE_ns1__VirtualPCIPassthroughOption (2688)
/* ns1:VirtualPCIPassthroughOption */
class SOAP_CMAC ns1__VirtualPCIPassthroughOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2688; } /* = unique id SOAP_TYPE_ns1__VirtualPCIPassthroughOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIPassthroughOption() { ns1__VirtualPCIPassthroughOption::soap_default(NULL); }
	virtual ~ns1__VirtualPCIPassthroughOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPort
#define SOAP_TYPE_ns1__VirtualParallelPort (2695)
/* ns1:VirtualParallelPort */
class SOAP_CMAC ns1__VirtualParallelPort : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2695; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPort() { ns1__VirtualParallelPort::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPortOption
#define SOAP_TYPE_ns1__VirtualParallelPortOption (2698)
/* ns1:VirtualParallelPortOption */
class SOAP_CMAC ns1__VirtualParallelPortOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2698; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPortOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPortOption() { ns1__VirtualParallelPortOption::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPortOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDevice
#define SOAP_TYPE_ns1__VirtualPointingDevice (2700)
/* ns1:VirtualPointingDevice */
class SOAP_CMAC ns1__VirtualPointingDevice : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2700; } /* = unique id SOAP_TYPE_ns1__VirtualPointingDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPointingDevice() { ns1__VirtualPointingDevice::soap_default(NULL); }
	virtual ~ns1__VirtualPointingDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDeviceOption
#define SOAP_TYPE_ns1__VirtualPointingDeviceOption (2702)
/* ns1:VirtualPointingDeviceOption */
class SOAP_CMAC ns1__VirtualPointingDeviceOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2702; } /* = unique id SOAP_TYPE_ns1__VirtualPointingDeviceOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPointingDeviceOption() { ns1__VirtualPointingDeviceOption::soap_default(NULL); }
	virtual ~ns1__VirtualPointingDeviceOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIPassthrough
#define SOAP_TYPE_ns1__VirtualSCSIPassthrough (2707)
/* ns1:VirtualSCSIPassthrough */
class SOAP_CMAC ns1__VirtualSCSIPassthrough : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2707; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIPassthrough */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIPassthrough() { ns1__VirtualSCSIPassthrough::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIPassthrough() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIPassthroughOption
#define SOAP_TYPE_ns1__VirtualSCSIPassthroughOption (2709)
/* ns1:VirtualSCSIPassthroughOption */
class SOAP_CMAC ns1__VirtualSCSIPassthroughOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2709; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIPassthroughOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIPassthroughOption() { ns1__VirtualSCSIPassthroughOption::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIPassthroughOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPort
#define SOAP_TYPE_ns1__VirtualSerialPort (2716)
/* ns1:VirtualSerialPort */
class SOAP_CMAC ns1__VirtualSerialPort : public ns1__VirtualDevice
{
public:
	bool yieldOnPoll;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2716; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPort() { ns1__VirtualSerialPort::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortOption
#define SOAP_TYPE_ns1__VirtualSerialPortOption (2721)
/* ns1:VirtualSerialPortOption */
class SOAP_CMAC ns1__VirtualSerialPortOption : public ns1__VirtualDeviceOption
{
public:
	ns1__BoolOption *yieldOnPoll;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2721; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortOption() { ns1__VirtualSerialPortOption::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundCard
#define SOAP_TYPE_ns1__VirtualSoundCard (2725)
/* ns1:VirtualSoundCard */
class SOAP_CMAC ns1__VirtualSoundCard : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2725; } /* = unique id SOAP_TYPE_ns1__VirtualSoundCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundCard() { ns1__VirtualSoundCard::soap_default(NULL); }
	virtual ~ns1__VirtualSoundCard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundCardOption
#define SOAP_TYPE_ns1__VirtualSoundCardOption (2727)
/* ns1:VirtualSoundCardOption */
class SOAP_CMAC ns1__VirtualSoundCardOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2727; } /* = unique id SOAP_TYPE_ns1__VirtualSoundCardOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundCardOption() { ns1__VirtualSoundCardOption::soap_default(NULL); }
	virtual ~ns1__VirtualSoundCardOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSB
#define SOAP_TYPE_ns1__VirtualUSB (2730)
/* ns1:VirtualUSB */
class SOAP_CMAC ns1__VirtualUSB : public ns1__VirtualDevice
{
public:
	bool connected;	/* required element of type xsd:boolean */
	int *vendor;	/* optional element of type xsd:int */
	int *product;	/* optional element of type xsd:int */
	std::vector<std::string >family;	/* optional element of type xsd:string */
	std::vector<std::string >speed;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2730; } /* = unique id SOAP_TYPE_ns1__VirtualUSB */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSB() { ns1__VirtualUSB::soap_default(NULL); }
	virtual ~ns1__VirtualUSB() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBOption
#define SOAP_TYPE_ns1__VirtualUSBOption (2735)
/* ns1:VirtualUSBOption */
class SOAP_CMAC ns1__VirtualUSBOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2735; } /* = unique id SOAP_TYPE_ns1__VirtualUSBOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBOption() { ns1__VirtualUSBOption::soap_default(NULL); }
	virtual ~ns1__VirtualUSBOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineVMCIDevice
#define SOAP_TYPE_ns1__VirtualMachineVMCIDevice (2736)
/* ns1:VirtualMachineVMCIDevice */
class SOAP_CMAC ns1__VirtualMachineVMCIDevice : public ns1__VirtualDevice
{
public:
	LONG64 *id;	/* optional element of type xsd:long */
	bool *allowUnrestrictedCommunication;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2736; } /* = unique id SOAP_TYPE_ns1__VirtualMachineVMCIDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineVMCIDevice() { ns1__VirtualMachineVMCIDevice::soap_default(NULL); }
	virtual ~ns1__VirtualMachineVMCIDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineVMCIDeviceOption
#define SOAP_TYPE_ns1__VirtualMachineVMCIDeviceOption (2737)
/* ns1:VirtualMachineVMCIDeviceOption */
class SOAP_CMAC ns1__VirtualMachineVMCIDeviceOption : public ns1__VirtualDeviceOption
{
public:
	ns1__BoolOption *allowUnrestrictedCommunication;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2737; } /* = unique id SOAP_TYPE_ns1__VirtualMachineVMCIDeviceOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineVMCIDeviceOption() { ns1__VirtualMachineVMCIDeviceOption::soap_default(NULL); }
	virtual ~ns1__VirtualMachineVMCIDeviceOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineVMIROM
#define SOAP_TYPE_ns1__VirtualMachineVMIROM (2738)
/* ns1:VirtualMachineVMIROM */
class SOAP_CMAC ns1__VirtualMachineVMIROM : public ns1__VirtualDevice
{
public:
	virtual int soap_type() const { return 2738; } /* = unique id SOAP_TYPE_ns1__VirtualMachineVMIROM */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineVMIROM() { ns1__VirtualMachineVMIROM::soap_default(NULL); }
	virtual ~ns1__VirtualMachineVMIROM() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVMIROMOption
#define SOAP_TYPE_ns1__VirtualVMIROMOption (2739)
/* ns1:VirtualVMIROMOption */
class SOAP_CMAC ns1__VirtualVMIROMOption : public ns1__VirtualDeviceOption
{
public:
	virtual int soap_type() const { return 2739; } /* = unique id SOAP_TYPE_ns1__VirtualVMIROMOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVMIROMOption() { ns1__VirtualVMIROMOption::soap_default(NULL); }
	virtual ~ns1__VirtualVMIROMOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineVideoCard
#define SOAP_TYPE_ns1__VirtualMachineVideoCard (2740)
/* ns1:VirtualMachineVideoCard */
class SOAP_CMAC ns1__VirtualMachineVideoCard : public ns1__VirtualDevice
{
public:
	LONG64 *videoRamSizeInKB;	/* optional element of type xsd:long */
	int *numDisplays;	/* optional element of type xsd:int */
	bool *useAutoDetect;	/* optional element of type xsd:boolean */
	bool *enable3DSupport;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2740; } /* = unique id SOAP_TYPE_ns1__VirtualMachineVideoCard */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineVideoCard() { ns1__VirtualMachineVideoCard::soap_default(NULL); }
	virtual ~ns1__VirtualMachineVideoCard() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVideoCardOption
#define SOAP_TYPE_ns1__VirtualVideoCardOption (2741)
/* ns1:VirtualVideoCardOption */
class SOAP_CMAC ns1__VirtualVideoCardOption : public ns1__VirtualDeviceOption
{
public:
	ns1__LongOption *videoRamSizeInKB;	/* optional element of type ns1:LongOption */
	ns1__IntOption *numDisplays;	/* optional element of type ns1:IntOption */
	ns1__BoolOption *useAutoDetect;	/* optional element of type ns1:BoolOption */
	ns1__BoolOption *support3D;	/* optional element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2741; } /* = unique id SOAP_TYPE_ns1__VirtualVideoCardOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVideoCardOption() { ns1__VirtualVideoCardOption::soap_default(NULL); }
	virtual ~ns1__VirtualVideoCardOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNotConnected
#define SOAP_TYPE_ns1__HostNotConnected (46)
/* ns1:HostNotConnected */
class SOAP_CMAC ns1__HostNotConnected : public ns1__HostCommunication
{
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns1__HostNotConnected */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNotConnected() { ns1__HostNotConnected::soap_default(NULL); }
	virtual ~ns1__HostNotConnected() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNotReachable
#define SOAP_TYPE_ns1__HostNotReachable (47)
/* ns1:HostNotReachable */
class SOAP_CMAC ns1__HostNotReachable : public ns1__HostCommunication
{
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns1__HostNotReachable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNotReachable() { ns1__HostNotReachable::soap_default(NULL); }
	virtual ~ns1__HostNotReachable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidType
#define SOAP_TYPE_ns1__InvalidType (50)
/* ns1:InvalidType */
class SOAP_CMAC ns1__InvalidType : public ns1__InvalidRequest
{
public:
	std::string *argument;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns1__InvalidType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidType() { ns1__InvalidType::soap_default(NULL); }
	virtual ~ns1__InvalidType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MethodNotFound
#define SOAP_TYPE_ns1__MethodNotFound (52)
/* ns1:MethodNotFound */
class SOAP_CMAC ns1__MethodNotFound : public ns1__InvalidRequest
{
public:
	ns1__ManagedObjectReference *receiver;	/* required element of type ns1:ManagedObjectReference */
	std::string method;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns1__MethodNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MethodNotFound() { ns1__MethodNotFound::soap_default(NULL); }
	virtual ~ns1__MethodNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCMode
#define SOAP_TYPE_ns1__EVCMode (623)
/* ns1:EVCMode */
class SOAP_CMAC ns1__EVCMode : public ns1__ElementDescription
{
public:
	std::vector<ns1__HostCpuIdInfo * >guaranteedCPUFeatures;	/* optional element of type ns1:HostCpuIdInfo */
	std::string vendor;	/* required element of type xsd:string */
	std::vector<std::string >track;	/* optional element of type xsd:string */
	int vendorTier;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_ns1__EVCMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCMode() { ns1__EVCMode::soap_default(NULL); }
	virtual ~ns1__EVCMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendedElementDescription
#define SOAP_TYPE_ns1__ExtendedElementDescription (630)
/* ns1:ExtendedElementDescription */
class SOAP_CMAC ns1__ExtendedElementDescription : public ns1__ElementDescription
{
public:
	std::string messageCatalogKeyPrefix;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >messageArg;	/* optional element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_ns1__ExtendedElementDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendedElementDescription() { ns1__ExtendedElementDescription::soap_default(NULL); }
	virtual ~ns1__ExtendedElementDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanSpec
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanSpec (964)
/* ns1:VmwareDistributedVirtualSwitchPvlanSpec */
class SOAP_CMAC ns1__VmwareDistributedVirtualSwitchPvlanSpec : public ns1__VmwareDistributedVirtualSwitchVlanSpec
{
public:
	int pvlanId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 964; } /* = unique id SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchPvlanSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareDistributedVirtualSwitchPvlanSpec() { ns1__VmwareDistributedVirtualSwitchPvlanSpec::soap_default(NULL); }
	virtual ~ns1__VmwareDistributedVirtualSwitchPvlanSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanIdSpec
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanIdSpec (965)
/* ns1:VmwareDistributedVirtualSwitchVlanIdSpec */
class SOAP_CMAC ns1__VmwareDistributedVirtualSwitchVlanIdSpec : public ns1__VmwareDistributedVirtualSwitchVlanSpec
{
public:
	int vlanId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 965; } /* = unique id SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchVlanIdSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareDistributedVirtualSwitchVlanIdSpec() { ns1__VmwareDistributedVirtualSwitchVlanIdSpec::soap_default(NULL); }
	virtual ~ns1__VmwareDistributedVirtualSwitchVlanIdSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec
#define SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec (966)
/* ns1:VmwareDistributedVirtualSwitchTrunkVlanSpec */
class SOAP_CMAC ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec : public ns1__VmwareDistributedVirtualSwitchVlanSpec
{
public:
	std::vector<ns1__NumericRange * >vlanId;	/* required element of type ns1:NumericRange */
public:
	virtual int soap_type() const { return 966; } /* = unique id SOAP_TYPE_ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec() { ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec::soap_default(NULL); }
	virtual ~ns1__VmwareDistributedVirtualSwitchTrunkVlanSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralHostInfoEvent
#define SOAP_TYPE_ns1__GeneralHostInfoEvent (978)
/* ns1:GeneralHostInfoEvent */
class SOAP_CMAC ns1__GeneralHostInfoEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 978; } /* = unique id SOAP_TYPE_ns1__GeneralHostInfoEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralHostInfoEvent() { ns1__GeneralHostInfoEvent::soap_default(NULL); }
	virtual ~ns1__GeneralHostInfoEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralHostWarningEvent
#define SOAP_TYPE_ns1__GeneralHostWarningEvent (979)
/* ns1:GeneralHostWarningEvent */
class SOAP_CMAC ns1__GeneralHostWarningEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 979; } /* = unique id SOAP_TYPE_ns1__GeneralHostWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralHostWarningEvent() { ns1__GeneralHostWarningEvent::soap_default(NULL); }
	virtual ~ns1__GeneralHostWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralHostErrorEvent
#define SOAP_TYPE_ns1__GeneralHostErrorEvent (980)
/* ns1:GeneralHostErrorEvent */
class SOAP_CMAC ns1__GeneralHostErrorEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 980; } /* = unique id SOAP_TYPE_ns1__GeneralHostErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralHostErrorEvent() { ns1__GeneralHostErrorEvent::soap_default(NULL); }
	virtual ~ns1__GeneralHostErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralVmInfoEvent
#define SOAP_TYPE_ns1__GeneralVmInfoEvent (981)
/* ns1:GeneralVmInfoEvent */
class SOAP_CMAC ns1__GeneralVmInfoEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 981; } /* = unique id SOAP_TYPE_ns1__GeneralVmInfoEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralVmInfoEvent() { ns1__GeneralVmInfoEvent::soap_default(NULL); }
	virtual ~ns1__GeneralVmInfoEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralVmWarningEvent
#define SOAP_TYPE_ns1__GeneralVmWarningEvent (982)
/* ns1:GeneralVmWarningEvent */
class SOAP_CMAC ns1__GeneralVmWarningEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 982; } /* = unique id SOAP_TYPE_ns1__GeneralVmWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralVmWarningEvent() { ns1__GeneralVmWarningEvent::soap_default(NULL); }
	virtual ~ns1__GeneralVmWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralVmErrorEvent
#define SOAP_TYPE_ns1__GeneralVmErrorEvent (983)
/* ns1:GeneralVmErrorEvent */
class SOAP_CMAC ns1__GeneralVmErrorEvent : public ns1__GeneralEvent
{
public:
	virtual int soap_type() const { return 983; } /* = unique id SOAP_TYPE_ns1__GeneralVmErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralVmErrorEvent() { ns1__GeneralVmErrorEvent::soap_default(NULL); }
	virtual ~ns1__GeneralVmErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GeneralUserEvent
#define SOAP_TYPE_ns1__GeneralUserEvent (984)
/* ns1:GeneralUserEvent */
class SOAP_CMAC ns1__GeneralUserEvent : public ns1__GeneralEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* optional element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 984; } /* = unique id SOAP_TYPE_ns1__GeneralUserEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeneralUserEvent() { ns1__GeneralUserEvent::soap_default(NULL); }
	virtual ~ns1__GeneralUserEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtendedEvent
#define SOAP_TYPE_ns1__ExtendedEvent (987)
/* ns1:ExtendedEvent */
class SOAP_CMAC ns1__ExtendedEvent : public ns1__GeneralEvent
{
public:
	std::string eventTypeId;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *managedObject;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__ExtendedEventPair * >data;	/* optional element of type ns1:ExtendedEventPair */
public:
	virtual int soap_type() const { return 987; } /* = unique id SOAP_TYPE_ns1__ExtendedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtendedEvent() { ns1__ExtendedEvent::soap_default(NULL); }
	virtual ~ns1__ExtendedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterCreatedEvent
#define SOAP_TYPE_ns1__DatacenterCreatedEvent (991)
/* ns1:DatacenterCreatedEvent */
class SOAP_CMAC ns1__DatacenterCreatedEvent : public ns1__DatacenterEvent
{
public:
	class ns1__FolderEventArgument *parent;	/* required element of type ns1:FolderEventArgument */
public:
	virtual int soap_type() const { return 991; } /* = unique id SOAP_TYPE_ns1__DatacenterCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterCreatedEvent() { ns1__DatacenterCreatedEvent::soap_default(NULL); }
	virtual ~ns1__DatacenterCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterRenamedEvent
#define SOAP_TYPE_ns1__DatacenterRenamedEvent (992)
/* ns1:DatacenterRenamedEvent */
class SOAP_CMAC ns1__DatacenterRenamedEvent : public ns1__DatacenterEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 992; } /* = unique id SOAP_TYPE_ns1__DatacenterRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterRenamedEvent() { ns1__DatacenterRenamedEvent::soap_default(NULL); }
	virtual ~ns1__DatacenterRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServerStartedSessionEvent
#define SOAP_TYPE_ns1__ServerStartedSessionEvent (994)
/* ns1:ServerStartedSessionEvent */
class SOAP_CMAC ns1__ServerStartedSessionEvent : public ns1__SessionEvent
{
public:
	virtual int soap_type() const { return 994; } /* = unique id SOAP_TYPE_ns1__ServerStartedSessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServerStartedSessionEvent() { ns1__ServerStartedSessionEvent::soap_default(NULL); }
	virtual ~ns1__ServerStartedSessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserLoginSessionEvent
#define SOAP_TYPE_ns1__UserLoginSessionEvent (995)
/* ns1:UserLoginSessionEvent */
class SOAP_CMAC ns1__UserLoginSessionEvent : public ns1__SessionEvent
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	std::string locale;	/* required element of type xsd:string */
	std::string sessionId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 995; } /* = unique id SOAP_TYPE_ns1__UserLoginSessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserLoginSessionEvent() { ns1__UserLoginSessionEvent::soap_default(NULL); }
	virtual ~ns1__UserLoginSessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserLogoutSessionEvent
#define SOAP_TYPE_ns1__UserLogoutSessionEvent (996)
/* ns1:UserLogoutSessionEvent */
class SOAP_CMAC ns1__UserLogoutSessionEvent : public ns1__SessionEvent
{
public:
	virtual int soap_type() const { return 996; } /* = unique id SOAP_TYPE_ns1__UserLogoutSessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserLogoutSessionEvent() { ns1__UserLogoutSessionEvent::soap_default(NULL); }
	virtual ~ns1__UserLogoutSessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BadUsernameSessionEvent
#define SOAP_TYPE_ns1__BadUsernameSessionEvent (997)
/* ns1:BadUsernameSessionEvent */
class SOAP_CMAC ns1__BadUsernameSessionEvent : public ns1__SessionEvent
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 997; } /* = unique id SOAP_TYPE_ns1__BadUsernameSessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BadUsernameSessionEvent() { ns1__BadUsernameSessionEvent::soap_default(NULL); }
	virtual ~ns1__BadUsernameSessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlreadyAuthenticatedSessionEvent
#define SOAP_TYPE_ns1__AlreadyAuthenticatedSessionEvent (998)
/* ns1:AlreadyAuthenticatedSessionEvent */
class SOAP_CMAC ns1__AlreadyAuthenticatedSessionEvent : public ns1__SessionEvent
{
public:
	virtual int soap_type() const { return 998; } /* = unique id SOAP_TYPE_ns1__AlreadyAuthenticatedSessionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlreadyAuthenticatedSessionEvent() { ns1__AlreadyAuthenticatedSessionEvent::soap_default(NULL); }
	virtual ~ns1__AlreadyAuthenticatedSessionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoAccessUserEvent
#define SOAP_TYPE_ns1__NoAccessUserEvent (999)
/* ns1:NoAccessUserEvent */
class SOAP_CMAC ns1__NoAccessUserEvent : public ns1__SessionEvent
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 999; } /* = unique id SOAP_TYPE_ns1__NoAccessUserEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoAccessUserEvent() { ns1__NoAccessUserEvent::soap_default(NULL); }
	virtual ~ns1__NoAccessUserEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SessionTerminatedEvent
#define SOAP_TYPE_ns1__SessionTerminatedEvent (1000)
/* ns1:SessionTerminatedEvent */
class SOAP_CMAC ns1__SessionTerminatedEvent : public ns1__SessionEvent
{
public:
	std::string sessionId;	/* required element of type xsd:string */
	std::string terminatedUsername;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1000; } /* = unique id SOAP_TYPE_ns1__SessionTerminatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SessionTerminatedEvent() { ns1__SessionTerminatedEvent::soap_default(NULL); }
	virtual ~ns1__SessionTerminatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GlobalMessageChangedEvent
#define SOAP_TYPE_ns1__GlobalMessageChangedEvent (1001)
/* ns1:GlobalMessageChangedEvent */
class SOAP_CMAC ns1__GlobalMessageChangedEvent : public ns1__SessionEvent
{
public:
	std::string message;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1001; } /* = unique id SOAP_TYPE_ns1__GlobalMessageChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GlobalMessageChangedEvent() { ns1__GlobalMessageChangedEvent::soap_default(NULL); }
	virtual ~ns1__GlobalMessageChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InfoUpgradeEvent
#define SOAP_TYPE_ns1__InfoUpgradeEvent (1003)
/* ns1:InfoUpgradeEvent */
class SOAP_CMAC ns1__InfoUpgradeEvent : public ns1__UpgradeEvent
{
public:
	virtual int soap_type() const { return 1003; } /* = unique id SOAP_TYPE_ns1__InfoUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InfoUpgradeEvent() { ns1__InfoUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__InfoUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WarningUpgradeEvent
#define SOAP_TYPE_ns1__WarningUpgradeEvent (1004)
/* ns1:WarningUpgradeEvent */
class SOAP_CMAC ns1__WarningUpgradeEvent : public ns1__UpgradeEvent
{
public:
	virtual int soap_type() const { return 1004; } /* = unique id SOAP_TYPE_ns1__WarningUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WarningUpgradeEvent() { ns1__WarningUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__WarningUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ErrorUpgradeEvent
#define SOAP_TYPE_ns1__ErrorUpgradeEvent (1005)
/* ns1:ErrorUpgradeEvent */
class SOAP_CMAC ns1__ErrorUpgradeEvent : public ns1__UpgradeEvent
{
public:
	virtual int soap_type() const { return 1005; } /* = unique id SOAP_TYPE_ns1__ErrorUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ErrorUpgradeEvent() { ns1__ErrorUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__ErrorUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserUpgradeEvent
#define SOAP_TYPE_ns1__UserUpgradeEvent (1006)
/* ns1:UserUpgradeEvent */
class SOAP_CMAC ns1__UserUpgradeEvent : public ns1__UpgradeEvent
{
public:
	virtual int soap_type() const { return 1006; } /* = unique id SOAP_TYPE_ns1__UserUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserUpgradeEvent() { ns1__UserUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__UserUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasEvent
#define SOAP_TYPE_ns1__HostDasEvent (1008)
/* ns1:HostDasEvent */
class SOAP_CMAC ns1__HostDasEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1008; } /* = unique id SOAP_TYPE_ns1__HostDasEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasEvent() { ns1__HostDasEvent::soap_default(NULL); }
	virtual ~ns1__HostDasEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectedEvent
#define SOAP_TYPE_ns1__HostConnectedEvent (1009)
/* ns1:HostConnectedEvent */
class SOAP_CMAC ns1__HostConnectedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1009; } /* = unique id SOAP_TYPE_ns1__HostConnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectedEvent() { ns1__HostConnectedEvent::soap_default(NULL); }
	virtual ~ns1__HostConnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDisconnectedEvent
#define SOAP_TYPE_ns1__HostDisconnectedEvent (1010)
/* ns1:HostDisconnectedEvent */
class SOAP_CMAC ns1__HostDisconnectedEvent : public ns1__HostEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1010; } /* = unique id SOAP_TYPE_ns1__HostDisconnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDisconnectedEvent() { ns1__HostDisconnectedEvent::soap_default(NULL); }
	virtual ~ns1__HostDisconnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostSyncFailedEvent
#define SOAP_TYPE_ns1__HostSyncFailedEvent (1011)
/* ns1:HostSyncFailedEvent */
class SOAP_CMAC ns1__HostSyncFailedEvent : public ns1__HostEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1011; } /* = unique id SOAP_TYPE_ns1__HostSyncFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostSyncFailedEvent() { ns1__HostSyncFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostSyncFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConnectionLostEvent
#define SOAP_TYPE_ns1__HostConnectionLostEvent (1012)
/* ns1:HostConnectionLostEvent */
class SOAP_CMAC ns1__HostConnectionLostEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1012; } /* = unique id SOAP_TYPE_ns1__HostConnectionLostEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConnectionLostEvent() { ns1__HostConnectionLostEvent::soap_default(NULL); }
	virtual ~ns1__HostConnectionLostEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostReconnectionFailedEvent
#define SOAP_TYPE_ns1__HostReconnectionFailedEvent (1013)
/* ns1:HostReconnectionFailedEvent */
class SOAP_CMAC ns1__HostReconnectionFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1013; } /* = unique id SOAP_TYPE_ns1__HostReconnectionFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostReconnectionFailedEvent() { ns1__HostReconnectionFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostReconnectionFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedNoConnectionEvent
#define SOAP_TYPE_ns1__HostCnxFailedNoConnectionEvent (1014)
/* ns1:HostCnxFailedNoConnectionEvent */
class SOAP_CMAC ns1__HostCnxFailedNoConnectionEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1014; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedNoConnectionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedNoConnectionEvent() { ns1__HostCnxFailedNoConnectionEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedNoConnectionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedBadUsernameEvent
#define SOAP_TYPE_ns1__HostCnxFailedBadUsernameEvent (1015)
/* ns1:HostCnxFailedBadUsernameEvent */
class SOAP_CMAC ns1__HostCnxFailedBadUsernameEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1015; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedBadUsernameEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedBadUsernameEvent() { ns1__HostCnxFailedBadUsernameEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedBadUsernameEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedBadVersionEvent
#define SOAP_TYPE_ns1__HostCnxFailedBadVersionEvent (1016)
/* ns1:HostCnxFailedBadVersionEvent */
class SOAP_CMAC ns1__HostCnxFailedBadVersionEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1016; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedBadVersionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedBadVersionEvent() { ns1__HostCnxFailedBadVersionEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedBadVersionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedAlreadyManagedEvent
#define SOAP_TYPE_ns1__HostCnxFailedAlreadyManagedEvent (1017)
/* ns1:HostCnxFailedAlreadyManagedEvent */
class SOAP_CMAC ns1__HostCnxFailedAlreadyManagedEvent : public ns1__HostEvent
{
public:
	std::string serverName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1017; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedAlreadyManagedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedAlreadyManagedEvent() { ns1__HostCnxFailedAlreadyManagedEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedAlreadyManagedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedNoLicenseEvent
#define SOAP_TYPE_ns1__HostCnxFailedNoLicenseEvent (1018)
/* ns1:HostCnxFailedNoLicenseEvent */
class SOAP_CMAC ns1__HostCnxFailedNoLicenseEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1018; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedNoLicenseEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedNoLicenseEvent() { ns1__HostCnxFailedNoLicenseEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedNoLicenseEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedNetworkErrorEvent
#define SOAP_TYPE_ns1__HostCnxFailedNetworkErrorEvent (1019)
/* ns1:HostCnxFailedNetworkErrorEvent */
class SOAP_CMAC ns1__HostCnxFailedNetworkErrorEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1019; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedNetworkErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedNetworkErrorEvent() { ns1__HostCnxFailedNetworkErrorEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedNetworkErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostRemovedEvent
#define SOAP_TYPE_ns1__HostRemovedEvent (1020)
/* ns1:HostRemovedEvent */
class SOAP_CMAC ns1__HostRemovedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE_ns1__HostRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostRemovedEvent() { ns1__HostRemovedEvent::soap_default(NULL); }
	virtual ~ns1__HostRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedCcagentUpgradeEvent
#define SOAP_TYPE_ns1__HostCnxFailedCcagentUpgradeEvent (1021)
/* ns1:HostCnxFailedCcagentUpgradeEvent */
class SOAP_CMAC ns1__HostCnxFailedCcagentUpgradeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1021; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedCcagentUpgradeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedCcagentUpgradeEvent() { ns1__HostCnxFailedCcagentUpgradeEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedCcagentUpgradeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedBadCcagentEvent
#define SOAP_TYPE_ns1__HostCnxFailedBadCcagentEvent (1022)
/* ns1:HostCnxFailedBadCcagentEvent */
class SOAP_CMAC ns1__HostCnxFailedBadCcagentEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1022; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedBadCcagentEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedBadCcagentEvent() { ns1__HostCnxFailedBadCcagentEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedBadCcagentEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedEvent
#define SOAP_TYPE_ns1__HostCnxFailedEvent (1023)
/* ns1:HostCnxFailedEvent */
class SOAP_CMAC ns1__HostCnxFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1023; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedEvent() { ns1__HostCnxFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedAccountFailedEvent
#define SOAP_TYPE_ns1__HostCnxFailedAccountFailedEvent (1024)
/* ns1:HostCnxFailedAccountFailedEvent */
class SOAP_CMAC ns1__HostCnxFailedAccountFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1024; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedAccountFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedAccountFailedEvent() { ns1__HostCnxFailedAccountFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedAccountFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedNoAccessEvent
#define SOAP_TYPE_ns1__HostCnxFailedNoAccessEvent (1025)
/* ns1:HostCnxFailedNoAccessEvent */
class SOAP_CMAC ns1__HostCnxFailedNoAccessEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1025; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedNoAccessEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedNoAccessEvent() { ns1__HostCnxFailedNoAccessEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedNoAccessEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostShutdownEvent
#define SOAP_TYPE_ns1__HostShutdownEvent (1026)
/* ns1:HostShutdownEvent */
class SOAP_CMAC ns1__HostShutdownEvent : public ns1__HostEvent
{
public:
	std::string reason;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1026; } /* = unique id SOAP_TYPE_ns1__HostShutdownEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostShutdownEvent() { ns1__HostShutdownEvent::soap_default(NULL); }
	virtual ~ns1__HostShutdownEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedNotFoundEvent
#define SOAP_TYPE_ns1__HostCnxFailedNotFoundEvent (1027)
/* ns1:HostCnxFailedNotFoundEvent */
class SOAP_CMAC ns1__HostCnxFailedNotFoundEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1027; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedNotFoundEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedNotFoundEvent() { ns1__HostCnxFailedNotFoundEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedNotFoundEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCnxFailedTimeoutEvent
#define SOAP_TYPE_ns1__HostCnxFailedTimeoutEvent (1028)
/* ns1:HostCnxFailedTimeoutEvent */
class SOAP_CMAC ns1__HostCnxFailedTimeoutEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1028; } /* = unique id SOAP_TYPE_ns1__HostCnxFailedTimeoutEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCnxFailedTimeoutEvent() { ns1__HostCnxFailedTimeoutEvent::soap_default(NULL); }
	virtual ~ns1__HostCnxFailedTimeoutEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUpgradeFailedEvent
#define SOAP_TYPE_ns1__HostUpgradeFailedEvent (1029)
/* ns1:HostUpgradeFailedEvent */
class SOAP_CMAC ns1__HostUpgradeFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1029; } /* = unique id SOAP_TYPE_ns1__HostUpgradeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUpgradeFailedEvent() { ns1__HostUpgradeFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostUpgradeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnteringMaintenanceModeEvent
#define SOAP_TYPE_ns1__EnteringMaintenanceModeEvent (1030)
/* ns1:EnteringMaintenanceModeEvent */
class SOAP_CMAC ns1__EnteringMaintenanceModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1030; } /* = unique id SOAP_TYPE_ns1__EnteringMaintenanceModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnteringMaintenanceModeEvent() { ns1__EnteringMaintenanceModeEvent::soap_default(NULL); }
	virtual ~ns1__EnteringMaintenanceModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnteredMaintenanceModeEvent
#define SOAP_TYPE_ns1__EnteredMaintenanceModeEvent (1031)
/* ns1:EnteredMaintenanceModeEvent */
class SOAP_CMAC ns1__EnteredMaintenanceModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1031; } /* = unique id SOAP_TYPE_ns1__EnteredMaintenanceModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnteredMaintenanceModeEvent() { ns1__EnteredMaintenanceModeEvent::soap_default(NULL); }
	virtual ~ns1__EnteredMaintenanceModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitMaintenanceModeEvent
#define SOAP_TYPE_ns1__ExitMaintenanceModeEvent (1032)
/* ns1:ExitMaintenanceModeEvent */
class SOAP_CMAC ns1__ExitMaintenanceModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1032; } /* = unique id SOAP_TYPE_ns1__ExitMaintenanceModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitMaintenanceModeEvent() { ns1__ExitMaintenanceModeEvent::soap_default(NULL); }
	virtual ~ns1__ExitMaintenanceModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanceledHostOperationEvent
#define SOAP_TYPE_ns1__CanceledHostOperationEvent (1033)
/* ns1:CanceledHostOperationEvent */
class SOAP_CMAC ns1__CanceledHostOperationEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1033; } /* = unique id SOAP_TYPE_ns1__CanceledHostOperationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanceledHostOperationEvent() { ns1__CanceledHostOperationEvent::soap_default(NULL); }
	virtual ~ns1__CanceledHostOperationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TimedOutHostOperationEvent
#define SOAP_TYPE_ns1__TimedOutHostOperationEvent (1034)
/* ns1:TimedOutHostOperationEvent */
class SOAP_CMAC ns1__TimedOutHostOperationEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1034; } /* = unique id SOAP_TYPE_ns1__TimedOutHostOperationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TimedOutHostOperationEvent() { ns1__TimedOutHostOperationEvent::soap_default(NULL); }
	virtual ~ns1__TimedOutHostOperationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasEnabledEvent
#define SOAP_TYPE_ns1__HostDasEnabledEvent (1035)
/* ns1:HostDasEnabledEvent */
class SOAP_CMAC ns1__HostDasEnabledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1035; } /* = unique id SOAP_TYPE_ns1__HostDasEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasEnabledEvent() { ns1__HostDasEnabledEvent::soap_default(NULL); }
	virtual ~ns1__HostDasEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasDisabledEvent
#define SOAP_TYPE_ns1__HostDasDisabledEvent (1036)
/* ns1:HostDasDisabledEvent */
class SOAP_CMAC ns1__HostDasDisabledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1036; } /* = unique id SOAP_TYPE_ns1__HostDasDisabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasDisabledEvent() { ns1__HostDasDisabledEvent::soap_default(NULL); }
	virtual ~ns1__HostDasDisabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasEnablingEvent
#define SOAP_TYPE_ns1__HostDasEnablingEvent (1037)
/* ns1:HostDasEnablingEvent */
class SOAP_CMAC ns1__HostDasEnablingEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1037; } /* = unique id SOAP_TYPE_ns1__HostDasEnablingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasEnablingEvent() { ns1__HostDasEnablingEvent::soap_default(NULL); }
	virtual ~ns1__HostDasEnablingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasDisablingEvent
#define SOAP_TYPE_ns1__HostDasDisablingEvent (1038)
/* ns1:HostDasDisablingEvent */
class SOAP_CMAC ns1__HostDasDisablingEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1038; } /* = unique id SOAP_TYPE_ns1__HostDasDisablingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasDisablingEvent() { ns1__HostDasDisablingEvent::soap_default(NULL); }
	virtual ~ns1__HostDasDisablingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasErrorEvent
#define SOAP_TYPE_ns1__HostDasErrorEvent (1039)
/* ns1:HostDasErrorEvent */
class SOAP_CMAC ns1__HostDasErrorEvent : public ns1__HostEvent
{
public:
	std::string *message;	/* optional element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1039; } /* = unique id SOAP_TYPE_ns1__HostDasErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasErrorEvent() { ns1__HostDasErrorEvent::soap_default(NULL); }
	virtual ~ns1__HostDasErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostDasOkEvent
#define SOAP_TYPE_ns1__HostDasOkEvent (1040)
/* ns1:HostDasOkEvent */
class SOAP_CMAC ns1__HostDasOkEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1040; } /* = unique id SOAP_TYPE_ns1__HostDasOkEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostDasOkEvent() { ns1__HostDasOkEvent::soap_default(NULL); }
	virtual ~ns1__HostDasOkEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VcAgentUpgradedEvent
#define SOAP_TYPE_ns1__VcAgentUpgradedEvent (1041)
/* ns1:VcAgentUpgradedEvent */
class SOAP_CMAC ns1__VcAgentUpgradedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1041; } /* = unique id SOAP_TYPE_ns1__VcAgentUpgradedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VcAgentUpgradedEvent() { ns1__VcAgentUpgradedEvent::soap_default(NULL); }
	virtual ~ns1__VcAgentUpgradedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VcAgentUninstalledEvent
#define SOAP_TYPE_ns1__VcAgentUninstalledEvent (1042)
/* ns1:VcAgentUninstalledEvent */
class SOAP_CMAC ns1__VcAgentUninstalledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1042; } /* = unique id SOAP_TYPE_ns1__VcAgentUninstalledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VcAgentUninstalledEvent() { ns1__VcAgentUninstalledEvent::soap_default(NULL); }
	virtual ~ns1__VcAgentUninstalledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VcAgentUpgradeFailedEvent
#define SOAP_TYPE_ns1__VcAgentUpgradeFailedEvent (1043)
/* ns1:VcAgentUpgradeFailedEvent */
class SOAP_CMAC ns1__VcAgentUpgradeFailedEvent : public ns1__HostEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1043; } /* = unique id SOAP_TYPE_ns1__VcAgentUpgradeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VcAgentUpgradeFailedEvent() { ns1__VcAgentUpgradeFailedEvent::soap_default(NULL); }
	virtual ~ns1__VcAgentUpgradeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VcAgentUninstallFailedEvent
#define SOAP_TYPE_ns1__VcAgentUninstallFailedEvent (1044)
/* ns1:VcAgentUninstallFailedEvent */
class SOAP_CMAC ns1__VcAgentUninstallFailedEvent : public ns1__HostEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1044; } /* = unique id SOAP_TYPE_ns1__VcAgentUninstallFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VcAgentUninstallFailedEvent() { ns1__VcAgentUninstallFailedEvent::soap_default(NULL); }
	virtual ~ns1__VcAgentUninstallFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAddedEvent
#define SOAP_TYPE_ns1__HostAddedEvent (1045)
/* ns1:HostAddedEvent */
class SOAP_CMAC ns1__HostAddedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1045; } /* = unique id SOAP_TYPE_ns1__HostAddedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAddedEvent() { ns1__HostAddedEvent::soap_default(NULL); }
	virtual ~ns1__HostAddedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAddFailedEvent
#define SOAP_TYPE_ns1__HostAddFailedEvent (1046)
/* ns1:HostAddFailedEvent */
class SOAP_CMAC ns1__HostAddFailedEvent : public ns1__HostEvent
{
public:
	std::string hostname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1046; } /* = unique id SOAP_TYPE_ns1__HostAddFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAddFailedEvent() { ns1__HostAddFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostAddFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpChangedEvent
#define SOAP_TYPE_ns1__HostIpChangedEvent (1047)
/* ns1:HostIpChangedEvent */
class SOAP_CMAC ns1__HostIpChangedEvent : public ns1__HostEvent
{
public:
	std::string oldIP;	/* required element of type xsd:string */
	std::string newIP;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1047; } /* = unique id SOAP_TYPE_ns1__HostIpChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpChangedEvent() { ns1__HostIpChangedEvent::soap_default(NULL); }
	virtual ~ns1__HostIpChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnteringStandbyModeEvent
#define SOAP_TYPE_ns1__EnteringStandbyModeEvent (1048)
/* ns1:EnteringStandbyModeEvent */
class SOAP_CMAC ns1__EnteringStandbyModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1048; } /* = unique id SOAP_TYPE_ns1__EnteringStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnteringStandbyModeEvent() { ns1__EnteringStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__EnteringStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EnteredStandbyModeEvent
#define SOAP_TYPE_ns1__EnteredStandbyModeEvent (1050)
/* ns1:EnteredStandbyModeEvent */
class SOAP_CMAC ns1__EnteredStandbyModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1050; } /* = unique id SOAP_TYPE_ns1__EnteredStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EnteredStandbyModeEvent() { ns1__EnteredStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__EnteredStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitingStandbyModeEvent
#define SOAP_TYPE_ns1__ExitingStandbyModeEvent (1052)
/* ns1:ExitingStandbyModeEvent */
class SOAP_CMAC ns1__ExitingStandbyModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1052; } /* = unique id SOAP_TYPE_ns1__ExitingStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitingStandbyModeEvent() { ns1__ExitingStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__ExitingStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitedStandbyModeEvent
#define SOAP_TYPE_ns1__ExitedStandbyModeEvent (1054)
/* ns1:ExitedStandbyModeEvent */
class SOAP_CMAC ns1__ExitedStandbyModeEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1054; } /* = unique id SOAP_TYPE_ns1__ExitedStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitedStandbyModeEvent() { ns1__ExitedStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__ExitedStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExitStandbyModeFailedEvent
#define SOAP_TYPE_ns1__ExitStandbyModeFailedEvent (1056)
/* ns1:ExitStandbyModeFailedEvent */
class SOAP_CMAC ns1__ExitStandbyModeFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1056; } /* = unique id SOAP_TYPE_ns1__ExitStandbyModeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExitStandbyModeFailedEvent() { ns1__ExitStandbyModeFailedEvent::soap_default(NULL); }
	virtual ~ns1__ExitStandbyModeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UpdatedAgentBeingRestartedEvent
#define SOAP_TYPE_ns1__UpdatedAgentBeingRestartedEvent (1058)
/* ns1:UpdatedAgentBeingRestartedEvent */
class SOAP_CMAC ns1__UpdatedAgentBeingRestartedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1058; } /* = unique id SOAP_TYPE_ns1__UpdatedAgentBeingRestartedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UpdatedAgentBeingRestartedEvent() { ns1__UpdatedAgentBeingRestartedEvent::soap_default(NULL); }
	virtual ~ns1__UpdatedAgentBeingRestartedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccountCreatedEvent
#define SOAP_TYPE_ns1__AccountCreatedEvent (1059)
/* ns1:AccountCreatedEvent */
class SOAP_CMAC ns1__AccountCreatedEvent : public ns1__HostEvent
{
public:
	ns1__HostAccountSpec *spec;	/* required element of type ns1:HostAccountSpec */
	bool group;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1059; } /* = unique id SOAP_TYPE_ns1__AccountCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccountCreatedEvent() { ns1__AccountCreatedEvent::soap_default(NULL); }
	virtual ~ns1__AccountCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccountRemovedEvent
#define SOAP_TYPE_ns1__AccountRemovedEvent (1060)
/* ns1:AccountRemovedEvent */
class SOAP_CMAC ns1__AccountRemovedEvent : public ns1__HostEvent
{
public:
	std::string account;	/* required element of type xsd:string */
	bool group;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1060; } /* = unique id SOAP_TYPE_ns1__AccountRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccountRemovedEvent() { ns1__AccountRemovedEvent::soap_default(NULL); }
	virtual ~ns1__AccountRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserPasswordChanged
#define SOAP_TYPE_ns1__UserPasswordChanged (1061)
/* ns1:UserPasswordChanged */
class SOAP_CMAC ns1__UserPasswordChanged : public ns1__HostEvent
{
public:
	std::string userLogin;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1061; } /* = unique id SOAP_TYPE_ns1__UserPasswordChanged */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserPasswordChanged() { ns1__UserPasswordChanged::soap_default(NULL); }
	virtual ~ns1__UserPasswordChanged() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccountUpdatedEvent
#define SOAP_TYPE_ns1__AccountUpdatedEvent (1062)
/* ns1:AccountUpdatedEvent */
class SOAP_CMAC ns1__AccountUpdatedEvent : public ns1__HostEvent
{
public:
	ns1__HostAccountSpec *spec;	/* required element of type ns1:HostAccountSpec */
	bool group;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1062; } /* = unique id SOAP_TYPE_ns1__AccountUpdatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AccountUpdatedEvent() { ns1__AccountUpdatedEvent::soap_default(NULL); }
	virtual ~ns1__AccountUpdatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserAssignedToGroup
#define SOAP_TYPE_ns1__UserAssignedToGroup (1063)
/* ns1:UserAssignedToGroup */
class SOAP_CMAC ns1__UserAssignedToGroup : public ns1__HostEvent
{
public:
	std::string userLogin;	/* required element of type xsd:string */
	std::string group;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1063; } /* = unique id SOAP_TYPE_ns1__UserAssignedToGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserAssignedToGroup() { ns1__UserAssignedToGroup::soap_default(NULL); }
	virtual ~ns1__UserAssignedToGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UserUnassignedFromGroup
#define SOAP_TYPE_ns1__UserUnassignedFromGroup (1064)
/* ns1:UserUnassignedFromGroup */
class SOAP_CMAC ns1__UserUnassignedFromGroup : public ns1__HostEvent
{
public:
	std::string userLogin;	/* required element of type xsd:string */
	std::string group;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1064; } /* = unique id SOAP_TYPE_ns1__UserUnassignedFromGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UserUnassignedFromGroup() { ns1__UserUnassignedFromGroup::soap_default(NULL); }
	virtual ~ns1__UserUnassignedFromGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastorePrincipalConfigured
#define SOAP_TYPE_ns1__DatastorePrincipalConfigured (1065)
/* ns1:DatastorePrincipalConfigured */
class SOAP_CMAC ns1__DatastorePrincipalConfigured : public ns1__HostEvent
{
public:
	std::string datastorePrincipal;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1065; } /* = unique id SOAP_TYPE_ns1__DatastorePrincipalConfigured */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastorePrincipalConfigured() { ns1__DatastorePrincipalConfigured::soap_default(NULL); }
	virtual ~ns1__DatastorePrincipalConfigured() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMFSDatastoreCreatedEvent
#define SOAP_TYPE_ns1__VMFSDatastoreCreatedEvent (1066)
/* ns1:VMFSDatastoreCreatedEvent */
class SOAP_CMAC ns1__VMFSDatastoreCreatedEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1066; } /* = unique id SOAP_TYPE_ns1__VMFSDatastoreCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMFSDatastoreCreatedEvent() { ns1__VMFSDatastoreCreatedEvent::soap_default(NULL); }
	virtual ~ns1__VMFSDatastoreCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NASDatastoreCreatedEvent
#define SOAP_TYPE_ns1__NASDatastoreCreatedEvent (1067)
/* ns1:NASDatastoreCreatedEvent */
class SOAP_CMAC ns1__NASDatastoreCreatedEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1067; } /* = unique id SOAP_TYPE_ns1__NASDatastoreCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NASDatastoreCreatedEvent() { ns1__NASDatastoreCreatedEvent::soap_default(NULL); }
	virtual ~ns1__NASDatastoreCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalDatastoreCreatedEvent
#define SOAP_TYPE_ns1__LocalDatastoreCreatedEvent (1068)
/* ns1:LocalDatastoreCreatedEvent */
class SOAP_CMAC ns1__LocalDatastoreCreatedEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1068; } /* = unique id SOAP_TYPE_ns1__LocalDatastoreCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalDatastoreCreatedEvent() { ns1__LocalDatastoreCreatedEvent::soap_default(NULL); }
	virtual ~ns1__LocalDatastoreCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMFSDatastoreExtendedEvent
#define SOAP_TYPE_ns1__VMFSDatastoreExtendedEvent (1069)
/* ns1:VMFSDatastoreExtendedEvent */
class SOAP_CMAC ns1__VMFSDatastoreExtendedEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1069; } /* = unique id SOAP_TYPE_ns1__VMFSDatastoreExtendedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMFSDatastoreExtendedEvent() { ns1__VMFSDatastoreExtendedEvent::soap_default(NULL); }
	virtual ~ns1__VMFSDatastoreExtendedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMFSDatastoreExpandedEvent
#define SOAP_TYPE_ns1__VMFSDatastoreExpandedEvent (1070)
/* ns1:VMFSDatastoreExpandedEvent */
class SOAP_CMAC ns1__VMFSDatastoreExpandedEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1070; } /* = unique id SOAP_TYPE_ns1__VMFSDatastoreExpandedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMFSDatastoreExpandedEvent() { ns1__VMFSDatastoreExpandedEvent::soap_default(NULL); }
	virtual ~ns1__VMFSDatastoreExpandedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreRemovedOnHostEvent
#define SOAP_TYPE_ns1__DatastoreRemovedOnHostEvent (1071)
/* ns1:DatastoreRemovedOnHostEvent */
class SOAP_CMAC ns1__DatastoreRemovedOnHostEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1071; } /* = unique id SOAP_TYPE_ns1__DatastoreRemovedOnHostEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreRemovedOnHostEvent() { ns1__DatastoreRemovedOnHostEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreRemovedOnHostEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreRenamedOnHostEvent
#define SOAP_TYPE_ns1__DatastoreRenamedOnHostEvent (1072)
/* ns1:DatastoreRenamedOnHostEvent */
class SOAP_CMAC ns1__DatastoreRenamedOnHostEvent : public ns1__HostEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1072; } /* = unique id SOAP_TYPE_ns1__DatastoreRenamedOnHostEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreRenamedOnHostEvent() { ns1__DatastoreRenamedOnHostEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreRenamedOnHostEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DuplicateIpDetectedEvent
#define SOAP_TYPE_ns1__DuplicateIpDetectedEvent (1073)
/* ns1:DuplicateIpDetectedEvent */
class SOAP_CMAC ns1__DuplicateIpDetectedEvent : public ns1__HostEvent
{
public:
	std::string duplicateIP;	/* required element of type xsd:string */
	std::string macAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1073; } /* = unique id SOAP_TYPE_ns1__DuplicateIpDetectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DuplicateIpDetectedEvent() { ns1__DuplicateIpDetectedEvent::soap_default(NULL); }
	virtual ~ns1__DuplicateIpDetectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreDiscoveredEvent
#define SOAP_TYPE_ns1__DatastoreDiscoveredEvent (1074)
/* ns1:DatastoreDiscoveredEvent */
class SOAP_CMAC ns1__DatastoreDiscoveredEvent : public ns1__HostEvent
{
public:
	ns1__DatastoreEventArgument *datastore;	/* required element of type ns1:DatastoreEventArgument */
public:
	virtual int soap_type() const { return 1074; } /* = unique id SOAP_TYPE_ns1__DatastoreDiscoveredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreDiscoveredEvent() { ns1__DatastoreDiscoveredEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreDiscoveredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsResourceConfigureFailedEvent
#define SOAP_TYPE_ns1__DrsResourceConfigureFailedEvent (1075)
/* ns1:DrsResourceConfigureFailedEvent */
class SOAP_CMAC ns1__DrsResourceConfigureFailedEvent : public ns1__HostEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1075; } /* = unique id SOAP_TYPE_ns1__DrsResourceConfigureFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsResourceConfigureFailedEvent() { ns1__DrsResourceConfigureFailedEvent::soap_default(NULL); }
	virtual ~ns1__DrsResourceConfigureFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsResourceConfigureSyncedEvent
#define SOAP_TYPE_ns1__DrsResourceConfigureSyncedEvent (1076)
/* ns1:DrsResourceConfigureSyncedEvent */
class SOAP_CMAC ns1__DrsResourceConfigureSyncedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1076; } /* = unique id SOAP_TYPE_ns1__DrsResourceConfigureSyncedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsResourceConfigureSyncedEvent() { ns1__DrsResourceConfigureSyncedEvent::soap_default(NULL); }
	virtual ~ns1__DrsResourceConfigureSyncedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostGetShortNameFailedEvent
#define SOAP_TYPE_ns1__HostGetShortNameFailedEvent (1077)
/* ns1:HostGetShortNameFailedEvent */
class SOAP_CMAC ns1__HostGetShortNameFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1077; } /* = unique id SOAP_TYPE_ns1__HostGetShortNameFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostGetShortNameFailedEvent() { ns1__HostGetShortNameFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostGetShortNameFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostShortNameToIpFailedEvent
#define SOAP_TYPE_ns1__HostShortNameToIpFailedEvent (1078)
/* ns1:HostShortNameToIpFailedEvent */
class SOAP_CMAC ns1__HostShortNameToIpFailedEvent : public ns1__HostEvent
{
public:
	std::string shortName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1078; } /* = unique id SOAP_TYPE_ns1__HostShortNameToIpFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostShortNameToIpFailedEvent() { ns1__HostShortNameToIpFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostShortNameToIpFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpToShortNameFailedEvent
#define SOAP_TYPE_ns1__HostIpToShortNameFailedEvent (1079)
/* ns1:HostIpToShortNameFailedEvent */
class SOAP_CMAC ns1__HostIpToShortNameFailedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1079; } /* = unique id SOAP_TYPE_ns1__HostIpToShortNameFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpToShortNameFailedEvent() { ns1__HostIpToShortNameFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostIpToShortNameFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIpInconsistentEvent
#define SOAP_TYPE_ns1__HostIpInconsistentEvent (1083)
/* ns1:HostIpInconsistentEvent */
class SOAP_CMAC ns1__HostIpInconsistentEvent : public ns1__HostEvent
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
	std::string ipAddress2;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1083; } /* = unique id SOAP_TYPE_ns1__HostIpInconsistentEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIpInconsistentEvent() { ns1__HostIpInconsistentEvent::soap_default(NULL); }
	virtual ~ns1__HostIpInconsistentEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostUserWorldSwapNotEnabledEvent
#define SOAP_TYPE_ns1__HostUserWorldSwapNotEnabledEvent (1084)
/* ns1:HostUserWorldSwapNotEnabledEvent */
class SOAP_CMAC ns1__HostUserWorldSwapNotEnabledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1084; } /* = unique id SOAP_TYPE_ns1__HostUserWorldSwapNotEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostUserWorldSwapNotEnabledEvent() { ns1__HostUserWorldSwapNotEnabledEvent::soap_default(NULL); }
	virtual ~ns1__HostUserWorldSwapNotEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNonCompliantEvent
#define SOAP_TYPE_ns1__HostNonCompliantEvent (1085)
/* ns1:HostNonCompliantEvent */
class SOAP_CMAC ns1__HostNonCompliantEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1085; } /* = unique id SOAP_TYPE_ns1__HostNonCompliantEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNonCompliantEvent() { ns1__HostNonCompliantEvent::soap_default(NULL); }
	virtual ~ns1__HostNonCompliantEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostCompliantEvent
#define SOAP_TYPE_ns1__HostCompliantEvent (1086)
/* ns1:HostCompliantEvent */
class SOAP_CMAC ns1__HostCompliantEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1086; } /* = unique id SOAP_TYPE_ns1__HostCompliantEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostCompliantEvent() { ns1__HostCompliantEvent::soap_default(NULL); }
	virtual ~ns1__HostCompliantEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostComplianceCheckedEvent
#define SOAP_TYPE_ns1__HostComplianceCheckedEvent (1087)
/* ns1:HostComplianceCheckedEvent */
class SOAP_CMAC ns1__HostComplianceCheckedEvent : public ns1__HostEvent
{
public:
	ns1__ProfileEventArgument *profile;	/* required element of type ns1:ProfileEventArgument */
public:
	virtual int soap_type() const { return 1087; } /* = unique id SOAP_TYPE_ns1__HostComplianceCheckedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostComplianceCheckedEvent() { ns1__HostComplianceCheckedEvent::soap_default(NULL); }
	virtual ~ns1__HostComplianceCheckedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterComplianceCheckedEvent
#define SOAP_TYPE_ns1__ClusterComplianceCheckedEvent (1088)
/* ns1:ClusterComplianceCheckedEvent */
class SOAP_CMAC ns1__ClusterComplianceCheckedEvent : public ns1__ClusterEvent
{
public:
	ns1__ProfileEventArgument *profile;	/* required element of type ns1:ProfileEventArgument */
public:
	virtual int soap_type() const { return 1088; } /* = unique id SOAP_TYPE_ns1__ClusterComplianceCheckedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterComplianceCheckedEvent() { ns1__ClusterComplianceCheckedEvent::soap_default(NULL); }
	virtual ~ns1__ClusterComplianceCheckedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileCreatedEvent
#define SOAP_TYPE_ns1__ProfileCreatedEvent (1090)
/* ns1:ProfileCreatedEvent */
class SOAP_CMAC ns1__ProfileCreatedEvent : public ns1__ProfileEvent
{
public:
	virtual int soap_type() const { return 1090; } /* = unique id SOAP_TYPE_ns1__ProfileCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileCreatedEvent() { ns1__ProfileCreatedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileRemovedEvent
#define SOAP_TYPE_ns1__ProfileRemovedEvent (1091)
/* ns1:ProfileRemovedEvent */
class SOAP_CMAC ns1__ProfileRemovedEvent : public ns1__ProfileEvent
{
public:
	virtual int soap_type() const { return 1091; } /* = unique id SOAP_TYPE_ns1__ProfileRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileRemovedEvent() { ns1__ProfileRemovedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileAssociatedEvent
#define SOAP_TYPE_ns1__ProfileAssociatedEvent (1092)
/* ns1:ProfileAssociatedEvent */
class SOAP_CMAC ns1__ProfileAssociatedEvent : public ns1__ProfileEvent
{
public:
	virtual int soap_type() const { return 1092; } /* = unique id SOAP_TYPE_ns1__ProfileAssociatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileAssociatedEvent() { ns1__ProfileAssociatedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileAssociatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileDissociatedEvent
#define SOAP_TYPE_ns1__ProfileDissociatedEvent (1093)
/* ns1:ProfileDissociatedEvent */
class SOAP_CMAC ns1__ProfileDissociatedEvent : public ns1__ProfileEvent
{
public:
	virtual int soap_type() const { return 1093; } /* = unique id SOAP_TYPE_ns1__ProfileDissociatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileDissociatedEvent() { ns1__ProfileDissociatedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileDissociatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigAppliedEvent
#define SOAP_TYPE_ns1__HostConfigAppliedEvent (1094)
/* ns1:HostConfigAppliedEvent */
class SOAP_CMAC ns1__HostConfigAppliedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1094; } /* = unique id SOAP_TYPE_ns1__HostConfigAppliedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigAppliedEvent() { ns1__HostConfigAppliedEvent::soap_default(NULL); }
	virtual ~ns1__HostConfigAppliedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileReferenceHostChangedEvent
#define SOAP_TYPE_ns1__ProfileReferenceHostChangedEvent (1095)
/* ns1:ProfileReferenceHostChangedEvent */
class SOAP_CMAC ns1__ProfileReferenceHostChangedEvent : public ns1__ProfileEvent
{
public:
	ns1__ManagedObjectReference *referenceHost;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1095; } /* = unique id SOAP_TYPE_ns1__ProfileReferenceHostChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileReferenceHostChangedEvent() { ns1__ProfileReferenceHostChangedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileReferenceHostChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ProfileChangedEvent
#define SOAP_TYPE_ns1__ProfileChangedEvent (1096)
/* ns1:ProfileChangedEvent */
class SOAP_CMAC ns1__ProfileChangedEvent : public ns1__ProfileEvent
{
public:
	virtual int soap_type() const { return 1096; } /* = unique id SOAP_TYPE_ns1__ProfileChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ProfileChangedEvent() { ns1__ProfileChangedEvent::soap_default(NULL); }
	virtual ~ns1__ProfileChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileAppliedEvent
#define SOAP_TYPE_ns1__HostProfileAppliedEvent (1097)
/* ns1:HostProfileAppliedEvent */
class SOAP_CMAC ns1__HostProfileAppliedEvent : public ns1__HostEvent
{
public:
	ns1__ProfileEventArgument *profile;	/* required element of type ns1:ProfileEventArgument */
public:
	virtual int soap_type() const { return 1097; } /* = unique id SOAP_TYPE_ns1__HostProfileAppliedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileAppliedEvent() { ns1__HostProfileAppliedEvent::soap_default(NULL); }
	virtual ~ns1__HostProfileAppliedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostVnicConnectedToCustomizedDVPortEvent
#define SOAP_TYPE_ns1__HostVnicConnectedToCustomizedDVPortEvent (1106)
/* ns1:HostVnicConnectedToCustomizedDVPortEvent */
class SOAP_CMAC ns1__HostVnicConnectedToCustomizedDVPortEvent : public ns1__HostEvent
{
public:
	ns1__VnicPortArgument *vnic;	/* required element of type ns1:VnicPortArgument */
public:
	virtual int soap_type() const { return 1106; } /* = unique id SOAP_TYPE_ns1__HostVnicConnectedToCustomizedDVPortEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostVnicConnectedToCustomizedDVPortEvent() { ns1__HostVnicConnectedToCustomizedDVPortEvent::soap_default(NULL); }
	virtual ~ns1__HostVnicConnectedToCustomizedDVPortEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GhostDvsProxySwitchDetectedEvent
#define SOAP_TYPE_ns1__GhostDvsProxySwitchDetectedEvent (1107)
/* ns1:GhostDvsProxySwitchDetectedEvent */
class SOAP_CMAC ns1__GhostDvsProxySwitchDetectedEvent : public ns1__HostEvent
{
public:
	std::vector<std::string >switchUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1107; } /* = unique id SOAP_TYPE_ns1__GhostDvsProxySwitchDetectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GhostDvsProxySwitchDetectedEvent() { ns1__GhostDvsProxySwitchDetectedEvent::soap_default(NULL); }
	virtual ~ns1__GhostDvsProxySwitchDetectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GhostDvsProxySwitchRemovedEvent
#define SOAP_TYPE_ns1__GhostDvsProxySwitchRemovedEvent (1108)
/* ns1:GhostDvsProxySwitchRemovedEvent */
class SOAP_CMAC ns1__GhostDvsProxySwitchRemovedEvent : public ns1__HostEvent
{
public:
	std::vector<std::string >switchUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1108; } /* = unique id SOAP_TYPE_ns1__GhostDvsProxySwitchRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GhostDvsProxySwitchRemovedEvent() { ns1__GhostDvsProxySwitchRemovedEvent::soap_default(NULL); }
	virtual ~ns1__GhostDvsProxySwitchRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPoweredOffEvent
#define SOAP_TYPE_ns1__VmPoweredOffEvent (1110)
/* ns1:VmPoweredOffEvent */
class SOAP_CMAC ns1__VmPoweredOffEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1110; } /* = unique id SOAP_TYPE_ns1__VmPoweredOffEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPoweredOffEvent() { ns1__VmPoweredOffEvent::soap_default(NULL); }
	virtual ~ns1__VmPoweredOffEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPoweredOnEvent
#define SOAP_TYPE_ns1__VmPoweredOnEvent (1111)
/* ns1:VmPoweredOnEvent */
class SOAP_CMAC ns1__VmPoweredOnEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1111; } /* = unique id SOAP_TYPE_ns1__VmPoweredOnEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPoweredOnEvent() { ns1__VmPoweredOnEvent::soap_default(NULL); }
	virtual ~ns1__VmPoweredOnEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSuspendedEvent
#define SOAP_TYPE_ns1__VmSuspendedEvent (1112)
/* ns1:VmSuspendedEvent */
class SOAP_CMAC ns1__VmSuspendedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1112; } /* = unique id SOAP_TYPE_ns1__VmSuspendedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSuspendedEvent() { ns1__VmSuspendedEvent::soap_default(NULL); }
	virtual ~ns1__VmSuspendedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStartingEvent
#define SOAP_TYPE_ns1__VmStartingEvent (1113)
/* ns1:VmStartingEvent */
class SOAP_CMAC ns1__VmStartingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1113; } /* = unique id SOAP_TYPE_ns1__VmStartingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStartingEvent() { ns1__VmStartingEvent::soap_default(NULL); }
	virtual ~ns1__VmStartingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStoppingEvent
#define SOAP_TYPE_ns1__VmStoppingEvent (1114)
/* ns1:VmStoppingEvent */
class SOAP_CMAC ns1__VmStoppingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1114; } /* = unique id SOAP_TYPE_ns1__VmStoppingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStoppingEvent() { ns1__VmStoppingEvent::soap_default(NULL); }
	virtual ~ns1__VmStoppingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSuspendingEvent
#define SOAP_TYPE_ns1__VmSuspendingEvent (1115)
/* ns1:VmSuspendingEvent */
class SOAP_CMAC ns1__VmSuspendingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1115; } /* = unique id SOAP_TYPE_ns1__VmSuspendingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSuspendingEvent() { ns1__VmSuspendingEvent::soap_default(NULL); }
	virtual ~ns1__VmSuspendingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmResumingEvent
#define SOAP_TYPE_ns1__VmResumingEvent (1116)
/* ns1:VmResumingEvent */
class SOAP_CMAC ns1__VmResumingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1116; } /* = unique id SOAP_TYPE_ns1__VmResumingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmResumingEvent() { ns1__VmResumingEvent::soap_default(NULL); }
	virtual ~ns1__VmResumingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDisconnectedEvent
#define SOAP_TYPE_ns1__VmDisconnectedEvent (1117)
/* ns1:VmDisconnectedEvent */
class SOAP_CMAC ns1__VmDisconnectedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1117; } /* = unique id SOAP_TYPE_ns1__VmDisconnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDisconnectedEvent() { ns1__VmDisconnectedEvent::soap_default(NULL); }
	virtual ~ns1__VmDisconnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRemoteConsoleConnectedEvent
#define SOAP_TYPE_ns1__VmRemoteConsoleConnectedEvent (1118)
/* ns1:VmRemoteConsoleConnectedEvent */
class SOAP_CMAC ns1__VmRemoteConsoleConnectedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1118; } /* = unique id SOAP_TYPE_ns1__VmRemoteConsoleConnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRemoteConsoleConnectedEvent() { ns1__VmRemoteConsoleConnectedEvent::soap_default(NULL); }
	virtual ~ns1__VmRemoteConsoleConnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRemoteConsoleDisconnectedEvent
#define SOAP_TYPE_ns1__VmRemoteConsoleDisconnectedEvent (1119)
/* ns1:VmRemoteConsoleDisconnectedEvent */
class SOAP_CMAC ns1__VmRemoteConsoleDisconnectedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1119; } /* = unique id SOAP_TYPE_ns1__VmRemoteConsoleDisconnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRemoteConsoleDisconnectedEvent() { ns1__VmRemoteConsoleDisconnectedEvent::soap_default(NULL); }
	virtual ~ns1__VmRemoteConsoleDisconnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiscoveredEvent
#define SOAP_TYPE_ns1__VmDiscoveredEvent (1120)
/* ns1:VmDiscoveredEvent */
class SOAP_CMAC ns1__VmDiscoveredEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1120; } /* = unique id SOAP_TYPE_ns1__VmDiscoveredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiscoveredEvent() { ns1__VmDiscoveredEvent::soap_default(NULL); }
	virtual ~ns1__VmDiscoveredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmOrphanedEvent
#define SOAP_TYPE_ns1__VmOrphanedEvent (1121)
/* ns1:VmOrphanedEvent */
class SOAP_CMAC ns1__VmOrphanedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1121; } /* = unique id SOAP_TYPE_ns1__VmOrphanedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmOrphanedEvent() { ns1__VmOrphanedEvent::soap_default(NULL); }
	virtual ~ns1__VmOrphanedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingCreatedEvent
#define SOAP_TYPE_ns1__VmBeingCreatedEvent (1122)
/* ns1:VmBeingCreatedEvent */
class SOAP_CMAC ns1__VmBeingCreatedEvent : public ns1__VmEvent
{
public:
	ns1__VirtualMachineConfigSpec *configSpec;	/* optional element of type ns1:VirtualMachineConfigSpec */
public:
	virtual int soap_type() const { return 1122; } /* = unique id SOAP_TYPE_ns1__VmBeingCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingCreatedEvent() { ns1__VmBeingCreatedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmCreatedEvent
#define SOAP_TYPE_ns1__VmCreatedEvent (1123)
/* ns1:VmCreatedEvent */
class SOAP_CMAC ns1__VmCreatedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1123; } /* = unique id SOAP_TYPE_ns1__VmCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmCreatedEvent() { ns1__VmCreatedEvent::soap_default(NULL); }
	virtual ~ns1__VmCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStartRecordingEvent
#define SOAP_TYPE_ns1__VmStartRecordingEvent (1124)
/* ns1:VmStartRecordingEvent */
class SOAP_CMAC ns1__VmStartRecordingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1124; } /* = unique id SOAP_TYPE_ns1__VmStartRecordingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStartRecordingEvent() { ns1__VmStartRecordingEvent::soap_default(NULL); }
	virtual ~ns1__VmStartRecordingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmEndRecordingEvent
#define SOAP_TYPE_ns1__VmEndRecordingEvent (1125)
/* ns1:VmEndRecordingEvent */
class SOAP_CMAC ns1__VmEndRecordingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1125; } /* = unique id SOAP_TYPE_ns1__VmEndRecordingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmEndRecordingEvent() { ns1__VmEndRecordingEvent::soap_default(NULL); }
	virtual ~ns1__VmEndRecordingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStartReplayingEvent
#define SOAP_TYPE_ns1__VmStartReplayingEvent (1126)
/* ns1:VmStartReplayingEvent */
class SOAP_CMAC ns1__VmStartReplayingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1126; } /* = unique id SOAP_TYPE_ns1__VmStartReplayingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStartReplayingEvent() { ns1__VmStartReplayingEvent::soap_default(NULL); }
	virtual ~ns1__VmStartReplayingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmEndReplayingEvent
#define SOAP_TYPE_ns1__VmEndReplayingEvent (1127)
/* ns1:VmEndReplayingEvent */
class SOAP_CMAC ns1__VmEndReplayingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1127; } /* = unique id SOAP_TYPE_ns1__VmEndReplayingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmEndReplayingEvent() { ns1__VmEndReplayingEvent::soap_default(NULL); }
	virtual ~ns1__VmEndReplayingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRegisteredEvent
#define SOAP_TYPE_ns1__VmRegisteredEvent (1128)
/* ns1:VmRegisteredEvent */
class SOAP_CMAC ns1__VmRegisteredEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1128; } /* = unique id SOAP_TYPE_ns1__VmRegisteredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRegisteredEvent() { ns1__VmRegisteredEvent::soap_default(NULL); }
	virtual ~ns1__VmRegisteredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmAutoRenameEvent
#define SOAP_TYPE_ns1__VmAutoRenameEvent (1129)
/* ns1:VmAutoRenameEvent */
class SOAP_CMAC ns1__VmAutoRenameEvent : public ns1__VmEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1129; } /* = unique id SOAP_TYPE_ns1__VmAutoRenameEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmAutoRenameEvent() { ns1__VmAutoRenameEvent::soap_default(NULL); }
	virtual ~ns1__VmAutoRenameEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingHotMigratedEvent
#define SOAP_TYPE_ns1__VmBeingHotMigratedEvent (1130)
/* ns1:VmBeingHotMigratedEvent */
class SOAP_CMAC ns1__VmBeingHotMigratedEvent : public ns1__VmEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1130; } /* = unique id SOAP_TYPE_ns1__VmBeingHotMigratedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingHotMigratedEvent() { ns1__VmBeingHotMigratedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingHotMigratedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmResettingEvent
#define SOAP_TYPE_ns1__VmResettingEvent (1131)
/* ns1:VmResettingEvent */
class SOAP_CMAC ns1__VmResettingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1131; } /* = unique id SOAP_TYPE_ns1__VmResettingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmResettingEvent() { ns1__VmResettingEvent::soap_default(NULL); }
	virtual ~ns1__VmResettingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStaticMacConflictEvent
#define SOAP_TYPE_ns1__VmStaticMacConflictEvent (1132)
/* ns1:VmStaticMacConflictEvent */
class SOAP_CMAC ns1__VmStaticMacConflictEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *conflictedVm;	/* required element of type ns1:VmEventArgument */
	std::string mac;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1132; } /* = unique id SOAP_TYPE_ns1__VmStaticMacConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStaticMacConflictEvent() { ns1__VmStaticMacConflictEvent::soap_default(NULL); }
	virtual ~ns1__VmStaticMacConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMacConflictEvent
#define SOAP_TYPE_ns1__VmMacConflictEvent (1133)
/* ns1:VmMacConflictEvent */
class SOAP_CMAC ns1__VmMacConflictEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *conflictedVm;	/* required element of type ns1:VmEventArgument */
	std::string mac;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1133; } /* = unique id SOAP_TYPE_ns1__VmMacConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMacConflictEvent() { ns1__VmMacConflictEvent::soap_default(NULL); }
	virtual ~ns1__VmMacConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingDeployedEvent
#define SOAP_TYPE_ns1__VmBeingDeployedEvent (1134)
/* ns1:VmBeingDeployedEvent */
class SOAP_CMAC ns1__VmBeingDeployedEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *srcTemplate;	/* required element of type ns1:VmEventArgument */
public:
	virtual int soap_type() const { return 1134; } /* = unique id SOAP_TYPE_ns1__VmBeingDeployedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingDeployedEvent() { ns1__VmBeingDeployedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingDeployedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDeployFailedEvent
#define SOAP_TYPE_ns1__VmDeployFailedEvent (1135)
/* ns1:VmDeployFailedEvent */
class SOAP_CMAC ns1__VmDeployFailedEvent : public ns1__VmEvent
{
public:
	ns1__EntityEventArgument *destDatastore;	/* required element of type ns1:EntityEventArgument */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1135; } /* = unique id SOAP_TYPE_ns1__VmDeployFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDeployFailedEvent() { ns1__VmDeployFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmDeployFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDeployedEvent
#define SOAP_TYPE_ns1__VmDeployedEvent (1136)
/* ns1:VmDeployedEvent */
class SOAP_CMAC ns1__VmDeployedEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *srcTemplate;	/* required element of type ns1:VmEventArgument */
public:
	virtual int soap_type() const { return 1136; } /* = unique id SOAP_TYPE_ns1__VmDeployedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDeployedEvent() { ns1__VmDeployedEvent::soap_default(NULL); }
	virtual ~ns1__VmDeployedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMacChangedEvent
#define SOAP_TYPE_ns1__VmMacChangedEvent (1137)
/* ns1:VmMacChangedEvent */
class SOAP_CMAC ns1__VmMacChangedEvent : public ns1__VmEvent
{
public:
	std::string adapter;	/* required element of type xsd:string */
	std::string oldMac;	/* required element of type xsd:string */
	std::string newMac;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1137; } /* = unique id SOAP_TYPE_ns1__VmMacChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMacChangedEvent() { ns1__VmMacChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmMacChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMacAssignedEvent
#define SOAP_TYPE_ns1__VmMacAssignedEvent (1138)
/* ns1:VmMacAssignedEvent */
class SOAP_CMAC ns1__VmMacAssignedEvent : public ns1__VmEvent
{
public:
	std::string adapter;	/* required element of type xsd:string */
	std::string mac;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1138; } /* = unique id SOAP_TYPE_ns1__VmMacAssignedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMacAssignedEvent() { ns1__VmMacAssignedEvent::soap_default(NULL); }
	virtual ~ns1__VmMacAssignedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUuidConflictEvent
#define SOAP_TYPE_ns1__VmUuidConflictEvent (1139)
/* ns1:VmUuidConflictEvent */
class SOAP_CMAC ns1__VmUuidConflictEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *conflictedVm;	/* required element of type ns1:VmEventArgument */
	std::string uuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1139; } /* = unique id SOAP_TYPE_ns1__VmUuidConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUuidConflictEvent() { ns1__VmUuidConflictEvent::soap_default(NULL); }
	virtual ~ns1__VmUuidConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmInstanceUuidConflictEvent
#define SOAP_TYPE_ns1__VmInstanceUuidConflictEvent (1140)
/* ns1:VmInstanceUuidConflictEvent */
class SOAP_CMAC ns1__VmInstanceUuidConflictEvent : public ns1__VmEvent
{
public:
	ns1__VmEventArgument *conflictedVm;	/* required element of type ns1:VmEventArgument */
	std::string instanceUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1140; } /* = unique id SOAP_TYPE_ns1__VmInstanceUuidConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmInstanceUuidConflictEvent() { ns1__VmInstanceUuidConflictEvent::soap_default(NULL); }
	virtual ~ns1__VmInstanceUuidConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingMigratedEvent
#define SOAP_TYPE_ns1__VmBeingMigratedEvent (1141)
/* ns1:VmBeingMigratedEvent */
class SOAP_CMAC ns1__VmBeingMigratedEvent : public ns1__VmEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1141; } /* = unique id SOAP_TYPE_ns1__VmBeingMigratedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingMigratedEvent() { ns1__VmBeingMigratedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingMigratedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedMigrateEvent
#define SOAP_TYPE_ns1__VmFailedMigrateEvent (1142)
/* ns1:VmFailedMigrateEvent */
class SOAP_CMAC ns1__VmFailedMigrateEvent : public ns1__VmEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1142; } /* = unique id SOAP_TYPE_ns1__VmFailedMigrateEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedMigrateEvent() { ns1__VmFailedMigrateEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedMigrateEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMigratedEvent
#define SOAP_TYPE_ns1__VmMigratedEvent (1143)
/* ns1:VmMigratedEvent */
class SOAP_CMAC ns1__VmMigratedEvent : public ns1__VmEvent
{
public:
	ns1__HostEventArgument *sourceHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1143; } /* = unique id SOAP_TYPE_ns1__VmMigratedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMigratedEvent() { ns1__VmMigratedEvent::soap_default(NULL); }
	virtual ~ns1__VmMigratedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsRuleViolationEvent
#define SOAP_TYPE_ns1__DrsRuleViolationEvent (1147)
/* ns1:DrsRuleViolationEvent */
class SOAP_CMAC ns1__DrsRuleViolationEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1147; } /* = unique id SOAP_TYPE_ns1__DrsRuleViolationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsRuleViolationEvent() { ns1__DrsRuleViolationEvent::soap_default(NULL); }
	virtual ~ns1__DrsRuleViolationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsRuleComplianceEvent
#define SOAP_TYPE_ns1__DrsRuleComplianceEvent (1148)
/* ns1:DrsRuleComplianceEvent */
class SOAP_CMAC ns1__DrsRuleComplianceEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1148; } /* = unique id SOAP_TYPE_ns1__DrsRuleComplianceEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsRuleComplianceEvent() { ns1__DrsRuleComplianceEvent::soap_default(NULL); }
	virtual ~ns1__DrsRuleComplianceEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRelocateSpecEvent
#define SOAP_TYPE_ns1__VmRelocateSpecEvent (1149)
/* ns1:VmRelocateSpecEvent */
class SOAP_CMAC ns1__VmRelocateSpecEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1149; } /* = unique id SOAP_TYPE_ns1__VmRelocateSpecEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRelocateSpecEvent() { ns1__VmRelocateSpecEvent::soap_default(NULL); }
	virtual ~ns1__VmRelocateSpecEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmEmigratingEvent
#define SOAP_TYPE_ns1__VmEmigratingEvent (1153)
/* ns1:VmEmigratingEvent */
class SOAP_CMAC ns1__VmEmigratingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1153; } /* = unique id SOAP_TYPE_ns1__VmEmigratingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmEmigratingEvent() { ns1__VmEmigratingEvent::soap_default(NULL); }
	virtual ~ns1__VmEmigratingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmCloneEvent
#define SOAP_TYPE_ns1__VmCloneEvent (1154)
/* ns1:VmCloneEvent */
class SOAP_CMAC ns1__VmCloneEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1154; } /* = unique id SOAP_TYPE_ns1__VmCloneEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmCloneEvent() { ns1__VmCloneEvent::soap_default(NULL); }
	virtual ~ns1__VmCloneEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmResourceReallocatedEvent
#define SOAP_TYPE_ns1__VmResourceReallocatedEvent (1159)
/* ns1:VmResourceReallocatedEvent */
class SOAP_CMAC ns1__VmResourceReallocatedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1159; } /* = unique id SOAP_TYPE_ns1__VmResourceReallocatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmResourceReallocatedEvent() { ns1__VmResourceReallocatedEvent::soap_default(NULL); }
	virtual ~ns1__VmResourceReallocatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRenamedEvent
#define SOAP_TYPE_ns1__VmRenamedEvent (1160)
/* ns1:VmRenamedEvent */
class SOAP_CMAC ns1__VmRenamedEvent : public ns1__VmEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1160; } /* = unique id SOAP_TYPE_ns1__VmRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRenamedEvent() { ns1__VmRenamedEvent::soap_default(NULL); }
	virtual ~ns1__VmRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDateRolledBackEvent
#define SOAP_TYPE_ns1__VmDateRolledBackEvent (1161)
/* ns1:VmDateRolledBackEvent */
class SOAP_CMAC ns1__VmDateRolledBackEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1161; } /* = unique id SOAP_TYPE_ns1__VmDateRolledBackEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDateRolledBackEvent() { ns1__VmDateRolledBackEvent::soap_default(NULL); }
	virtual ~ns1__VmDateRolledBackEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmNoNetworkAccessEvent
#define SOAP_TYPE_ns1__VmNoNetworkAccessEvent (1162)
/* ns1:VmNoNetworkAccessEvent */
class SOAP_CMAC ns1__VmNoNetworkAccessEvent : public ns1__VmEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1162; } /* = unique id SOAP_TYPE_ns1__VmNoNetworkAccessEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmNoNetworkAccessEvent() { ns1__VmNoNetworkAccessEvent::soap_default(NULL); }
	virtual ~ns1__VmNoNetworkAccessEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDiskFailedEvent
#define SOAP_TYPE_ns1__VmDiskFailedEvent (1163)
/* ns1:VmDiskFailedEvent */
class SOAP_CMAC ns1__VmDiskFailedEvent : public ns1__VmEvent
{
public:
	std::string disk;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1163; } /* = unique id SOAP_TYPE_ns1__VmDiskFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDiskFailedEvent() { ns1__VmDiskFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmDiskFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToPowerOnEvent
#define SOAP_TYPE_ns1__VmFailedToPowerOnEvent (1164)
/* ns1:VmFailedToPowerOnEvent */
class SOAP_CMAC ns1__VmFailedToPowerOnEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1164; } /* = unique id SOAP_TYPE_ns1__VmFailedToPowerOnEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToPowerOnEvent() { ns1__VmFailedToPowerOnEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToPowerOnEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToPowerOffEvent
#define SOAP_TYPE_ns1__VmFailedToPowerOffEvent (1165)
/* ns1:VmFailedToPowerOffEvent */
class SOAP_CMAC ns1__VmFailedToPowerOffEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1165; } /* = unique id SOAP_TYPE_ns1__VmFailedToPowerOffEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToPowerOffEvent() { ns1__VmFailedToPowerOffEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToPowerOffEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToSuspendEvent
#define SOAP_TYPE_ns1__VmFailedToSuspendEvent (1166)
/* ns1:VmFailedToSuspendEvent */
class SOAP_CMAC ns1__VmFailedToSuspendEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1166; } /* = unique id SOAP_TYPE_ns1__VmFailedToSuspendEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToSuspendEvent() { ns1__VmFailedToSuspendEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToSuspendEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToResetEvent
#define SOAP_TYPE_ns1__VmFailedToResetEvent (1167)
/* ns1:VmFailedToResetEvent */
class SOAP_CMAC ns1__VmFailedToResetEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1167; } /* = unique id SOAP_TYPE_ns1__VmFailedToResetEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToResetEvent() { ns1__VmFailedToResetEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToResetEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToShutdownGuestEvent
#define SOAP_TYPE_ns1__VmFailedToShutdownGuestEvent (1168)
/* ns1:VmFailedToShutdownGuestEvent */
class SOAP_CMAC ns1__VmFailedToShutdownGuestEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1168; } /* = unique id SOAP_TYPE_ns1__VmFailedToShutdownGuestEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToShutdownGuestEvent() { ns1__VmFailedToShutdownGuestEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToShutdownGuestEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToRebootGuestEvent
#define SOAP_TYPE_ns1__VmFailedToRebootGuestEvent (1169)
/* ns1:VmFailedToRebootGuestEvent */
class SOAP_CMAC ns1__VmFailedToRebootGuestEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1169; } /* = unique id SOAP_TYPE_ns1__VmFailedToRebootGuestEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToRebootGuestEvent() { ns1__VmFailedToRebootGuestEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToRebootGuestEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedToStandbyGuestEvent
#define SOAP_TYPE_ns1__VmFailedToStandbyGuestEvent (1170)
/* ns1:VmFailedToStandbyGuestEvent */
class SOAP_CMAC ns1__VmFailedToStandbyGuestEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1170; } /* = unique id SOAP_TYPE_ns1__VmFailedToStandbyGuestEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedToStandbyGuestEvent() { ns1__VmFailedToStandbyGuestEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedToStandbyGuestEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRemovedEvent
#define SOAP_TYPE_ns1__VmRemovedEvent (1171)
/* ns1:VmRemovedEvent */
class SOAP_CMAC ns1__VmRemovedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1171; } /* = unique id SOAP_TYPE_ns1__VmRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRemovedEvent() { ns1__VmRemovedEvent::soap_default(NULL); }
	virtual ~ns1__VmRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmGuestShutdownEvent
#define SOAP_TYPE_ns1__VmGuestShutdownEvent (1172)
/* ns1:VmGuestShutdownEvent */
class SOAP_CMAC ns1__VmGuestShutdownEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1172; } /* = unique id SOAP_TYPE_ns1__VmGuestShutdownEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmGuestShutdownEvent() { ns1__VmGuestShutdownEvent::soap_default(NULL); }
	virtual ~ns1__VmGuestShutdownEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmGuestRebootEvent
#define SOAP_TYPE_ns1__VmGuestRebootEvent (1173)
/* ns1:VmGuestRebootEvent */
class SOAP_CMAC ns1__VmGuestRebootEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1173; } /* = unique id SOAP_TYPE_ns1__VmGuestRebootEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmGuestRebootEvent() { ns1__VmGuestRebootEvent::soap_default(NULL); }
	virtual ~ns1__VmGuestRebootEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmGuestStandbyEvent
#define SOAP_TYPE_ns1__VmGuestStandbyEvent (1174)
/* ns1:VmGuestStandbyEvent */
class SOAP_CMAC ns1__VmGuestStandbyEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1174; } /* = unique id SOAP_TYPE_ns1__VmGuestStandbyEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmGuestStandbyEvent() { ns1__VmGuestStandbyEvent::soap_default(NULL); }
	virtual ~ns1__VmGuestStandbyEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUpgradingEvent
#define SOAP_TYPE_ns1__VmUpgradingEvent (1175)
/* ns1:VmUpgradingEvent */
class SOAP_CMAC ns1__VmUpgradingEvent : public ns1__VmEvent
{
public:
	std::string version;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1175; } /* = unique id SOAP_TYPE_ns1__VmUpgradingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUpgradingEvent() { ns1__VmUpgradingEvent::soap_default(NULL); }
	virtual ~ns1__VmUpgradingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUpgradeCompleteEvent
#define SOAP_TYPE_ns1__VmUpgradeCompleteEvent (1176)
/* ns1:VmUpgradeCompleteEvent */
class SOAP_CMAC ns1__VmUpgradeCompleteEvent : public ns1__VmEvent
{
public:
	std::string version;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1176; } /* = unique id SOAP_TYPE_ns1__VmUpgradeCompleteEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUpgradeCompleteEvent() { ns1__VmUpgradeCompleteEvent::soap_default(NULL); }
	virtual ~ns1__VmUpgradeCompleteEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUpgradeFailedEvent
#define SOAP_TYPE_ns1__VmUpgradeFailedEvent (1177)
/* ns1:VmUpgradeFailedEvent */
class SOAP_CMAC ns1__VmUpgradeFailedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1177; } /* = unique id SOAP_TYPE_ns1__VmUpgradeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUpgradeFailedEvent() { ns1__VmUpgradeFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmUpgradeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmReconfiguredEvent
#define SOAP_TYPE_ns1__VmReconfiguredEvent (1179)
/* ns1:VmReconfiguredEvent */
class SOAP_CMAC ns1__VmReconfiguredEvent : public ns1__VmEvent
{
public:
	ns1__VirtualMachineConfigSpec *configSpec;	/* required element of type ns1:VirtualMachineConfigSpec */
public:
	virtual int soap_type() const { return 1179; } /* = unique id SOAP_TYPE_ns1__VmReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmReconfiguredEvent() { ns1__VmReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__VmReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMessageEvent
#define SOAP_TYPE_ns1__VmMessageEvent (1180)
/* ns1:VmMessageEvent */
class SOAP_CMAC ns1__VmMessageEvent : public ns1__VmEvent
{
public:
	std::string message;	/* required element of type xsd:string */
	std::vector<ns1__VirtualMachineMessage * >messageInfo;	/* optional element of type ns1:VirtualMachineMessage */
public:
	virtual int soap_type() const { return 1180; } /* = unique id SOAP_TYPE_ns1__VmMessageEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMessageEvent() { ns1__VmMessageEvent::soap_default(NULL); }
	virtual ~ns1__VmMessageEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMessageWarningEvent
#define SOAP_TYPE_ns1__VmMessageWarningEvent (1181)
/* ns1:VmMessageWarningEvent */
class SOAP_CMAC ns1__VmMessageWarningEvent : public ns1__VmEvent
{
public:
	std::string message;	/* required element of type xsd:string */
	std::vector<ns1__VirtualMachineMessage * >messageInfo;	/* optional element of type ns1:VirtualMachineMessage */
public:
	virtual int soap_type() const { return 1181; } /* = unique id SOAP_TYPE_ns1__VmMessageWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMessageWarningEvent() { ns1__VmMessageWarningEvent::soap_default(NULL); }
	virtual ~ns1__VmMessageWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMessageErrorEvent
#define SOAP_TYPE_ns1__VmMessageErrorEvent (1182)
/* ns1:VmMessageErrorEvent */
class SOAP_CMAC ns1__VmMessageErrorEvent : public ns1__VmEvent
{
public:
	std::string message;	/* required element of type xsd:string */
	std::vector<ns1__VirtualMachineMessage * >messageInfo;	/* optional element of type ns1:VirtualMachineMessage */
public:
	virtual int soap_type() const { return 1182; } /* = unique id SOAP_TYPE_ns1__VmMessageErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMessageErrorEvent() { ns1__VmMessageErrorEvent::soap_default(NULL); }
	virtual ~ns1__VmMessageErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigMissingEvent
#define SOAP_TYPE_ns1__VmConfigMissingEvent (1183)
/* ns1:VmConfigMissingEvent */
class SOAP_CMAC ns1__VmConfigMissingEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1183; } /* = unique id SOAP_TYPE_ns1__VmConfigMissingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigMissingEvent() { ns1__VmConfigMissingEvent::soap_default(NULL); }
	virtual ~ns1__VmConfigMissingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailoverFailed
#define SOAP_TYPE_ns1__VmFailoverFailed (1186)
/* ns1:VmFailoverFailed */
class SOAP_CMAC ns1__VmFailoverFailed : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1186; } /* = unique id SOAP_TYPE_ns1__VmFailoverFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailoverFailed() { ns1__VmFailoverFailed::soap_default(NULL); }
	virtual ~ns1__VmFailoverFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasBeingResetEvent
#define SOAP_TYPE_ns1__VmDasBeingResetEvent (1187)
/* ns1:VmDasBeingResetEvent */
class SOAP_CMAC ns1__VmDasBeingResetEvent : public ns1__VmEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1187; } /* = unique id SOAP_TYPE_ns1__VmDasBeingResetEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasBeingResetEvent() { ns1__VmDasBeingResetEvent::soap_default(NULL); }
	virtual ~ns1__VmDasBeingResetEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasResetFailedEvent
#define SOAP_TYPE_ns1__VmDasResetFailedEvent (1188)
/* ns1:VmDasResetFailedEvent */
class SOAP_CMAC ns1__VmDasResetFailedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1188; } /* = unique id SOAP_TYPE_ns1__VmDasResetFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasResetFailedEvent() { ns1__VmDasResetFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmDasResetFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMaxRestartCountReached
#define SOAP_TYPE_ns1__VmMaxRestartCountReached (1189)
/* ns1:VmMaxRestartCountReached */
class SOAP_CMAC ns1__VmMaxRestartCountReached : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1189; } /* = unique id SOAP_TYPE_ns1__VmMaxRestartCountReached */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMaxRestartCountReached() { ns1__VmMaxRestartCountReached::soap_default(NULL); }
	virtual ~ns1__VmMaxRestartCountReached() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmMaxFTRestartCountReached
#define SOAP_TYPE_ns1__VmMaxFTRestartCountReached (1190)
/* ns1:VmMaxFTRestartCountReached */
class SOAP_CMAC ns1__VmMaxFTRestartCountReached : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1190; } /* = unique id SOAP_TYPE_ns1__VmMaxFTRestartCountReached */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmMaxFTRestartCountReached() { ns1__VmMaxFTRestartCountReached::soap_default(NULL); }
	virtual ~ns1__VmMaxFTRestartCountReached() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotEnoughResourcesToStartVmEvent
#define SOAP_TYPE_ns1__NotEnoughResourcesToStartVmEvent (1192)
/* ns1:NotEnoughResourcesToStartVmEvent */
class SOAP_CMAC ns1__NotEnoughResourcesToStartVmEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1192; } /* = unique id SOAP_TYPE_ns1__NotEnoughResourcesToStartVmEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotEnoughResourcesToStartVmEvent() { ns1__NotEnoughResourcesToStartVmEvent::soap_default(NULL); }
	virtual ~ns1__NotEnoughResourcesToStartVmEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUuidAssignedEvent
#define SOAP_TYPE_ns1__VmUuidAssignedEvent (1193)
/* ns1:VmUuidAssignedEvent */
class SOAP_CMAC ns1__VmUuidAssignedEvent : public ns1__VmEvent
{
public:
	std::string uuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1193; } /* = unique id SOAP_TYPE_ns1__VmUuidAssignedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUuidAssignedEvent() { ns1__VmUuidAssignedEvent::soap_default(NULL); }
	virtual ~ns1__VmUuidAssignedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmInstanceUuidAssignedEvent
#define SOAP_TYPE_ns1__VmInstanceUuidAssignedEvent (1194)
/* ns1:VmInstanceUuidAssignedEvent */
class SOAP_CMAC ns1__VmInstanceUuidAssignedEvent : public ns1__VmEvent
{
public:
	std::string instanceUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1194; } /* = unique id SOAP_TYPE_ns1__VmInstanceUuidAssignedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmInstanceUuidAssignedEvent() { ns1__VmInstanceUuidAssignedEvent::soap_default(NULL); }
	virtual ~ns1__VmInstanceUuidAssignedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUuidChangedEvent
#define SOAP_TYPE_ns1__VmUuidChangedEvent (1195)
/* ns1:VmUuidChangedEvent */
class SOAP_CMAC ns1__VmUuidChangedEvent : public ns1__VmEvent
{
public:
	std::string oldUuid;	/* required element of type xsd:string */
	std::string newUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1195; } /* = unique id SOAP_TYPE_ns1__VmUuidChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUuidChangedEvent() { ns1__VmUuidChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmUuidChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmInstanceUuidChangedEvent
#define SOAP_TYPE_ns1__VmInstanceUuidChangedEvent (1196)
/* ns1:VmInstanceUuidChangedEvent */
class SOAP_CMAC ns1__VmInstanceUuidChangedEvent : public ns1__VmEvent
{
public:
	std::string oldInstanceUuid;	/* required element of type xsd:string */
	std::string newInstanceUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1196; } /* = unique id SOAP_TYPE_ns1__VmInstanceUuidChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmInstanceUuidChangedEvent() { ns1__VmInstanceUuidChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmInstanceUuidChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmWwnConflictEvent
#define SOAP_TYPE_ns1__VmWwnConflictEvent (1197)
/* ns1:VmWwnConflictEvent */
class SOAP_CMAC ns1__VmWwnConflictEvent : public ns1__VmEvent
{
public:
	std::vector<ns1__VmEventArgument * >conflictedVms;	/* optional element of type ns1:VmEventArgument */
	std::vector<ns1__HostEventArgument * >conflictedHosts;	/* optional element of type ns1:HostEventArgument */
	LONG64 wwn;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1197; } /* = unique id SOAP_TYPE_ns1__VmWwnConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmWwnConflictEvent() { ns1__VmWwnConflictEvent::soap_default(NULL); }
	virtual ~ns1__VmWwnConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmAcquiredMksTicketEvent
#define SOAP_TYPE_ns1__VmAcquiredMksTicketEvent (1198)
/* ns1:VmAcquiredMksTicketEvent */
class SOAP_CMAC ns1__VmAcquiredMksTicketEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1198; } /* = unique id SOAP_TYPE_ns1__VmAcquiredMksTicketEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmAcquiredMksTicketEvent() { ns1__VmAcquiredMksTicketEvent::soap_default(NULL); }
	virtual ~ns1__VmAcquiredMksTicketEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmAcquiredTicketEvent
#define SOAP_TYPE_ns1__VmAcquiredTicketEvent (1199)
/* ns1:VmAcquiredTicketEvent */
class SOAP_CMAC ns1__VmAcquiredTicketEvent : public ns1__VmEvent
{
public:
	std::string ticketType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1199; } /* = unique id SOAP_TYPE_ns1__VmAcquiredTicketEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmAcquiredTicketEvent() { ns1__VmAcquiredTicketEvent::soap_default(NULL); }
	virtual ~ns1__VmAcquiredTicketEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostWwnConflictEvent
#define SOAP_TYPE_ns1__HostWwnConflictEvent (1200)
/* ns1:HostWwnConflictEvent */
class SOAP_CMAC ns1__HostWwnConflictEvent : public ns1__HostEvent
{
public:
	std::vector<ns1__VmEventArgument * >conflictedVms;	/* optional element of type ns1:VmEventArgument */
	std::vector<ns1__HostEventArgument * >conflictedHosts;	/* optional element of type ns1:HostEventArgument */
	LONG64 wwn;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1200; } /* = unique id SOAP_TYPE_ns1__HostWwnConflictEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostWwnConflictEvent() { ns1__HostWwnConflictEvent::soap_default(NULL); }
	virtual ~ns1__HostWwnConflictEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmWwnAssignedEvent
#define SOAP_TYPE_ns1__VmWwnAssignedEvent (1201)
/* ns1:VmWwnAssignedEvent */
class SOAP_CMAC ns1__VmWwnAssignedEvent : public ns1__VmEvent
{
public:
	std::vector<LONG64 >nodeWwns;	/* required element of type xsd:long */
	std::vector<LONG64 >portWwns;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1201; } /* = unique id SOAP_TYPE_ns1__VmWwnAssignedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmWwnAssignedEvent() { ns1__VmWwnAssignedEvent::soap_default(NULL); }
	virtual ~ns1__VmWwnAssignedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmWwnChangedEvent
#define SOAP_TYPE_ns1__VmWwnChangedEvent (1202)
/* ns1:VmWwnChangedEvent */
class SOAP_CMAC ns1__VmWwnChangedEvent : public ns1__VmEvent
{
public:
	std::vector<LONG64 >oldNodeWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >oldPortWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >newNodeWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >newPortWwns;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 1202; } /* = unique id SOAP_TYPE_ns1__VmWwnChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmWwnChangedEvent() { ns1__VmWwnChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmWwnChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSecondaryAddedEvent
#define SOAP_TYPE_ns1__VmSecondaryAddedEvent (1203)
/* ns1:VmSecondaryAddedEvent */
class SOAP_CMAC ns1__VmSecondaryAddedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1203; } /* = unique id SOAP_TYPE_ns1__VmSecondaryAddedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSecondaryAddedEvent() { ns1__VmSecondaryAddedEvent::soap_default(NULL); }
	virtual ~ns1__VmSecondaryAddedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceTurnedOffEvent
#define SOAP_TYPE_ns1__VmFaultToleranceTurnedOffEvent (1204)
/* ns1:VmFaultToleranceTurnedOffEvent */
class SOAP_CMAC ns1__VmFaultToleranceTurnedOffEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1204; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceTurnedOffEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceTurnedOffEvent() { ns1__VmFaultToleranceTurnedOffEvent::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceTurnedOffEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceStateChangedEvent
#define SOAP_TYPE_ns1__VmFaultToleranceStateChangedEvent (1205)
/* ns1:VmFaultToleranceStateChangedEvent */
class SOAP_CMAC ns1__VmFaultToleranceStateChangedEvent : public ns1__VmEvent
{
public:
	enum ns1__VirtualMachineFaultToleranceState oldState;	/* required element of type ns1:VirtualMachineFaultToleranceState */
	enum ns1__VirtualMachineFaultToleranceState newState;	/* required element of type ns1:VirtualMachineFaultToleranceState */
public:
	virtual int soap_type() const { return 1205; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceStateChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceStateChangedEvent() { ns1__VmFaultToleranceStateChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceStateChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSecondaryDisabledEvent
#define SOAP_TYPE_ns1__VmSecondaryDisabledEvent (1206)
/* ns1:VmSecondaryDisabledEvent */
class SOAP_CMAC ns1__VmSecondaryDisabledEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1206; } /* = unique id SOAP_TYPE_ns1__VmSecondaryDisabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSecondaryDisabledEvent() { ns1__VmSecondaryDisabledEvent::soap_default(NULL); }
	virtual ~ns1__VmSecondaryDisabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSecondaryDisabledBySystemEvent
#define SOAP_TYPE_ns1__VmSecondaryDisabledBySystemEvent (1207)
/* ns1:VmSecondaryDisabledBySystemEvent */
class SOAP_CMAC ns1__VmSecondaryDisabledBySystemEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1207; } /* = unique id SOAP_TYPE_ns1__VmSecondaryDisabledBySystemEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSecondaryDisabledBySystemEvent() { ns1__VmSecondaryDisabledBySystemEvent::soap_default(NULL); }
	virtual ~ns1__VmSecondaryDisabledBySystemEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSecondaryEnabledEvent
#define SOAP_TYPE_ns1__VmSecondaryEnabledEvent (1208)
/* ns1:VmSecondaryEnabledEvent */
class SOAP_CMAC ns1__VmSecondaryEnabledEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1208; } /* = unique id SOAP_TYPE_ns1__VmSecondaryEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSecondaryEnabledEvent() { ns1__VmSecondaryEnabledEvent::soap_default(NULL); }
	virtual ~ns1__VmSecondaryEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmStartingSecondaryEvent
#define SOAP_TYPE_ns1__VmStartingSecondaryEvent (1209)
/* ns1:VmStartingSecondaryEvent */
class SOAP_CMAC ns1__VmStartingSecondaryEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1209; } /* = unique id SOAP_TYPE_ns1__VmStartingSecondaryEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmStartingSecondaryEvent() { ns1__VmStartingSecondaryEvent::soap_default(NULL); }
	virtual ~ns1__VmStartingSecondaryEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmSecondaryStartedEvent
#define SOAP_TYPE_ns1__VmSecondaryStartedEvent (1210)
/* ns1:VmSecondaryStartedEvent */
class SOAP_CMAC ns1__VmSecondaryStartedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1210; } /* = unique id SOAP_TYPE_ns1__VmSecondaryStartedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmSecondaryStartedEvent() { ns1__VmSecondaryStartedEvent::soap_default(NULL); }
	virtual ~ns1__VmSecondaryStartedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedUpdatingSecondaryConfig
#define SOAP_TYPE_ns1__VmFailedUpdatingSecondaryConfig (1211)
/* ns1:VmFailedUpdatingSecondaryConfig */
class SOAP_CMAC ns1__VmFailedUpdatingSecondaryConfig : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1211; } /* = unique id SOAP_TYPE_ns1__VmFailedUpdatingSecondaryConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedUpdatingSecondaryConfig() { ns1__VmFailedUpdatingSecondaryConfig::soap_default(NULL); }
	virtual ~ns1__VmFailedUpdatingSecondaryConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedStartingSecondaryEvent
#define SOAP_TYPE_ns1__VmFailedStartingSecondaryEvent (1212)
/* ns1:VmFailedStartingSecondaryEvent */
class SOAP_CMAC ns1__VmFailedStartingSecondaryEvent : public ns1__VmEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1212; } /* = unique id SOAP_TYPE_ns1__VmFailedStartingSecondaryEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedStartingSecondaryEvent() { ns1__VmFailedStartingSecondaryEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedStartingSecondaryEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmTimedoutStartingSecondaryEvent
#define SOAP_TYPE_ns1__VmTimedoutStartingSecondaryEvent (1213)
/* ns1:VmTimedoutStartingSecondaryEvent */
class SOAP_CMAC ns1__VmTimedoutStartingSecondaryEvent : public ns1__VmEvent
{
public:
	LONG64 *timeout;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 1213; } /* = unique id SOAP_TYPE_ns1__VmTimedoutStartingSecondaryEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmTimedoutStartingSecondaryEvent() { ns1__VmTimedoutStartingSecondaryEvent::soap_default(NULL); }
	virtual ~ns1__VmTimedoutStartingSecondaryEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmNoCompatibleHostForSecondaryEvent
#define SOAP_TYPE_ns1__VmNoCompatibleHostForSecondaryEvent (1214)
/* ns1:VmNoCompatibleHostForSecondaryEvent */
class SOAP_CMAC ns1__VmNoCompatibleHostForSecondaryEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1214; } /* = unique id SOAP_TYPE_ns1__VmNoCompatibleHostForSecondaryEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmNoCompatibleHostForSecondaryEvent() { ns1__VmNoCompatibleHostForSecondaryEvent::soap_default(NULL); }
	virtual ~ns1__VmNoCompatibleHostForSecondaryEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPrimaryFailoverEvent
#define SOAP_TYPE_ns1__VmPrimaryFailoverEvent (1215)
/* ns1:VmPrimaryFailoverEvent */
class SOAP_CMAC ns1__VmPrimaryFailoverEvent : public ns1__VmEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1215; } /* = unique id SOAP_TYPE_ns1__VmPrimaryFailoverEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPrimaryFailoverEvent() { ns1__VmPrimaryFailoverEvent::soap_default(NULL); }
	virtual ~ns1__VmPrimaryFailoverEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceVmTerminatedEvent
#define SOAP_TYPE_ns1__VmFaultToleranceVmTerminatedEvent (1216)
/* ns1:VmFaultToleranceVmTerminatedEvent */
class SOAP_CMAC ns1__VmFaultToleranceVmTerminatedEvent : public ns1__VmEvent
{
public:
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1216; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceVmTerminatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceVmTerminatedEvent() { ns1__VmFaultToleranceVmTerminatedEvent::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceVmTerminatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostWwnChangedEvent
#define SOAP_TYPE_ns1__HostWwnChangedEvent (1217)
/* ns1:HostWwnChangedEvent */
class SOAP_CMAC ns1__HostWwnChangedEvent : public ns1__HostEvent
{
public:
	std::vector<LONG64 >oldNodeWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >oldPortWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >newNodeWwns;	/* optional element of type xsd:long */
	std::vector<LONG64 >newPortWwns;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 1217; } /* = unique id SOAP_TYPE_ns1__HostWwnChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostWwnChangedEvent() { ns1__HostWwnChangedEvent::soap_default(NULL); }
	virtual ~ns1__HostWwnChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAdminDisableEvent
#define SOAP_TYPE_ns1__HostAdminDisableEvent (1218)
/* ns1:HostAdminDisableEvent */
class SOAP_CMAC ns1__HostAdminDisableEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1218; } /* = unique id SOAP_TYPE_ns1__HostAdminDisableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAdminDisableEvent() { ns1__HostAdminDisableEvent::soap_default(NULL); }
	virtual ~ns1__HostAdminDisableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostAdminEnableEvent
#define SOAP_TYPE_ns1__HostAdminEnableEvent (1219)
/* ns1:HostAdminEnableEvent */
class SOAP_CMAC ns1__HostAdminEnableEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1219; } /* = unique id SOAP_TYPE_ns1__HostAdminEnableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostAdminEnableEvent() { ns1__HostAdminEnableEvent::soap_default(NULL); }
	virtual ~ns1__HostAdminEnableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostEnableAdminFailedEvent
#define SOAP_TYPE_ns1__HostEnableAdminFailedEvent (1220)
/* ns1:HostEnableAdminFailedEvent */
class SOAP_CMAC ns1__HostEnableAdminFailedEvent : public ns1__HostEvent
{
public:
	std::vector<ns1__Permission * >permissions;	/* required element of type ns1:Permission */
public:
	virtual int soap_type() const { return 1220; } /* = unique id SOAP_TYPE_ns1__HostEnableAdminFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostEnableAdminFailedEvent() { ns1__HostEnableAdminFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostEnableAdminFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedRelayoutOnVmfs2DatastoreEvent
#define SOAP_TYPE_ns1__VmFailedRelayoutOnVmfs2DatastoreEvent (1221)
/* ns1:VmFailedRelayoutOnVmfs2DatastoreEvent */
class SOAP_CMAC ns1__VmFailedRelayoutOnVmfs2DatastoreEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1221; } /* = unique id SOAP_TYPE_ns1__VmFailedRelayoutOnVmfs2DatastoreEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedRelayoutOnVmfs2DatastoreEvent() { ns1__VmFailedRelayoutOnVmfs2DatastoreEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedRelayoutOnVmfs2DatastoreEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFailedRelayoutEvent
#define SOAP_TYPE_ns1__VmFailedRelayoutEvent (1222)
/* ns1:VmFailedRelayoutEvent */
class SOAP_CMAC ns1__VmFailedRelayoutEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1222; } /* = unique id SOAP_TYPE_ns1__VmFailedRelayoutEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFailedRelayoutEvent() { ns1__VmFailedRelayoutEvent::soap_default(NULL); }
	virtual ~ns1__VmFailedRelayoutEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRelayoutSuccessfulEvent
#define SOAP_TYPE_ns1__VmRelayoutSuccessfulEvent (1223)
/* ns1:VmRelayoutSuccessfulEvent */
class SOAP_CMAC ns1__VmRelayoutSuccessfulEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1223; } /* = unique id SOAP_TYPE_ns1__VmRelayoutSuccessfulEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRelayoutSuccessfulEvent() { ns1__VmRelayoutSuccessfulEvent::soap_default(NULL); }
	virtual ~ns1__VmRelayoutSuccessfulEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRelayoutUpToDateEvent
#define SOAP_TYPE_ns1__VmRelayoutUpToDateEvent (1224)
/* ns1:VmRelayoutUpToDateEvent */
class SOAP_CMAC ns1__VmRelayoutUpToDateEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1224; } /* = unique id SOAP_TYPE_ns1__VmRelayoutUpToDateEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRelayoutUpToDateEvent() { ns1__VmRelayoutUpToDateEvent::soap_default(NULL); }
	virtual ~ns1__VmRelayoutUpToDateEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConnectedEvent
#define SOAP_TYPE_ns1__VmConnectedEvent (1225)
/* ns1:VmConnectedEvent */
class SOAP_CMAC ns1__VmConnectedEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1225; } /* = unique id SOAP_TYPE_ns1__VmConnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConnectedEvent() { ns1__VmConnectedEvent::soap_default(NULL); }
	virtual ~ns1__VmConnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPoweringOnWithCustomizedDVPortEvent
#define SOAP_TYPE_ns1__VmPoweringOnWithCustomizedDVPortEvent (1226)
/* ns1:VmPoweringOnWithCustomizedDVPortEvent */
class SOAP_CMAC ns1__VmPoweringOnWithCustomizedDVPortEvent : public ns1__VmEvent
{
public:
	std::vector<ns1__VnicPortArgument * >vnic;	/* required element of type ns1:VnicPortArgument */
public:
	virtual int soap_type() const { return 1226; } /* = unique id SOAP_TYPE_ns1__VmPoweringOnWithCustomizedDVPortEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPoweringOnWithCustomizedDVPortEvent() { ns1__VmPoweringOnWithCustomizedDVPortEvent::soap_default(NULL); }
	virtual ~ns1__VmPoweringOnWithCustomizedDVPortEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasUpdateErrorEvent
#define SOAP_TYPE_ns1__VmDasUpdateErrorEvent (1227)
/* ns1:VmDasUpdateErrorEvent */
class SOAP_CMAC ns1__VmDasUpdateErrorEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1227; } /* = unique id SOAP_TYPE_ns1__VmDasUpdateErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasUpdateErrorEvent() { ns1__VmDasUpdateErrorEvent::soap_default(NULL); }
	virtual ~ns1__VmDasUpdateErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoMaintenanceModeDrsRecommendationForVM
#define SOAP_TYPE_ns1__NoMaintenanceModeDrsRecommendationForVM (1228)
/* ns1:NoMaintenanceModeDrsRecommendationForVM */
class SOAP_CMAC ns1__NoMaintenanceModeDrsRecommendationForVM : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1228; } /* = unique id SOAP_TYPE_ns1__NoMaintenanceModeDrsRecommendationForVM */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoMaintenanceModeDrsRecommendationForVM() { ns1__NoMaintenanceModeDrsRecommendationForVM::soap_default(NULL); }
	virtual ~ns1__NoMaintenanceModeDrsRecommendationForVM() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasUpdateOkEvent
#define SOAP_TYPE_ns1__VmDasUpdateOkEvent (1229)
/* ns1:VmDasUpdateOkEvent */
class SOAP_CMAC ns1__VmDasUpdateOkEvent : public ns1__VmEvent
{
public:
	virtual int soap_type() const { return 1229; } /* = unique id SOAP_TYPE_ns1__VmDasUpdateOkEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasUpdateOkEvent() { ns1__VmDasUpdateOkEvent::soap_default(NULL); }
	virtual ~ns1__VmDasUpdateOkEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskCreatedEvent
#define SOAP_TYPE_ns1__ScheduledTaskCreatedEvent (1231)
/* ns1:ScheduledTaskCreatedEvent */
class SOAP_CMAC ns1__ScheduledTaskCreatedEvent : public ns1__ScheduledTaskEvent
{
public:
	virtual int soap_type() const { return 1231; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskCreatedEvent() { ns1__ScheduledTaskCreatedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskStartedEvent
#define SOAP_TYPE_ns1__ScheduledTaskStartedEvent (1232)
/* ns1:ScheduledTaskStartedEvent */
class SOAP_CMAC ns1__ScheduledTaskStartedEvent : public ns1__ScheduledTaskEvent
{
public:
	virtual int soap_type() const { return 1232; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskStartedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskStartedEvent() { ns1__ScheduledTaskStartedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskStartedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskRemovedEvent
#define SOAP_TYPE_ns1__ScheduledTaskRemovedEvent (1233)
/* ns1:ScheduledTaskRemovedEvent */
class SOAP_CMAC ns1__ScheduledTaskRemovedEvent : public ns1__ScheduledTaskEvent
{
public:
	virtual int soap_type() const { return 1233; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskRemovedEvent() { ns1__ScheduledTaskRemovedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskReconfiguredEvent
#define SOAP_TYPE_ns1__ScheduledTaskReconfiguredEvent (1234)
/* ns1:ScheduledTaskReconfiguredEvent */
class SOAP_CMAC ns1__ScheduledTaskReconfiguredEvent : public ns1__ScheduledTaskEvent
{
public:
	virtual int soap_type() const { return 1234; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskReconfiguredEvent() { ns1__ScheduledTaskReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskCompletedEvent
#define SOAP_TYPE_ns1__ScheduledTaskCompletedEvent (1235)
/* ns1:ScheduledTaskCompletedEvent */
class SOAP_CMAC ns1__ScheduledTaskCompletedEvent : public ns1__ScheduledTaskEvent
{
public:
	virtual int soap_type() const { return 1235; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskCompletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskCompletedEvent() { ns1__ScheduledTaskCompletedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskCompletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskFailedEvent
#define SOAP_TYPE_ns1__ScheduledTaskFailedEvent (1236)
/* ns1:ScheduledTaskFailedEvent */
class SOAP_CMAC ns1__ScheduledTaskFailedEvent : public ns1__ScheduledTaskEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1236; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskFailedEvent() { ns1__ScheduledTaskFailedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskEmailCompletedEvent
#define SOAP_TYPE_ns1__ScheduledTaskEmailCompletedEvent (1237)
/* ns1:ScheduledTaskEmailCompletedEvent */
class SOAP_CMAC ns1__ScheduledTaskEmailCompletedEvent : public ns1__ScheduledTaskEvent
{
public:
	std::string to;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1237; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskEmailCompletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskEmailCompletedEvent() { ns1__ScheduledTaskEmailCompletedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskEmailCompletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskEmailFailedEvent
#define SOAP_TYPE_ns1__ScheduledTaskEmailFailedEvent (1238)
/* ns1:ScheduledTaskEmailFailedEvent */
class SOAP_CMAC ns1__ScheduledTaskEmailFailedEvent : public ns1__ScheduledTaskEvent
{
public:
	std::string to;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1238; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskEmailFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskEmailFailedEvent() { ns1__ScheduledTaskEmailFailedEvent::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskEmailFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmCreatedEvent
#define SOAP_TYPE_ns1__AlarmCreatedEvent (1240)
/* ns1:AlarmCreatedEvent */
class SOAP_CMAC ns1__AlarmCreatedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1240; } /* = unique id SOAP_TYPE_ns1__AlarmCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmCreatedEvent() { ns1__AlarmCreatedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmStatusChangedEvent
#define SOAP_TYPE_ns1__AlarmStatusChangedEvent (1241)
/* ns1:AlarmStatusChangedEvent */
class SOAP_CMAC ns1__AlarmStatusChangedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *source;	/* required element of type ns1:ManagedEntityEventArgument */
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string from;	/* required element of type xsd:string */
	std::string to;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1241; } /* = unique id SOAP_TYPE_ns1__AlarmStatusChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmStatusChangedEvent() { ns1__AlarmStatusChangedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmStatusChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmActionTriggeredEvent
#define SOAP_TYPE_ns1__AlarmActionTriggeredEvent (1242)
/* ns1:AlarmActionTriggeredEvent */
class SOAP_CMAC ns1__AlarmActionTriggeredEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *source;	/* required element of type ns1:ManagedEntityEventArgument */
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1242; } /* = unique id SOAP_TYPE_ns1__AlarmActionTriggeredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmActionTriggeredEvent() { ns1__AlarmActionTriggeredEvent::soap_default(NULL); }
	virtual ~ns1__AlarmActionTriggeredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmEmailCompletedEvent
#define SOAP_TYPE_ns1__AlarmEmailCompletedEvent (1243)
/* ns1:AlarmEmailCompletedEvent */
class SOAP_CMAC ns1__AlarmEmailCompletedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string to;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1243; } /* = unique id SOAP_TYPE_ns1__AlarmEmailCompletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmEmailCompletedEvent() { ns1__AlarmEmailCompletedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmEmailCompletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmEmailFailedEvent
#define SOAP_TYPE_ns1__AlarmEmailFailedEvent (1244)
/* ns1:AlarmEmailFailedEvent */
class SOAP_CMAC ns1__AlarmEmailFailedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string to;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1244; } /* = unique id SOAP_TYPE_ns1__AlarmEmailFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmEmailFailedEvent() { ns1__AlarmEmailFailedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmEmailFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmSnmpCompletedEvent
#define SOAP_TYPE_ns1__AlarmSnmpCompletedEvent (1245)
/* ns1:AlarmSnmpCompletedEvent */
class SOAP_CMAC ns1__AlarmSnmpCompletedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1245; } /* = unique id SOAP_TYPE_ns1__AlarmSnmpCompletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmSnmpCompletedEvent() { ns1__AlarmSnmpCompletedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmSnmpCompletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmSnmpFailedEvent
#define SOAP_TYPE_ns1__AlarmSnmpFailedEvent (1246)
/* ns1:AlarmSnmpFailedEvent */
class SOAP_CMAC ns1__AlarmSnmpFailedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1246; } /* = unique id SOAP_TYPE_ns1__AlarmSnmpFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmSnmpFailedEvent() { ns1__AlarmSnmpFailedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmSnmpFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmScriptCompleteEvent
#define SOAP_TYPE_ns1__AlarmScriptCompleteEvent (1247)
/* ns1:AlarmScriptCompleteEvent */
class SOAP_CMAC ns1__AlarmScriptCompleteEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string script;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1247; } /* = unique id SOAP_TYPE_ns1__AlarmScriptCompleteEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmScriptCompleteEvent() { ns1__AlarmScriptCompleteEvent::soap_default(NULL); }
	virtual ~ns1__AlarmScriptCompleteEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmScriptFailedEvent
#define SOAP_TYPE_ns1__AlarmScriptFailedEvent (1248)
/* ns1:AlarmScriptFailedEvent */
class SOAP_CMAC ns1__AlarmScriptFailedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string script;	/* required element of type xsd:string */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1248; } /* = unique id SOAP_TYPE_ns1__AlarmScriptFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmScriptFailedEvent() { ns1__AlarmScriptFailedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmScriptFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmRemovedEvent
#define SOAP_TYPE_ns1__AlarmRemovedEvent (1249)
/* ns1:AlarmRemovedEvent */
class SOAP_CMAC ns1__AlarmRemovedEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1249; } /* = unique id SOAP_TYPE_ns1__AlarmRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmRemovedEvent() { ns1__AlarmRemovedEvent::soap_default(NULL); }
	virtual ~ns1__AlarmRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmReconfiguredEvent
#define SOAP_TYPE_ns1__AlarmReconfiguredEvent (1250)
/* ns1:AlarmReconfiguredEvent */
class SOAP_CMAC ns1__AlarmReconfiguredEvent : public ns1__AlarmEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
public:
	virtual int soap_type() const { return 1250; } /* = unique id SOAP_TYPE_ns1__AlarmReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmReconfiguredEvent() { ns1__AlarmReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__AlarmReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldDefEvent
#define SOAP_TYPE_ns1__CustomFieldDefEvent (1252)
/* ns1:CustomFieldDefEvent */
class SOAP_CMAC ns1__CustomFieldDefEvent : public ns1__CustomFieldEvent
{
public:
	int fieldKey;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1252; } /* = unique id SOAP_TYPE_ns1__CustomFieldDefEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldDefEvent() { ns1__CustomFieldDefEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldDefEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldValueChangedEvent
#define SOAP_TYPE_ns1__CustomFieldValueChangedEvent (1256)
/* ns1:CustomFieldValueChangedEvent */
class SOAP_CMAC ns1__CustomFieldValueChangedEvent : public ns1__CustomFieldEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	int fieldKey;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1256; } /* = unique id SOAP_TYPE_ns1__CustomFieldValueChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldValueChangedEvent() { ns1__CustomFieldValueChangedEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldValueChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PermissionEvent
#define SOAP_TYPE_ns1__PermissionEvent (1258)
/* ns1:PermissionEvent */
class SOAP_CMAC ns1__PermissionEvent : public ns1__AuthorizationEvent
{
public:
	ns1__ManagedEntityEventArgument *entity;	/* required element of type ns1:ManagedEntityEventArgument */
	std::string principal;	/* required element of type xsd:string */
	bool group;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1258; } /* = unique id SOAP_TYPE_ns1__PermissionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PermissionEvent() { ns1__PermissionEvent::soap_default(NULL); }
	virtual ~ns1__PermissionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RoleEvent
#define SOAP_TYPE_ns1__RoleEvent (1262)
/* ns1:RoleEvent */
class SOAP_CMAC ns1__RoleEvent : public ns1__AuthorizationEvent
{
public:
	ns1__RoleEventArgument *role;	/* required element of type ns1:RoleEventArgument */
public:
	virtual int soap_type() const { return 1262; } /* = unique id SOAP_TYPE_ns1__RoleEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RoleEvent() { ns1__RoleEvent::soap_default(NULL); }
	virtual ~ns1__RoleEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreDestroyedEvent
#define SOAP_TYPE_ns1__DatastoreDestroyedEvent (1267)
/* ns1:DatastoreDestroyedEvent */
class SOAP_CMAC ns1__DatastoreDestroyedEvent : public ns1__DatastoreEvent
{
public:
	virtual int soap_type() const { return 1267; } /* = unique id SOAP_TYPE_ns1__DatastoreDestroyedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreDestroyedEvent() { ns1__DatastoreDestroyedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreDestroyedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreRenamedEvent
#define SOAP_TYPE_ns1__DatastoreRenamedEvent (1268)
/* ns1:DatastoreRenamedEvent */
class SOAP_CMAC ns1__DatastoreRenamedEvent : public ns1__DatastoreEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1268; } /* = unique id SOAP_TYPE_ns1__DatastoreRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreRenamedEvent() { ns1__DatastoreRenamedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreCapacityIncreasedEvent
#define SOAP_TYPE_ns1__DatastoreCapacityIncreasedEvent (1269)
/* ns1:DatastoreCapacityIncreasedEvent */
class SOAP_CMAC ns1__DatastoreCapacityIncreasedEvent : public ns1__DatastoreEvent
{
public:
	LONG64 oldCapacity;	/* required element of type xsd:long */
	LONG64 newCapacity;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1269; } /* = unique id SOAP_TYPE_ns1__DatastoreCapacityIncreasedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreCapacityIncreasedEvent() { ns1__DatastoreCapacityIncreasedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreCapacityIncreasedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreDuplicatedEvent
#define SOAP_TYPE_ns1__DatastoreDuplicatedEvent (1270)
/* ns1:DatastoreDuplicatedEvent */
class SOAP_CMAC ns1__DatastoreDuplicatedEvent : public ns1__DatastoreEvent
{
public:
	virtual int soap_type() const { return 1270; } /* = unique id SOAP_TYPE_ns1__DatastoreDuplicatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreDuplicatedEvent() { ns1__DatastoreDuplicatedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreDuplicatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreFileEvent
#define SOAP_TYPE_ns1__DatastoreFileEvent (1271)
/* ns1:DatastoreFileEvent */
class SOAP_CMAC ns1__DatastoreFileEvent : public ns1__DatastoreEvent
{
public:
	std::string targetFile;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1271; } /* = unique id SOAP_TYPE_ns1__DatastoreFileEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreFileEvent() { ns1__DatastoreFileEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreFileEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NonVIWorkloadDetectedOnDatastoreEvent
#define SOAP_TYPE_ns1__NonVIWorkloadDetectedOnDatastoreEvent (1275)
/* ns1:NonVIWorkloadDetectedOnDatastoreEvent */
class SOAP_CMAC ns1__NonVIWorkloadDetectedOnDatastoreEvent : public ns1__DatastoreEvent
{
public:
	virtual int soap_type() const { return 1275; } /* = unique id SOAP_TYPE_ns1__NonVIWorkloadDetectedOnDatastoreEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NonVIWorkloadDetectedOnDatastoreEvent() { ns1__NonVIWorkloadDetectedOnDatastoreEvent::soap_default(NULL); }
	virtual ~ns1__NonVIWorkloadDetectedOnDatastoreEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreIORMReconfiguredEvent
#define SOAP_TYPE_ns1__DatastoreIORMReconfiguredEvent (1276)
/* ns1:DatastoreIORMReconfiguredEvent */
class SOAP_CMAC ns1__DatastoreIORMReconfiguredEvent : public ns1__DatastoreEvent
{
public:
	virtual int soap_type() const { return 1276; } /* = unique id SOAP_TYPE_ns1__DatastoreIORMReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreIORMReconfiguredEvent() { ns1__DatastoreIORMReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreIORMReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TaskTimeoutEvent
#define SOAP_TYPE_ns1__TaskTimeoutEvent (1278)
/* ns1:TaskTimeoutEvent */
class SOAP_CMAC ns1__TaskTimeoutEvent : public ns1__TaskEvent
{
public:
	virtual int soap_type() const { return 1278; } /* = unique id SOAP_TYPE_ns1__TaskTimeoutEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TaskTimeoutEvent() { ns1__TaskTimeoutEvent::soap_default(NULL); }
	virtual ~ns1__TaskTimeoutEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServerLicenseExpiredEvent
#define SOAP_TYPE_ns1__ServerLicenseExpiredEvent (1280)
/* ns1:ServerLicenseExpiredEvent */
class SOAP_CMAC ns1__ServerLicenseExpiredEvent : public ns1__LicenseEvent
{
public:
	std::string product;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1280; } /* = unique id SOAP_TYPE_ns1__ServerLicenseExpiredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServerLicenseExpiredEvent() { ns1__ServerLicenseExpiredEvent::soap_default(NULL); }
	virtual ~ns1__ServerLicenseExpiredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostLicenseExpiredEvent
#define SOAP_TYPE_ns1__HostLicenseExpiredEvent (1281)
/* ns1:HostLicenseExpiredEvent */
class SOAP_CMAC ns1__HostLicenseExpiredEvent : public ns1__LicenseEvent
{
public:
	virtual int soap_type() const { return 1281; } /* = unique id SOAP_TYPE_ns1__HostLicenseExpiredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostLicenseExpiredEvent() { ns1__HostLicenseExpiredEvent::soap_default(NULL); }
	virtual ~ns1__HostLicenseExpiredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionLicenseExpiredEvent
#define SOAP_TYPE_ns1__VMotionLicenseExpiredEvent (1282)
/* ns1:VMotionLicenseExpiredEvent */
class SOAP_CMAC ns1__VMotionLicenseExpiredEvent : public ns1__LicenseEvent
{
public:
	virtual int soap_type() const { return 1282; } /* = unique id SOAP_TYPE_ns1__VMotionLicenseExpiredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionLicenseExpiredEvent() { ns1__VMotionLicenseExpiredEvent::soap_default(NULL); }
	virtual ~ns1__VMotionLicenseExpiredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoLicenseEvent
#define SOAP_TYPE_ns1__NoLicenseEvent (1283)
/* ns1:NoLicenseEvent */
class SOAP_CMAC ns1__NoLicenseEvent : public ns1__LicenseEvent
{
public:
	ns1__LicenseFeatureInfo *feature;	/* required element of type ns1:LicenseFeatureInfo */
public:
	virtual int soap_type() const { return 1283; } /* = unique id SOAP_TYPE_ns1__NoLicenseEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoLicenseEvent() { ns1__NoLicenseEvent::soap_default(NULL); }
	virtual ~ns1__NoLicenseEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseServerUnavailableEvent
#define SOAP_TYPE_ns1__LicenseServerUnavailableEvent (1284)
/* ns1:LicenseServerUnavailableEvent */
class SOAP_CMAC ns1__LicenseServerUnavailableEvent : public ns1__LicenseEvent
{
public:
	std::string licenseServer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1284; } /* = unique id SOAP_TYPE_ns1__LicenseServerUnavailableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseServerUnavailableEvent() { ns1__LicenseServerUnavailableEvent::soap_default(NULL); }
	virtual ~ns1__LicenseServerUnavailableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseServerAvailableEvent
#define SOAP_TYPE_ns1__LicenseServerAvailableEvent (1285)
/* ns1:LicenseServerAvailableEvent */
class SOAP_CMAC ns1__LicenseServerAvailableEvent : public ns1__LicenseEvent
{
public:
	std::string licenseServer;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1285; } /* = unique id SOAP_TYPE_ns1__LicenseServerAvailableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseServerAvailableEvent() { ns1__LicenseServerAvailableEvent::soap_default(NULL); }
	virtual ~ns1__LicenseServerAvailableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidEditionEvent
#define SOAP_TYPE_ns1__InvalidEditionEvent (1287)
/* ns1:InvalidEditionEvent */
class SOAP_CMAC ns1__InvalidEditionEvent : public ns1__LicenseEvent
{
public:
	std::string feature;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1287; } /* = unique id SOAP_TYPE_ns1__InvalidEditionEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidEditionEvent() { ns1__InvalidEditionEvent::soap_default(NULL); }
	virtual ~ns1__InvalidEditionEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInventoryFullEvent
#define SOAP_TYPE_ns1__HostInventoryFullEvent (1288)
/* ns1:HostInventoryFullEvent */
class SOAP_CMAC ns1__HostInventoryFullEvent : public ns1__LicenseEvent
{
public:
	int capacity;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1288; } /* = unique id SOAP_TYPE_ns1__HostInventoryFullEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInventoryFullEvent() { ns1__HostInventoryFullEvent::soap_default(NULL); }
	virtual ~ns1__HostInventoryFullEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseRestrictedEvent
#define SOAP_TYPE_ns1__LicenseRestrictedEvent (1289)
/* ns1:LicenseRestrictedEvent */
class SOAP_CMAC ns1__LicenseRestrictedEvent : public ns1__LicenseEvent
{
public:
	virtual int soap_type() const { return 1289; } /* = unique id SOAP_TYPE_ns1__LicenseRestrictedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseRestrictedEvent() { ns1__LicenseRestrictedEvent::soap_default(NULL); }
	virtual ~ns1__LicenseRestrictedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncorrectHostInformationEvent
#define SOAP_TYPE_ns1__IncorrectHostInformationEvent (1290)
/* ns1:IncorrectHostInformationEvent */
class SOAP_CMAC ns1__IncorrectHostInformationEvent : public ns1__LicenseEvent
{
public:
	virtual int soap_type() const { return 1290; } /* = unique id SOAP_TYPE_ns1__IncorrectHostInformationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncorrectHostInformationEvent() { ns1__IncorrectHostInformationEvent::soap_default(NULL); }
	virtual ~ns1__IncorrectHostInformationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnlicensedVirtualMachinesEvent
#define SOAP_TYPE_ns1__UnlicensedVirtualMachinesEvent (1291)
/* ns1:UnlicensedVirtualMachinesEvent */
class SOAP_CMAC ns1__UnlicensedVirtualMachinesEvent : public ns1__LicenseEvent
{
public:
	int unlicensed;	/* required element of type xsd:int */
	int available;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1291; } /* = unique id SOAP_TYPE_ns1__UnlicensedVirtualMachinesEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnlicensedVirtualMachinesEvent() { ns1__UnlicensedVirtualMachinesEvent::soap_default(NULL); }
	virtual ~ns1__UnlicensedVirtualMachinesEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnlicensedVirtualMachinesFoundEvent
#define SOAP_TYPE_ns1__UnlicensedVirtualMachinesFoundEvent (1292)
/* ns1:UnlicensedVirtualMachinesFoundEvent */
class SOAP_CMAC ns1__UnlicensedVirtualMachinesFoundEvent : public ns1__LicenseEvent
{
public:
	int available;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1292; } /* = unique id SOAP_TYPE_ns1__UnlicensedVirtualMachinesFoundEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnlicensedVirtualMachinesFoundEvent() { ns1__UnlicensedVirtualMachinesFoundEvent::soap_default(NULL); }
	virtual ~ns1__UnlicensedVirtualMachinesFoundEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AllVirtualMachinesLicensedEvent
#define SOAP_TYPE_ns1__AllVirtualMachinesLicensedEvent (1293)
/* ns1:AllVirtualMachinesLicensedEvent */
class SOAP_CMAC ns1__AllVirtualMachinesLicensedEvent : public ns1__LicenseEvent
{
public:
	virtual int soap_type() const { return 1293; } /* = unique id SOAP_TYPE_ns1__AllVirtualMachinesLicensedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AllVirtualMachinesLicensedEvent() { ns1__AllVirtualMachinesLicensedEvent::soap_default(NULL); }
	virtual ~ns1__AllVirtualMachinesLicensedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseNonComplianceEvent
#define SOAP_TYPE_ns1__LicenseNonComplianceEvent (1294)
/* ns1:LicenseNonComplianceEvent */
class SOAP_CMAC ns1__LicenseNonComplianceEvent : public ns1__LicenseEvent
{
public:
	std::string url;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1294; } /* = unique id SOAP_TYPE_ns1__LicenseNonComplianceEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseNonComplianceEvent() { ns1__LicenseNonComplianceEvent::soap_default(NULL); }
	virtual ~ns1__LicenseNonComplianceEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationEvent
#define SOAP_TYPE_ns1__MigrationEvent (1295)
/* ns1:MigrationEvent */
class SOAP_CMAC ns1__MigrationEvent : public ns1__VmEvent
{
public:
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1295; } /* = unique id SOAP_TYPE_ns1__MigrationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationEvent() { ns1__MigrationEvent::soap_default(NULL); }
	virtual ~ns1__MigrationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasEnabledEvent
#define SOAP_TYPE_ns1__DasEnabledEvent (1303)
/* ns1:DasEnabledEvent */
class SOAP_CMAC ns1__DasEnabledEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1303; } /* = unique id SOAP_TYPE_ns1__DasEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasEnabledEvent() { ns1__DasEnabledEvent::soap_default(NULL); }
	virtual ~ns1__DasEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasDisabledEvent
#define SOAP_TYPE_ns1__DasDisabledEvent (1304)
/* ns1:DasDisabledEvent */
class SOAP_CMAC ns1__DasDisabledEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1304; } /* = unique id SOAP_TYPE_ns1__DasDisabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasDisabledEvent() { ns1__DasDisabledEvent::soap_default(NULL); }
	virtual ~ns1__DasDisabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasAdmissionControlDisabledEvent
#define SOAP_TYPE_ns1__DasAdmissionControlDisabledEvent (1305)
/* ns1:DasAdmissionControlDisabledEvent */
class SOAP_CMAC ns1__DasAdmissionControlDisabledEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1305; } /* = unique id SOAP_TYPE_ns1__DasAdmissionControlDisabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasAdmissionControlDisabledEvent() { ns1__DasAdmissionControlDisabledEvent::soap_default(NULL); }
	virtual ~ns1__DasAdmissionControlDisabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasAdmissionControlEnabledEvent
#define SOAP_TYPE_ns1__DasAdmissionControlEnabledEvent (1306)
/* ns1:DasAdmissionControlEnabledEvent */
class SOAP_CMAC ns1__DasAdmissionControlEnabledEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1306; } /* = unique id SOAP_TYPE_ns1__DasAdmissionControlEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasAdmissionControlEnabledEvent() { ns1__DasAdmissionControlEnabledEvent::soap_default(NULL); }
	virtual ~ns1__DasAdmissionControlEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasHostFailedEvent
#define SOAP_TYPE_ns1__DasHostFailedEvent (1307)
/* ns1:DasHostFailedEvent */
class SOAP_CMAC ns1__DasHostFailedEvent : public ns1__ClusterEvent
{
public:
	ns1__HostEventArgument *failedHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1307; } /* = unique id SOAP_TYPE_ns1__DasHostFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasHostFailedEvent() { ns1__DasHostFailedEvent::soap_default(NULL); }
	virtual ~ns1__DasHostFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasHostIsolatedEvent
#define SOAP_TYPE_ns1__DasHostIsolatedEvent (1308)
/* ns1:DasHostIsolatedEvent */
class SOAP_CMAC ns1__DasHostIsolatedEvent : public ns1__ClusterEvent
{
public:
	ns1__HostEventArgument *isolatedHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1308; } /* = unique id SOAP_TYPE_ns1__DasHostIsolatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasHostIsolatedEvent() { ns1__DasHostIsolatedEvent::soap_default(NULL); }
	virtual ~ns1__DasHostIsolatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasClusterIsolatedEvent
#define SOAP_TYPE_ns1__DasClusterIsolatedEvent (1309)
/* ns1:DasClusterIsolatedEvent */
class SOAP_CMAC ns1__DasClusterIsolatedEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1309; } /* = unique id SOAP_TYPE_ns1__DasClusterIsolatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasClusterIsolatedEvent() { ns1__DasClusterIsolatedEvent::soap_default(NULL); }
	virtual ~ns1__DasClusterIsolatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasAgentUnavailableEvent
#define SOAP_TYPE_ns1__DasAgentUnavailableEvent (1310)
/* ns1:DasAgentUnavailableEvent */
class SOAP_CMAC ns1__DasAgentUnavailableEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1310; } /* = unique id SOAP_TYPE_ns1__DasAgentUnavailableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasAgentUnavailableEvent() { ns1__DasAgentUnavailableEvent::soap_default(NULL); }
	virtual ~ns1__DasAgentUnavailableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DasAgentFoundEvent
#define SOAP_TYPE_ns1__DasAgentFoundEvent (1311)
/* ns1:DasAgentFoundEvent */
class SOAP_CMAC ns1__DasAgentFoundEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1311; } /* = unique id SOAP_TYPE_ns1__DasAgentFoundEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DasAgentFoundEvent() { ns1__DasAgentFoundEvent::soap_default(NULL); }
	virtual ~ns1__DasAgentFoundEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientFailoverResourcesEvent
#define SOAP_TYPE_ns1__InsufficientFailoverResourcesEvent (1312)
/* ns1:InsufficientFailoverResourcesEvent */
class SOAP_CMAC ns1__InsufficientFailoverResourcesEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1312; } /* = unique id SOAP_TYPE_ns1__InsufficientFailoverResourcesEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientFailoverResourcesEvent() { ns1__InsufficientFailoverResourcesEvent::soap_default(NULL); }
	virtual ~ns1__InsufficientFailoverResourcesEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FailoverLevelRestored
#define SOAP_TYPE_ns1__FailoverLevelRestored (1313)
/* ns1:FailoverLevelRestored */
class SOAP_CMAC ns1__FailoverLevelRestored : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1313; } /* = unique id SOAP_TYPE_ns1__FailoverLevelRestored */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FailoverLevelRestored() { ns1__FailoverLevelRestored::soap_default(NULL); }
	virtual ~ns1__FailoverLevelRestored() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterOvercommittedEvent
#define SOAP_TYPE_ns1__ClusterOvercommittedEvent (1314)
/* ns1:ClusterOvercommittedEvent */
class SOAP_CMAC ns1__ClusterOvercommittedEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1314; } /* = unique id SOAP_TYPE_ns1__ClusterOvercommittedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterOvercommittedEvent() { ns1__ClusterOvercommittedEvent::soap_default(NULL); }
	virtual ~ns1__ClusterOvercommittedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterStatusChangedEvent
#define SOAP_TYPE_ns1__ClusterStatusChangedEvent (1316)
/* ns1:ClusterStatusChangedEvent */
class SOAP_CMAC ns1__ClusterStatusChangedEvent : public ns1__ClusterEvent
{
public:
	std::string oldStatus;	/* required element of type xsd:string */
	std::string newStatus;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1316; } /* = unique id SOAP_TYPE_ns1__ClusterStatusChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterStatusChangedEvent() { ns1__ClusterStatusChangedEvent::soap_default(NULL); }
	virtual ~ns1__ClusterStatusChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterCreatedEvent
#define SOAP_TYPE_ns1__ClusterCreatedEvent (1318)
/* ns1:ClusterCreatedEvent */
class SOAP_CMAC ns1__ClusterCreatedEvent : public ns1__ClusterEvent
{
public:
	ns1__FolderEventArgument *parent;	/* required element of type ns1:FolderEventArgument */
public:
	virtual int soap_type() const { return 1318; } /* = unique id SOAP_TYPE_ns1__ClusterCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterCreatedEvent() { ns1__ClusterCreatedEvent::soap_default(NULL); }
	virtual ~ns1__ClusterCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterDestroyedEvent
#define SOAP_TYPE_ns1__ClusterDestroyedEvent (1319)
/* ns1:ClusterDestroyedEvent */
class SOAP_CMAC ns1__ClusterDestroyedEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1319; } /* = unique id SOAP_TYPE_ns1__ClusterDestroyedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterDestroyedEvent() { ns1__ClusterDestroyedEvent::soap_default(NULL); }
	virtual ~ns1__ClusterDestroyedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsEnabledEvent
#define SOAP_TYPE_ns1__DrsEnabledEvent (1320)
/* ns1:DrsEnabledEvent */
class SOAP_CMAC ns1__DrsEnabledEvent : public ns1__ClusterEvent
{
public:
	std::string behavior;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1320; } /* = unique id SOAP_TYPE_ns1__DrsEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsEnabledEvent() { ns1__DrsEnabledEvent::soap_default(NULL); }
	virtual ~ns1__DrsEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsDisabledEvent
#define SOAP_TYPE_ns1__DrsDisabledEvent (1321)
/* ns1:DrsDisabledEvent */
class SOAP_CMAC ns1__DrsDisabledEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1321; } /* = unique id SOAP_TYPE_ns1__DrsDisabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsDisabledEvent() { ns1__DrsDisabledEvent::soap_default(NULL); }
	virtual ~ns1__DrsDisabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterReconfiguredEvent
#define SOAP_TYPE_ns1__ClusterReconfiguredEvent (1322)
/* ns1:ClusterReconfiguredEvent */
class SOAP_CMAC ns1__ClusterReconfiguredEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1322; } /* = unique id SOAP_TYPE_ns1__ClusterReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterReconfiguredEvent() { ns1__ClusterReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__ClusterReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMonitoringStateChangedEvent
#define SOAP_TYPE_ns1__HostMonitoringStateChangedEvent (1323)
/* ns1:HostMonitoringStateChangedEvent */
class SOAP_CMAC ns1__HostMonitoringStateChangedEvent : public ns1__ClusterEvent
{
public:
	std::string state;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1323; } /* = unique id SOAP_TYPE_ns1__HostMonitoringStateChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMonitoringStateChangedEvent() { ns1__HostMonitoringStateChangedEvent::soap_default(NULL); }
	virtual ~ns1__HostMonitoringStateChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmHealthMonitoringStateChangedEvent
#define SOAP_TYPE_ns1__VmHealthMonitoringStateChangedEvent (1324)
/* ns1:VmHealthMonitoringStateChangedEvent */
class SOAP_CMAC ns1__VmHealthMonitoringStateChangedEvent : public ns1__ClusterEvent
{
public:
	std::string state;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1324; } /* = unique id SOAP_TYPE_ns1__VmHealthMonitoringStateChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmHealthMonitoringStateChangedEvent() { ns1__VmHealthMonitoringStateChangedEvent::soap_default(NULL); }
	virtual ~ns1__VmHealthMonitoringStateChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolCreatedEvent
#define SOAP_TYPE_ns1__ResourcePoolCreatedEvent (1326)
/* ns1:ResourcePoolCreatedEvent */
class SOAP_CMAC ns1__ResourcePoolCreatedEvent : public ns1__ResourcePoolEvent
{
public:
	ns1__ResourcePoolEventArgument *parent;	/* required element of type ns1:ResourcePoolEventArgument */
public:
	virtual int soap_type() const { return 1326; } /* = unique id SOAP_TYPE_ns1__ResourcePoolCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolCreatedEvent() { ns1__ResourcePoolCreatedEvent::soap_default(NULL); }
	virtual ~ns1__ResourcePoolCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolDestroyedEvent
#define SOAP_TYPE_ns1__ResourcePoolDestroyedEvent (1327)
/* ns1:ResourcePoolDestroyedEvent */
class SOAP_CMAC ns1__ResourcePoolDestroyedEvent : public ns1__ResourcePoolEvent
{
public:
	virtual int soap_type() const { return 1327; } /* = unique id SOAP_TYPE_ns1__ResourcePoolDestroyedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolDestroyedEvent() { ns1__ResourcePoolDestroyedEvent::soap_default(NULL); }
	virtual ~ns1__ResourcePoolDestroyedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolMovedEvent
#define SOAP_TYPE_ns1__ResourcePoolMovedEvent (1328)
/* ns1:ResourcePoolMovedEvent */
class SOAP_CMAC ns1__ResourcePoolMovedEvent : public ns1__ResourcePoolEvent
{
public:
	ns1__ResourcePoolEventArgument *oldParent;	/* required element of type ns1:ResourcePoolEventArgument */
	ns1__ResourcePoolEventArgument *newParent;	/* required element of type ns1:ResourcePoolEventArgument */
public:
	virtual int soap_type() const { return 1328; } /* = unique id SOAP_TYPE_ns1__ResourcePoolMovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolMovedEvent() { ns1__ResourcePoolMovedEvent::soap_default(NULL); }
	virtual ~ns1__ResourcePoolMovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolReconfiguredEvent
#define SOAP_TYPE_ns1__ResourcePoolReconfiguredEvent (1329)
/* ns1:ResourcePoolReconfiguredEvent */
class SOAP_CMAC ns1__ResourcePoolReconfiguredEvent : public ns1__ResourcePoolEvent
{
public:
	virtual int soap_type() const { return 1329; } /* = unique id SOAP_TYPE_ns1__ResourcePoolReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolReconfiguredEvent() { ns1__ResourcePoolReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__ResourcePoolReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourceViolatedEvent
#define SOAP_TYPE_ns1__ResourceViolatedEvent (1330)
/* ns1:ResourceViolatedEvent */
class SOAP_CMAC ns1__ResourceViolatedEvent : public ns1__ResourcePoolEvent
{
public:
	virtual int soap_type() const { return 1330; } /* = unique id SOAP_TYPE_ns1__ResourceViolatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourceViolatedEvent() { ns1__ResourceViolatedEvent::soap_default(NULL); }
	virtual ~ns1__ResourceViolatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmResourcePoolMovedEvent
#define SOAP_TYPE_ns1__VmResourcePoolMovedEvent (1331)
/* ns1:VmResourcePoolMovedEvent */
class SOAP_CMAC ns1__VmResourcePoolMovedEvent : public ns1__VmEvent
{
public:
	ns1__ResourcePoolEventArgument *oldParent;	/* required element of type ns1:ResourcePoolEventArgument */
	ns1__ResourcePoolEventArgument *newParent;	/* required element of type ns1:ResourcePoolEventArgument */
public:
	virtual int soap_type() const { return 1331; } /* = unique id SOAP_TYPE_ns1__VmResourcePoolMovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmResourcePoolMovedEvent() { ns1__VmResourcePoolMovedEvent::soap_default(NULL); }
	virtual ~ns1__VmResourcePoolMovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateBeingUpgradedEvent
#define SOAP_TYPE_ns1__TemplateBeingUpgradedEvent (1333)
/* ns1:TemplateBeingUpgradedEvent */
class SOAP_CMAC ns1__TemplateBeingUpgradedEvent : public ns1__TemplateUpgradeEvent
{
public:
	virtual int soap_type() const { return 1333; } /* = unique id SOAP_TYPE_ns1__TemplateBeingUpgradedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateBeingUpgradedEvent() { ns1__TemplateBeingUpgradedEvent::soap_default(NULL); }
	virtual ~ns1__TemplateBeingUpgradedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateUpgradeFailedEvent
#define SOAP_TYPE_ns1__TemplateUpgradeFailedEvent (1334)
/* ns1:TemplateUpgradeFailedEvent */
class SOAP_CMAC ns1__TemplateUpgradeFailedEvent : public ns1__TemplateUpgradeEvent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1334; } /* = unique id SOAP_TYPE_ns1__TemplateUpgradeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateUpgradeFailedEvent() { ns1__TemplateUpgradeFailedEvent::soap_default(NULL); }
	virtual ~ns1__TemplateUpgradeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateUpgradedEvent
#define SOAP_TYPE_ns1__TemplateUpgradedEvent (1335)
/* ns1:TemplateUpgradedEvent */
class SOAP_CMAC ns1__TemplateUpgradedEvent : public ns1__TemplateUpgradeEvent
{
public:
	virtual int soap_type() const { return 1335; } /* = unique id SOAP_TYPE_ns1__TemplateUpgradedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateUpgradedEvent() { ns1__TemplateUpgradedEvent::soap_default(NULL); }
	virtual ~ns1__TemplateUpgradedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationEvent
#define SOAP_TYPE_ns1__CustomizationEvent (1336)
/* ns1:CustomizationEvent */
class SOAP_CMAC ns1__CustomizationEvent : public ns1__VmEvent
{
public:
	std::string *logLocation;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1336; } /* = unique id SOAP_TYPE_ns1__CustomizationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationEvent() { ns1__CustomizationEvent::soap_default(NULL); }
	virtual ~ns1__CustomizationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoDatastoresConfiguredEvent
#define SOAP_TYPE_ns1__NoDatastoresConfiguredEvent (1346)
/* ns1:NoDatastoresConfiguredEvent */
class SOAP_CMAC ns1__NoDatastoresConfiguredEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1346; } /* = unique id SOAP_TYPE_ns1__NoDatastoresConfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoDatastoresConfiguredEvent() { ns1__NoDatastoresConfiguredEvent::soap_default(NULL); }
	virtual ~ns1__NoDatastoresConfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AdminPasswordNotChangedEvent
#define SOAP_TYPE_ns1__AdminPasswordNotChangedEvent (1347)
/* ns1:AdminPasswordNotChangedEvent */
class SOAP_CMAC ns1__AdminPasswordNotChangedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1347; } /* = unique id SOAP_TYPE_ns1__AdminPasswordNotChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AdminPasswordNotChangedEvent() { ns1__AdminPasswordNotChangedEvent::soap_default(NULL); }
	virtual ~ns1__AdminPasswordNotChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LocalTSMEnabledEvent
#define SOAP_TYPE_ns1__LocalTSMEnabledEvent (1348)
/* ns1:LocalTSMEnabledEvent */
class SOAP_CMAC ns1__LocalTSMEnabledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1348; } /* = unique id SOAP_TYPE_ns1__LocalTSMEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LocalTSMEnabledEvent() { ns1__LocalTSMEnabledEvent::soap_default(NULL); }
	virtual ~ns1__LocalTSMEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoteTSMEnabledEvent
#define SOAP_TYPE_ns1__RemoteTSMEnabledEvent (1349)
/* ns1:RemoteTSMEnabledEvent */
class SOAP_CMAC ns1__RemoteTSMEnabledEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1349; } /* = unique id SOAP_TYPE_ns1__RemoteTSMEnabledEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoteTSMEnabledEvent() { ns1__RemoteTSMEnabledEvent::soap_default(NULL); }
	virtual ~ns1__RemoteTSMEnabledEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VimAccountPasswordChangedEvent
#define SOAP_TYPE_ns1__VimAccountPasswordChangedEvent (1350)
/* ns1:VimAccountPasswordChangedEvent */
class SOAP_CMAC ns1__VimAccountPasswordChangedEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1350; } /* = unique id SOAP_TYPE_ns1__VimAccountPasswordChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VimAccountPasswordChangedEvent() { ns1__VimAccountPasswordChangedEvent::soap_default(NULL); }
	virtual ~ns1__VimAccountPasswordChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IScsiBootFailureEvent
#define SOAP_TYPE_ns1__IScsiBootFailureEvent (1351)
/* ns1:IScsiBootFailureEvent */
class SOAP_CMAC ns1__IScsiBootFailureEvent : public ns1__HostEvent
{
public:
	virtual int soap_type() const { return 1351; } /* = unique id SOAP_TYPE_ns1__IScsiBootFailureEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IScsiBootFailureEvent() { ns1__IScsiBootFailureEvent::soap_default(NULL); }
	virtual ~ns1__IScsiBootFailureEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsCreatedEvent
#define SOAP_TYPE_ns1__DvsCreatedEvent (1353)
/* ns1:DvsCreatedEvent */
class SOAP_CMAC ns1__DvsCreatedEvent : public ns1__DvsEvent
{
public:
	ns1__FolderEventArgument *parent;	/* required element of type ns1:FolderEventArgument */
public:
	virtual int soap_type() const { return 1353; } /* = unique id SOAP_TYPE_ns1__DvsCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsCreatedEvent() { ns1__DvsCreatedEvent::soap_default(NULL); }
	virtual ~ns1__DvsCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsRenamedEvent
#define SOAP_TYPE_ns1__DvsRenamedEvent (1354)
/* ns1:DvsRenamedEvent */
class SOAP_CMAC ns1__DvsRenamedEvent : public ns1__DvsEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1354; } /* = unique id SOAP_TYPE_ns1__DvsRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsRenamedEvent() { ns1__DvsRenamedEvent::soap_default(NULL); }
	virtual ~ns1__DvsRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsReconfiguredEvent
#define SOAP_TYPE_ns1__DvsReconfiguredEvent (1355)
/* ns1:DvsReconfiguredEvent */
class SOAP_CMAC ns1__DvsReconfiguredEvent : public ns1__DvsEvent
{
public:
	ns1__DVSConfigSpec *configSpec;	/* required element of type ns1:DVSConfigSpec */
public:
	virtual int soap_type() const { return 1355; } /* = unique id SOAP_TYPE_ns1__DvsReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsReconfiguredEvent() { ns1__DvsReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__DvsReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsUpgradeAvailableEvent
#define SOAP_TYPE_ns1__DvsUpgradeAvailableEvent (1356)
/* ns1:DvsUpgradeAvailableEvent */
class SOAP_CMAC ns1__DvsUpgradeAvailableEvent : public ns1__DvsEvent
{
public:
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 1356; } /* = unique id SOAP_TYPE_ns1__DvsUpgradeAvailableEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsUpgradeAvailableEvent() { ns1__DvsUpgradeAvailableEvent::soap_default(NULL); }
	virtual ~ns1__DvsUpgradeAvailableEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsUpgradeInProgressEvent
#define SOAP_TYPE_ns1__DvsUpgradeInProgressEvent (1357)
/* ns1:DvsUpgradeInProgressEvent */
class SOAP_CMAC ns1__DvsUpgradeInProgressEvent : public ns1__DvsEvent
{
public:
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 1357; } /* = unique id SOAP_TYPE_ns1__DvsUpgradeInProgressEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsUpgradeInProgressEvent() { ns1__DvsUpgradeInProgressEvent::soap_default(NULL); }
	virtual ~ns1__DvsUpgradeInProgressEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsUpgradeRejectedEvent
#define SOAP_TYPE_ns1__DvsUpgradeRejectedEvent (1358)
/* ns1:DvsUpgradeRejectedEvent */
class SOAP_CMAC ns1__DvsUpgradeRejectedEvent : public ns1__DvsEvent
{
public:
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 1358; } /* = unique id SOAP_TYPE_ns1__DvsUpgradeRejectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsUpgradeRejectedEvent() { ns1__DvsUpgradeRejectedEvent::soap_default(NULL); }
	virtual ~ns1__DvsUpgradeRejectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsUpgradedEvent
#define SOAP_TYPE_ns1__DvsUpgradedEvent (1359)
/* ns1:DvsUpgradedEvent */
class SOAP_CMAC ns1__DvsUpgradedEvent : public ns1__DvsEvent
{
public:
	ns1__DistributedVirtualSwitchProductSpec *productInfo;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 1359; } /* = unique id SOAP_TYPE_ns1__DvsUpgradedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsUpgradedEvent() { ns1__DvsUpgradedEvent::soap_default(NULL); }
	virtual ~ns1__DvsUpgradedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostJoinedEvent
#define SOAP_TYPE_ns1__DvsHostJoinedEvent (1360)
/* ns1:DvsHostJoinedEvent */
class SOAP_CMAC ns1__DvsHostJoinedEvent : public ns1__DvsEvent
{
public:
	ns1__HostEventArgument *hostJoined;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1360; } /* = unique id SOAP_TYPE_ns1__DvsHostJoinedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostJoinedEvent() { ns1__DvsHostJoinedEvent::soap_default(NULL); }
	virtual ~ns1__DvsHostJoinedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostLeftEvent
#define SOAP_TYPE_ns1__DvsHostLeftEvent (1361)
/* ns1:DvsHostLeftEvent */
class SOAP_CMAC ns1__DvsHostLeftEvent : public ns1__DvsEvent
{
public:
	ns1__HostEventArgument *hostLeft;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1361; } /* = unique id SOAP_TYPE_ns1__DvsHostLeftEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostLeftEvent() { ns1__DvsHostLeftEvent::soap_default(NULL); }
	virtual ~ns1__DvsHostLeftEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OutOfSyncDvsHost
#define SOAP_TYPE_ns1__OutOfSyncDvsHost (1364)
/* ns1:OutOfSyncDvsHost */
class SOAP_CMAC ns1__OutOfSyncDvsHost : public ns1__DvsEvent
{
public:
	std::vector<ns1__DvsOutOfSyncHostArgument * >hostOutOfSync;	/* required element of type ns1:DvsOutOfSyncHostArgument */
public:
	virtual int soap_type() const { return 1364; } /* = unique id SOAP_TYPE_ns1__OutOfSyncDvsHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OutOfSyncDvsHost() { ns1__OutOfSyncDvsHost::soap_default(NULL); }
	virtual ~ns1__OutOfSyncDvsHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostWentOutOfSyncEvent
#define SOAP_TYPE_ns1__DvsHostWentOutOfSyncEvent (1365)
/* ns1:DvsHostWentOutOfSyncEvent */
class SOAP_CMAC ns1__DvsHostWentOutOfSyncEvent : public ns1__DvsEvent
{
public:
	ns1__DvsOutOfSyncHostArgument *hostOutOfSync;	/* required element of type ns1:DvsOutOfSyncHostArgument */
public:
	virtual int soap_type() const { return 1365; } /* = unique id SOAP_TYPE_ns1__DvsHostWentOutOfSyncEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostWentOutOfSyncEvent() { ns1__DvsHostWentOutOfSyncEvent::soap_default(NULL); }
	virtual ~ns1__DvsHostWentOutOfSyncEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostBackInSyncEvent
#define SOAP_TYPE_ns1__DvsHostBackInSyncEvent (1366)
/* ns1:DvsHostBackInSyncEvent */
class SOAP_CMAC ns1__DvsHostBackInSyncEvent : public ns1__DvsEvent
{
public:
	ns1__HostEventArgument *hostBackInSync;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1366; } /* = unique id SOAP_TYPE_ns1__DvsHostBackInSyncEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostBackInSyncEvent() { ns1__DvsHostBackInSyncEvent::soap_default(NULL); }
	virtual ~ns1__DvsHostBackInSyncEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostStatusUpdated
#define SOAP_TYPE_ns1__DvsHostStatusUpdated (1367)
/* ns1:DvsHostStatusUpdated */
class SOAP_CMAC ns1__DvsHostStatusUpdated : public ns1__DvsEvent
{
public:
	ns1__HostEventArgument *hostMember;	/* required element of type ns1:HostEventArgument */
	std::string *oldStatus;	/* optional element of type xsd:string */
	std::string *newStatus;	/* optional element of type xsd:string */
	std::string *oldStatusDetail;	/* optional element of type xsd:string */
	std::string *newStatusDetail;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1367; } /* = unique id SOAP_TYPE_ns1__DvsHostStatusUpdated */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostStatusUpdated() { ns1__DvsHostStatusUpdated::soap_default(NULL); }
	virtual ~ns1__DvsHostStatusUpdated() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortCreatedEvent
#define SOAP_TYPE_ns1__DvsPortCreatedEvent (1368)
/* ns1:DvsPortCreatedEvent */
class SOAP_CMAC ns1__DvsPortCreatedEvent : public ns1__DvsEvent
{
public:
	std::vector<std::string >portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1368; } /* = unique id SOAP_TYPE_ns1__DvsPortCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortCreatedEvent() { ns1__DvsPortCreatedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortReconfiguredEvent
#define SOAP_TYPE_ns1__DvsPortReconfiguredEvent (1369)
/* ns1:DvsPortReconfiguredEvent */
class SOAP_CMAC ns1__DvsPortReconfiguredEvent : public ns1__DvsEvent
{
public:
	std::vector<std::string >portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1369; } /* = unique id SOAP_TYPE_ns1__DvsPortReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortReconfiguredEvent() { ns1__DvsPortReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortDeletedEvent
#define SOAP_TYPE_ns1__DvsPortDeletedEvent (1370)
/* ns1:DvsPortDeletedEvent */
class SOAP_CMAC ns1__DvsPortDeletedEvent : public ns1__DvsEvent
{
public:
	std::vector<std::string >portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1370; } /* = unique id SOAP_TYPE_ns1__DvsPortDeletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortDeletedEvent() { ns1__DvsPortDeletedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortDeletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortConnectedEvent
#define SOAP_TYPE_ns1__DvsPortConnectedEvent (1371)
/* ns1:DvsPortConnectedEvent */
class SOAP_CMAC ns1__DvsPortConnectedEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
	ns1__DistributedVirtualSwitchPortConnectee *connectee;	/* optional element of type ns1:DistributedVirtualSwitchPortConnectee */
public:
	virtual int soap_type() const { return 1371; } /* = unique id SOAP_TYPE_ns1__DvsPortConnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortConnectedEvent() { ns1__DvsPortConnectedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortConnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortDisconnectedEvent
#define SOAP_TYPE_ns1__DvsPortDisconnectedEvent (1372)
/* ns1:DvsPortDisconnectedEvent */
class SOAP_CMAC ns1__DvsPortDisconnectedEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
	ns1__DistributedVirtualSwitchPortConnectee *connectee;	/* optional element of type ns1:DistributedVirtualSwitchPortConnectee */
public:
	virtual int soap_type() const { return 1372; } /* = unique id SOAP_TYPE_ns1__DvsPortDisconnectedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortDisconnectedEvent() { ns1__DvsPortDisconnectedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortDisconnectedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortLinkUpEvent
#define SOAP_TYPE_ns1__DvsPortLinkUpEvent (1373)
/* ns1:DvsPortLinkUpEvent */
class SOAP_CMAC ns1__DvsPortLinkUpEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1373; } /* = unique id SOAP_TYPE_ns1__DvsPortLinkUpEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortLinkUpEvent() { ns1__DvsPortLinkUpEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortLinkUpEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortLinkDownEvent
#define SOAP_TYPE_ns1__DvsPortLinkDownEvent (1374)
/* ns1:DvsPortLinkDownEvent */
class SOAP_CMAC ns1__DvsPortLinkDownEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1374; } /* = unique id SOAP_TYPE_ns1__DvsPortLinkDownEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortLinkDownEvent() { ns1__DvsPortLinkDownEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortLinkDownEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortJoinPortgroupEvent
#define SOAP_TYPE_ns1__DvsPortJoinPortgroupEvent (1375)
/* ns1:DvsPortJoinPortgroupEvent */
class SOAP_CMAC ns1__DvsPortJoinPortgroupEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
	std::string portgroupKey;	/* required element of type xsd:string */
	std::string portgroupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1375; } /* = unique id SOAP_TYPE_ns1__DvsPortJoinPortgroupEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortJoinPortgroupEvent() { ns1__DvsPortJoinPortgroupEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortJoinPortgroupEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortLeavePortgroupEvent
#define SOAP_TYPE_ns1__DvsPortLeavePortgroupEvent (1376)
/* ns1:DvsPortLeavePortgroupEvent */
class SOAP_CMAC ns1__DvsPortLeavePortgroupEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
	std::string portgroupKey;	/* required element of type xsd:string */
	std::string portgroupName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1376; } /* = unique id SOAP_TYPE_ns1__DvsPortLeavePortgroupEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortLeavePortgroupEvent() { ns1__DvsPortLeavePortgroupEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortLeavePortgroupEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortBlockedEvent
#define SOAP_TYPE_ns1__DvsPortBlockedEvent (1377)
/* ns1:DvsPortBlockedEvent */
class SOAP_CMAC ns1__DvsPortBlockedEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
	std::string *statusDetail;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1377; } /* = unique id SOAP_TYPE_ns1__DvsPortBlockedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortBlockedEvent() { ns1__DvsPortBlockedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortBlockedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortUnblockedEvent
#define SOAP_TYPE_ns1__DvsPortUnblockedEvent (1378)
/* ns1:DvsPortUnblockedEvent */
class SOAP_CMAC ns1__DvsPortUnblockedEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1378; } /* = unique id SOAP_TYPE_ns1__DvsPortUnblockedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortUnblockedEvent() { ns1__DvsPortUnblockedEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortUnblockedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortEnteredPassthruEvent
#define SOAP_TYPE_ns1__DvsPortEnteredPassthruEvent (1379)
/* ns1:DvsPortEnteredPassthruEvent */
class SOAP_CMAC ns1__DvsPortEnteredPassthruEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1379; } /* = unique id SOAP_TYPE_ns1__DvsPortEnteredPassthruEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortEnteredPassthruEvent() { ns1__DvsPortEnteredPassthruEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortEnteredPassthruEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsPortExitedPassthruEvent
#define SOAP_TYPE_ns1__DvsPortExitedPassthruEvent (1380)
/* ns1:DvsPortExitedPassthruEvent */
class SOAP_CMAC ns1__DvsPortExitedPassthruEvent : public ns1__DvsEvent
{
public:
	std::string portKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1380; } /* = unique id SOAP_TYPE_ns1__DvsPortExitedPassthruEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsPortExitedPassthruEvent() { ns1__DvsPortExitedPassthruEvent::soap_default(NULL); }
	virtual ~ns1__DvsPortExitedPassthruEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsDestroyedEvent
#define SOAP_TYPE_ns1__DvsDestroyedEvent (1381)
/* ns1:DvsDestroyedEvent */
class SOAP_CMAC ns1__DvsDestroyedEvent : public ns1__DvsEvent
{
public:
	virtual int soap_type() const { return 1381; } /* = unique id SOAP_TYPE_ns1__DvsDestroyedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsDestroyedEvent() { ns1__DvsDestroyedEvent::soap_default(NULL); }
	virtual ~ns1__DvsDestroyedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsMergedEvent
#define SOAP_TYPE_ns1__DvsMergedEvent (1382)
/* ns1:DvsMergedEvent */
class SOAP_CMAC ns1__DvsMergedEvent : public ns1__DvsEvent
{
public:
	ns1__DvsEventArgument *sourceDvs;	/* required element of type ns1:DvsEventArgument */
	ns1__DvsEventArgument *destinationDvs;	/* required element of type ns1:DvsEventArgument */
public:
	virtual int soap_type() const { return 1382; } /* = unique id SOAP_TYPE_ns1__DvsMergedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsMergedEvent() { ns1__DvsMergedEvent::soap_default(NULL); }
	virtual ~ns1__DvsMergedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupCreatedEvent
#define SOAP_TYPE_ns1__DVPortgroupCreatedEvent (1384)
/* ns1:DVPortgroupCreatedEvent */
class SOAP_CMAC ns1__DVPortgroupCreatedEvent : public ns1__DVPortgroupEvent
{
public:
	virtual int soap_type() const { return 1384; } /* = unique id SOAP_TYPE_ns1__DVPortgroupCreatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupCreatedEvent() { ns1__DVPortgroupCreatedEvent::soap_default(NULL); }
	virtual ~ns1__DVPortgroupCreatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupRenamedEvent
#define SOAP_TYPE_ns1__DVPortgroupRenamedEvent (1385)
/* ns1:DVPortgroupRenamedEvent */
class SOAP_CMAC ns1__DVPortgroupRenamedEvent : public ns1__DVPortgroupEvent
{
public:
	std::string oldName;	/* required element of type xsd:string */
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1385; } /* = unique id SOAP_TYPE_ns1__DVPortgroupRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupRenamedEvent() { ns1__DVPortgroupRenamedEvent::soap_default(NULL); }
	virtual ~ns1__DVPortgroupRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupReconfiguredEvent
#define SOAP_TYPE_ns1__DVPortgroupReconfiguredEvent (1386)
/* ns1:DVPortgroupReconfiguredEvent */
class SOAP_CMAC ns1__DVPortgroupReconfiguredEvent : public ns1__DVPortgroupEvent
{
public:
	ns1__DVPortgroupConfigSpec *configSpec;	/* required element of type ns1:DVPortgroupConfigSpec */
public:
	virtual int soap_type() const { return 1386; } /* = unique id SOAP_TYPE_ns1__DVPortgroupReconfiguredEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupReconfiguredEvent() { ns1__DVPortgroupReconfiguredEvent::soap_default(NULL); }
	virtual ~ns1__DVPortgroupReconfiguredEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortgroupDestroyedEvent
#define SOAP_TYPE_ns1__DVPortgroupDestroyedEvent (1387)
/* ns1:DVPortgroupDestroyedEvent */
class SOAP_CMAC ns1__DVPortgroupDestroyedEvent : public ns1__DVPortgroupEvent
{
public:
	virtual int soap_type() const { return 1387; } /* = unique id SOAP_TYPE_ns1__DVPortgroupDestroyedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortgroupDestroyedEvent() { ns1__DVPortgroupDestroyedEvent::soap_default(NULL); }
	virtual ~ns1__DVPortgroupDestroyedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsInvocationFailedEvent
#define SOAP_TYPE_ns1__DrsInvocationFailedEvent (1388)
/* ns1:DrsInvocationFailedEvent */
class SOAP_CMAC ns1__DrsInvocationFailedEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1388; } /* = unique id SOAP_TYPE_ns1__DrsInvocationFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsInvocationFailedEvent() { ns1__DrsInvocationFailedEvent::soap_default(NULL); }
	virtual ~ns1__DrsInvocationFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsRecoveredFromFailureEvent
#define SOAP_TYPE_ns1__DrsRecoveredFromFailureEvent (1389)
/* ns1:DrsRecoveredFromFailureEvent */
class SOAP_CMAC ns1__DrsRecoveredFromFailureEvent : public ns1__ClusterEvent
{
public:
	virtual int soap_type() const { return 1389; } /* = unique id SOAP_TYPE_ns1__DrsRecoveredFromFailureEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsRecoveredFromFailureEvent() { ns1__DrsRecoveredFromFailureEvent::soap_default(NULL); }
	virtual ~ns1__DrsRecoveredFromFailureEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmReloadFromPathEvent
#define SOAP_TYPE_ns1__VmReloadFromPathEvent (1390)
/* ns1:VmReloadFromPathEvent */
class SOAP_CMAC ns1__VmReloadFromPathEvent : public ns1__VmEvent
{
public:
	std::string configPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1390; } /* = unique id SOAP_TYPE_ns1__VmReloadFromPathEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmReloadFromPathEvent() { ns1__VmReloadFromPathEvent::soap_default(NULL); }
	virtual ~ns1__VmReloadFromPathEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmReloadFromPathFailedEvent
#define SOAP_TYPE_ns1__VmReloadFromPathFailedEvent (1391)
/* ns1:VmReloadFromPathFailedEvent */
class SOAP_CMAC ns1__VmReloadFromPathFailedEvent : public ns1__VmEvent
{
public:
	std::string configPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1391; } /* = unique id SOAP_TYPE_ns1__VmReloadFromPathFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmReloadFromPathFailedEvent() { ns1__VmReloadFromPathFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmReloadFromPathFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ManagedEntityEventArgument
#define SOAP_TYPE_ns1__ManagedEntityEventArgument (1395)
/* ns1:ManagedEntityEventArgument */
class SOAP_CMAC ns1__ManagedEntityEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1395; } /* = unique id SOAP_TYPE_ns1__ManagedEntityEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ManagedEntityEventArgument() { ns1__ManagedEntityEventArgument::soap_default(NULL); }
	virtual ~ns1__ManagedEntityEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FolderEventArgument
#define SOAP_TYPE_ns1__FolderEventArgument (1396)
/* ns1:FolderEventArgument */
class SOAP_CMAC ns1__FolderEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *folder;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1396; } /* = unique id SOAP_TYPE_ns1__FolderEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FolderEventArgument() { ns1__FolderEventArgument::soap_default(NULL); }
	virtual ~ns1__FolderEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterEventArgument
#define SOAP_TYPE_ns1__DatacenterEventArgument (1397)
/* ns1:DatacenterEventArgument */
class SOAP_CMAC ns1__DatacenterEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *datacenter;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1397; } /* = unique id SOAP_TYPE_ns1__DatacenterEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterEventArgument() { ns1__DatacenterEventArgument::soap_default(NULL); }
	virtual ~ns1__DatacenterEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ComputeResourceEventArgument
#define SOAP_TYPE_ns1__ComputeResourceEventArgument (1398)
/* ns1:ComputeResourceEventArgument */
class SOAP_CMAC ns1__ComputeResourceEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *computeResource;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1398; } /* = unique id SOAP_TYPE_ns1__ComputeResourceEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComputeResourceEventArgument() { ns1__ComputeResourceEventArgument::soap_default(NULL); }
	virtual ~ns1__ComputeResourceEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResourcePoolEventArgument
#define SOAP_TYPE_ns1__ResourcePoolEventArgument (1399)
/* ns1:ResourcePoolEventArgument */
class SOAP_CMAC ns1__ResourcePoolEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *resourcePool;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1399; } /* = unique id SOAP_TYPE_ns1__ResourcePoolEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResourcePoolEventArgument() { ns1__ResourcePoolEventArgument::soap_default(NULL); }
	virtual ~ns1__ResourcePoolEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostEventArgument
#define SOAP_TYPE_ns1__HostEventArgument (1400)
/* ns1:HostEventArgument */
class SOAP_CMAC ns1__HostEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1400; } /* = unique id SOAP_TYPE_ns1__HostEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostEventArgument() { ns1__HostEventArgument::soap_default(NULL); }
	virtual ~ns1__HostEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmEventArgument
#define SOAP_TYPE_ns1__VmEventArgument (1402)
/* ns1:VmEventArgument */
class SOAP_CMAC ns1__VmEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1402; } /* = unique id SOAP_TYPE_ns1__VmEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmEventArgument() { ns1__VmEventArgument::soap_default(NULL); }
	virtual ~ns1__VmEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreEventArgument
#define SOAP_TYPE_ns1__DatastoreEventArgument (1404)
/* ns1:DatastoreEventArgument */
class SOAP_CMAC ns1__DatastoreEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1404; } /* = unique id SOAP_TYPE_ns1__DatastoreEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreEventArgument() { ns1__DatastoreEventArgument::soap_default(NULL); }
	virtual ~ns1__DatastoreEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkEventArgument
#define SOAP_TYPE_ns1__NetworkEventArgument (1405)
/* ns1:NetworkEventArgument */
class SOAP_CMAC ns1__NetworkEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *network;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1405; } /* = unique id SOAP_TYPE_ns1__NetworkEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkEventArgument() { ns1__NetworkEventArgument::soap_default(NULL); }
	virtual ~ns1__NetworkEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlarmEventArgument
#define SOAP_TYPE_ns1__AlarmEventArgument (1406)
/* ns1:AlarmEventArgument */
class SOAP_CMAC ns1__AlarmEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *alarm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1406; } /* = unique id SOAP_TYPE_ns1__AlarmEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlarmEventArgument() { ns1__AlarmEventArgument::soap_default(NULL); }
	virtual ~ns1__AlarmEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskEventArgument
#define SOAP_TYPE_ns1__ScheduledTaskEventArgument (1407)
/* ns1:ScheduledTaskEventArgument */
class SOAP_CMAC ns1__ScheduledTaskEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *scheduledTask;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1407; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskEventArgument() { ns1__ScheduledTaskEventArgument::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsEventArgument
#define SOAP_TYPE_ns1__DvsEventArgument (1409)
/* ns1:DvsEventArgument */
class SOAP_CMAC ns1__DvsEventArgument : public ns1__EntityEventArgument
{
public:
	ns1__ManagedObjectReference *dvs;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1409; } /* = unique id SOAP_TYPE_ns1__DvsEventArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsEventArgument() { ns1__DvsEventArgument::soap_default(NULL); }
	virtual ~ns1__DvsEventArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AdminDisabled
#define SOAP_TYPE_ns1__AdminDisabled (1420)
/* ns1:AdminDisabled */
class SOAP_CMAC ns1__AdminDisabled : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1420; } /* = unique id SOAP_TYPE_ns1__AdminDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AdminDisabled() { ns1__AdminDisabled::soap_default(NULL); }
	virtual ~ns1__AdminDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AdminNotDisabled
#define SOAP_TYPE_ns1__AdminNotDisabled (1421)
/* ns1:AdminNotDisabled */
class SOAP_CMAC ns1__AdminNotDisabled : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1421; } /* = unique id SOAP_TYPE_ns1__AdminNotDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AdminNotDisabled() { ns1__AdminNotDisabled::soap_default(NULL); }
	virtual ~ns1__AdminNotDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AffinityConfigured
#define SOAP_TYPE_ns1__AffinityConfigured (1422)
/* ns1:AffinityConfigured */
class SOAP_CMAC ns1__AffinityConfigured : public ns1__MigrationFault
{
public:
	std::vector<std::string >configuredAffinity;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1422; } /* = unique id SOAP_TYPE_ns1__AffinityConfigured */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AffinityConfigured() { ns1__AffinityConfigured::soap_default(NULL); }
	virtual ~ns1__AffinityConfigured() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AgentInstallFailed
#define SOAP_TYPE_ns1__AgentInstallFailed (1423)
/* ns1:AgentInstallFailed */
class SOAP_CMAC ns1__AgentInstallFailed : public ns1__HostConnectFault
{
public:
	std::string *reason;	/* optional element of type xsd:string */
	int *statusCode;	/* optional element of type xsd:int */
	std::string *installerOutput;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1423; } /* = unique id SOAP_TYPE_ns1__AgentInstallFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AgentInstallFailed() { ns1__AgentInstallFailed::soap_default(NULL); }
	virtual ~ns1__AgentInstallFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlreadyBeingManaged
#define SOAP_TYPE_ns1__AlreadyBeingManaged (1424)
/* ns1:AlreadyBeingManaged */
class SOAP_CMAC ns1__AlreadyBeingManaged : public ns1__HostConnectFault
{
public:
	std::string ipAddress;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1424; } /* = unique id SOAP_TYPE_ns1__AlreadyBeingManaged */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlreadyBeingManaged() { ns1__AlreadyBeingManaged::soap_default(NULL); }
	virtual ~ns1__AlreadyBeingManaged() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AlreadyConnected
#define SOAP_TYPE_ns1__AlreadyConnected (1425)
/* ns1:AlreadyConnected */
class SOAP_CMAC ns1__AlreadyConnected : public ns1__HostConnectFault
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1425; } /* = unique id SOAP_TYPE_ns1__AlreadyConnected */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AlreadyConnected() { ns1__AlreadyConnected::soap_default(NULL); }
	virtual ~ns1__AlreadyConnected() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ApplicationQuiesceFault
#define SOAP_TYPE_ns1__ApplicationQuiesceFault (1428)
/* ns1:ApplicationQuiesceFault */
class SOAP_CMAC ns1__ApplicationQuiesceFault : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1428; } /* = unique id SOAP_TYPE_ns1__ApplicationQuiesceFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ApplicationQuiesceFault() { ns1__ApplicationQuiesceFault::soap_default(NULL); }
	virtual ~ns1__ApplicationQuiesceFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BlockedByFirewall
#define SOAP_TYPE_ns1__BlockedByFirewall (1430)
/* ns1:BlockedByFirewall */
class SOAP_CMAC ns1__BlockedByFirewall : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1430; } /* = unique id SOAP_TYPE_ns1__BlockedByFirewall */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BlockedByFirewall() { ns1__BlockedByFirewall::soap_default(NULL); }
	virtual ~ns1__BlockedByFirewall() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessFile
#define SOAP_TYPE_ns1__CannotAccessFile (1431)
/* ns1:CannotAccessFile */
class SOAP_CMAC ns1__CannotAccessFile : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1431; } /* = unique id SOAP_TYPE_ns1__CannotAccessFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessFile() { ns1__CannotAccessFile::soap_default(NULL); }
	virtual ~ns1__CannotAccessFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessVmComponent
#define SOAP_TYPE_ns1__CannotAccessVmComponent (1434)
/* ns1:CannotAccessVmComponent */
class SOAP_CMAC ns1__CannotAccessVmComponent : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1434; } /* = unique id SOAP_TYPE_ns1__CannotAccessVmComponent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessVmComponent() { ns1__CannotAccessVmComponent::soap_default(NULL); }
	virtual ~ns1__CannotAccessVmComponent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAddHostWithFTVmAsStandalone
#define SOAP_TYPE_ns1__CannotAddHostWithFTVmAsStandalone (1438)
/* ns1:CannotAddHostWithFTVmAsStandalone */
class SOAP_CMAC ns1__CannotAddHostWithFTVmAsStandalone : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1438; } /* = unique id SOAP_TYPE_ns1__CannotAddHostWithFTVmAsStandalone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAddHostWithFTVmAsStandalone() { ns1__CannotAddHostWithFTVmAsStandalone::soap_default(NULL); }
	virtual ~ns1__CannotAddHostWithFTVmAsStandalone() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAddHostWithFTVmToDifferentCluster
#define SOAP_TYPE_ns1__CannotAddHostWithFTVmToDifferentCluster (1439)
/* ns1:CannotAddHostWithFTVmToDifferentCluster */
class SOAP_CMAC ns1__CannotAddHostWithFTVmToDifferentCluster : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1439; } /* = unique id SOAP_TYPE_ns1__CannotAddHostWithFTVmToDifferentCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAddHostWithFTVmToDifferentCluster() { ns1__CannotAddHostWithFTVmToDifferentCluster::soap_default(NULL); }
	virtual ~ns1__CannotAddHostWithFTVmToDifferentCluster() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAddHostWithFTVmToNonHACluster
#define SOAP_TYPE_ns1__CannotAddHostWithFTVmToNonHACluster (1440)
/* ns1:CannotAddHostWithFTVmToNonHACluster */
class SOAP_CMAC ns1__CannotAddHostWithFTVmToNonHACluster : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1440; } /* = unique id SOAP_TYPE_ns1__CannotAddHostWithFTVmToNonHACluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAddHostWithFTVmToNonHACluster() { ns1__CannotAddHostWithFTVmToNonHACluster::soap_default(NULL); }
	virtual ~ns1__CannotAddHostWithFTVmToNonHACluster() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotChangeDrsBehaviorForFtSecondary
#define SOAP_TYPE_ns1__CannotChangeDrsBehaviorForFtSecondary (1441)
/* ns1:CannotChangeDrsBehaviorForFtSecondary */
class SOAP_CMAC ns1__CannotChangeDrsBehaviorForFtSecondary : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1441; } /* = unique id SOAP_TYPE_ns1__CannotChangeDrsBehaviorForFtSecondary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotChangeDrsBehaviorForFtSecondary() { ns1__CannotChangeDrsBehaviorForFtSecondary::soap_default(NULL); }
	virtual ~ns1__CannotChangeDrsBehaviorForFtSecondary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotChangeHaSettingsForFtSecondary
#define SOAP_TYPE_ns1__CannotChangeHaSettingsForFtSecondary (1442)
/* ns1:CannotChangeHaSettingsForFtSecondary */
class SOAP_CMAC ns1__CannotChangeHaSettingsForFtSecondary : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1442; } /* = unique id SOAP_TYPE_ns1__CannotChangeHaSettingsForFtSecondary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotChangeHaSettingsForFtSecondary() { ns1__CannotChangeHaSettingsForFtSecondary::soap_default(NULL); }
	virtual ~ns1__CannotChangeHaSettingsForFtSecondary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotCreateFile
#define SOAP_TYPE_ns1__CannotCreateFile (1443)
/* ns1:CannotCreateFile */
class SOAP_CMAC ns1__CannotCreateFile : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1443; } /* = unique id SOAP_TYPE_ns1__CannotCreateFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotCreateFile() { ns1__CannotCreateFile::soap_default(NULL); }
	virtual ~ns1__CannotCreateFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotDecryptPasswords
#define SOAP_TYPE_ns1__CannotDecryptPasswords (1444)
/* ns1:CannotDecryptPasswords */
class SOAP_CMAC ns1__CannotDecryptPasswords : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1444; } /* = unique id SOAP_TYPE_ns1__CannotDecryptPasswords */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotDecryptPasswords() { ns1__CannotDecryptPasswords::soap_default(NULL); }
	virtual ~ns1__CannotDecryptPasswords() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotDeleteFile
#define SOAP_TYPE_ns1__CannotDeleteFile (1445)
/* ns1:CannotDeleteFile */
class SOAP_CMAC ns1__CannotDeleteFile : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1445; } /* = unique id SOAP_TYPE_ns1__CannotDeleteFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotDeleteFile() { ns1__CannotDeleteFile::soap_default(NULL); }
	virtual ~ns1__CannotDeleteFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotDisableSnapshot
#define SOAP_TYPE_ns1__CannotDisableSnapshot (1447)
/* ns1:CannotDisableSnapshot */
class SOAP_CMAC ns1__CannotDisableSnapshot : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1447; } /* = unique id SOAP_TYPE_ns1__CannotDisableSnapshot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotDisableSnapshot() { ns1__CannotDisableSnapshot::soap_default(NULL); }
	virtual ~ns1__CannotDisableSnapshot() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotModifyConfigCpuRequirements
#define SOAP_TYPE_ns1__CannotModifyConfigCpuRequirements (1449)
/* ns1:CannotModifyConfigCpuRequirements */
class SOAP_CMAC ns1__CannotModifyConfigCpuRequirements : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1449; } /* = unique id SOAP_TYPE_ns1__CannotModifyConfigCpuRequirements */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotModifyConfigCpuRequirements() { ns1__CannotModifyConfigCpuRequirements::soap_default(NULL); }
	virtual ~ns1__CannotModifyConfigCpuRequirements() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClockSkew
#define SOAP_TYPE_ns1__ClockSkew (1452)
/* ns1:ClockSkew */
class SOAP_CMAC ns1__ClockSkew : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1452; } /* = unique id SOAP_TYPE_ns1__ClockSkew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClockSkew() { ns1__ClockSkew::soap_default(NULL); }
	virtual ~ns1__ClockSkew() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CloneFromSnapshotNotSupported
#define SOAP_TYPE_ns1__CloneFromSnapshotNotSupported (1453)
/* ns1:CloneFromSnapshotNotSupported */
class SOAP_CMAC ns1__CloneFromSnapshotNotSupported : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1453; } /* = unique id SOAP_TYPE_ns1__CloneFromSnapshotNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CloneFromSnapshotNotSupported() { ns1__CloneFromSnapshotNotSupported::soap_default(NULL); }
	virtual ~ns1__CloneFromSnapshotNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CpuHotPlugNotSupported
#define SOAP_TYPE_ns1__CpuHotPlugNotSupported (1457)
/* ns1:CpuHotPlugNotSupported */
class SOAP_CMAC ns1__CpuHotPlugNotSupported : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1457; } /* = unique id SOAP_TYPE_ns1__CpuHotPlugNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CpuHotPlugNotSupported() { ns1__CpuHotPlugNotSupported::soap_default(NULL); }
	virtual ~ns1__CpuHotPlugNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationPending
#define SOAP_TYPE_ns1__CustomizationPending (1462)
/* ns1:CustomizationPending */
class SOAP_CMAC ns1__CustomizationPending : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1462; } /* = unique id SOAP_TYPE_ns1__CustomizationPending */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationPending() { ns1__CustomizationPending::soap_default(NULL); }
	virtual ~ns1__CustomizationPending() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatacenterMismatch
#define SOAP_TYPE_ns1__DatacenterMismatch (1468)
/* ns1:DatacenterMismatch */
class SOAP_CMAC ns1__DatacenterMismatch : public ns1__MigrationFault
{
public:
	std::vector<ns1__DatacenterMismatchArgument * >invalidArgument;	/* required element of type ns1:DatacenterMismatchArgument */
	ns1__ManagedObjectReference *expectedDatacenter;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1468; } /* = unique id SOAP_TYPE_ns1__DatacenterMismatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatacenterMismatch() { ns1__DatacenterMismatch::soap_default(NULL); }
	virtual ~ns1__DatacenterMismatch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreNotWritableOnHost
#define SOAP_TYPE_ns1__DatastoreNotWritableOnHost (1469)
/* ns1:DatastoreNotWritableOnHost */
class SOAP_CMAC ns1__DatastoreNotWritableOnHost : public ns1__InvalidDatastore
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1469; } /* = unique id SOAP_TYPE_ns1__DatastoreNotWritableOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreNotWritableOnHost() { ns1__DatastoreNotWritableOnHost::soap_default(NULL); }
	virtual ~ns1__DatastoreNotWritableOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisableAdminNotSupported
#define SOAP_TYPE_ns1__DisableAdminNotSupported (1478)
/* ns1:DisableAdminNotSupported */
class SOAP_CMAC ns1__DisableAdminNotSupported : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1478; } /* = unique id SOAP_TYPE_ns1__DisableAdminNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisableAdminNotSupported() { ns1__DisableAdminNotSupported::soap_default(NULL); }
	virtual ~ns1__DisableAdminNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisallowedMigrationDeviceAttached
#define SOAP_TYPE_ns1__DisallowedMigrationDeviceAttached (1480)
/* ns1:DisallowedMigrationDeviceAttached */
class SOAP_CMAC ns1__DisallowedMigrationDeviceAttached : public ns1__MigrationFault
{
public:
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1480; } /* = unique id SOAP_TYPE_ns1__DisallowedMigrationDeviceAttached */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisallowedMigrationDeviceAttached() { ns1__DisallowedMigrationDeviceAttached::soap_default(NULL); }
	virtual ~ns1__DisallowedMigrationDeviceAttached() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiskMoveTypeNotSupported
#define SOAP_TYPE_ns1__DiskMoveTypeNotSupported (1482)
/* ns1:DiskMoveTypeNotSupported */
class SOAP_CMAC ns1__DiskMoveTypeNotSupported : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1482; } /* = unique id SOAP_TYPE_ns1__DiskMoveTypeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiskMoveTypeNotSupported() { ns1__DiskMoveTypeNotSupported::soap_default(NULL); }
	virtual ~ns1__DiskMoveTypeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DomainNotFound
#define SOAP_TYPE_ns1__DomainNotFound (1484)
/* ns1:DomainNotFound */
class SOAP_CMAC ns1__DomainNotFound : public ns1__ActiveDirectoryFault
{
public:
	std::string domainName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1484; } /* = unique id SOAP_TYPE_ns1__DomainNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DomainNotFound() { ns1__DomainNotFound::soap_default(NULL); }
	virtual ~ns1__DomainNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsNotAuthorized
#define SOAP_TYPE_ns1__DvsNotAuthorized (1489)
/* ns1:DvsNotAuthorized */
class SOAP_CMAC ns1__DvsNotAuthorized : public ns1__DvsFault
{
public:
	std::string *sessionExtensionKey;	/* optional element of type xsd:string */
	std::string *dvsExtensionKey;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1489; } /* = unique id SOAP_TYPE_ns1__DvsNotAuthorized */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsNotAuthorized() { ns1__DvsNotAuthorized::soap_default(NULL); }
	virtual ~ns1__DvsNotAuthorized() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsOperationBulkFault
#define SOAP_TYPE_ns1__DvsOperationBulkFault (1492)
/* ns1:DvsOperationBulkFault */
class SOAP_CMAC ns1__DvsOperationBulkFault : public ns1__DvsFault
{
public:
	std::vector<ns1__DvsOperationBulkFaultFaultOnHost * >hostFault;	/* required element of type ns1:DvsOperationBulkFaultFaultOnHost */
public:
	virtual int soap_type() const { return 1492; } /* = unique id SOAP_TYPE_ns1__DvsOperationBulkFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsOperationBulkFault() { ns1__DvsOperationBulkFault::soap_default(NULL); }
	virtual ~ns1__DvsOperationBulkFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsScopeViolated
#define SOAP_TYPE_ns1__DvsScopeViolated (1493)
/* ns1:DvsScopeViolated */
class SOAP_CMAC ns1__DvsScopeViolated : public ns1__DvsFault
{
public:
	std::vector<ns1__ManagedObjectReference * >scope;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *entity;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1493; } /* = unique id SOAP_TYPE_ns1__DvsScopeViolated */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsScopeViolated() { ns1__DvsScopeViolated::soap_default(NULL); }
	virtual ~ns1__DvsScopeViolated() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EightHostLimitViolated
#define SOAP_TYPE_ns1__EightHostLimitViolated (1504)
/* ns1:EightHostLimitViolated */
class SOAP_CMAC ns1__EightHostLimitViolated : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1504; } /* = unique id SOAP_TYPE_ns1__EightHostLimitViolated */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EightHostLimitViolated() { ns1__EightHostLimitViolated::soap_default(NULL); }
	virtual ~ns1__EightHostLimitViolated() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExpiredFeatureLicense
#define SOAP_TYPE_ns1__ExpiredFeatureLicense (1507)
/* ns1:ExpiredFeatureLicense */
class SOAP_CMAC ns1__ExpiredFeatureLicense : public ns1__NotEnoughLicenses
{
public:
	std::string feature;	/* required element of type xsd:string */
	int count;	/* required element of type xsd:int */
	time_t expirationDate;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 1507; } /* = unique id SOAP_TYPE_ns1__ExpiredFeatureLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExpiredFeatureLicense() { ns1__ExpiredFeatureLicense::soap_default(NULL); }
	virtual ~ns1__ExpiredFeatureLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceAntiAffinityViolated
#define SOAP_TYPE_ns1__FaultToleranceAntiAffinityViolated (1510)
/* ns1:FaultToleranceAntiAffinityViolated */
class SOAP_CMAC ns1__FaultToleranceAntiAffinityViolated : public ns1__MigrationFault
{
public:
	std::string hostName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1510; } /* = unique id SOAP_TYPE_ns1__FaultToleranceAntiAffinityViolated */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceAntiAffinityViolated() { ns1__FaultToleranceAntiAffinityViolated::soap_default(NULL); }
	virtual ~ns1__FaultToleranceAntiAffinityViolated() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceCannotEditMem
#define SOAP_TYPE_ns1__FaultToleranceCannotEditMem (1511)
/* ns1:FaultToleranceCannotEditMem */
class SOAP_CMAC ns1__FaultToleranceCannotEditMem : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1511; } /* = unique id SOAP_TYPE_ns1__FaultToleranceCannotEditMem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceCannotEditMem() { ns1__FaultToleranceCannotEditMem::soap_default(NULL); }
	virtual ~ns1__FaultToleranceCannotEditMem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceNeedsThickDisk
#define SOAP_TYPE_ns1__FaultToleranceNeedsThickDisk (1513)
/* ns1:FaultToleranceNeedsThickDisk */
class SOAP_CMAC ns1__FaultToleranceNeedsThickDisk : public ns1__MigrationFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1513; } /* = unique id SOAP_TYPE_ns1__FaultToleranceNeedsThickDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceNeedsThickDisk() { ns1__FaultToleranceNeedsThickDisk::soap_default(NULL); }
	virtual ~ns1__FaultToleranceNeedsThickDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceNotLicensed
#define SOAP_TYPE_ns1__FaultToleranceNotLicensed (1514)
/* ns1:FaultToleranceNotLicensed */
class SOAP_CMAC ns1__FaultToleranceNotLicensed : public ns1__VmFaultToleranceIssue
{
public:
	std::string *hostName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1514; } /* = unique id SOAP_TYPE_ns1__FaultToleranceNotLicensed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceNotLicensed() { ns1__FaultToleranceNotLicensed::soap_default(NULL); }
	virtual ~ns1__FaultToleranceNotLicensed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceNotSameBuild
#define SOAP_TYPE_ns1__FaultToleranceNotSameBuild (1515)
/* ns1:FaultToleranceNotSameBuild */
class SOAP_CMAC ns1__FaultToleranceNotSameBuild : public ns1__MigrationFault
{
public:
	std::string build;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1515; } /* = unique id SOAP_TYPE_ns1__FaultToleranceNotSameBuild */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceNotSameBuild() { ns1__FaultToleranceNotSameBuild::soap_default(NULL); }
	virtual ~ns1__FaultToleranceNotSameBuild() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultTolerancePrimaryPowerOnNotAttempted
#define SOAP_TYPE_ns1__FaultTolerancePrimaryPowerOnNotAttempted (1516)
/* ns1:FaultTolerancePrimaryPowerOnNotAttempted */
class SOAP_CMAC ns1__FaultTolerancePrimaryPowerOnNotAttempted : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *secondaryVm;	/* required element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *primaryVm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1516; } /* = unique id SOAP_TYPE_ns1__FaultTolerancePrimaryPowerOnNotAttempted */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultTolerancePrimaryPowerOnNotAttempted() { ns1__FaultTolerancePrimaryPowerOnNotAttempted::soap_default(NULL); }
	virtual ~ns1__FaultTolerancePrimaryPowerOnNotAttempted() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileAlreadyExists
#define SOAP_TYPE_ns1__FileAlreadyExists (1517)
/* ns1:FileAlreadyExists */
class SOAP_CMAC ns1__FileAlreadyExists : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1517; } /* = unique id SOAP_TYPE_ns1__FileAlreadyExists */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileAlreadyExists() { ns1__FileAlreadyExists::soap_default(NULL); }
	virtual ~ns1__FileAlreadyExists() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileLocked
#define SOAP_TYPE_ns1__FileLocked (1520)
/* ns1:FileLocked */
class SOAP_CMAC ns1__FileLocked : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1520; } /* = unique id SOAP_TYPE_ns1__FileLocked */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileLocked() { ns1__FileLocked::soap_default(NULL); }
	virtual ~ns1__FileLocked() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileNotFound
#define SOAP_TYPE_ns1__FileNotFound (1521)
/* ns1:FileNotFound */
class SOAP_CMAC ns1__FileNotFound : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1521; } /* = unique id SOAP_TYPE_ns1__FileNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileNotFound() { ns1__FileNotFound::soap_default(NULL); }
	virtual ~ns1__FileNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileNotWritable
#define SOAP_TYPE_ns1__FileNotWritable (1522)
/* ns1:FileNotWritable */
class SOAP_CMAC ns1__FileNotWritable : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1522; } /* = unique id SOAP_TYPE_ns1__FileNotWritable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileNotWritable() { ns1__FileNotWritable::soap_default(NULL); }
	virtual ~ns1__FileNotWritable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileTooLarge
#define SOAP_TYPE_ns1__FileTooLarge (1523)
/* ns1:FileTooLarge */
class SOAP_CMAC ns1__FileTooLarge : public ns1__FileFault
{
public:
	std::string datastore;	/* required element of type xsd:string */
	LONG64 fileSize;	/* required element of type xsd:long */
	LONG64 *maxFileSize;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 1523; } /* = unique id SOAP_TYPE_ns1__FileTooLarge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileTooLarge() { ns1__FileTooLarge::soap_default(NULL); }
	virtual ~ns1__FileTooLarge() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FilesystemQuiesceFault
#define SOAP_TYPE_ns1__FilesystemQuiesceFault (1524)
/* ns1:FilesystemQuiesceFault */
class SOAP_CMAC ns1__FilesystemQuiesceFault : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1524; } /* = unique id SOAP_TYPE_ns1__FilesystemQuiesceFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FilesystemQuiesceFault() { ns1__FilesystemQuiesceFault::soap_default(NULL); }
	virtual ~ns1__FilesystemQuiesceFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FtIssuesOnHost
#define SOAP_TYPE_ns1__FtIssuesOnHost (1525)
/* ns1:FtIssuesOnHost */
class SOAP_CMAC ns1__FtIssuesOnHost : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::string hostName;	/* required element of type xsd:string */
	std::vector<ns1__LocalizedMethodFault * >errors;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1525; } /* = unique id SOAP_TYPE_ns1__FtIssuesOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FtIssuesOnHost() { ns1__FtIssuesOnHost::soap_default(NULL); }
	virtual ~ns1__FtIssuesOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GenericVmConfigFault
#define SOAP_TYPE_ns1__GenericVmConfigFault (1528)
/* ns1:GenericVmConfigFault */
class SOAP_CMAC ns1__GenericVmConfigFault : public ns1__VmConfigFault
{
public:
	std::string reason;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1528; } /* = unique id SOAP_TYPE_ns1__GenericVmConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GenericVmConfigFault() { ns1__GenericVmConfigFault::soap_default(NULL); }
	virtual ~ns1__GenericVmConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HAErrorsAtDest
#define SOAP_TYPE_ns1__HAErrorsAtDest (1529)
/* ns1:HAErrorsAtDest */
class SOAP_CMAC ns1__HAErrorsAtDest : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1529; } /* = unique id SOAP_TYPE_ns1__HAErrorsAtDest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HAErrorsAtDest() { ns1__HAErrorsAtDest::soap_default(NULL); }
	virtual ~ns1__HAErrorsAtDest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostConfigFailed
#define SOAP_TYPE_ns1__HostConfigFailed (1530)
/* ns1:HostConfigFailed */
class SOAP_CMAC ns1__HostConfigFailed : public ns1__HostConfigFault
{
public:
	std::vector<ns1__LocalizedMethodFault * >failure;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1530; } /* = unique id SOAP_TYPE_ns1__HostConfigFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostConfigFailed() { ns1__HostConfigFailed::soap_default(NULL); }
	virtual ~ns1__HostConfigFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInDomain
#define SOAP_TYPE_ns1__HostInDomain (1533)
/* ns1:HostInDomain */
class SOAP_CMAC ns1__HostInDomain : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1533; } /* = unique id SOAP_TYPE_ns1__HostInDomain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInDomain() { ns1__HostInDomain::soap_default(NULL); }
	virtual ~ns1__HostInDomain() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIncompatibleForFaultTolerance
#define SOAP_TYPE_ns1__HostIncompatibleForFaultTolerance (1534)
/* ns1:HostIncompatibleForFaultTolerance */
class SOAP_CMAC ns1__HostIncompatibleForFaultTolerance : public ns1__VmFaultToleranceIssue
{
public:
	std::string *hostName;	/* optional element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1534; } /* = unique id SOAP_TYPE_ns1__HostIncompatibleForFaultTolerance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIncompatibleForFaultTolerance() { ns1__HostIncompatibleForFaultTolerance::soap_default(NULL); }
	virtual ~ns1__HostIncompatibleForFaultTolerance() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostInventoryFull
#define SOAP_TYPE_ns1__HostInventoryFull (1536)
/* ns1:HostInventoryFull */
class SOAP_CMAC ns1__HostInventoryFull : public ns1__NotEnoughLicenses
{
public:
	int capacity;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1536; } /* = unique id SOAP_TYPE_ns1__HostInventoryFull */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostInventoryFull() { ns1__HostInventoryFull::soap_default(NULL); }
	virtual ~ns1__HostInventoryFull() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InUseFeatureManipulationDisallowed
#define SOAP_TYPE_ns1__InUseFeatureManipulationDisallowed (1541)
/* ns1:InUseFeatureManipulationDisallowed */
class SOAP_CMAC ns1__InUseFeatureManipulationDisallowed : public ns1__NotEnoughLicenses
{
public:
	virtual int soap_type() const { return 1541; } /* = unique id SOAP_TYPE_ns1__InUseFeatureManipulationDisallowed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InUseFeatureManipulationDisallowed() { ns1__InUseFeatureManipulationDisallowed::soap_default(NULL); }
	virtual ~ns1__InUseFeatureManipulationDisallowed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InaccessibleDatastore
#define SOAP_TYPE_ns1__InaccessibleDatastore (1542)
/* ns1:InaccessibleDatastore */
class SOAP_CMAC ns1__InaccessibleDatastore : public ns1__InvalidDatastore
{
public:
	virtual int soap_type() const { return 1542; } /* = unique id SOAP_TYPE_ns1__InaccessibleDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InaccessibleDatastore() { ns1__InaccessibleDatastore::soap_default(NULL); }
	virtual ~ns1__InaccessibleDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncompatibleDefaultDevice
#define SOAP_TYPE_ns1__IncompatibleDefaultDevice (1543)
/* ns1:IncompatibleDefaultDevice */
class SOAP_CMAC ns1__IncompatibleDefaultDevice : public ns1__MigrationFault
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1543; } /* = unique id SOAP_TYPE_ns1__IncompatibleDefaultDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncompatibleDefaultDevice() { ns1__IncompatibleDefaultDevice::soap_default(NULL); }
	virtual ~ns1__IncompatibleDefaultDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncompatibleHostForFtSecondary
#define SOAP_TYPE_ns1__IncompatibleHostForFtSecondary (1544)
/* ns1:IncompatibleHostForFtSecondary */
class SOAP_CMAC ns1__IncompatibleHostForFtSecondary : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::vector<ns1__LocalizedMethodFault * >error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1544; } /* = unique id SOAP_TYPE_ns1__IncompatibleHostForFtSecondary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncompatibleHostForFtSecondary() { ns1__IncompatibleHostForFtSecondary::soap_default(NULL); }
	virtual ~ns1__IncompatibleHostForFtSecondary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncompatibleSetting
#define SOAP_TYPE_ns1__IncompatibleSetting (1545)
/* ns1:IncompatibleSetting */
class SOAP_CMAC ns1__IncompatibleSetting : public ns1__InvalidArgument
{
public:
	std::string conflictingProperty;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1545; } /* = unique id SOAP_TYPE_ns1__IncompatibleSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncompatibleSetting() { ns1__IncompatibleSetting::soap_default(NULL); }
	virtual ~ns1__IncompatibleSetting() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncorrectFileType
#define SOAP_TYPE_ns1__IncorrectFileType (1546)
/* ns1:IncorrectFileType */
class SOAP_CMAC ns1__IncorrectFileType : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1546; } /* = unique id SOAP_TYPE_ns1__IncorrectFileType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncorrectFileType() { ns1__IncorrectFileType::soap_default(NULL); }
	virtual ~ns1__IncorrectFileType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IncorrectHostInformation
#define SOAP_TYPE_ns1__IncorrectHostInformation (1547)
/* ns1:IncorrectHostInformation */
class SOAP_CMAC ns1__IncorrectHostInformation : public ns1__NotEnoughLicenses
{
public:
	virtual int soap_type() const { return 1547; } /* = unique id SOAP_TYPE_ns1__IncorrectHostInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IncorrectHostInformation() { ns1__IncorrectHostInformation::soap_default(NULL); }
	virtual ~ns1__IncorrectHostInformation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientCpuResourcesFault
#define SOAP_TYPE_ns1__InsufficientCpuResourcesFault (1549)
/* ns1:InsufficientCpuResourcesFault */
class SOAP_CMAC ns1__InsufficientCpuResourcesFault : public ns1__InsufficientResourcesFault
{
public:
	LONG64 unreserved;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1549; } /* = unique id SOAP_TYPE_ns1__InsufficientCpuResourcesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientCpuResourcesFault() { ns1__InsufficientCpuResourcesFault::soap_default(NULL); }
	virtual ~ns1__InsufficientCpuResourcesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientFailoverResourcesFault
#define SOAP_TYPE_ns1__InsufficientFailoverResourcesFault (1550)
/* ns1:InsufficientFailoverResourcesFault */
class SOAP_CMAC ns1__InsufficientFailoverResourcesFault : public ns1__InsufficientResourcesFault
{
public:
	virtual int soap_type() const { return 1550; } /* = unique id SOAP_TYPE_ns1__InsufficientFailoverResourcesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientFailoverResourcesFault() { ns1__InsufficientFailoverResourcesFault::soap_default(NULL); }
	virtual ~ns1__InsufficientFailoverResourcesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientHostCapacityFault
#define SOAP_TYPE_ns1__InsufficientHostCapacityFault (1551)
/* ns1:InsufficientHostCapacityFault */
class SOAP_CMAC ns1__InsufficientHostCapacityFault : public ns1__InsufficientResourcesFault
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1551; } /* = unique id SOAP_TYPE_ns1__InsufficientHostCapacityFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientHostCapacityFault() { ns1__InsufficientHostCapacityFault::soap_default(NULL); }
	virtual ~ns1__InsufficientHostCapacityFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientMemoryResourcesFault
#define SOAP_TYPE_ns1__InsufficientMemoryResourcesFault (1554)
/* ns1:InsufficientMemoryResourcesFault */
class SOAP_CMAC ns1__InsufficientMemoryResourcesFault : public ns1__InsufficientResourcesFault
{
public:
	LONG64 unreserved;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1554; } /* = unique id SOAP_TYPE_ns1__InsufficientMemoryResourcesFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientMemoryResourcesFault() { ns1__InsufficientMemoryResourcesFault::soap_default(NULL); }
	virtual ~ns1__InsufficientMemoryResourcesFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientStandbyResource
#define SOAP_TYPE_ns1__InsufficientStandbyResource (1559)
/* ns1:InsufficientStandbyResource */
class SOAP_CMAC ns1__InsufficientStandbyResource : public ns1__InsufficientResourcesFault
{
public:
	virtual int soap_type() const { return 1559; } /* = unique id SOAP_TYPE_ns1__InsufficientStandbyResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientStandbyResource() { ns1__InsufficientStandbyResource::soap_default(NULL); }
	virtual ~ns1__InsufficientStandbyResource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidClientCertificate
#define SOAP_TYPE_ns1__InvalidClientCertificate (1563)
/* ns1:InvalidClientCertificate */
class SOAP_CMAC ns1__InvalidClientCertificate : public ns1__InvalidLogin
{
public:
	virtual int soap_type() const { return 1563; } /* = unique id SOAP_TYPE_ns1__InvalidClientCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidClientCertificate() { ns1__InvalidClientCertificate::soap_default(NULL); }
	virtual ~ns1__InvalidClientCertificate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDasRestartPriorityForFtVm
#define SOAP_TYPE_ns1__InvalidDasRestartPriorityForFtVm (1565)
/* ns1:InvalidDasRestartPriorityForFtVm */
class SOAP_CMAC ns1__InvalidDasRestartPriorityForFtVm : public ns1__InvalidArgument
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1565; } /* = unique id SOAP_TYPE_ns1__InvalidDasRestartPriorityForFtVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDasRestartPriorityForFtVm() { ns1__InvalidDasRestartPriorityForFtVm::soap_default(NULL); }
	virtual ~ns1__InvalidDasRestartPriorityForFtVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDatastorePath
#define SOAP_TYPE_ns1__InvalidDatastorePath (1567)
/* ns1:InvalidDatastorePath */
class SOAP_CMAC ns1__InvalidDatastorePath : public ns1__InvalidDatastore
{
public:
	std::string datastorePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1567; } /* = unique id SOAP_TYPE_ns1__InvalidDatastorePath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDatastorePath() { ns1__InvalidDatastorePath::soap_default(NULL); }
	virtual ~ns1__InvalidDatastorePath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDrsBehaviorForFtVm
#define SOAP_TYPE_ns1__InvalidDrsBehaviorForFtVm (1572)
/* ns1:InvalidDrsBehaviorForFtVm */
class SOAP_CMAC ns1__InvalidDrsBehaviorForFtVm : public ns1__InvalidArgument
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1572; } /* = unique id SOAP_TYPE_ns1__InvalidDrsBehaviorForFtVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDrsBehaviorForFtVm() { ns1__InvalidDrsBehaviorForFtVm::soap_default(NULL); }
	virtual ~ns1__InvalidDrsBehaviorForFtVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidEditionLicense
#define SOAP_TYPE_ns1__InvalidEditionLicense (1573)
/* ns1:InvalidEditionLicense */
class SOAP_CMAC ns1__InvalidEditionLicense : public ns1__NotEnoughLicenses
{
public:
	std::string feature;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1573; } /* = unique id SOAP_TYPE_ns1__InvalidEditionLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidEditionLicense() { ns1__InvalidEditionLicense::soap_default(NULL); }
	virtual ~ns1__InvalidEditionLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidFormat
#define SOAP_TYPE_ns1__InvalidFormat (1576)
/* ns1:InvalidFormat */
class SOAP_CMAC ns1__InvalidFormat : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1576; } /* = unique id SOAP_TYPE_ns1__InvalidFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidFormat() { ns1__InvalidFormat::soap_default(NULL); }
	virtual ~ns1__InvalidFormat() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidHostName
#define SOAP_TYPE_ns1__InvalidHostName (1577)
/* ns1:InvalidHostName */
class SOAP_CMAC ns1__InvalidHostName : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1577; } /* = unique id SOAP_TYPE_ns1__InvalidHostName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidHostName() { ns1__InvalidHostName::soap_default(NULL); }
	virtual ~ns1__InvalidHostName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidHostState
#define SOAP_TYPE_ns1__InvalidHostState (1578)
/* ns1:InvalidHostState */
class SOAP_CMAC ns1__InvalidHostState : public ns1__InvalidState
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1578; } /* = unique id SOAP_TYPE_ns1__InvalidHostState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidHostState() { ns1__InvalidHostState::soap_default(NULL); }
	virtual ~ns1__InvalidHostState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidIndexArgument
#define SOAP_TYPE_ns1__InvalidIndexArgument (1579)
/* ns1:InvalidIndexArgument */
class SOAP_CMAC ns1__InvalidIndexArgument : public ns1__InvalidArgument
{
public:
	std::string key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1579; } /* = unique id SOAP_TYPE_ns1__InvalidIndexArgument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidIndexArgument() { ns1__InvalidIndexArgument::soap_default(NULL); }
	virtual ~ns1__InvalidIndexArgument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidOperationOnSecondaryVm
#define SOAP_TYPE_ns1__InvalidOperationOnSecondaryVm (1589)
/* ns1:InvalidOperationOnSecondaryVm */
class SOAP_CMAC ns1__InvalidOperationOnSecondaryVm : public ns1__VmFaultToleranceIssue
{
public:
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1589; } /* = unique id SOAP_TYPE_ns1__InvalidOperationOnSecondaryVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidOperationOnSecondaryVm() { ns1__InvalidOperationOnSecondaryVm::soap_default(NULL); }
	virtual ~ns1__InvalidOperationOnSecondaryVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidPowerState
#define SOAP_TYPE_ns1__InvalidPowerState (1590)
/* ns1:InvalidPowerState */
class SOAP_CMAC ns1__InvalidPowerState : public ns1__InvalidState
{
public:
	enum ns1__VirtualMachinePowerState *requestedState;	/* optional element of type ns1:VirtualMachinePowerState */
	enum ns1__VirtualMachinePowerState existingState;	/* required element of type ns1:VirtualMachinePowerState */
public:
	virtual int soap_type() const { return 1590; } /* = unique id SOAP_TYPE_ns1__InvalidPowerState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidPowerState() { ns1__InvalidPowerState::soap_default(NULL); }
	virtual ~ns1__InvalidPowerState() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidResourcePoolStructureFault
#define SOAP_TYPE_ns1__InvalidResourcePoolStructureFault (1594)
/* ns1:InvalidResourcePoolStructureFault */
class SOAP_CMAC ns1__InvalidResourcePoolStructureFault : public ns1__InsufficientResourcesFault
{
public:
	virtual int soap_type() const { return 1594; } /* = unique id SOAP_TYPE_ns1__InvalidResourcePoolStructureFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidResourcePoolStructureFault() { ns1__InvalidResourcePoolStructureFault::soap_default(NULL); }
	virtual ~ns1__InvalidResourcePoolStructureFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidVmConfig
#define SOAP_TYPE_ns1__InvalidVmConfig (1597)
/* ns1:InvalidVmConfig */
class SOAP_CMAC ns1__InvalidVmConfig : public ns1__VmConfigFault
{
public:
	std::string *property;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1597; } /* = unique id SOAP_TYPE_ns1__InvalidVmConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidVmConfig() { ns1__InvalidVmConfig::soap_default(NULL); }
	virtual ~ns1__InvalidVmConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InventoryHasStandardAloneHosts
#define SOAP_TYPE_ns1__InventoryHasStandardAloneHosts (1598)
/* ns1:InventoryHasStandardAloneHosts */
class SOAP_CMAC ns1__InventoryHasStandardAloneHosts : public ns1__NotEnoughLicenses
{
public:
	std::vector<std::string >hosts;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1598; } /* = unique id SOAP_TYPE_ns1__InventoryHasStandardAloneHosts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InventoryHasStandardAloneHosts() { ns1__InventoryHasStandardAloneHosts::soap_default(NULL); }
	virtual ~ns1__InventoryHasStandardAloneHosts() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IpHostnameGeneratorError
#define SOAP_TYPE_ns1__IpHostnameGeneratorError (1599)
/* ns1:IpHostnameGeneratorError */
class SOAP_CMAC ns1__IpHostnameGeneratorError : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1599; } /* = unique id SOAP_TYPE_ns1__IpHostnameGeneratorError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IpHostnameGeneratorError() { ns1__IpHostnameGeneratorError::soap_default(NULL); }
	virtual ~ns1__IpHostnameGeneratorError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseDowngradeDisallowed
#define SOAP_TYPE_ns1__LicenseDowngradeDisallowed (1602)
/* ns1:LicenseDowngradeDisallowed */
class SOAP_CMAC ns1__LicenseDowngradeDisallowed : public ns1__NotEnoughLicenses
{
public:
	std::string edition;	/* required element of type xsd:string */
	std::string entityId;	/* required element of type xsd:string */
	std::vector<ns1__KeyAnyValue * >features;	/* required element of type ns1:KeyAnyValue */
public:
	virtual int soap_type() const { return 1602; } /* = unique id SOAP_TYPE_ns1__LicenseDowngradeDisallowed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseDowngradeDisallowed() { ns1__LicenseDowngradeDisallowed::soap_default(NULL); }
	virtual ~ns1__LicenseDowngradeDisallowed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseExpired
#define SOAP_TYPE_ns1__LicenseExpired (1604)
/* ns1:LicenseExpired */
class SOAP_CMAC ns1__LicenseExpired : public ns1__NotEnoughLicenses
{
public:
	std::string licenseKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1604; } /* = unique id SOAP_TYPE_ns1__LicenseExpired */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseExpired() { ns1__LicenseExpired::soap_default(NULL); }
	virtual ~ns1__LicenseExpired() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseKeyEntityMismatch
#define SOAP_TYPE_ns1__LicenseKeyEntityMismatch (1605)
/* ns1:LicenseKeyEntityMismatch */
class SOAP_CMAC ns1__LicenseKeyEntityMismatch : public ns1__NotEnoughLicenses
{
public:
	virtual int soap_type() const { return 1605; } /* = unique id SOAP_TYPE_ns1__LicenseKeyEntityMismatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseKeyEntityMismatch() { ns1__LicenseKeyEntityMismatch::soap_default(NULL); }
	virtual ~ns1__LicenseKeyEntityMismatch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseRestricted
#define SOAP_TYPE_ns1__LicenseRestricted (1606)
/* ns1:LicenseRestricted */
class SOAP_CMAC ns1__LicenseRestricted : public ns1__NotEnoughLicenses
{
public:
	virtual int soap_type() const { return 1606; } /* = unique id SOAP_TYPE_ns1__LicenseRestricted */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseRestricted() { ns1__LicenseRestricted::soap_default(NULL); }
	virtual ~ns1__LicenseRestricted() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LicenseSourceUnavailable
#define SOAP_TYPE_ns1__LicenseSourceUnavailable (1608)
/* ns1:LicenseSourceUnavailable */
class SOAP_CMAC ns1__LicenseSourceUnavailable : public ns1__NotEnoughLicenses
{
public:
	ns1__LicenseSource *licenseSource;	/* required element of type ns1:LicenseSource */
public:
	virtual int soap_type() const { return 1608; } /* = unique id SOAP_TYPE_ns1__LicenseSourceUnavailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LicenseSourceUnavailable() { ns1__LicenseSourceUnavailable::soap_default(NULL); }
	virtual ~ns1__LicenseSourceUnavailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LinuxVolumeNotClean
#define SOAP_TYPE_ns1__LinuxVolumeNotClean (1610)
/* ns1:LinuxVolumeNotClean */
class SOAP_CMAC ns1__LinuxVolumeNotClean : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1610; } /* = unique id SOAP_TYPE_ns1__LinuxVolumeNotClean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LinuxVolumeNotClean() { ns1__LinuxVolumeNotClean::soap_default(NULL); }
	virtual ~ns1__LinuxVolumeNotClean() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MaintenanceModeFileMove
#define SOAP_TYPE_ns1__MaintenanceModeFileMove (1612)
/* ns1:MaintenanceModeFileMove */
class SOAP_CMAC ns1__MaintenanceModeFileMove : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1612; } /* = unique id SOAP_TYPE_ns1__MaintenanceModeFileMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MaintenanceModeFileMove() { ns1__MaintenanceModeFileMove::soap_default(NULL); }
	virtual ~ns1__MaintenanceModeFileMove() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MemoryHotPlugNotSupported
#define SOAP_TYPE_ns1__MemoryHotPlugNotSupported (1613)
/* ns1:MemoryHotPlugNotSupported */
class SOAP_CMAC ns1__MemoryHotPlugNotSupported : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1613; } /* = unique id SOAP_TYPE_ns1__MemoryHotPlugNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MemoryHotPlugNotSupported() { ns1__MemoryHotPlugNotSupported::soap_default(NULL); }
	virtual ~ns1__MemoryHotPlugNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MemorySnapshotOnIndependentDisk
#define SOAP_TYPE_ns1__MemorySnapshotOnIndependentDisk (1616)
/* ns1:MemorySnapshotOnIndependentDisk */
class SOAP_CMAC ns1__MemorySnapshotOnIndependentDisk : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1616; } /* = unique id SOAP_TYPE_ns1__MemorySnapshotOnIndependentDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MemorySnapshotOnIndependentDisk() { ns1__MemorySnapshotOnIndependentDisk::soap_default(NULL); }
	virtual ~ns1__MemorySnapshotOnIndependentDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationDisabled
#define SOAP_TYPE_ns1__MigrationDisabled (1619)
/* ns1:MigrationDisabled */
class SOAP_CMAC ns1__MigrationDisabled : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1619; } /* = unique id SOAP_TYPE_ns1__MigrationDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationDisabled() { ns1__MigrationDisabled::soap_default(NULL); }
	virtual ~ns1__MigrationDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationFeatureNotSupported
#define SOAP_TYPE_ns1__MigrationFeatureNotSupported (1621)
/* ns1:MigrationFeatureNotSupported */
class SOAP_CMAC ns1__MigrationFeatureNotSupported : public ns1__MigrationFault
{
public:
	bool atSourceHost;	/* required element of type xsd:boolean */
	std::string failedHostName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *failedHost;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1621; } /* = unique id SOAP_TYPE_ns1__MigrationFeatureNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationFeatureNotSupported() { ns1__MigrationFeatureNotSupported::soap_default(NULL); }
	virtual ~ns1__MigrationFeatureNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationNotReady
#define SOAP_TYPE_ns1__MigrationNotReady (1622)
/* ns1:MigrationNotReady */
class SOAP_CMAC ns1__MigrationNotReady : public ns1__MigrationFault
{
public:
	std::string reason;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1622; } /* = unique id SOAP_TYPE_ns1__MigrationNotReady */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationNotReady() { ns1__MigrationNotReady::soap_default(NULL); }
	virtual ~ns1__MigrationNotReady() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MismatchedNetworkPolicies
#define SOAP_TYPE_ns1__MismatchedNetworkPolicies (1624)
/* ns1:MismatchedNetworkPolicies */
class SOAP_CMAC ns1__MismatchedNetworkPolicies : public ns1__MigrationFault
{
public:
	std::string device;	/* required element of type xsd:string */
	std::string backing;	/* required element of type xsd:string */
	bool connected;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1624; } /* = unique id SOAP_TYPE_ns1__MismatchedNetworkPolicies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MismatchedNetworkPolicies() { ns1__MismatchedNetworkPolicies::soap_default(NULL); }
	virtual ~ns1__MismatchedNetworkPolicies() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MismatchedVMotionNetworkNames
#define SOAP_TYPE_ns1__MismatchedVMotionNetworkNames (1625)
/* ns1:MismatchedVMotionNetworkNames */
class SOAP_CMAC ns1__MismatchedVMotionNetworkNames : public ns1__MigrationFault
{
public:
	std::string sourceNetwork;	/* required element of type xsd:string */
	std::string destNetwork;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1625; } /* = unique id SOAP_TYPE_ns1__MismatchedVMotionNetworkNames */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MismatchedVMotionNetworkNames() { ns1__MismatchedVMotionNetworkNames::soap_default(NULL); }
	virtual ~ns1__MismatchedVMotionNetworkNames() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingLinuxCustResources
#define SOAP_TYPE_ns1__MissingLinuxCustResources (1628)
/* ns1:MissingLinuxCustResources */
class SOAP_CMAC ns1__MissingLinuxCustResources : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1628; } /* = unique id SOAP_TYPE_ns1__MissingLinuxCustResources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingLinuxCustResources() { ns1__MissingLinuxCustResources::soap_default(NULL); }
	virtual ~ns1__MissingLinuxCustResources() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingPowerOffConfiguration
#define SOAP_TYPE_ns1__MissingPowerOffConfiguration (1630)
/* ns1:MissingPowerOffConfiguration */
class SOAP_CMAC ns1__MissingPowerOffConfiguration : public ns1__VAppConfigFault
{
public:
	virtual int soap_type() const { return 1630; } /* = unique id SOAP_TYPE_ns1__MissingPowerOffConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingPowerOffConfiguration() { ns1__MissingPowerOffConfiguration::soap_default(NULL); }
	virtual ~ns1__MissingPowerOffConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingPowerOnConfiguration
#define SOAP_TYPE_ns1__MissingPowerOnConfiguration (1631)
/* ns1:MissingPowerOnConfiguration */
class SOAP_CMAC ns1__MissingPowerOnConfiguration : public ns1__VAppConfigFault
{
public:
	virtual int soap_type() const { return 1631; } /* = unique id SOAP_TYPE_ns1__MissingPowerOnConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingPowerOnConfiguration() { ns1__MissingPowerOnConfiguration::soap_default(NULL); }
	virtual ~ns1__MissingPowerOnConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingWindowsCustResources
#define SOAP_TYPE_ns1__MissingWindowsCustResources (1632)
/* ns1:MissingWindowsCustResources */
class SOAP_CMAC ns1__MissingWindowsCustResources : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1632; } /* = unique id SOAP_TYPE_ns1__MissingWindowsCustResources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingWindowsCustResources() { ns1__MissingWindowsCustResources::soap_default(NULL); }
	virtual ~ns1__MissingWindowsCustResources() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MountError
#define SOAP_TYPE_ns1__MountError (1633)
/* ns1:MountError */
class SOAP_CMAC ns1__MountError : public ns1__CustomizationFault
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	int diskIndex;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1633; } /* = unique id SOAP_TYPE_ns1__MountError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MountError() { ns1__MountError::soap_default(NULL); }
	virtual ~ns1__MountError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MultipleCertificatesVerifyFault
#define SOAP_TYPE_ns1__MultipleCertificatesVerifyFault (1636)
/* ns1:MultipleCertificatesVerifyFault */
class SOAP_CMAC ns1__MultipleCertificatesVerifyFault : public ns1__HostConnectFault
{
public:
	std::vector<ns1__MultipleCertificatesVerifyFaultThumbprintData * >thumbprintData;	/* required element of type ns1:MultipleCertificatesVerifyFaultThumbprintData */
public:
	virtual int soap_type() const { return 1636; } /* = unique id SOAP_TYPE_ns1__MultipleCertificatesVerifyFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MultipleCertificatesVerifyFault() { ns1__MultipleCertificatesVerifyFault::soap_default(NULL); }
	virtual ~ns1__MultipleCertificatesVerifyFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MultipleSnapshotsNotSupported
#define SOAP_TYPE_ns1__MultipleSnapshotsNotSupported (1637)
/* ns1:MultipleSnapshotsNotSupported */
class SOAP_CMAC ns1__MultipleSnapshotsNotSupported : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1637; } /* = unique id SOAP_TYPE_ns1__MultipleSnapshotsNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MultipleSnapshotsNotSupported() { ns1__MultipleSnapshotsNotSupported::soap_default(NULL); }
	virtual ~ns1__MultipleSnapshotsNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasConfigFault
#define SOAP_TYPE_ns1__NasConfigFault (1638)
/* ns1:NasConfigFault */
class SOAP_CMAC ns1__NasConfigFault : public ns1__HostConfigFault
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1638; } /* = unique id SOAP_TYPE_ns1__NasConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasConfigFault() { ns1__NasConfigFault::soap_default(NULL); }
	virtual ~ns1__NasConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkCopyFault
#define SOAP_TYPE_ns1__NetworkCopyFault (1642)
/* ns1:NetworkCopyFault */
class SOAP_CMAC ns1__NetworkCopyFault : public ns1__FileFault
{
public:
	virtual int soap_type() const { return 1642; } /* = unique id SOAP_TYPE_ns1__NetworkCopyFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkCopyFault() { ns1__NetworkCopyFault::soap_default(NULL); }
	virtual ~ns1__NetworkCopyFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworksMayNotBeTheSame
#define SOAP_TYPE_ns1__NetworksMayNotBeTheSame (1644)
/* ns1:NetworksMayNotBeTheSame */
class SOAP_CMAC ns1__NetworksMayNotBeTheSame : public ns1__MigrationFault
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1644; } /* = unique id SOAP_TYPE_ns1__NetworksMayNotBeTheSame */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworksMayNotBeTheSame() { ns1__NetworksMayNotBeTheSame::soap_default(NULL); }
	virtual ~ns1__NetworksMayNotBeTheSame() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NicSettingMismatch
#define SOAP_TYPE_ns1__NicSettingMismatch (1645)
/* ns1:NicSettingMismatch */
class SOAP_CMAC ns1__NicSettingMismatch : public ns1__CustomizationFault
{
public:
	int numberOfNicsInSpec;	/* required element of type xsd:int */
	int numberOfNicsInVM;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1645; } /* = unique id SOAP_TYPE_ns1__NicSettingMismatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NicSettingMismatch() { ns1__NicSettingMismatch::soap_default(NULL); }
	virtual ~ns1__NicSettingMismatch() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoActiveHostInCluster
#define SOAP_TYPE_ns1__NoActiveHostInCluster (1646)
/* ns1:NoActiveHostInCluster */
class SOAP_CMAC ns1__NoActiveHostInCluster : public ns1__InvalidState
{
public:
	ns1__ManagedObjectReference *computeResource;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1646; } /* = unique id SOAP_TYPE_ns1__NoActiveHostInCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoActiveHostInCluster() { ns1__NoActiveHostInCluster::soap_default(NULL); }
	virtual ~ns1__NoActiveHostInCluster() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoCompatibleHardAffinityHost
#define SOAP_TYPE_ns1__NoCompatibleHardAffinityHost (1649)
/* ns1:NoCompatibleHardAffinityHost */
class SOAP_CMAC ns1__NoCompatibleHardAffinityHost : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1649; } /* = unique id SOAP_TYPE_ns1__NoCompatibleHardAffinityHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoCompatibleHardAffinityHost() { ns1__NoCompatibleHardAffinityHost::soap_default(NULL); }
	virtual ~ns1__NoCompatibleHardAffinityHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoCompatibleHostWithAccessToDevice
#define SOAP_TYPE_ns1__NoCompatibleHostWithAccessToDevice (1651)
/* ns1:NoCompatibleHostWithAccessToDevice */
class SOAP_CMAC ns1__NoCompatibleHostWithAccessToDevice : public ns1__NoCompatibleHost
{
public:
	virtual int soap_type() const { return 1651; } /* = unique id SOAP_TYPE_ns1__NoCompatibleHostWithAccessToDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoCompatibleHostWithAccessToDevice() { ns1__NoCompatibleHostWithAccessToDevice::soap_default(NULL); }
	virtual ~ns1__NoCompatibleHostWithAccessToDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoCompatibleSoftAffinityHost
#define SOAP_TYPE_ns1__NoCompatibleSoftAffinityHost (1652)
/* ns1:NoCompatibleSoftAffinityHost */
class SOAP_CMAC ns1__NoCompatibleSoftAffinityHost : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1652; } /* = unique id SOAP_TYPE_ns1__NoCompatibleSoftAffinityHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoCompatibleSoftAffinityHost() { ns1__NoCompatibleSoftAffinityHost::soap_default(NULL); }
	virtual ~ns1__NoCompatibleSoftAffinityHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoDiskSpace
#define SOAP_TYPE_ns1__NoDiskSpace (1654)
/* ns1:NoDiskSpace */
class SOAP_CMAC ns1__NoDiskSpace : public ns1__FileFault
{
public:
	std::string datastore;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1654; } /* = unique id SOAP_TYPE_ns1__NoDiskSpace */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoDiskSpace() { ns1__NoDiskSpace::soap_default(NULL); }
	virtual ~ns1__NoDiskSpace() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoDisksToCustomize
#define SOAP_TYPE_ns1__NoDisksToCustomize (1655)
/* ns1:NoDisksToCustomize */
class SOAP_CMAC ns1__NoDisksToCustomize : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1655; } /* = unique id SOAP_TYPE_ns1__NoDisksToCustomize */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoDisksToCustomize() { ns1__NoDisksToCustomize::soap_default(NULL); }
	virtual ~ns1__NoDisksToCustomize() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoGateway
#define SOAP_TYPE_ns1__NoGateway (1656)
/* ns1:NoGateway */
class SOAP_CMAC ns1__NoGateway : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1656; } /* = unique id SOAP_TYPE_ns1__NoGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoGateway() { ns1__NoGateway::soap_default(NULL); }
	virtual ~ns1__NoGateway() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoGuestHeartbeat
#define SOAP_TYPE_ns1__NoGuestHeartbeat (1657)
/* ns1:NoGuestHeartbeat */
class SOAP_CMAC ns1__NoGuestHeartbeat : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1657; } /* = unique id SOAP_TYPE_ns1__NoGuestHeartbeat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoGuestHeartbeat() { ns1__NoGuestHeartbeat::soap_default(NULL); }
	virtual ~ns1__NoGuestHeartbeat() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoHost
#define SOAP_TYPE_ns1__NoHost (1658)
/* ns1:NoHost */
class SOAP_CMAC ns1__NoHost : public ns1__HostConnectFault
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1658; } /* = unique id SOAP_TYPE_ns1__NoHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoHost() { ns1__NoHost::soap_default(NULL); }
	virtual ~ns1__NoHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoHostSuitableForFtSecondary
#define SOAP_TYPE_ns1__NoHostSuitableForFtSecondary (1659)
/* ns1:NoHostSuitableForFtSecondary */
class SOAP_CMAC ns1__NoHostSuitableForFtSecondary : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1659; } /* = unique id SOAP_TYPE_ns1__NoHostSuitableForFtSecondary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoHostSuitableForFtSecondary() { ns1__NoHostSuitableForFtSecondary::soap_default(NULL); }
	virtual ~ns1__NoHostSuitableForFtSecondary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoLicenseServerConfigured
#define SOAP_TYPE_ns1__NoLicenseServerConfigured (1660)
/* ns1:NoLicenseServerConfigured */
class SOAP_CMAC ns1__NoLicenseServerConfigured : public ns1__NotEnoughLicenses
{
public:
	virtual int soap_type() const { return 1660; } /* = unique id SOAP_TYPE_ns1__NoLicenseServerConfigured */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoLicenseServerConfigured() { ns1__NoLicenseServerConfigured::soap_default(NULL); }
	virtual ~ns1__NoLicenseServerConfigured() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoPeerHostFound
#define SOAP_TYPE_ns1__NoPeerHostFound (1661)
/* ns1:NoPeerHostFound */
class SOAP_CMAC ns1__NoPeerHostFound : public ns1__HostPowerOpFailed
{
public:
	virtual int soap_type() const { return 1661; } /* = unique id SOAP_TYPE_ns1__NoPeerHostFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoPeerHostFound() { ns1__NoPeerHostFound::soap_default(NULL); }
	virtual ~ns1__NoPeerHostFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoPermission
#define SOAP_TYPE_ns1__NoPermission (1662)
/* ns1:NoPermission */
class SOAP_CMAC ns1__NoPermission : public ns1__SecurityError
{
public:
	ns1__ManagedObjectReference *object;	/* required element of type ns1:ManagedObjectReference */
	std::string privilegeId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1662; } /* = unique id SOAP_TYPE_ns1__NoPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoPermission() { ns1__NoPermission::soap_default(NULL); }
	virtual ~ns1__NoPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoPermissionOnAD
#define SOAP_TYPE_ns1__NoPermissionOnAD (1663)
/* ns1:NoPermissionOnAD */
class SOAP_CMAC ns1__NoPermissionOnAD : public ns1__ActiveDirectoryFault
{
public:
	virtual int soap_type() const { return 1663; } /* = unique id SOAP_TYPE_ns1__NoPermissionOnAD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoPermissionOnAD() { ns1__NoPermissionOnAD::soap_default(NULL); }
	virtual ~ns1__NoPermissionOnAD() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoPermissionOnHost
#define SOAP_TYPE_ns1__NoPermissionOnHost (1664)
/* ns1:NoPermissionOnHost */
class SOAP_CMAC ns1__NoPermissionOnHost : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1664; } /* = unique id SOAP_TYPE_ns1__NoPermissionOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoPermissionOnHost() { ns1__NoPermissionOnHost::soap_default(NULL); }
	virtual ~ns1__NoPermissionOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoVirtualNic
#define SOAP_TYPE_ns1__NoVirtualNic (1668)
/* ns1:NoVirtualNic */
class SOAP_CMAC ns1__NoVirtualNic : public ns1__HostConfigFault
{
public:
	virtual int soap_type() const { return 1668; } /* = unique id SOAP_TYPE_ns1__NoVirtualNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoVirtualNic() { ns1__NoVirtualNic::soap_default(NULL); }
	virtual ~ns1__NoVirtualNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoVmInVApp
#define SOAP_TYPE_ns1__NoVmInVApp (1669)
/* ns1:NoVmInVApp */
class SOAP_CMAC ns1__NoVmInVApp : public ns1__VAppConfigFault
{
public:
	virtual int soap_type() const { return 1669; } /* = unique id SOAP_TYPE_ns1__NoVmInVApp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoVmInVApp() { ns1__NoVmInVApp::soap_default(NULL); }
	virtual ~ns1__NoVmInVApp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NonADUserRequired
#define SOAP_TYPE_ns1__NonADUserRequired (1670)
/* ns1:NonADUserRequired */
class SOAP_CMAC ns1__NonADUserRequired : public ns1__ActiveDirectoryFault
{
public:
	virtual int soap_type() const { return 1670; } /* = unique id SOAP_TYPE_ns1__NonADUserRequired */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NonADUserRequired() { ns1__NonADUserRequired::soap_default(NULL); }
	virtual ~ns1__NonADUserRequired() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedDeviceForFT
#define SOAP_TYPE_ns1__NotSupportedDeviceForFT (1677)
/* ns1:NotSupportedDeviceForFT */
class SOAP_CMAC ns1__NotSupportedDeviceForFT : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::string *hostName;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string *vmName;	/* optional element of type xsd:string */
	std::string deviceType;	/* required element of type xsd:string */
	std::string *deviceLabel;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1677; } /* = unique id SOAP_TYPE_ns1__NotSupportedDeviceForFT */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupportedDeviceForFT() { ns1__NotSupportedDeviceForFT::soap_default(NULL); }
	virtual ~ns1__NotSupportedDeviceForFT() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedHost
#define SOAP_TYPE_ns1__NotSupportedHost (1678)
/* ns1:NotSupportedHost */
class SOAP_CMAC ns1__NotSupportedHost : public ns1__HostConnectFault
{
public:
	std::string *productName;	/* optional element of type xsd:string */
	std::string *productVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1678; } /* = unique id SOAP_TYPE_ns1__NotSupportedHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupportedHost() { ns1__NotSupportedHost::soap_default(NULL); }
	virtual ~ns1__NotSupportedHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumVirtualCpusExceedsLimit
#define SOAP_TYPE_ns1__NumVirtualCpusExceedsLimit (1682)
/* ns1:NumVirtualCpusExceedsLimit */
class SOAP_CMAC ns1__NumVirtualCpusExceedsLimit : public ns1__InsufficientResourcesFault
{
public:
	int maxSupportedVcpus;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1682; } /* = unique id SOAP_TYPE_ns1__NumVirtualCpusExceedsLimit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumVirtualCpusExceedsLimit() { ns1__NumVirtualCpusExceedsLimit::soap_default(NULL); }
	virtual ~ns1__NumVirtualCpusExceedsLimit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumVirtualCpusIncompatible
#define SOAP_TYPE_ns1__NumVirtualCpusIncompatible (1683)
/* ns1:NumVirtualCpusIncompatible */
class SOAP_CMAC ns1__NumVirtualCpusIncompatible : public ns1__VmConfigFault
{
public:
	std::string reason;	/* required element of type xsd:string */
	int numCpu;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1683; } /* = unique id SOAP_TYPE_ns1__NumVirtualCpusIncompatible */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumVirtualCpusIncompatible() { ns1__NumVirtualCpusIncompatible::soap_default(NULL); }
	virtual ~ns1__NumVirtualCpusIncompatible() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfExport
#define SOAP_TYPE_ns1__OvfExport (1697)
/* ns1:OvfExport */
class SOAP_CMAC ns1__OvfExport : public ns1__OvfFault
{
public:
	virtual int soap_type() const { return 1697; } /* = unique id SOAP_TYPE_ns1__OvfExport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfExport() { ns1__OvfExport::soap_default(NULL); }
	virtual ~ns1__OvfExport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfImport
#define SOAP_TYPE_ns1__OvfImport (1704)
/* ns1:OvfImport */
class SOAP_CMAC ns1__OvfImport : public ns1__OvfFault
{
public:
	virtual int soap_type() const { return 1704; } /* = unique id SOAP_TYPE_ns1__OvfImport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfImport() { ns1__OvfImport::soap_default(NULL); }
	virtual ~ns1__OvfImport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidPackage
#define SOAP_TYPE_ns1__OvfInvalidPackage (1707)
/* ns1:OvfInvalidPackage */
class SOAP_CMAC ns1__OvfInvalidPackage : public ns1__OvfFault
{
public:
	int lineNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1707; } /* = unique id SOAP_TYPE_ns1__OvfInvalidPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidPackage() { ns1__OvfInvalidPackage::soap_default(NULL); }
	virtual ~ns1__OvfInvalidPackage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfSystemFault
#define SOAP_TYPE_ns1__OvfSystemFault (1729)
/* ns1:OvfSystemFault */
class SOAP_CMAC ns1__OvfSystemFault : public ns1__OvfFault
{
public:
	virtual int soap_type() const { return 1729; } /* = unique id SOAP_TYPE_ns1__OvfSystemFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfSystemFault() { ns1__OvfSystemFault::soap_default(NULL); }
	virtual ~ns1__OvfSystemFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedPackage
#define SOAP_TYPE_ns1__OvfUnsupportedPackage (1744)
/* ns1:OvfUnsupportedPackage */
class SOAP_CMAC ns1__OvfUnsupportedPackage : public ns1__OvfFault
{
public:
	int *lineNumber;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 1744; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedPackage() { ns1__OvfUnsupportedPackage::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedPackage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchAlreadyInstalled
#define SOAP_TYPE_ns1__PatchAlreadyInstalled (1751)
/* ns1:PatchAlreadyInstalled */
class SOAP_CMAC ns1__PatchAlreadyInstalled : public ns1__PatchNotApplicable
{
public:
	virtual int soap_type() const { return 1751; } /* = unique id SOAP_TYPE_ns1__PatchAlreadyInstalled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchAlreadyInstalled() { ns1__PatchAlreadyInstalled::soap_default(NULL); }
	virtual ~ns1__PatchAlreadyInstalled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchMetadataCorrupted
#define SOAP_TYPE_ns1__PatchMetadataCorrupted (1755)
/* ns1:PatchMetadataCorrupted */
class SOAP_CMAC ns1__PatchMetadataCorrupted : public ns1__PatchMetadataInvalid
{
public:
	virtual int soap_type() const { return 1755; } /* = unique id SOAP_TYPE_ns1__PatchMetadataCorrupted */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchMetadataCorrupted() { ns1__PatchMetadataCorrupted::soap_default(NULL); }
	virtual ~ns1__PatchMetadataCorrupted() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchMetadataNotFound
#define SOAP_TYPE_ns1__PatchMetadataNotFound (1757)
/* ns1:PatchMetadataNotFound */
class SOAP_CMAC ns1__PatchMetadataNotFound : public ns1__PatchMetadataInvalid
{
public:
	virtual int soap_type() const { return 1757; } /* = unique id SOAP_TYPE_ns1__PatchMetadataNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchMetadataNotFound() { ns1__PatchMetadataNotFound::soap_default(NULL); }
	virtual ~ns1__PatchMetadataNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchMissingDependencies
#define SOAP_TYPE_ns1__PatchMissingDependencies (1758)
/* ns1:PatchMissingDependencies */
class SOAP_CMAC ns1__PatchMissingDependencies : public ns1__PatchNotApplicable
{
public:
	std::vector<std::string >prerequisitePatch;	/* optional element of type xsd:string */
	std::vector<std::string >prerequisiteLib;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1758; } /* = unique id SOAP_TYPE_ns1__PatchMissingDependencies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchMissingDependencies() { ns1__PatchMissingDependencies::soap_default(NULL); }
	virtual ~ns1__PatchMissingDependencies() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchSuperseded
#define SOAP_TYPE_ns1__PatchSuperseded (1760)
/* ns1:PatchSuperseded */
class SOAP_CMAC ns1__PatchSuperseded : public ns1__PatchNotApplicable
{
public:
	std::vector<std::string >supersede;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1760; } /* = unique id SOAP_TYPE_ns1__PatchSuperseded */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchSuperseded() { ns1__PatchSuperseded::soap_default(NULL); }
	virtual ~ns1__PatchSuperseded() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PlatformConfigFault
#define SOAP_TYPE_ns1__PlatformConfigFault (1762)
/* ns1:PlatformConfigFault */
class SOAP_CMAC ns1__PlatformConfigFault : public ns1__HostConfigFault
{
public:
	std::string text;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1762; } /* = unique id SOAP_TYPE_ns1__PlatformConfigFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PlatformConfigFault() { ns1__PlatformConfigFault::soap_default(NULL); }
	virtual ~ns1__PlatformConfigFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOnFtSecondaryFailed
#define SOAP_TYPE_ns1__PowerOnFtSecondaryFailed (1763)
/* ns1:PowerOnFtSecondaryFailed */
class SOAP_CMAC ns1__PowerOnFtSecondaryFailed : public ns1__VmFaultToleranceIssue
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
	enum ns1__FtIssuesOnHostHostSelectionType hostSelectionBy;	/* required element of type ns1:FtIssuesOnHostHostSelectionType */
	std::vector<ns1__LocalizedMethodFault * >hostErrors;	/* optional element of type ns1:LocalizedMethodFault */
	ns1__LocalizedMethodFault *rootCause;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1763; } /* = unique id SOAP_TYPE_ns1__PowerOnFtSecondaryFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOnFtSecondaryFailed() { ns1__PowerOnFtSecondaryFailed::soap_default(NULL); }
	virtual ~ns1__PowerOnFtSecondaryFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PowerOnFtSecondaryTimedout
#define SOAP_TYPE_ns1__PowerOnFtSecondaryTimedout (1764)
/* ns1:PowerOnFtSecondaryTimedout */
class SOAP_CMAC ns1__PowerOnFtSecondaryTimedout : public ns1__Timedout
{
public:
	ns1__ManagedObjectReference *vm;	/* required element of type ns1:ManagedObjectReference */
	std::string vmName;	/* required element of type xsd:string */
	int timeout;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1764; } /* = unique id SOAP_TYPE_ns1__PowerOnFtSecondaryTimedout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PowerOnFtSecondaryTimedout() { ns1__PowerOnFtSecondaryTimedout::soap_default(NULL); }
	virtual ~ns1__PowerOnFtSecondaryTimedout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QuestionPending
#define SOAP_TYPE_ns1__QuestionPending (1768)
/* ns1:QuestionPending */
class SOAP_CMAC ns1__QuestionPending : public ns1__InvalidState
{
public:
	std::string text;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1768; } /* = unique id SOAP_TYPE_ns1__QuestionPending */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QuestionPending() { ns1__QuestionPending::soap_default(NULL); }
	virtual ~ns1__QuestionPending() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RDMConversionNotSupported
#define SOAP_TYPE_ns1__RDMConversionNotSupported (1769)
/* ns1:RDMConversionNotSupported */
class SOAP_CMAC ns1__RDMConversionNotSupported : public ns1__MigrationFault
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1769; } /* = unique id SOAP_TYPE_ns1__RDMConversionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RDMConversionNotSupported() { ns1__RDMConversionNotSupported::soap_default(NULL); }
	virtual ~ns1__RDMConversionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RDMNotPreserved
#define SOAP_TYPE_ns1__RDMNotPreserved (1770)
/* ns1:RDMNotPreserved */
class SOAP_CMAC ns1__RDMNotPreserved : public ns1__MigrationFault
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1770; } /* = unique id SOAP_TYPE_ns1__RDMNotPreserved */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RDMNotPreserved() { ns1__RDMNotPreserved::soap_default(NULL); }
	virtual ~ns1__RDMNotPreserved() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RDMNotSupportedOnDatastore
#define SOAP_TYPE_ns1__RDMNotSupportedOnDatastore (1772)
/* ns1:RDMNotSupportedOnDatastore */
class SOAP_CMAC ns1__RDMNotSupportedOnDatastore : public ns1__VmConfigFault
{
public:
	std::string device;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *datastore;	/* required element of type ns1:ManagedObjectReference */
	std::string datastoreName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1772; } /* = unique id SOAP_TYPE_ns1__RDMNotSupportedOnDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RDMNotSupportedOnDatastore() { ns1__RDMNotSupportedOnDatastore::soap_default(NULL); }
	virtual ~ns1__RDMNotSupportedOnDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ReadOnlyDisksWithLegacyDestination
#define SOAP_TYPE_ns1__ReadOnlyDisksWithLegacyDestination (1775)
/* ns1:ReadOnlyDisksWithLegacyDestination */
class SOAP_CMAC ns1__ReadOnlyDisksWithLegacyDestination : public ns1__MigrationFault
{
public:
	int roDiskCount;	/* required element of type xsd:int */
	bool timeoutDanger;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1775; } /* = unique id SOAP_TYPE_ns1__ReadOnlyDisksWithLegacyDestination */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ReadOnlyDisksWithLegacyDestination() { ns1__ReadOnlyDisksWithLegacyDestination::soap_default(NULL); }
	virtual ~ns1__ReadOnlyDisksWithLegacyDestination() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RestrictedVersion
#define SOAP_TYPE_ns1__RestrictedVersion (1782)
/* ns1:RestrictedVersion */
class SOAP_CMAC ns1__RestrictedVersion : public ns1__SecurityError
{
public:
	virtual int soap_type() const { return 1782; } /* = unique id SOAP_TYPE_ns1__RestrictedVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RestrictedVersion() { ns1__RestrictedVersion::soap_default(NULL); }
	virtual ~ns1__RestrictedVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RuleViolation
#define SOAP_TYPE_ns1__RuleViolation (1783)
/* ns1:RuleViolation */
class SOAP_CMAC ns1__RuleViolation : public ns1__VmConfigFault
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ClusterRuleInfo *rule;	/* optional element of type ns1:ClusterRuleInfo */
public:
	virtual int soap_type() const { return 1783; } /* = unique id SOAP_TYPE_ns1__RuleViolation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RuleViolation() { ns1__RuleViolation::soap_default(NULL); }
	virtual ~ns1__RuleViolation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SSLDisabledFault
#define SOAP_TYPE_ns1__SSLDisabledFault (1784)
/* ns1:SSLDisabledFault */
class SOAP_CMAC ns1__SSLDisabledFault : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1784; } /* = unique id SOAP_TYPE_ns1__SSLDisabledFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SSLDisabledFault() { ns1__SSLDisabledFault::soap_default(NULL); }
	virtual ~ns1__SSLDisabledFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SSLVerifyFault
#define SOAP_TYPE_ns1__SSLVerifyFault (1785)
/* ns1:SSLVerifyFault */
class SOAP_CMAC ns1__SSLVerifyFault : public ns1__HostConnectFault
{
public:
	bool selfSigned;	/* required element of type xsd:boolean */
	std::string thumbprint;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1785; } /* = unique id SOAP_TYPE_ns1__SSLVerifyFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SSLVerifyFault() { ns1__SSLVerifyFault::soap_default(NULL); }
	virtual ~ns1__SSLVerifyFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecondaryVmAlreadyDisabled
#define SOAP_TYPE_ns1__SecondaryVmAlreadyDisabled (1787)
/* ns1:SecondaryVmAlreadyDisabled */
class SOAP_CMAC ns1__SecondaryVmAlreadyDisabled : public ns1__VmFaultToleranceIssue
{
public:
	std::string instanceUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1787; } /* = unique id SOAP_TYPE_ns1__SecondaryVmAlreadyDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecondaryVmAlreadyDisabled() { ns1__SecondaryVmAlreadyDisabled::soap_default(NULL); }
	virtual ~ns1__SecondaryVmAlreadyDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecondaryVmAlreadyEnabled
#define SOAP_TYPE_ns1__SecondaryVmAlreadyEnabled (1788)
/* ns1:SecondaryVmAlreadyEnabled */
class SOAP_CMAC ns1__SecondaryVmAlreadyEnabled : public ns1__VmFaultToleranceIssue
{
public:
	std::string instanceUuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1788; } /* = unique id SOAP_TYPE_ns1__SecondaryVmAlreadyEnabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecondaryVmAlreadyEnabled() { ns1__SecondaryVmAlreadyEnabled::soap_default(NULL); }
	virtual ~ns1__SecondaryVmAlreadyEnabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecondaryVmAlreadyRegistered
#define SOAP_TYPE_ns1__SecondaryVmAlreadyRegistered (1789)
/* ns1:SecondaryVmAlreadyRegistered */
class SOAP_CMAC ns1__SecondaryVmAlreadyRegistered : public ns1__VmFaultToleranceIssue
{
public:
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1789; } /* = unique id SOAP_TYPE_ns1__SecondaryVmAlreadyRegistered */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecondaryVmAlreadyRegistered() { ns1__SecondaryVmAlreadyRegistered::soap_default(NULL); }
	virtual ~ns1__SecondaryVmAlreadyRegistered() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SecondaryVmNotRegistered
#define SOAP_TYPE_ns1__SecondaryVmNotRegistered (1790)
/* ns1:SecondaryVmNotRegistered */
class SOAP_CMAC ns1__SecondaryVmNotRegistered : public ns1__VmFaultToleranceIssue
{
public:
	std::string *instanceUuid;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1790; } /* = unique id SOAP_TYPE_ns1__SecondaryVmNotRegistered */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SecondaryVmNotRegistered() { ns1__SecondaryVmNotRegistered::soap_default(NULL); }
	virtual ~ns1__SecondaryVmNotRegistered() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotCopyNotSupported
#define SOAP_TYPE_ns1__SnapshotCopyNotSupported (1793)
/* ns1:SnapshotCopyNotSupported */
class SOAP_CMAC ns1__SnapshotCopyNotSupported : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1793; } /* = unique id SOAP_TYPE_ns1__SnapshotCopyNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotCopyNotSupported() { ns1__SnapshotCopyNotSupported::soap_default(NULL); }
	virtual ~ns1__SnapshotCopyNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotDisabled
#define SOAP_TYPE_ns1__SnapshotDisabled (1794)
/* ns1:SnapshotDisabled */
class SOAP_CMAC ns1__SnapshotDisabled : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1794; } /* = unique id SOAP_TYPE_ns1__SnapshotDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotDisabled() { ns1__SnapshotDisabled::soap_default(NULL); }
	virtual ~ns1__SnapshotDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotIncompatibleDeviceInVm
#define SOAP_TYPE_ns1__SnapshotIncompatibleDeviceInVm (1796)
/* ns1:SnapshotIncompatibleDeviceInVm */
class SOAP_CMAC ns1__SnapshotIncompatibleDeviceInVm : public ns1__SnapshotFault
{
public:
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1796; } /* = unique id SOAP_TYPE_ns1__SnapshotIncompatibleDeviceInVm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotIncompatibleDeviceInVm() { ns1__SnapshotIncompatibleDeviceInVm::soap_default(NULL); }
	virtual ~ns1__SnapshotIncompatibleDeviceInVm() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotLocked
#define SOAP_TYPE_ns1__SnapshotLocked (1797)
/* ns1:SnapshotLocked */
class SOAP_CMAC ns1__SnapshotLocked : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1797; } /* = unique id SOAP_TYPE_ns1__SnapshotLocked */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotLocked() { ns1__SnapshotLocked::soap_default(NULL); }
	virtual ~ns1__SnapshotLocked() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotNoChange
#define SOAP_TYPE_ns1__SnapshotNoChange (1801)
/* ns1:SnapshotNoChange */
class SOAP_CMAC ns1__SnapshotNoChange : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1801; } /* = unique id SOAP_TYPE_ns1__SnapshotNoChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotNoChange() { ns1__SnapshotNoChange::soap_default(NULL); }
	virtual ~ns1__SnapshotNoChange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotRevertIssue
#define SOAP_TYPE_ns1__SnapshotRevertIssue (1802)
/* ns1:SnapshotRevertIssue */
class SOAP_CMAC ns1__SnapshotRevertIssue : public ns1__MigrationFault
{
public:
	std::string *snapshotName;	/* optional element of type xsd:string */
	std::vector<ns1__Event * >event;	/* optional element of type ns1:Event */
	bool errors;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1802; } /* = unique id SOAP_TYPE_ns1__SnapshotRevertIssue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotRevertIssue() { ns1__SnapshotRevertIssue::soap_default(NULL); }
	virtual ~ns1__SnapshotRevertIssue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoftRuleVioCorrectionDisallowed
#define SOAP_TYPE_ns1__SoftRuleVioCorrectionDisallowed (1803)
/* ns1:SoftRuleVioCorrectionDisallowed */
class SOAP_CMAC ns1__SoftRuleVioCorrectionDisallowed : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1803; } /* = unique id SOAP_TYPE_ns1__SoftRuleVioCorrectionDisallowed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoftRuleVioCorrectionDisallowed() { ns1__SoftRuleVioCorrectionDisallowed::soap_default(NULL); }
	virtual ~ns1__SoftRuleVioCorrectionDisallowed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SoftRuleVioCorrectionImpact
#define SOAP_TYPE_ns1__SoftRuleVioCorrectionImpact (1804)
/* ns1:SoftRuleVioCorrectionImpact */
class SOAP_CMAC ns1__SoftRuleVioCorrectionImpact : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1804; } /* = unique id SOAP_TYPE_ns1__SoftRuleVioCorrectionImpact */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SoftRuleVioCorrectionImpact() { ns1__SoftRuleVioCorrectionImpact::soap_default(NULL); }
	virtual ~ns1__SoftRuleVioCorrectionImpact() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SuspendedRelocateNotSupported
#define SOAP_TYPE_ns1__SuspendedRelocateNotSupported (1806)
/* ns1:SuspendedRelocateNotSupported */
class SOAP_CMAC ns1__SuspendedRelocateNotSupported : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1806; } /* = unique id SOAP_TYPE_ns1__SuspendedRelocateNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SuspendedRelocateNotSupported() { ns1__SuspendedRelocateNotSupported::soap_default(NULL); }
	virtual ~ns1__SuspendedRelocateNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SwitchNotInUpgradeMode
#define SOAP_TYPE_ns1__SwitchNotInUpgradeMode (1810)
/* ns1:SwitchNotInUpgradeMode */
class SOAP_CMAC ns1__SwitchNotInUpgradeMode : public ns1__DvsFault
{
public:
	virtual int soap_type() const { return 1810; } /* = unique id SOAP_TYPE_ns1__SwitchNotInUpgradeMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SwitchNotInUpgradeMode() { ns1__SwitchNotInUpgradeMode::soap_default(NULL); }
	virtual ~ns1__SwitchNotInUpgradeMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TooManyDisksOnLegacyHost
#define SOAP_TYPE_ns1__TooManyDisksOnLegacyHost (1815)
/* ns1:TooManyDisksOnLegacyHost */
class SOAP_CMAC ns1__TooManyDisksOnLegacyHost : public ns1__MigrationFault
{
public:
	int diskCount;	/* required element of type xsd:int */
	bool timeoutDanger;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1815; } /* = unique id SOAP_TYPE_ns1__TooManyDisksOnLegacyHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TooManyDisksOnLegacyHost() { ns1__TooManyDisksOnLegacyHost::soap_default(NULL); }
	virtual ~ns1__TooManyDisksOnLegacyHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TooManyHosts
#define SOAP_TYPE_ns1__TooManyHosts (1816)
/* ns1:TooManyHosts */
class SOAP_CMAC ns1__TooManyHosts : public ns1__HostConnectFault
{
public:
	virtual int soap_type() const { return 1816; } /* = unique id SOAP_TYPE_ns1__TooManyHosts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TooManyHosts() { ns1__TooManyHosts::soap_default(NULL); }
	virtual ~ns1__TooManyHosts() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TooManySnapshotLevels
#define SOAP_TYPE_ns1__TooManySnapshotLevels (1817)
/* ns1:TooManySnapshotLevels */
class SOAP_CMAC ns1__TooManySnapshotLevels : public ns1__SnapshotFault
{
public:
	virtual int soap_type() const { return 1817; } /* = unique id SOAP_TYPE_ns1__TooManySnapshotLevels */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TooManySnapshotLevels() { ns1__TooManySnapshotLevels::soap_default(NULL); }
	virtual ~ns1__TooManySnapshotLevels() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsAlreadyUpgraded
#define SOAP_TYPE_ns1__ToolsAlreadyUpgraded (1818)
/* ns1:ToolsAlreadyUpgraded */
class SOAP_CMAC ns1__ToolsAlreadyUpgraded : public ns1__VmToolsUpgradeFault
{
public:
	virtual int soap_type() const { return 1818; } /* = unique id SOAP_TYPE_ns1__ToolsAlreadyUpgraded */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsAlreadyUpgraded() { ns1__ToolsAlreadyUpgraded::soap_default(NULL); }
	virtual ~ns1__ToolsAlreadyUpgraded() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsAutoUpgradeNotSupported
#define SOAP_TYPE_ns1__ToolsAutoUpgradeNotSupported (1819)
/* ns1:ToolsAutoUpgradeNotSupported */
class SOAP_CMAC ns1__ToolsAutoUpgradeNotSupported : public ns1__VmToolsUpgradeFault
{
public:
	virtual int soap_type() const { return 1819; } /* = unique id SOAP_TYPE_ns1__ToolsAutoUpgradeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsAutoUpgradeNotSupported() { ns1__ToolsAutoUpgradeNotSupported::soap_default(NULL); }
	virtual ~ns1__ToolsAutoUpgradeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsImageNotAvailable
#define SOAP_TYPE_ns1__ToolsImageNotAvailable (1820)
/* ns1:ToolsImageNotAvailable */
class SOAP_CMAC ns1__ToolsImageNotAvailable : public ns1__VmToolsUpgradeFault
{
public:
	virtual int soap_type() const { return 1820; } /* = unique id SOAP_TYPE_ns1__ToolsImageNotAvailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsImageNotAvailable() { ns1__ToolsImageNotAvailable::soap_default(NULL); }
	virtual ~ns1__ToolsImageNotAvailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsImageSignatureCheckFailed
#define SOAP_TYPE_ns1__ToolsImageSignatureCheckFailed (1821)
/* ns1:ToolsImageSignatureCheckFailed */
class SOAP_CMAC ns1__ToolsImageSignatureCheckFailed : public ns1__VmToolsUpgradeFault
{
public:
	virtual int soap_type() const { return 1821; } /* = unique id SOAP_TYPE_ns1__ToolsImageSignatureCheckFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsImageSignatureCheckFailed() { ns1__ToolsImageSignatureCheckFailed::soap_default(NULL); }
	virtual ~ns1__ToolsImageSignatureCheckFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsInstallationInProgress
#define SOAP_TYPE_ns1__ToolsInstallationInProgress (1822)
/* ns1:ToolsInstallationInProgress */
class SOAP_CMAC ns1__ToolsInstallationInProgress : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1822; } /* = unique id SOAP_TYPE_ns1__ToolsInstallationInProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsInstallationInProgress() { ns1__ToolsInstallationInProgress::soap_default(NULL); }
	virtual ~ns1__ToolsInstallationInProgress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ToolsUpgradeCancelled
#define SOAP_TYPE_ns1__ToolsUpgradeCancelled (1824)
/* ns1:ToolsUpgradeCancelled */
class SOAP_CMAC ns1__ToolsUpgradeCancelled : public ns1__VmToolsUpgradeFault
{
public:
	virtual int soap_type() const { return 1824; } /* = unique id SOAP_TYPE_ns1__ToolsUpgradeCancelled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ToolsUpgradeCancelled() { ns1__ToolsUpgradeCancelled::soap_default(NULL); }
	virtual ~ns1__ToolsUpgradeCancelled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UncommittedUndoableDisk
#define SOAP_TYPE_ns1__UncommittedUndoableDisk (1825)
/* ns1:UncommittedUndoableDisk */
class SOAP_CMAC ns1__UncommittedUndoableDisk : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1825; } /* = unique id SOAP_TYPE_ns1__UncommittedUndoableDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UncommittedUndoableDisk() { ns1__UncommittedUndoableDisk::soap_default(NULL); }
	virtual ~ns1__UncommittedUndoableDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UncustomizableGuest
#define SOAP_TYPE_ns1__UncustomizableGuest (1827)
/* ns1:UncustomizableGuest */
class SOAP_CMAC ns1__UncustomizableGuest : public ns1__CustomizationFault
{
public:
	std::string uncustomizableGuestOS;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1827; } /* = unique id SOAP_TYPE_ns1__UncustomizableGuest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UncustomizableGuest() { ns1__UncustomizableGuest::soap_default(NULL); }
	virtual ~ns1__UncustomizableGuest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnexpectedCustomizationFault
#define SOAP_TYPE_ns1__UnexpectedCustomizationFault (1828)
/* ns1:UnexpectedCustomizationFault */
class SOAP_CMAC ns1__UnexpectedCustomizationFault : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1828; } /* = unique id SOAP_TYPE_ns1__UnexpectedCustomizationFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnexpectedCustomizationFault() { ns1__UnexpectedCustomizationFault::soap_default(NULL); }
	virtual ~ns1__UnexpectedCustomizationFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnsupportedDatastore
#define SOAP_TYPE_ns1__UnsupportedDatastore (1831)
/* ns1:UnsupportedDatastore */
class SOAP_CMAC ns1__UnsupportedDatastore : public ns1__VmConfigFault
{
public:
	ns1__ManagedObjectReference *datastore;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1831; } /* = unique id SOAP_TYPE_ns1__UnsupportedDatastore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnsupportedDatastore() { ns1__UnsupportedDatastore::soap_default(NULL); }
	virtual ~ns1__UnsupportedDatastore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnsupportedVmxLocation
#define SOAP_TYPE_ns1__UnsupportedVmxLocation (1834)
/* ns1:UnsupportedVmxLocation */
class SOAP_CMAC ns1__UnsupportedVmxLocation : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1834; } /* = unique id SOAP_TYPE_ns1__UnsupportedVmxLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnsupportedVmxLocation() { ns1__UnsupportedVmxLocation::soap_default(NULL); }
	virtual ~ns1__UnsupportedVmxLocation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppNotRunning
#define SOAP_TYPE_ns1__VAppNotRunning (1838)
/* ns1:VAppNotRunning */
class SOAP_CMAC ns1__VAppNotRunning : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1838; } /* = unique id SOAP_TYPE_ns1__VAppNotRunning */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppNotRunning() { ns1__VAppNotRunning::soap_default(NULL); }
	virtual ~ns1__VAppNotRunning() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppPropertyFault
#define SOAP_TYPE_ns1__VAppPropertyFault (1839)
/* ns1:VAppPropertyFault */
class SOAP_CMAC ns1__VAppPropertyFault : public ns1__VmConfigFault
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string category;	/* required element of type xsd:string */
	std::string label;	/* required element of type xsd:string */
	std::string type;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1839; } /* = unique id SOAP_TYPE_ns1__VAppPropertyFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppPropertyFault() { ns1__VAppPropertyFault::soap_default(NULL); }
	virtual ~ns1__VAppPropertyFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VAppTaskInProgress
#define SOAP_TYPE_ns1__VAppTaskInProgress (1840)
/* ns1:VAppTaskInProgress */
class SOAP_CMAC ns1__VAppTaskInProgress : public ns1__TaskInProgress
{
public:
	virtual int soap_type() const { return 1840; } /* = unique id SOAP_TYPE_ns1__VAppTaskInProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VAppTaskInProgress() { ns1__VAppTaskInProgress::soap_default(NULL); }
	virtual ~ns1__VAppTaskInProgress() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionInterfaceIssue
#define SOAP_TYPE_ns1__VMotionInterfaceIssue (1844)
/* ns1:VMotionInterfaceIssue */
class SOAP_CMAC ns1__VMotionInterfaceIssue : public ns1__MigrationFault
{
public:
	bool atSourceHost;	/* required element of type xsd:boolean */
	std::string failedHost;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *failedHostEntity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1844; } /* = unique id SOAP_TYPE_ns1__VMotionInterfaceIssue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionInterfaceIssue() { ns1__VMotionInterfaceIssue::soap_default(NULL); }
	virtual ~ns1__VMotionInterfaceIssue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionProtocolIncompatible
#define SOAP_TYPE_ns1__VMotionProtocolIncompatible (1850)
/* ns1:VMotionProtocolIncompatible */
class SOAP_CMAC ns1__VMotionProtocolIncompatible : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1850; } /* = unique id SOAP_TYPE_ns1__VMotionProtocolIncompatible */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionProtocolIncompatible() { ns1__VMotionProtocolIncompatible::soap_default(NULL); }
	virtual ~ns1__VMotionProtocolIncompatible() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualHardwareCompatibilityIssue
#define SOAP_TYPE_ns1__VirtualHardwareCompatibilityIssue (1855)
/* ns1:VirtualHardwareCompatibilityIssue */
class SOAP_CMAC ns1__VirtualHardwareCompatibilityIssue : public ns1__VmConfigFault
{
public:
	virtual int soap_type() const { return 1855; } /* = unique id SOAP_TYPE_ns1__VirtualHardwareCompatibilityIssue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualHardwareCompatibilityIssue() { ns1__VirtualHardwareCompatibilityIssue::soap_default(NULL); }
	virtual ~ns1__VirtualHardwareCompatibilityIssue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmAlreadyExistsInDatacenter
#define SOAP_TYPE_ns1__VmAlreadyExistsInDatacenter (1857)
/* ns1:VmAlreadyExistsInDatacenter */
class SOAP_CMAC ns1__VmAlreadyExistsInDatacenter : public ns1__InvalidFolder
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
	std::string hostname;	/* required element of type xsd:string */
	std::vector<ns1__ManagedObjectReference * >vm;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1857; } /* = unique id SOAP_TYPE_ns1__VmAlreadyExistsInDatacenter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmAlreadyExistsInDatacenter() { ns1__VmAlreadyExistsInDatacenter::soap_default(NULL); }
	virtual ~ns1__VmAlreadyExistsInDatacenter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigIncompatibleForFaultTolerance
#define SOAP_TYPE_ns1__VmConfigIncompatibleForFaultTolerance (1859)
/* ns1:VmConfigIncompatibleForFaultTolerance */
class SOAP_CMAC ns1__VmConfigIncompatibleForFaultTolerance : public ns1__VmConfigFault
{
public:
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1859; } /* = unique id SOAP_TYPE_ns1__VmConfigIncompatibleForFaultTolerance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigIncompatibleForFaultTolerance() { ns1__VmConfigIncompatibleForFaultTolerance::soap_default(NULL); }
	virtual ~ns1__VmConfigIncompatibleForFaultTolerance() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmConfigIncompatibleForRecordReplay
#define SOAP_TYPE_ns1__VmConfigIncompatibleForRecordReplay (1860)
/* ns1:VmConfigIncompatibleForRecordReplay */
class SOAP_CMAC ns1__VmConfigIncompatibleForRecordReplay : public ns1__VmConfigFault
{
public:
	ns1__LocalizedMethodFault *fault;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1860; } /* = unique id SOAP_TYPE_ns1__VmConfigIncompatibleForRecordReplay */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmConfigIncompatibleForRecordReplay() { ns1__VmConfigIncompatibleForRecordReplay::soap_default(NULL); }
	virtual ~ns1__VmConfigIncompatibleForRecordReplay() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceConfigIssue
#define SOAP_TYPE_ns1__VmFaultToleranceConfigIssue (1861)
/* ns1:VmFaultToleranceConfigIssue */
class SOAP_CMAC ns1__VmFaultToleranceConfigIssue : public ns1__VmFaultToleranceIssue
{
public:
	std::string *reason;	/* optional element of type xsd:string */
	std::string *entityName;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1861; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceConfigIssue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceConfigIssue() { ns1__VmFaultToleranceConfigIssue::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceConfigIssue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceConfigIssueWrapper
#define SOAP_TYPE_ns1__VmFaultToleranceConfigIssueWrapper (1862)
/* ns1:VmFaultToleranceConfigIssueWrapper */
class SOAP_CMAC ns1__VmFaultToleranceConfigIssueWrapper : public ns1__VmFaultToleranceIssue
{
public:
	std::string *entityName;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *entity;	/* optional element of type ns1:ManagedObjectReference */
	ns1__LocalizedMethodFault *error;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1862; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceConfigIssueWrapper */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceConfigIssueWrapper() { ns1__VmFaultToleranceConfigIssueWrapper::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceConfigIssueWrapper() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBacking
#define SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBacking (1863)
/* ns1:VmFaultToleranceInvalidFileBacking */
class SOAP_CMAC ns1__VmFaultToleranceInvalidFileBacking : public ns1__VmFaultToleranceIssue
{
public:
	std::string *backingType;	/* optional element of type xsd:string */
	std::string *backingFilename;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1863; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceInvalidFileBacking */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceInvalidFileBacking() { ns1__VmFaultToleranceInvalidFileBacking::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceInvalidFileBacking() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceOpIssuesList
#define SOAP_TYPE_ns1__VmFaultToleranceOpIssuesList (1865)
/* ns1:VmFaultToleranceOpIssuesList */
class SOAP_CMAC ns1__VmFaultToleranceOpIssuesList : public ns1__VmFaultToleranceIssue
{
public:
	std::vector<ns1__LocalizedMethodFault * >errors;	/* optional element of type ns1:LocalizedMethodFault */
	std::vector<ns1__LocalizedMethodFault * >warnings;	/* optional element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1865; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceOpIssuesList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceOpIssuesList() { ns1__VmFaultToleranceOpIssuesList::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceOpIssuesList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmFaultToleranceTooManyVMsOnHost
#define SOAP_TYPE_ns1__VmFaultToleranceTooManyVMsOnHost (1866)
/* ns1:VmFaultToleranceTooManyVMsOnHost */
class SOAP_CMAC ns1__VmFaultToleranceTooManyVMsOnHost : public ns1__InsufficientResourcesFault
{
public:
	std::string *hostName;	/* optional element of type xsd:string */
	int maxNumFtVms;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1866; } /* = unique id SOAP_TYPE_ns1__VmFaultToleranceTooManyVMsOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmFaultToleranceTooManyVMsOnHost() { ns1__VmFaultToleranceTooManyVMsOnHost::soap_default(NULL); }
	virtual ~ns1__VmFaultToleranceTooManyVMsOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmHostAffinityRuleViolation
#define SOAP_TYPE_ns1__VmHostAffinityRuleViolation (1867)
/* ns1:VmHostAffinityRuleViolation */
class SOAP_CMAC ns1__VmHostAffinityRuleViolation : public ns1__VmConfigFault
{
public:
	std::string vmName;	/* required element of type xsd:string */
	std::string hostName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1867; } /* = unique id SOAP_TYPE_ns1__VmHostAffinityRuleViolation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmHostAffinityRuleViolation() { ns1__VmHostAffinityRuleViolation::soap_default(NULL); }
	virtual ~ns1__VmHostAffinityRuleViolation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmLimitLicense
#define SOAP_TYPE_ns1__VmLimitLicense (1868)
/* ns1:VmLimitLicense */
class SOAP_CMAC ns1__VmLimitLicense : public ns1__NotEnoughLicenses
{
public:
	int limit;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1868; } /* = unique id SOAP_TYPE_ns1__VmLimitLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmLimitLicense() { ns1__VmLimitLicense::soap_default(NULL); }
	virtual ~ns1__VmLimitLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPowerOnDisabled
#define SOAP_TYPE_ns1__VmPowerOnDisabled (1870)
/* ns1:VmPowerOnDisabled */
class SOAP_CMAC ns1__VmPowerOnDisabled : public ns1__InvalidState
{
public:
	virtual int soap_type() const { return 1870; } /* = unique id SOAP_TYPE_ns1__VmPowerOnDisabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPowerOnDisabled() { ns1__VmPowerOnDisabled::soap_default(NULL); }
	virtual ~ns1__VmPowerOnDisabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsMountFault
#define SOAP_TYPE_ns1__VmfsMountFault (1876)
/* ns1:VmfsMountFault */
class SOAP_CMAC ns1__VmfsMountFault : public ns1__HostConfigFault
{
public:
	std::string uuid;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1876; } /* = unique id SOAP_TYPE_ns1__VmfsMountFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsMountFault() { ns1__VmfsMountFault::soap_default(NULL); }
	virtual ~ns1__VmfsMountFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmotionInterfaceNotEnabled
#define SOAP_TYPE_ns1__VmotionInterfaceNotEnabled (1877)
/* ns1:VmotionInterfaceNotEnabled */
class SOAP_CMAC ns1__VmotionInterfaceNotEnabled : public ns1__HostPowerOpFailed
{
public:
	virtual int soap_type() const { return 1877; } /* = unique id SOAP_TYPE_ns1__VmotionInterfaceNotEnabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmotionInterfaceNotEnabled() { ns1__VmotionInterfaceNotEnabled::soap_default(NULL); }
	virtual ~ns1__VmotionInterfaceNotEnabled() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VolumeEditorError
#define SOAP_TYPE_ns1__VolumeEditorError (1878)
/* ns1:VolumeEditorError */
class SOAP_CMAC ns1__VolumeEditorError : public ns1__CustomizationFault
{
public:
	virtual int soap_type() const { return 1878; } /* = unique id SOAP_TYPE_ns1__VolumeEditorError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VolumeEditorError() { ns1__VolumeEditorError::soap_default(NULL); }
	virtual ~ns1__VolumeEditorError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WakeOnLanNotSupportedByVmotionNIC
#define SOAP_TYPE_ns1__WakeOnLanNotSupportedByVmotionNIC (1880)
/* ns1:WakeOnLanNotSupportedByVmotionNIC */
class SOAP_CMAC ns1__WakeOnLanNotSupportedByVmotionNIC : public ns1__HostPowerOpFailed
{
public:
	virtual int soap_type() const { return 1880; } /* = unique id SOAP_TYPE_ns1__WakeOnLanNotSupportedByVmotionNIC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WakeOnLanNotSupportedByVmotionNIC() { ns1__WakeOnLanNotSupportedByVmotionNIC::soap_default(NULL); }
	virtual ~ns1__WakeOnLanNotSupportedByVmotionNIC() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WillModifyConfigCpuRequirements
#define SOAP_TYPE_ns1__WillModifyConfigCpuRequirements (1881)
/* ns1:WillModifyConfigCpuRequirements */
class SOAP_CMAC ns1__WillModifyConfigCpuRequirements : public ns1__MigrationFault
{
public:
	virtual int soap_type() const { return 1881; } /* = unique id SOAP_TYPE_ns1__WillModifyConfigCpuRequirements */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WillModifyConfigCpuRequirements() { ns1__WillModifyConfigCpuRequirements::soap_default(NULL); }
	virtual ~ns1__WillModifyConfigCpuRequirements() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostActiveDirectoryInfo
#define SOAP_TYPE_ns1__HostActiveDirectoryInfo (1882)
/* ns1:HostActiveDirectoryInfo */
class SOAP_CMAC ns1__HostActiveDirectoryInfo : public ns1__HostDirectoryStoreInfo
{
public:
	std::string *joinedDomain;	/* optional element of type xsd:string */
	std::vector<std::string >trustedDomain;	/* optional element of type xsd:string */
	std::string *domainMembershipStatus;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1882; } /* = unique id SOAP_TYPE_ns1__HostActiveDirectoryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostActiveDirectoryInfo() { ns1__HostActiveDirectoryInfo::soap_default(NULL); }
	virtual ~ns1__HostActiveDirectoryInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateConfigFileQuery
#define SOAP_TYPE_ns1__TemplateConfigFileQuery (1922)
/* ns1:TemplateConfigFileQuery */
class SOAP_CMAC ns1__TemplateConfigFileQuery : public ns1__VmConfigFileQuery
{
public:
	virtual int soap_type() const { return 1922; } /* = unique id SOAP_TYPE_ns1__TemplateConfigFileQuery */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateConfigFileQuery() { ns1__TemplateConfigFileQuery::soap_default(NULL); }
	virtual ~ns1__TemplateConfigFileQuery() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TemplateConfigFileInfo
#define SOAP_TYPE_ns1__TemplateConfigFileInfo (1933)
/* ns1:TemplateConfigFileInfo */
class SOAP_CMAC ns1__TemplateConfigFileInfo : public ns1__VmConfigFileInfo
{
public:
	virtual int soap_type() const { return 1933; } /* = unique id SOAP_TYPE_ns1__TemplateConfigFileInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TemplateConfigFileInfo() { ns1__TemplateConfigFileInfo::soap_default(NULL); }
	virtual ~ns1__TemplateConfigFileInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsDatastoreAllExtentOption
#define SOAP_TYPE_ns1__VmfsDatastoreAllExtentOption (1954)
/* ns1:VmfsDatastoreAllExtentOption */
class SOAP_CMAC ns1__VmfsDatastoreAllExtentOption : public ns1__VmfsDatastoreSingleExtentOption
{
public:
	virtual int soap_type() const { return 1954; } /* = unique id SOAP_TYPE_ns1__VmfsDatastoreAllExtentOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsDatastoreAllExtentOption() { ns1__VmfsDatastoreAllExtentOption::soap_default(NULL); }
	virtual ~ns1__VmfsDatastoreAllExtentOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostScsiDisk
#define SOAP_TYPE_ns1__HostScsiDisk (2174)
/* ns1:HostScsiDisk */
class SOAP_CMAC ns1__HostScsiDisk : public ns1__ScsiLun
{
public:
	ns1__HostDiskDimensionsLba *capacity;	/* required element of type ns1:HostDiskDimensionsLba */
	std::string devicePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2174; } /* = unique id SOAP_TYPE_ns1__HostScsiDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostScsiDisk() { ns1__HostScsiDisk::soap_default(NULL); }
	virtual ~ns1__HostScsiDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OptionDef
#define SOAP_TYPE_ns1__OptionDef (2292)
/* ns1:OptionDef */
class SOAP_CMAC ns1__OptionDef : public ns1__ElementDescription
{
public:
	ns1__OptionType *optionType;	/* required element of type ns1:OptionType */
public:
	virtual int soap_type() const { return 2292; } /* = unique id SOAP_TYPE_ns1__OptionDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OptionDef() { ns1__OptionDef::soap_default(NULL); }
	virtual ~ns1__OptionDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileConfigSpec
#define SOAP_TYPE_ns1__ClusterProfileConfigSpec (2338)
/* ns1:ClusterProfileConfigSpec */
class SOAP_CMAC ns1__ClusterProfileConfigSpec : public ns1__ClusterProfileCreateSpec
{
public:
	virtual int soap_type() const { return 2338; } /* = unique id SOAP_TYPE_ns1__ClusterProfileConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileConfigSpec() { ns1__ClusterProfileConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterProfileConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsServiceConsoleVNicProfile
#define SOAP_TYPE_ns1__DvsServiceConsoleVNicProfile (2367)
/* ns1:DvsServiceConsoleVNicProfile */
class SOAP_CMAC ns1__DvsServiceConsoleVNicProfile : public ns1__DvsVNicProfile
{
public:
	virtual int soap_type() const { return 2367; } /* = unique id SOAP_TYPE_ns1__DvsServiceConsoleVNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsServiceConsoleVNicProfile() { ns1__DvsServiceConsoleVNicProfile::soap_default(NULL); }
	virtual ~ns1__DvsServiceConsoleVNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DvsHostVNicProfile
#define SOAP_TYPE_ns1__DvsHostVNicProfile (2369)
/* ns1:DvsHostVNicProfile */
class SOAP_CMAC ns1__DvsHostVNicProfile : public ns1__DvsVNicProfile
{
public:
	virtual int soap_type() const { return 2369; } /* = unique id SOAP_TYPE_ns1__DvsHostVNicProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DvsHostVNicProfile() { ns1__DvsHostVNicProfile::soap_default(NULL); }
	virtual ~ns1__DvsHostVNicProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPortGroupProfile
#define SOAP_TYPE_ns1__VmPortGroupProfile (2385)
/* ns1:VmPortGroupProfile */
class SOAP_CMAC ns1__VmPortGroupProfile : public ns1__PortGroupProfile
{
public:
	virtual int soap_type() const { return 2385; } /* = unique id SOAP_TYPE_ns1__VmPortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPortGroupProfile() { ns1__VmPortGroupProfile::soap_default(NULL); }
	virtual ~ns1__VmPortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPortGroupProfile
#define SOAP_TYPE_ns1__HostPortGroupProfile (2387)
/* ns1:HostPortGroupProfile */
class SOAP_CMAC ns1__HostPortGroupProfile : public ns1__PortGroupProfile
{
public:
	ns1__IpAddressProfile *ipConfig;	/* required element of type ns1:IpAddressProfile */
public:
	virtual int soap_type() const { return 2387; } /* = unique id SOAP_TYPE_ns1__HostPortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPortGroupProfile() { ns1__HostPortGroupProfile::soap_default(NULL); }
	virtual ~ns1__HostPortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ServiceConsolePortGroupProfile
#define SOAP_TYPE_ns1__ServiceConsolePortGroupProfile (2389)
/* ns1:ServiceConsolePortGroupProfile */
class SOAP_CMAC ns1__ServiceConsolePortGroupProfile : public ns1__PortGroupProfile
{
public:
	ns1__IpAddressProfile *ipConfig;	/* required element of type ns1:IpAddressProfile */
public:
	virtual int soap_type() const { return 2389; } /* = unique id SOAP_TYPE_ns1__ServiceConsolePortGroupProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ServiceConsolePortGroupProfile() { ns1__ServiceConsolePortGroupProfile::soap_default(NULL); }
	virtual ~ns1__ServiceConsolePortGroupProfile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileCompleteConfigSpec
#define SOAP_TYPE_ns1__HostProfileCompleteConfigSpec (2399)
/* ns1:HostProfileCompleteConfigSpec */
class SOAP_CMAC ns1__HostProfileCompleteConfigSpec : public ns1__HostProfileConfigSpec
{
public:
	ns1__HostApplyProfile *applyProfile;	/* optional element of type ns1:HostApplyProfile */
	ns1__ComplianceProfile *customComplyProfile;	/* optional element of type ns1:ComplianceProfile */
	bool disabledExpressionListChanged;	/* required element of type xsd:boolean */
	std::vector<std::string >disabledExpressionList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2399; } /* = unique id SOAP_TYPE_ns1__HostProfileCompleteConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileCompleteConfigSpec() { ns1__HostProfileCompleteConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostProfileCompleteConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostProfileHostBasedConfigSpec
#define SOAP_TYPE_ns1__HostProfileHostBasedConfigSpec (2400)
/* ns1:HostProfileHostBasedConfigSpec */
class SOAP_CMAC ns1__HostProfileHostBasedConfigSpec : public ns1__HostProfileConfigSpec
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 2400; } /* = unique id SOAP_TYPE_ns1__HostProfileHostBasedConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostProfileHostBasedConfigSpec() { ns1__HostProfileHostBasedConfigSpec::soap_default(NULL); }
	virtual ~ns1__HostProfileHostBasedConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ScheduledTaskDetail
#define SOAP_TYPE_ns1__ScheduledTaskDetail (2402)
/* ns1:ScheduledTaskDetail */
class SOAP_CMAC ns1__ScheduledTaskDetail : public ns1__TypeDescription
{
public:
	std::string frequency;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2402; } /* = unique id SOAP_TYPE_ns1__ScheduledTaskDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ScheduledTaskDetail() { ns1__ScheduledTaskDetail::soap_default(NULL); }
	virtual ~ns1__ScheduledTaskDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HourlyTaskScheduler
#define SOAP_TYPE_ns1__HourlyTaskScheduler (2410)
/* ns1:HourlyTaskScheduler */
class SOAP_CMAC ns1__HourlyTaskScheduler : public ns1__RecurrentTaskScheduler
{
public:
	int minute;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2410; } /* = unique id SOAP_TYPE_ns1__HourlyTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HourlyTaskScheduler() { ns1__HourlyTaskScheduler::soap_default(NULL); }
	virtual ~ns1__HourlyTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineIdeDiskDeviceInfo
#define SOAP_TYPE_ns1__VirtualMachineIdeDiskDeviceInfo (2509)
/* ns1:VirtualMachineIdeDiskDeviceInfo */
class SOAP_CMAC ns1__VirtualMachineIdeDiskDeviceInfo : public ns1__VirtualMachineDiskDeviceInfo
{
public:
	std::vector<ns1__VirtualMachineIdeDiskDevicePartitionInfo * >partitionTable;	/* optional element of type ns1:VirtualMachineIdeDiskDevicePartitionInfo */
public:
	virtual int soap_type() const { return 2509; } /* = unique id SOAP_TYPE_ns1__VirtualMachineIdeDiskDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineIdeDiskDeviceInfo() { ns1__VirtualMachineIdeDiskDeviceInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineIdeDiskDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualMachineScsiDiskDeviceInfo
#define SOAP_TYPE_ns1__VirtualMachineScsiDiskDeviceInfo (2527)
/* ns1:VirtualMachineScsiDiskDeviceInfo */
class SOAP_CMAC ns1__VirtualMachineScsiDiskDeviceInfo : public ns1__VirtualMachineDiskDeviceInfo
{
public:
	ns1__HostScsiDisk *disk;	/* optional element of type ns1:HostScsiDisk */
	std::string *transportHint;	/* optional element of type xsd:string */
	int *lunNumber;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2527; } /* = unique id SOAP_TYPE_ns1__VirtualMachineScsiDiskDeviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualMachineScsiDiskDeviceInfo() { ns1__VirtualMachineScsiDiskDeviceInfo::soap_default(NULL); }
	virtual ~ns1__VirtualMachineScsiDiskDeviceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromIsoBackingInfo
#define SOAP_TYPE_ns1__VirtualCdromIsoBackingInfo (2603)
/* ns1:VirtualCdromIsoBackingInfo */
class SOAP_CMAC ns1__VirtualCdromIsoBackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	virtual int soap_type() const { return 2603; } /* = unique id SOAP_TYPE_ns1__VirtualCdromIsoBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromIsoBackingInfo() { ns1__VirtualCdromIsoBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualCdromIsoBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromPassthroughBackingInfo
#define SOAP_TYPE_ns1__VirtualCdromPassthroughBackingInfo (2604)
/* ns1:VirtualCdromPassthroughBackingInfo */
class SOAP_CMAC ns1__VirtualCdromPassthroughBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	bool exclusive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2604; } /* = unique id SOAP_TYPE_ns1__VirtualCdromPassthroughBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromPassthroughBackingInfo() { ns1__VirtualCdromPassthroughBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualCdromPassthroughBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingInfo
#define SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingInfo (2605)
/* ns1:VirtualCdromRemotePassthroughBackingInfo */
class SOAP_CMAC ns1__VirtualCdromRemotePassthroughBackingInfo : public ns1__VirtualDeviceRemoteDeviceBackingInfo
{
public:
	bool exclusive;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2605; } /* = unique id SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromRemotePassthroughBackingInfo() { ns1__VirtualCdromRemotePassthroughBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualCdromRemotePassthroughBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromAtapiBackingInfo
#define SOAP_TYPE_ns1__VirtualCdromAtapiBackingInfo (2606)
/* ns1:VirtualCdromAtapiBackingInfo */
class SOAP_CMAC ns1__VirtualCdromAtapiBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2606; } /* = unique id SOAP_TYPE_ns1__VirtualCdromAtapiBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromAtapiBackingInfo() { ns1__VirtualCdromAtapiBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualCdromAtapiBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingInfo
#define SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingInfo (2607)
/* ns1:VirtualCdromRemoteAtapiBackingInfo */
class SOAP_CMAC ns1__VirtualCdromRemoteAtapiBackingInfo : public ns1__VirtualDeviceRemoteDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2607; } /* = unique id SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromRemoteAtapiBackingInfo() { ns1__VirtualCdromRemoteAtapiBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualCdromRemoteAtapiBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromIsoBackingOption
#define SOAP_TYPE_ns1__VirtualCdromIsoBackingOption (2609)
/* ns1:VirtualCdromIsoBackingOption */
class SOAP_CMAC ns1__VirtualCdromIsoBackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	virtual int soap_type() const { return 2609; } /* = unique id SOAP_TYPE_ns1__VirtualCdromIsoBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromIsoBackingOption() { ns1__VirtualCdromIsoBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromIsoBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromPassthroughBackingOption
#define SOAP_TYPE_ns1__VirtualCdromPassthroughBackingOption (2610)
/* ns1:VirtualCdromPassthroughBackingOption */
class SOAP_CMAC ns1__VirtualCdromPassthroughBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	ns1__BoolOption *exclusive;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2610; } /* = unique id SOAP_TYPE_ns1__VirtualCdromPassthroughBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromPassthroughBackingOption() { ns1__VirtualCdromPassthroughBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromPassthroughBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingOption
#define SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingOption (2611)
/* ns1:VirtualCdromRemotePassthroughBackingOption */
class SOAP_CMAC ns1__VirtualCdromRemotePassthroughBackingOption : public ns1__VirtualDeviceRemoteDeviceBackingOption
{
public:
	ns1__BoolOption *exclusive;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2611; } /* = unique id SOAP_TYPE_ns1__VirtualCdromRemotePassthroughBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromRemotePassthroughBackingOption() { ns1__VirtualCdromRemotePassthroughBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromRemotePassthroughBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromAtapiBackingOption
#define SOAP_TYPE_ns1__VirtualCdromAtapiBackingOption (2612)
/* ns1:VirtualCdromAtapiBackingOption */
class SOAP_CMAC ns1__VirtualCdromAtapiBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2612; } /* = unique id SOAP_TYPE_ns1__VirtualCdromAtapiBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromAtapiBackingOption() { ns1__VirtualCdromAtapiBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromAtapiBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingOption
#define SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingOption (2613)
/* ns1:VirtualCdromRemoteAtapiBackingOption */
class SOAP_CMAC ns1__VirtualCdromRemoteAtapiBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2613; } /* = unique id SOAP_TYPE_ns1__VirtualCdromRemoteAtapiBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualCdromRemoteAtapiBackingOption() { ns1__VirtualCdromRemoteAtapiBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualCdromRemoteAtapiBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingInfo (2638)
/* ns1:VirtualDiskSparseVer1BackingInfo */
class SOAP_CMAC ns1__VirtualDiskSparseVer1BackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	std::string diskMode;	/* required element of type xsd:string */
	bool *split;	/* optional element of type xsd:boolean */
	bool *writeThrough;	/* optional element of type xsd:boolean */
	LONG64 *spaceUsedInKB;	/* optional element of type xsd:long */
	std::string *contentId;	/* optional element of type xsd:string */
	ns1__VirtualDiskSparseVer1BackingInfo *parent;	/* optional element of type ns1:VirtualDiskSparseVer1BackingInfo */
public:
	virtual int soap_type() const { return 2638; } /* = unique id SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskSparseVer1BackingInfo() { ns1__VirtualDiskSparseVer1BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskSparseVer1BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingInfo (2639)
/* ns1:VirtualDiskSparseVer2BackingInfo */
class SOAP_CMAC ns1__VirtualDiskSparseVer2BackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	std::string diskMode;	/* required element of type xsd:string */
	bool *split;	/* optional element of type xsd:boolean */
	bool *writeThrough;	/* optional element of type xsd:boolean */
	LONG64 *spaceUsedInKB;	/* optional element of type xsd:long */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *contentId;	/* optional element of type xsd:string */
	std::string *changeId;	/* optional element of type xsd:string */
	ns1__VirtualDiskSparseVer2BackingInfo *parent;	/* optional element of type ns1:VirtualDiskSparseVer2BackingInfo */
public:
	virtual int soap_type() const { return 2639; } /* = unique id SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskSparseVer2BackingInfo() { ns1__VirtualDiskSparseVer2BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskSparseVer2BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingInfo (2640)
/* ns1:VirtualDiskFlatVer1BackingInfo */
class SOAP_CMAC ns1__VirtualDiskFlatVer1BackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	std::string diskMode;	/* required element of type xsd:string */
	bool *split;	/* optional element of type xsd:boolean */
	bool *writeThrough;	/* optional element of type xsd:boolean */
	std::string *contentId;	/* optional element of type xsd:string */
	ns1__VirtualDiskFlatVer1BackingInfo *parent;	/* optional element of type ns1:VirtualDiskFlatVer1BackingInfo */
public:
	virtual int soap_type() const { return 2640; } /* = unique id SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskFlatVer1BackingInfo() { ns1__VirtualDiskFlatVer1BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskFlatVer1BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingInfo (2641)
/* ns1:VirtualDiskFlatVer2BackingInfo */
class SOAP_CMAC ns1__VirtualDiskFlatVer2BackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	std::string diskMode;	/* required element of type xsd:string */
	bool *split;	/* optional element of type xsd:boolean */
	bool *writeThrough;	/* optional element of type xsd:boolean */
	bool *thinProvisioned;	/* optional element of type xsd:boolean */
	bool *eagerlyScrub;	/* optional element of type xsd:boolean */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *contentId;	/* optional element of type xsd:string */
	std::string *changeId;	/* optional element of type xsd:string */
	ns1__VirtualDiskFlatVer2BackingInfo *parent;	/* optional element of type ns1:VirtualDiskFlatVer2BackingInfo */
public:
	virtual int soap_type() const { return 2641; } /* = unique id SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskFlatVer2BackingInfo() { ns1__VirtualDiskFlatVer2BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskFlatVer2BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingInfo (2642)
/* ns1:VirtualDiskRawDiskVer2BackingInfo */
class SOAP_CMAC ns1__VirtualDiskRawDiskVer2BackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	std::string descriptorFileName;	/* required element of type xsd:string */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *changeId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2642; } /* = unique id SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskRawDiskVer2BackingInfo() { ns1__VirtualDiskRawDiskVer2BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskRawDiskVer2BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingInfo (2644)
/* ns1:VirtualDiskRawDiskMappingVer1BackingInfo */
class SOAP_CMAC ns1__VirtualDiskRawDiskMappingVer1BackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	std::string *lunUuid;	/* optional element of type xsd:string */
	std::string *deviceName;	/* optional element of type xsd:string */
	std::string *compatibilityMode;	/* optional element of type xsd:string */
	std::string *diskMode;	/* optional element of type xsd:string */
	std::string *uuid;	/* optional element of type xsd:string */
	std::string *contentId;	/* optional element of type xsd:string */
	std::string *changeId;	/* optional element of type xsd:string */
	ns1__VirtualDiskRawDiskMappingVer1BackingInfo *parent;	/* optional element of type ns1:VirtualDiskRawDiskMappingVer1BackingInfo */
public:
	virtual int soap_type() const { return 2644; } /* = unique id SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskRawDiskMappingVer1BackingInfo() { ns1__VirtualDiskRawDiskMappingVer1BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskRawDiskMappingVer1BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingOption
#define SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingOption (2647)
/* ns1:VirtualDiskSparseVer1BackingOption */
class SOAP_CMAC ns1__VirtualDiskSparseVer1BackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	ns1__ChoiceOption *diskModes;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *split;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *writeThrough;	/* required element of type ns1:BoolOption */
	bool growable;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2647; } /* = unique id SOAP_TYPE_ns1__VirtualDiskSparseVer1BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskSparseVer1BackingOption() { ns1__VirtualDiskSparseVer1BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskSparseVer1BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingOption
#define SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingOption (2648)
/* ns1:VirtualDiskSparseVer2BackingOption */
class SOAP_CMAC ns1__VirtualDiskSparseVer2BackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	ns1__ChoiceOption *diskMode;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *split;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *writeThrough;	/* required element of type ns1:BoolOption */
	bool growable;	/* required element of type xsd:boolean */
	bool hotGrowable;	/* required element of type xsd:boolean */
	bool uuid;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2648; } /* = unique id SOAP_TYPE_ns1__VirtualDiskSparseVer2BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskSparseVer2BackingOption() { ns1__VirtualDiskSparseVer2BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskSparseVer2BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingOption
#define SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingOption (2649)
/* ns1:VirtualDiskFlatVer1BackingOption */
class SOAP_CMAC ns1__VirtualDiskFlatVer1BackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	ns1__ChoiceOption *diskMode;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *split;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *writeThrough;	/* required element of type ns1:BoolOption */
	bool growable;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2649; } /* = unique id SOAP_TYPE_ns1__VirtualDiskFlatVer1BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskFlatVer1BackingOption() { ns1__VirtualDiskFlatVer1BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskFlatVer1BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingOption
#define SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingOption (2650)
/* ns1:VirtualDiskFlatVer2BackingOption */
class SOAP_CMAC ns1__VirtualDiskFlatVer2BackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	ns1__ChoiceOption *diskMode;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *split;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *writeThrough;	/* required element of type ns1:BoolOption */
	bool growable;	/* required element of type xsd:boolean */
	bool hotGrowable;	/* required element of type xsd:boolean */
	bool uuid;	/* required element of type xsd:boolean */
	ns1__BoolOption *thinProvisioned;	/* optional element of type ns1:BoolOption */
	ns1__BoolOption *eagerlyScrub;	/* optional element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2650; } /* = unique id SOAP_TYPE_ns1__VirtualDiskFlatVer2BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskFlatVer2BackingOption() { ns1__VirtualDiskFlatVer2BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskFlatVer2BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingOption
#define SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingOption (2651)
/* ns1:VirtualDiskRawDiskVer2BackingOption */
class SOAP_CMAC ns1__VirtualDiskRawDiskVer2BackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	ns1__ChoiceOption *descriptorFileNameExtensions;	/* required element of type ns1:ChoiceOption */
	bool uuid;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2651; } /* = unique id SOAP_TYPE_ns1__VirtualDiskRawDiskVer2BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskRawDiskVer2BackingOption() { ns1__VirtualDiskRawDiskVer2BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskRawDiskVer2BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingOption
#define SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingOption (2653)
/* ns1:VirtualDiskRawDiskMappingVer1BackingOption */
class SOAP_CMAC ns1__VirtualDiskRawDiskMappingVer1BackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	ns1__ChoiceOption *descriptorFileNameExtensions;	/* optional element of type ns1:ChoiceOption */
	ns1__ChoiceOption *compatibilityMode;	/* required element of type ns1:ChoiceOption */
	ns1__ChoiceOption *diskMode;	/* required element of type ns1:ChoiceOption */
	bool uuid;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2653; } /* = unique id SOAP_TYPE_ns1__VirtualDiskRawDiskMappingVer1BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskRawDiskMappingVer1BackingOption() { ns1__VirtualDiskRawDiskMappingVer1BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskRawDiskMappingVer1BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualE1000
#define SOAP_TYPE_ns1__VirtualE1000 (2655)
/* ns1:VirtualE1000 */
class SOAP_CMAC ns1__VirtualE1000 : public ns1__VirtualEthernetCard
{
public:
	virtual int soap_type() const { return 2655; } /* = unique id SOAP_TYPE_ns1__VirtualE1000 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualE1000() { ns1__VirtualE1000::soap_default(NULL); }
	virtual ~ns1__VirtualE1000() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualE1000Option
#define SOAP_TYPE_ns1__VirtualE1000Option (2656)
/* ns1:VirtualE1000Option */
class SOAP_CMAC ns1__VirtualE1000Option : public ns1__VirtualEthernetCardOption
{
public:
	virtual int soap_type() const { return 2656; } /* = unique id SOAP_TYPE_ns1__VirtualE1000Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualE1000Option() { ns1__VirtualE1000Option::soap_default(NULL); }
	virtual ~ns1__VirtualE1000Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEnsoniq1371
#define SOAP_TYPE_ns1__VirtualEnsoniq1371 (2657)
/* ns1:VirtualEnsoniq1371 */
class SOAP_CMAC ns1__VirtualEnsoniq1371 : public ns1__VirtualSoundCard
{
public:
	virtual int soap_type() const { return 2657; } /* = unique id SOAP_TYPE_ns1__VirtualEnsoniq1371 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEnsoniq1371() { ns1__VirtualEnsoniq1371::soap_default(NULL); }
	virtual ~ns1__VirtualEnsoniq1371() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEnsoniq1371Option
#define SOAP_TYPE_ns1__VirtualEnsoniq1371Option (2658)
/* ns1:VirtualEnsoniq1371Option */
class SOAP_CMAC ns1__VirtualEnsoniq1371Option : public ns1__VirtualSoundCardOption
{
public:
	virtual int soap_type() const { return 2658; } /* = unique id SOAP_TYPE_ns1__VirtualEnsoniq1371Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEnsoniq1371Option() { ns1__VirtualEnsoniq1371Option::soap_default(NULL); }
	virtual ~ns1__VirtualEnsoniq1371Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingInfo
#define SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingInfo (2659)
/* ns1:VirtualEthernetCardNetworkBackingInfo */
class SOAP_CMAC ns1__VirtualEthernetCardNetworkBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	ns1__ManagedObjectReference *network;	/* optional element of type ns1:ManagedObjectReference */
	bool *inPassthroughMode;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2659; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardNetworkBackingInfo() { ns1__VirtualEthernetCardNetworkBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardNetworkBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingInfo
#define SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingInfo (2660)
/* ns1:VirtualEthernetCardLegacyNetworkBackingInfo */
class SOAP_CMAC ns1__VirtualEthernetCardLegacyNetworkBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2660; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardLegacyNetworkBackingInfo() { ns1__VirtualEthernetCardLegacyNetworkBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardLegacyNetworkBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingOption
#define SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingOption (2663)
/* ns1:VirtualEthernetCardNetworkBackingOption */
class SOAP_CMAC ns1__VirtualEthernetCardNetworkBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2663; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardNetworkBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardNetworkBackingOption() { ns1__VirtualEthernetCardNetworkBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardNetworkBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingOption
#define SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingOption (2664)
/* ns1:VirtualEthernetCardLegacyNetworkBackingOption */
class SOAP_CMAC ns1__VirtualEthernetCardLegacyNetworkBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2664; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardLegacyNetworkBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardLegacyNetworkBackingOption() { ns1__VirtualEthernetCardLegacyNetworkBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardLegacyNetworkBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyImageBackingInfo
#define SOAP_TYPE_ns1__VirtualFloppyImageBackingInfo (2667)
/* ns1:VirtualFloppyImageBackingInfo */
class SOAP_CMAC ns1__VirtualFloppyImageBackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	virtual int soap_type() const { return 2667; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyImageBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyImageBackingInfo() { ns1__VirtualFloppyImageBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyImageBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualFloppyDeviceBackingInfo (2668)
/* ns1:VirtualFloppyDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualFloppyDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2668; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyDeviceBackingInfo() { ns1__VirtualFloppyDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingInfo (2669)
/* ns1:VirtualFloppyRemoteDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualFloppyRemoteDeviceBackingInfo : public ns1__VirtualDeviceRemoteDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2669; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyRemoteDeviceBackingInfo() { ns1__VirtualFloppyRemoteDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyRemoteDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyImageBackingOption
#define SOAP_TYPE_ns1__VirtualFloppyImageBackingOption (2671)
/* ns1:VirtualFloppyImageBackingOption */
class SOAP_CMAC ns1__VirtualFloppyImageBackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	virtual int soap_type() const { return 2671; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyImageBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyImageBackingOption() { ns1__VirtualFloppyImageBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyImageBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualFloppyDeviceBackingOption (2672)
/* ns1:VirtualFloppyDeviceBackingOption */
class SOAP_CMAC ns1__VirtualFloppyDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2672; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyDeviceBackingOption() { ns1__VirtualFloppyDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingOption (2673)
/* ns1:VirtualFloppyRemoteDeviceBackingOption */
class SOAP_CMAC ns1__VirtualFloppyRemoteDeviceBackingOption : public ns1__VirtualDeviceRemoteDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2673; } /* = unique id SOAP_TYPE_ns1__VirtualFloppyRemoteDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualFloppyRemoteDeviceBackingOption() { ns1__VirtualFloppyRemoteDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualFloppyRemoteDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualIDEController
#define SOAP_TYPE_ns1__VirtualIDEController (2675)
/* ns1:VirtualIDEController */
class SOAP_CMAC ns1__VirtualIDEController : public ns1__VirtualController
{
public:
	virtual int soap_type() const { return 2675; } /* = unique id SOAP_TYPE_ns1__VirtualIDEController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualIDEController() { ns1__VirtualIDEController::soap_default(NULL); }
	virtual ~ns1__VirtualIDEController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualIDEControllerOption
#define SOAP_TYPE_ns1__VirtualIDEControllerOption (2676)
/* ns1:VirtualIDEControllerOption */
class SOAP_CMAC ns1__VirtualIDEControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__IntOption *numIDEDisks;	/* required element of type ns1:IntOption */
	ns1__IntOption *numIDECdroms;	/* required element of type ns1:IntOption */
public:
	virtual int soap_type() const { return 2676; } /* = unique id SOAP_TYPE_ns1__VirtualIDEControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualIDEControllerOption() { ns1__VirtualIDEControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualIDEControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIController
#define SOAP_TYPE_ns1__VirtualPCIController (2683)
/* ns1:VirtualPCIController */
class SOAP_CMAC ns1__VirtualPCIController : public ns1__VirtualController
{
public:
	virtual int soap_type() const { return 2683; } /* = unique id SOAP_TYPE_ns1__VirtualPCIController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIController() { ns1__VirtualPCIController::soap_default(NULL); }
	virtual ~ns1__VirtualPCIController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIControllerOption
#define SOAP_TYPE_ns1__VirtualPCIControllerOption (2684)
/* ns1:VirtualPCIControllerOption */
class SOAP_CMAC ns1__VirtualPCIControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__IntOption *numSCSIControllers;	/* required element of type ns1:IntOption */
	ns1__IntOption *numEthernetCards;	/* required element of type ns1:IntOption */
	ns1__IntOption *numVideoCards;	/* required element of type ns1:IntOption */
	ns1__IntOption *numSoundCards;	/* required element of type ns1:IntOption */
	ns1__IntOption *numVmiRoms;	/* required element of type ns1:IntOption */
	ns1__IntOption *numVmciDevices;	/* optional element of type ns1:IntOption */
	ns1__IntOption *numPCIPassthroughDevices;	/* optional element of type ns1:IntOption */
	ns1__IntOption *numSasSCSIControllers;	/* optional element of type ns1:IntOption */
	ns1__IntOption *numVmxnet3EthernetCards;	/* optional element of type ns1:IntOption */
	ns1__IntOption *numParaVirtualSCSIControllers;	/* optional element of type ns1:IntOption */
public:
	virtual int soap_type() const { return 2684; } /* = unique id SOAP_TYPE_ns1__VirtualPCIControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIControllerOption() { ns1__VirtualPCIControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualPCIControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingInfo (2685)
/* ns1:VirtualPCIPassthroughDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualPCIPassthroughDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string deviceId;	/* required element of type xsd:string */
	std::string systemId;	/* required element of type xsd:string */
	short vendorId;	/* required element of type xsd:short */
public:
	virtual int soap_type() const { return 2685; } /* = unique id SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIPassthroughDeviceBackingInfo() { ns1__VirtualPCIPassthroughDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualPCIPassthroughDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingOption (2687)
/* ns1:VirtualPCIPassthroughDeviceBackingOption */
class SOAP_CMAC ns1__VirtualPCIPassthroughDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2687; } /* = unique id SOAP_TYPE_ns1__VirtualPCIPassthroughDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCIPassthroughDeviceBackingOption() { ns1__VirtualPCIPassthroughDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualPCIPassthroughDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCNet32
#define SOAP_TYPE_ns1__VirtualPCNet32 (2689)
/* ns1:VirtualPCNet32 */
class SOAP_CMAC ns1__VirtualPCNet32 : public ns1__VirtualEthernetCard
{
public:
	virtual int soap_type() const { return 2689; } /* = unique id SOAP_TYPE_ns1__VirtualPCNet32 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCNet32() { ns1__VirtualPCNet32::soap_default(NULL); }
	virtual ~ns1__VirtualPCNet32() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPCNet32Option
#define SOAP_TYPE_ns1__VirtualPCNet32Option (2690)
/* ns1:VirtualPCNet32Option */
class SOAP_CMAC ns1__VirtualPCNet32Option : public ns1__VirtualEthernetCardOption
{
public:
	bool supportsMorphing;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2690; } /* = unique id SOAP_TYPE_ns1__VirtualPCNet32Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPCNet32Option() { ns1__VirtualPCNet32Option::soap_default(NULL); }
	virtual ~ns1__VirtualPCNet32Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPS2Controller
#define SOAP_TYPE_ns1__VirtualPS2Controller (2691)
/* ns1:VirtualPS2Controller */
class SOAP_CMAC ns1__VirtualPS2Controller : public ns1__VirtualController
{
public:
	virtual int soap_type() const { return 2691; } /* = unique id SOAP_TYPE_ns1__VirtualPS2Controller */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPS2Controller() { ns1__VirtualPS2Controller::soap_default(NULL); }
	virtual ~ns1__VirtualPS2Controller() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPS2ControllerOption
#define SOAP_TYPE_ns1__VirtualPS2ControllerOption (2692)
/* ns1:VirtualPS2ControllerOption */
class SOAP_CMAC ns1__VirtualPS2ControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__IntOption *numKeyboards;	/* required element of type ns1:IntOption */
	ns1__IntOption *numPointingDevices;	/* required element of type ns1:IntOption */
public:
	virtual int soap_type() const { return 2692; } /* = unique id SOAP_TYPE_ns1__VirtualPS2ControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPS2ControllerOption() { ns1__VirtualPS2ControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualPS2ControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPortFileBackingInfo
#define SOAP_TYPE_ns1__VirtualParallelPortFileBackingInfo (2693)
/* ns1:VirtualParallelPortFileBackingInfo */
class SOAP_CMAC ns1__VirtualParallelPortFileBackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	virtual int soap_type() const { return 2693; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPortFileBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPortFileBackingInfo() { ns1__VirtualParallelPortFileBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPortFileBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingInfo (2694)
/* ns1:VirtualParallelPortDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualParallelPortDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2694; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPortDeviceBackingInfo() { ns1__VirtualParallelPortDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPortDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPortFileBackingOption
#define SOAP_TYPE_ns1__VirtualParallelPortFileBackingOption (2696)
/* ns1:VirtualParallelPortFileBackingOption */
class SOAP_CMAC ns1__VirtualParallelPortFileBackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	virtual int soap_type() const { return 2696; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPortFileBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPortFileBackingOption() { ns1__VirtualParallelPortFileBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPortFileBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingOption (2697)
/* ns1:VirtualParallelPortDeviceBackingOption */
class SOAP_CMAC ns1__VirtualParallelPortDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2697; } /* = unique id SOAP_TYPE_ns1__VirtualParallelPortDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualParallelPortDeviceBackingOption() { ns1__VirtualParallelPortDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualParallelPortDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDeviceDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualPointingDeviceDeviceBackingInfo (2699)
/* ns1:VirtualPointingDeviceDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualPointingDeviceDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	std::string hostPointingDevice;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2699; } /* = unique id SOAP_TYPE_ns1__VirtualPointingDeviceDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPointingDeviceDeviceBackingInfo() { ns1__VirtualPointingDeviceDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualPointingDeviceDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualPointingDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualPointingDeviceBackingOption (2701)
/* ns1:VirtualPointingDeviceBackingOption */
class SOAP_CMAC ns1__VirtualPointingDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	ns1__ChoiceOption *hostPointingDevice;	/* required element of type ns1:ChoiceOption */
public:
	virtual int soap_type() const { return 2701; } /* = unique id SOAP_TYPE_ns1__VirtualPointingDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualPointingDeviceBackingOption() { ns1__VirtualPointingDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualPointingDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIController
#define SOAP_TYPE_ns1__VirtualSCSIController (2704)
/* ns1:VirtualSCSIController */
class SOAP_CMAC ns1__VirtualSCSIController : public ns1__VirtualController
{
public:
	bool *hotAddRemove;	/* optional element of type xsd:boolean */
	enum ns1__VirtualSCSISharing sharedBus;	/* required element of type ns1:VirtualSCSISharing */
	int *scsiCtlrUnitNumber;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 2704; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIController() { ns1__VirtualSCSIController::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIControllerOption
#define SOAP_TYPE_ns1__VirtualSCSIControllerOption (2705)
/* ns1:VirtualSCSIControllerOption */
class SOAP_CMAC ns1__VirtualSCSIControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__IntOption *numSCSIDisks;	/* required element of type ns1:IntOption */
	ns1__IntOption *numSCSICdroms;	/* required element of type ns1:IntOption */
	ns1__IntOption *numSCSIPassthrough;	/* required element of type ns1:IntOption */
	std::vector<enum ns1__VirtualSCSISharing >sharing;	/* required element of type ns1:VirtualSCSISharing */
	int defaultSharedIndex;	/* required element of type xsd:int */
	ns1__BoolOption *hotAddRemove;	/* required element of type ns1:BoolOption */
	int scsiCtlrUnitNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2705; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIControllerOption() { ns1__VirtualSCSIControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingInfo (2706)
/* ns1:VirtualSCSIPassthroughDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualSCSIPassthroughDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2706; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIPassthroughDeviceBackingInfo() { ns1__VirtualSCSIPassthroughDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIPassthroughDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingOption (2708)
/* ns1:VirtualSCSIPassthroughDeviceBackingOption */
class SOAP_CMAC ns1__VirtualSCSIPassthroughDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2708; } /* = unique id SOAP_TYPE_ns1__VirtualSCSIPassthroughDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSCSIPassthroughDeviceBackingOption() { ns1__VirtualSCSIPassthroughDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSCSIPassthroughDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSIOController
#define SOAP_TYPE_ns1__VirtualSIOController (2710)
/* ns1:VirtualSIOController */
class SOAP_CMAC ns1__VirtualSIOController : public ns1__VirtualController
{
public:
	virtual int soap_type() const { return 2710; } /* = unique id SOAP_TYPE_ns1__VirtualSIOController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSIOController() { ns1__VirtualSIOController::soap_default(NULL); }
	virtual ~ns1__VirtualSIOController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSIOControllerOption
#define SOAP_TYPE_ns1__VirtualSIOControllerOption (2711)
/* ns1:VirtualSIOControllerOption */
class SOAP_CMAC ns1__VirtualSIOControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__IntOption *numFloppyDrives;	/* required element of type ns1:IntOption */
	ns1__IntOption *numSerialPorts;	/* required element of type ns1:IntOption */
	ns1__IntOption *numParallelPorts;	/* required element of type ns1:IntOption */
public:
	virtual int soap_type() const { return 2711; } /* = unique id SOAP_TYPE_ns1__VirtualSIOControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSIOControllerOption() { ns1__VirtualSIOControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualSIOControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortFileBackingInfo
#define SOAP_TYPE_ns1__VirtualSerialPortFileBackingInfo (2712)
/* ns1:VirtualSerialPortFileBackingInfo */
class SOAP_CMAC ns1__VirtualSerialPortFileBackingInfo : public ns1__VirtualDeviceFileBackingInfo
{
public:
	virtual int soap_type() const { return 2712; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortFileBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortFileBackingInfo() { ns1__VirtualSerialPortFileBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortFileBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingInfo (2713)
/* ns1:VirtualSerialPortDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualSerialPortDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2713; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortDeviceBackingInfo() { ns1__VirtualSerialPortDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortPipeBackingInfo
#define SOAP_TYPE_ns1__VirtualSerialPortPipeBackingInfo (2714)
/* ns1:VirtualSerialPortPipeBackingInfo */
class SOAP_CMAC ns1__VirtualSerialPortPipeBackingInfo : public ns1__VirtualDevicePipeBackingInfo
{
public:
	std::string endpoint;	/* required element of type xsd:string */
	bool *noRxLoss;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2714; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortPipeBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortPipeBackingInfo() { ns1__VirtualSerialPortPipeBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortPipeBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortURIBackingInfo
#define SOAP_TYPE_ns1__VirtualSerialPortURIBackingInfo (2715)
/* ns1:VirtualSerialPortURIBackingInfo */
class SOAP_CMAC ns1__VirtualSerialPortURIBackingInfo : public ns1__VirtualDeviceURIBackingInfo
{
public:
	virtual int soap_type() const { return 2715; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortURIBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortURIBackingInfo() { ns1__VirtualSerialPortURIBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortURIBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortFileBackingOption
#define SOAP_TYPE_ns1__VirtualSerialPortFileBackingOption (2717)
/* ns1:VirtualSerialPortFileBackingOption */
class SOAP_CMAC ns1__VirtualSerialPortFileBackingOption : public ns1__VirtualDeviceFileBackingOption
{
public:
	virtual int soap_type() const { return 2717; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortFileBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortFileBackingOption() { ns1__VirtualSerialPortFileBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortFileBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingOption (2718)
/* ns1:VirtualSerialPortDeviceBackingOption */
class SOAP_CMAC ns1__VirtualSerialPortDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2718; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortDeviceBackingOption() { ns1__VirtualSerialPortDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortPipeBackingOption
#define SOAP_TYPE_ns1__VirtualSerialPortPipeBackingOption (2719)
/* ns1:VirtualSerialPortPipeBackingOption */
class SOAP_CMAC ns1__VirtualSerialPortPipeBackingOption : public ns1__VirtualDevicePipeBackingOption
{
public:
	ns1__ChoiceOption *endpoint;	/* required element of type ns1:ChoiceOption */
	ns1__BoolOption *noRxLoss;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2719; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortPipeBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortPipeBackingOption() { ns1__VirtualSerialPortPipeBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortPipeBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSerialPortURIBackingOption
#define SOAP_TYPE_ns1__VirtualSerialPortURIBackingOption (2720)
/* ns1:VirtualSerialPortURIBackingOption */
class SOAP_CMAC ns1__VirtualSerialPortURIBackingOption : public ns1__VirtualDeviceURIBackingOption
{
public:
	virtual int soap_type() const { return 2720; } /* = unique id SOAP_TYPE_ns1__VirtualSerialPortURIBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSerialPortURIBackingOption() { ns1__VirtualSerialPortURIBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSerialPortURIBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundBlaster16
#define SOAP_TYPE_ns1__VirtualSoundBlaster16 (2722)
/* ns1:VirtualSoundBlaster16 */
class SOAP_CMAC ns1__VirtualSoundBlaster16 : public ns1__VirtualSoundCard
{
public:
	virtual int soap_type() const { return 2722; } /* = unique id SOAP_TYPE_ns1__VirtualSoundBlaster16 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundBlaster16() { ns1__VirtualSoundBlaster16::soap_default(NULL); }
	virtual ~ns1__VirtualSoundBlaster16() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundBlaster16Option
#define SOAP_TYPE_ns1__VirtualSoundBlaster16Option (2723)
/* ns1:VirtualSoundBlaster16Option */
class SOAP_CMAC ns1__VirtualSoundBlaster16Option : public ns1__VirtualSoundCardOption
{
public:
	virtual int soap_type() const { return 2723; } /* = unique id SOAP_TYPE_ns1__VirtualSoundBlaster16Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundBlaster16Option() { ns1__VirtualSoundBlaster16Option::soap_default(NULL); }
	virtual ~ns1__VirtualSoundBlaster16Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingInfo
#define SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingInfo (2724)
/* ns1:VirtualSoundCardDeviceBackingInfo */
class SOAP_CMAC ns1__VirtualSoundCardDeviceBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2724; } /* = unique id SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundCardDeviceBackingInfo() { ns1__VirtualSoundCardDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualSoundCardDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingOption
#define SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingOption (2726)
/* ns1:VirtualSoundCardDeviceBackingOption */
class SOAP_CMAC ns1__VirtualSoundCardDeviceBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2726; } /* = unique id SOAP_TYPE_ns1__VirtualSoundCardDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualSoundCardDeviceBackingOption() { ns1__VirtualSoundCardDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualSoundCardDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBUSBBackingInfo
#define SOAP_TYPE_ns1__VirtualUSBUSBBackingInfo (2728)
/* ns1:VirtualUSBUSBBackingInfo */
class SOAP_CMAC ns1__VirtualUSBUSBBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	virtual int soap_type() const { return 2728; } /* = unique id SOAP_TYPE_ns1__VirtualUSBUSBBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBUSBBackingInfo() { ns1__VirtualUSBUSBBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualUSBUSBBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingInfo
#define SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingInfo (2729)
/* ns1:VirtualUSBRemoteHostBackingInfo */
class SOAP_CMAC ns1__VirtualUSBRemoteHostBackingInfo : public ns1__VirtualDeviceDeviceBackingInfo
{
public:
	std::string hostname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 2729; } /* = unique id SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBRemoteHostBackingInfo() { ns1__VirtualUSBRemoteHostBackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualUSBRemoteHostBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBController
#define SOAP_TYPE_ns1__VirtualUSBController (2731)
/* ns1:VirtualUSBController */
class SOAP_CMAC ns1__VirtualUSBController : public ns1__VirtualController
{
public:
	bool *autoConnectDevices;	/* optional element of type xsd:boolean */
	bool *ehciEnabled;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2731; } /* = unique id SOAP_TYPE_ns1__VirtualUSBController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBController() { ns1__VirtualUSBController::soap_default(NULL); }
	virtual ~ns1__VirtualUSBController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBControllerOption
#define SOAP_TYPE_ns1__VirtualUSBControllerOption (2732)
/* ns1:VirtualUSBControllerOption */
class SOAP_CMAC ns1__VirtualUSBControllerOption : public ns1__VirtualControllerOption
{
public:
	ns1__BoolOption *autoConnectDevices;	/* required element of type ns1:BoolOption */
	ns1__BoolOption *ehciSupported;	/* required element of type ns1:BoolOption */
public:
	virtual int soap_type() const { return 2732; } /* = unique id SOAP_TYPE_ns1__VirtualUSBControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBControllerOption() { ns1__VirtualUSBControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualUSBControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBUSBBackingOption
#define SOAP_TYPE_ns1__VirtualUSBUSBBackingOption (2733)
/* ns1:VirtualUSBUSBBackingOption */
class SOAP_CMAC ns1__VirtualUSBUSBBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2733; } /* = unique id SOAP_TYPE_ns1__VirtualUSBUSBBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBUSBBackingOption() { ns1__VirtualUSBUSBBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualUSBUSBBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingOption
#define SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingOption (2734)
/* ns1:VirtualUSBRemoteHostBackingOption */
class SOAP_CMAC ns1__VirtualUSBRemoteHostBackingOption : public ns1__VirtualDeviceDeviceBackingOption
{
public:
	virtual int soap_type() const { return 2734; } /* = unique id SOAP_TYPE_ns1__VirtualUSBRemoteHostBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualUSBRemoteHostBackingOption() { ns1__VirtualUSBRemoteHostBackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualUSBRemoteHostBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnet
#define SOAP_TYPE_ns1__VirtualVmxnet (2742)
/* ns1:VirtualVmxnet */
class SOAP_CMAC ns1__VirtualVmxnet : public ns1__VirtualEthernetCard
{
public:
	virtual int soap_type() const { return 2742; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnet() { ns1__VirtualVmxnet::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnetOption
#define SOAP_TYPE_ns1__VirtualVmxnetOption (2747)
/* ns1:VirtualVmxnetOption */
class SOAP_CMAC ns1__VirtualVmxnetOption : public ns1__VirtualEthernetCardOption
{
public:
	virtual int soap_type() const { return 2747; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnetOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnetOption() { ns1__VirtualVmxnetOption::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnetOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsEnteringStandbyModeEvent
#define SOAP_TYPE_ns1__DrsEnteringStandbyModeEvent (1049)
/* ns1:DrsEnteringStandbyModeEvent */
class SOAP_CMAC ns1__DrsEnteringStandbyModeEvent : public ns1__EnteringStandbyModeEvent
{
public:
	virtual int soap_type() const { return 1049; } /* = unique id SOAP_TYPE_ns1__DrsEnteringStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsEnteringStandbyModeEvent() { ns1__DrsEnteringStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__DrsEnteringStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsEnteredStandbyModeEvent
#define SOAP_TYPE_ns1__DrsEnteredStandbyModeEvent (1051)
/* ns1:DrsEnteredStandbyModeEvent */
class SOAP_CMAC ns1__DrsEnteredStandbyModeEvent : public ns1__EnteredStandbyModeEvent
{
public:
	virtual int soap_type() const { return 1051; } /* = unique id SOAP_TYPE_ns1__DrsEnteredStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsEnteredStandbyModeEvent() { ns1__DrsEnteredStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__DrsEnteredStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsExitingStandbyModeEvent
#define SOAP_TYPE_ns1__DrsExitingStandbyModeEvent (1053)
/* ns1:DrsExitingStandbyModeEvent */
class SOAP_CMAC ns1__DrsExitingStandbyModeEvent : public ns1__ExitingStandbyModeEvent
{
public:
	virtual int soap_type() const { return 1053; } /* = unique id SOAP_TYPE_ns1__DrsExitingStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsExitingStandbyModeEvent() { ns1__DrsExitingStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__DrsExitingStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsExitedStandbyModeEvent
#define SOAP_TYPE_ns1__DrsExitedStandbyModeEvent (1055)
/* ns1:DrsExitedStandbyModeEvent */
class SOAP_CMAC ns1__DrsExitedStandbyModeEvent : public ns1__ExitedStandbyModeEvent
{
public:
	virtual int soap_type() const { return 1055; } /* = unique id SOAP_TYPE_ns1__DrsExitedStandbyModeEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsExitedStandbyModeEvent() { ns1__DrsExitedStandbyModeEvent::soap_default(NULL); }
	virtual ~ns1__DrsExitedStandbyModeEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsExitStandbyModeFailedEvent
#define SOAP_TYPE_ns1__DrsExitStandbyModeFailedEvent (1057)
/* ns1:DrsExitStandbyModeFailedEvent */
class SOAP_CMAC ns1__DrsExitStandbyModeFailedEvent : public ns1__ExitStandbyModeFailedEvent
{
public:
	virtual int soap_type() const { return 1057; } /* = unique id SOAP_TYPE_ns1__DrsExitStandbyModeFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsExitStandbyModeFailedEvent() { ns1__DrsExitStandbyModeFailedEvent::soap_default(NULL); }
	virtual ~ns1__DrsExitStandbyModeFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostPrimaryAgentNotShortNameEvent
#define SOAP_TYPE_ns1__HostPrimaryAgentNotShortNameEvent (1080)
/* ns1:HostPrimaryAgentNotShortNameEvent */
class SOAP_CMAC ns1__HostPrimaryAgentNotShortNameEvent : public ns1__HostDasEvent
{
public:
	std::string primaryAgent;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1080; } /* = unique id SOAP_TYPE_ns1__HostPrimaryAgentNotShortNameEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostPrimaryAgentNotShortNameEvent() { ns1__HostPrimaryAgentNotShortNameEvent::soap_default(NULL); }
	virtual ~ns1__HostPrimaryAgentNotShortNameEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNotInClusterEvent
#define SOAP_TYPE_ns1__HostNotInClusterEvent (1081)
/* ns1:HostNotInClusterEvent */
class SOAP_CMAC ns1__HostNotInClusterEvent : public ns1__HostDasEvent
{
public:
	virtual int soap_type() const { return 1081; } /* = unique id SOAP_TYPE_ns1__HostNotInClusterEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNotInClusterEvent() { ns1__HostNotInClusterEvent::soap_default(NULL); }
	virtual ~ns1__HostNotInClusterEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostIsolationIpPingFailedEvent
#define SOAP_TYPE_ns1__HostIsolationIpPingFailedEvent (1082)
/* ns1:HostIsolationIpPingFailedEvent */
class SOAP_CMAC ns1__HostIsolationIpPingFailedEvent : public ns1__HostDasEvent
{
public:
	std::string isolationIp;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1082; } /* = unique id SOAP_TYPE_ns1__HostIsolationIpPingFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostIsolationIpPingFailedEvent() { ns1__HostIsolationIpPingFailedEvent::soap_default(NULL); }
	virtual ~ns1__HostIsolationIpPingFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostShortNameInconsistentEvent
#define SOAP_TYPE_ns1__HostShortNameInconsistentEvent (1098)
/* ns1:HostShortNameInconsistentEvent */
class SOAP_CMAC ns1__HostShortNameInconsistentEvent : public ns1__HostDasEvent
{
public:
	std::string shortName;	/* required element of type xsd:string */
	std::string shortName2;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1098; } /* = unique id SOAP_TYPE_ns1__HostShortNameInconsistentEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostShortNameInconsistentEvent() { ns1__HostShortNameInconsistentEvent::soap_default(NULL); }
	virtual ~ns1__HostShortNameInconsistentEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNoRedundantManagementNetworkEvent
#define SOAP_TYPE_ns1__HostNoRedundantManagementNetworkEvent (1099)
/* ns1:HostNoRedundantManagementNetworkEvent */
class SOAP_CMAC ns1__HostNoRedundantManagementNetworkEvent : public ns1__HostDasEvent
{
public:
	virtual int soap_type() const { return 1099; } /* = unique id SOAP_TYPE_ns1__HostNoRedundantManagementNetworkEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNoRedundantManagementNetworkEvent() { ns1__HostNoRedundantManagementNetworkEvent::soap_default(NULL); }
	virtual ~ns1__HostNoRedundantManagementNetworkEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNoAvailableNetworksEvent
#define SOAP_TYPE_ns1__HostNoAvailableNetworksEvent (1100)
/* ns1:HostNoAvailableNetworksEvent */
class SOAP_CMAC ns1__HostNoAvailableNetworksEvent : public ns1__HostDasEvent
{
public:
	std::string *ips;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1100; } /* = unique id SOAP_TYPE_ns1__HostNoAvailableNetworksEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNoAvailableNetworksEvent() { ns1__HostNoAvailableNetworksEvent::soap_default(NULL); }
	virtual ~ns1__HostNoAvailableNetworksEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostExtraNetworksEvent
#define SOAP_TYPE_ns1__HostExtraNetworksEvent (1101)
/* ns1:HostExtraNetworksEvent */
class SOAP_CMAC ns1__HostExtraNetworksEvent : public ns1__HostDasEvent
{
public:
	std::string *ips;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1101; } /* = unique id SOAP_TYPE_ns1__HostExtraNetworksEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostExtraNetworksEvent() { ns1__HostExtraNetworksEvent::soap_default(NULL); }
	virtual ~ns1__HostExtraNetworksEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostNoHAEnabledPortGroupsEvent
#define SOAP_TYPE_ns1__HostNoHAEnabledPortGroupsEvent (1102)
/* ns1:HostNoHAEnabledPortGroupsEvent */
class SOAP_CMAC ns1__HostNoHAEnabledPortGroupsEvent : public ns1__HostDasEvent
{
public:
	virtual int soap_type() const { return 1102; } /* = unique id SOAP_TYPE_ns1__HostNoHAEnabledPortGroupsEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostNoHAEnabledPortGroupsEvent() { ns1__HostNoHAEnabledPortGroupsEvent::soap_default(NULL); }
	virtual ~ns1__HostNoHAEnabledPortGroupsEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostMissingNetworksEvent
#define SOAP_TYPE_ns1__HostMissingNetworksEvent (1103)
/* ns1:HostMissingNetworksEvent */
class SOAP_CMAC ns1__HostMissingNetworksEvent : public ns1__HostDasEvent
{
public:
	std::string *ips;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1103; } /* = unique id SOAP_TYPE_ns1__HostMissingNetworksEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostMissingNetworksEvent() { ns1__HostMissingNetworksEvent::soap_default(NULL); }
	virtual ~ns1__HostMissingNetworksEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmUnsupportedStartingEvent
#define SOAP_TYPE_ns1__VmUnsupportedStartingEvent (1144)
/* ns1:VmUnsupportedStartingEvent */
class SOAP_CMAC ns1__VmUnsupportedStartingEvent : public ns1__VmStartingEvent
{
public:
	std::string guestId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1144; } /* = unique id SOAP_TYPE_ns1__VmUnsupportedStartingEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmUnsupportedStartingEvent() { ns1__VmUnsupportedStartingEvent::soap_default(NULL); }
	virtual ~ns1__VmUnsupportedStartingEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsVmMigratedEvent
#define SOAP_TYPE_ns1__DrsVmMigratedEvent (1145)
/* ns1:DrsVmMigratedEvent */
class SOAP_CMAC ns1__DrsVmMigratedEvent : public ns1__VmMigratedEvent
{
public:
	virtual int soap_type() const { return 1145; } /* = unique id SOAP_TYPE_ns1__DrsVmMigratedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsVmMigratedEvent() { ns1__DrsVmMigratedEvent::soap_default(NULL); }
	virtual ~ns1__DrsVmMigratedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsVmPoweredOnEvent
#define SOAP_TYPE_ns1__DrsVmPoweredOnEvent (1146)
/* ns1:DrsVmPoweredOnEvent */
class SOAP_CMAC ns1__DrsVmPoweredOnEvent : public ns1__VmPoweredOnEvent
{
public:
	virtual int soap_type() const { return 1146; } /* = unique id SOAP_TYPE_ns1__DrsVmPoweredOnEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsVmPoweredOnEvent() { ns1__DrsVmPoweredOnEvent::soap_default(NULL); }
	virtual ~ns1__DrsVmPoweredOnEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingRelocatedEvent
#define SOAP_TYPE_ns1__VmBeingRelocatedEvent (1150)
/* ns1:VmBeingRelocatedEvent */
class SOAP_CMAC ns1__VmBeingRelocatedEvent : public ns1__VmRelocateSpecEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1150; } /* = unique id SOAP_TYPE_ns1__VmBeingRelocatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingRelocatedEvent() { ns1__VmBeingRelocatedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingRelocatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRelocatedEvent
#define SOAP_TYPE_ns1__VmRelocatedEvent (1151)
/* ns1:VmRelocatedEvent */
class SOAP_CMAC ns1__VmRelocatedEvent : public ns1__VmRelocateSpecEvent
{
public:
	ns1__HostEventArgument *sourceHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1151; } /* = unique id SOAP_TYPE_ns1__VmRelocatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRelocatedEvent() { ns1__VmRelocatedEvent::soap_default(NULL); }
	virtual ~ns1__VmRelocatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRelocateFailedEvent
#define SOAP_TYPE_ns1__VmRelocateFailedEvent (1152)
/* ns1:VmRelocateFailedEvent */
class SOAP_CMAC ns1__VmRelocateFailedEvent : public ns1__VmRelocateSpecEvent
{
public:
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1152; } /* = unique id SOAP_TYPE_ns1__VmRelocateFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRelocateFailedEvent() { ns1__VmRelocateFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmRelocateFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingClonedEvent
#define SOAP_TYPE_ns1__VmBeingClonedEvent (1155)
/* ns1:VmBeingClonedEvent */
class SOAP_CMAC ns1__VmBeingClonedEvent : public ns1__VmCloneEvent
{
public:
	ns1__FolderEventArgument *destFolder;	/* required element of type ns1:FolderEventArgument */
	std::string destName;	/* required element of type xsd:string */
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1155; } /* = unique id SOAP_TYPE_ns1__VmBeingClonedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingClonedEvent() { ns1__VmBeingClonedEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingClonedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmBeingClonedNoFolderEvent
#define SOAP_TYPE_ns1__VmBeingClonedNoFolderEvent (1156)
/* ns1:VmBeingClonedNoFolderEvent */
class SOAP_CMAC ns1__VmBeingClonedNoFolderEvent : public ns1__VmCloneEvent
{
public:
	std::string destName;	/* required element of type xsd:string */
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1156; } /* = unique id SOAP_TYPE_ns1__VmBeingClonedNoFolderEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmBeingClonedNoFolderEvent() { ns1__VmBeingClonedNoFolderEvent::soap_default(NULL); }
	virtual ~ns1__VmBeingClonedNoFolderEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmCloneFailedEvent
#define SOAP_TYPE_ns1__VmCloneFailedEvent (1157)
/* ns1:VmCloneFailedEvent */
class SOAP_CMAC ns1__VmCloneFailedEvent : public ns1__VmCloneEvent
{
public:
	ns1__FolderEventArgument *destFolder;	/* required element of type ns1:FolderEventArgument */
	std::string destName;	/* required element of type xsd:string */
	ns1__HostEventArgument *destHost;	/* required element of type ns1:HostEventArgument */
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1157; } /* = unique id SOAP_TYPE_ns1__VmCloneFailedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmCloneFailedEvent() { ns1__VmCloneFailedEvent::soap_default(NULL); }
	virtual ~ns1__VmCloneFailedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmClonedEvent
#define SOAP_TYPE_ns1__VmClonedEvent (1158)
/* ns1:VmClonedEvent */
class SOAP_CMAC ns1__VmClonedEvent : public ns1__VmCloneEvent
{
public:
	ns1__VmEventArgument *sourceVm;	/* required element of type ns1:VmEventArgument */
public:
	virtual int soap_type() const { return 1158; } /* = unique id SOAP_TYPE_ns1__VmClonedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmClonedEvent() { ns1__VmClonedEvent::soap_default(NULL); }
	virtual ~ns1__VmClonedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmRestartedOnAlternateHostEvent
#define SOAP_TYPE_ns1__VmRestartedOnAlternateHostEvent (1178)
/* ns1:VmRestartedOnAlternateHostEvent */
class SOAP_CMAC ns1__VmRestartedOnAlternateHostEvent : public ns1__VmPoweredOnEvent
{
public:
	ns1__HostEventArgument *sourceHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1178; } /* = unique id SOAP_TYPE_ns1__VmRestartedOnAlternateHostEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmRestartedOnAlternateHostEvent() { ns1__VmRestartedOnAlternateHostEvent::soap_default(NULL); }
	virtual ~ns1__VmRestartedOnAlternateHostEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmPowerOffOnIsolationEvent
#define SOAP_TYPE_ns1__VmPowerOffOnIsolationEvent (1184)
/* ns1:VmPowerOffOnIsolationEvent */
class SOAP_CMAC ns1__VmPowerOffOnIsolationEvent : public ns1__VmPoweredOffEvent
{
public:
	ns1__HostEventArgument *isolatedHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1184; } /* = unique id SOAP_TYPE_ns1__VmPowerOffOnIsolationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmPowerOffOnIsolationEvent() { ns1__VmPowerOffOnIsolationEvent::soap_default(NULL); }
	virtual ~ns1__VmPowerOffOnIsolationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmShutdownOnIsolationEvent
#define SOAP_TYPE_ns1__VmShutdownOnIsolationEvent (1185)
/* ns1:VmShutdownOnIsolationEvent */
class SOAP_CMAC ns1__VmShutdownOnIsolationEvent : public ns1__VmPoweredOffEvent
{
public:
	ns1__HostEventArgument *isolatedHost;	/* required element of type ns1:HostEventArgument */
	std::string *shutdownResult;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1185; } /* = unique id SOAP_TYPE_ns1__VmShutdownOnIsolationEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmShutdownOnIsolationEvent() { ns1__VmShutdownOnIsolationEvent::soap_default(NULL); }
	virtual ~ns1__VmShutdownOnIsolationEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmDasBeingResetWithScreenshotEvent
#define SOAP_TYPE_ns1__VmDasBeingResetWithScreenshotEvent (1191)
/* ns1:VmDasBeingResetWithScreenshotEvent */
class SOAP_CMAC ns1__VmDasBeingResetWithScreenshotEvent : public ns1__VmDasBeingResetEvent
{
public:
	std::string screenshotFilePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1191; } /* = unique id SOAP_TYPE_ns1__VmDasBeingResetWithScreenshotEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmDasBeingResetWithScreenshotEvent() { ns1__VmDasBeingResetWithScreenshotEvent::soap_default(NULL); }
	virtual ~ns1__VmDasBeingResetWithScreenshotEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldDefAddedEvent
#define SOAP_TYPE_ns1__CustomFieldDefAddedEvent (1253)
/* ns1:CustomFieldDefAddedEvent */
class SOAP_CMAC ns1__CustomFieldDefAddedEvent : public ns1__CustomFieldDefEvent
{
public:
	virtual int soap_type() const { return 1253; } /* = unique id SOAP_TYPE_ns1__CustomFieldDefAddedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldDefAddedEvent() { ns1__CustomFieldDefAddedEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldDefAddedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldDefRemovedEvent
#define SOAP_TYPE_ns1__CustomFieldDefRemovedEvent (1254)
/* ns1:CustomFieldDefRemovedEvent */
class SOAP_CMAC ns1__CustomFieldDefRemovedEvent : public ns1__CustomFieldDefEvent
{
public:
	virtual int soap_type() const { return 1254; } /* = unique id SOAP_TYPE_ns1__CustomFieldDefRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldDefRemovedEvent() { ns1__CustomFieldDefRemovedEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldDefRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomFieldDefRenamedEvent
#define SOAP_TYPE_ns1__CustomFieldDefRenamedEvent (1255)
/* ns1:CustomFieldDefRenamedEvent */
class SOAP_CMAC ns1__CustomFieldDefRenamedEvent : public ns1__CustomFieldDefEvent
{
public:
	std::string newName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1255; } /* = unique id SOAP_TYPE_ns1__CustomFieldDefRenamedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomFieldDefRenamedEvent() { ns1__CustomFieldDefRenamedEvent::soap_default(NULL); }
	virtual ~ns1__CustomFieldDefRenamedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PermissionAddedEvent
#define SOAP_TYPE_ns1__PermissionAddedEvent (1259)
/* ns1:PermissionAddedEvent */
class SOAP_CMAC ns1__PermissionAddedEvent : public ns1__PermissionEvent
{
public:
	ns1__RoleEventArgument *role;	/* required element of type ns1:RoleEventArgument */
	bool propagate;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1259; } /* = unique id SOAP_TYPE_ns1__PermissionAddedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PermissionAddedEvent() { ns1__PermissionAddedEvent::soap_default(NULL); }
	virtual ~ns1__PermissionAddedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PermissionUpdatedEvent
#define SOAP_TYPE_ns1__PermissionUpdatedEvent (1260)
/* ns1:PermissionUpdatedEvent */
class SOAP_CMAC ns1__PermissionUpdatedEvent : public ns1__PermissionEvent
{
public:
	ns1__RoleEventArgument *role;	/* required element of type ns1:RoleEventArgument */
	bool propagate;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1260; } /* = unique id SOAP_TYPE_ns1__PermissionUpdatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PermissionUpdatedEvent() { ns1__PermissionUpdatedEvent::soap_default(NULL); }
	virtual ~ns1__PermissionUpdatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PermissionRemovedEvent
#define SOAP_TYPE_ns1__PermissionRemovedEvent (1261)
/* ns1:PermissionRemovedEvent */
class SOAP_CMAC ns1__PermissionRemovedEvent : public ns1__PermissionEvent
{
public:
	virtual int soap_type() const { return 1261; } /* = unique id SOAP_TYPE_ns1__PermissionRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PermissionRemovedEvent() { ns1__PermissionRemovedEvent::soap_default(NULL); }
	virtual ~ns1__PermissionRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RoleAddedEvent
#define SOAP_TYPE_ns1__RoleAddedEvent (1263)
/* ns1:RoleAddedEvent */
class SOAP_CMAC ns1__RoleAddedEvent : public ns1__RoleEvent
{
public:
	std::vector<std::string >privilegeList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1263; } /* = unique id SOAP_TYPE_ns1__RoleAddedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RoleAddedEvent() { ns1__RoleAddedEvent::soap_default(NULL); }
	virtual ~ns1__RoleAddedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RoleUpdatedEvent
#define SOAP_TYPE_ns1__RoleUpdatedEvent (1264)
/* ns1:RoleUpdatedEvent */
class SOAP_CMAC ns1__RoleUpdatedEvent : public ns1__RoleEvent
{
public:
	std::vector<std::string >privilegeList;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1264; } /* = unique id SOAP_TYPE_ns1__RoleUpdatedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RoleUpdatedEvent() { ns1__RoleUpdatedEvent::soap_default(NULL); }
	virtual ~ns1__RoleUpdatedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RoleRemovedEvent
#define SOAP_TYPE_ns1__RoleRemovedEvent (1265)
/* ns1:RoleRemovedEvent */
class SOAP_CMAC ns1__RoleRemovedEvent : public ns1__RoleEvent
{
public:
	virtual int soap_type() const { return 1265; } /* = unique id SOAP_TYPE_ns1__RoleRemovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RoleRemovedEvent() { ns1__RoleRemovedEvent::soap_default(NULL); }
	virtual ~ns1__RoleRemovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreFileCopiedEvent
#define SOAP_TYPE_ns1__DatastoreFileCopiedEvent (1272)
/* ns1:DatastoreFileCopiedEvent */
class SOAP_CMAC ns1__DatastoreFileCopiedEvent : public ns1__DatastoreFileEvent
{
public:
	ns1__DatastoreEventArgument *sourceDatastore;	/* required element of type ns1:DatastoreEventArgument */
	std::string sourceFile;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1272; } /* = unique id SOAP_TYPE_ns1__DatastoreFileCopiedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreFileCopiedEvent() { ns1__DatastoreFileCopiedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreFileCopiedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreFileMovedEvent
#define SOAP_TYPE_ns1__DatastoreFileMovedEvent (1273)
/* ns1:DatastoreFileMovedEvent */
class SOAP_CMAC ns1__DatastoreFileMovedEvent : public ns1__DatastoreFileEvent
{
public:
	ns1__DatastoreEventArgument *sourceDatastore;	/* required element of type ns1:DatastoreEventArgument */
	std::string sourceFile;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1273; } /* = unique id SOAP_TYPE_ns1__DatastoreFileMovedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreFileMovedEvent() { ns1__DatastoreFileMovedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreFileMovedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DatastoreFileDeletedEvent
#define SOAP_TYPE_ns1__DatastoreFileDeletedEvent (1274)
/* ns1:DatastoreFileDeletedEvent */
class SOAP_CMAC ns1__DatastoreFileDeletedEvent : public ns1__DatastoreFileEvent
{
public:
	virtual int soap_type() const { return 1274; } /* = unique id SOAP_TYPE_ns1__DatastoreFileDeletedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DatastoreFileDeletedEvent() { ns1__DatastoreFileDeletedEvent::soap_default(NULL); }
	virtual ~ns1__DatastoreFileDeletedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationWarningEvent
#define SOAP_TYPE_ns1__MigrationWarningEvent (1296)
/* ns1:MigrationWarningEvent */
class SOAP_CMAC ns1__MigrationWarningEvent : public ns1__MigrationEvent
{
public:
	virtual int soap_type() const { return 1296; } /* = unique id SOAP_TYPE_ns1__MigrationWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationWarningEvent() { ns1__MigrationWarningEvent::soap_default(NULL); }
	virtual ~ns1__MigrationWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationErrorEvent
#define SOAP_TYPE_ns1__MigrationErrorEvent (1297)
/* ns1:MigrationErrorEvent */
class SOAP_CMAC ns1__MigrationErrorEvent : public ns1__MigrationEvent
{
public:
	virtual int soap_type() const { return 1297; } /* = unique id SOAP_TYPE_ns1__MigrationErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationErrorEvent() { ns1__MigrationErrorEvent::soap_default(NULL); }
	virtual ~ns1__MigrationErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationHostWarningEvent
#define SOAP_TYPE_ns1__MigrationHostWarningEvent (1298)
/* ns1:MigrationHostWarningEvent */
class SOAP_CMAC ns1__MigrationHostWarningEvent : public ns1__MigrationEvent
{
public:
	ns1__HostEventArgument *dstHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1298; } /* = unique id SOAP_TYPE_ns1__MigrationHostWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationHostWarningEvent() { ns1__MigrationHostWarningEvent::soap_default(NULL); }
	virtual ~ns1__MigrationHostWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationHostErrorEvent
#define SOAP_TYPE_ns1__MigrationHostErrorEvent (1299)
/* ns1:MigrationHostErrorEvent */
class SOAP_CMAC ns1__MigrationHostErrorEvent : public ns1__MigrationEvent
{
public:
	ns1__HostEventArgument *dstHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1299; } /* = unique id SOAP_TYPE_ns1__MigrationHostErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationHostErrorEvent() { ns1__MigrationHostErrorEvent::soap_default(NULL); }
	virtual ~ns1__MigrationHostErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationResourceWarningEvent
#define SOAP_TYPE_ns1__MigrationResourceWarningEvent (1300)
/* ns1:MigrationResourceWarningEvent */
class SOAP_CMAC ns1__MigrationResourceWarningEvent : public ns1__MigrationEvent
{
public:
	ns1__ResourcePoolEventArgument *dstPool;	/* required element of type ns1:ResourcePoolEventArgument */
	ns1__HostEventArgument *dstHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1300; } /* = unique id SOAP_TYPE_ns1__MigrationResourceWarningEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationResourceWarningEvent() { ns1__MigrationResourceWarningEvent::soap_default(NULL); }
	virtual ~ns1__MigrationResourceWarningEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MigrationResourceErrorEvent
#define SOAP_TYPE_ns1__MigrationResourceErrorEvent (1301)
/* ns1:MigrationResourceErrorEvent */
class SOAP_CMAC ns1__MigrationResourceErrorEvent : public ns1__MigrationEvent
{
public:
	ns1__ResourcePoolEventArgument *dstPool;	/* required element of type ns1:ResourcePoolEventArgument */
	ns1__HostEventArgument *dstHost;	/* required element of type ns1:HostEventArgument */
public:
	virtual int soap_type() const { return 1301; } /* = unique id SOAP_TYPE_ns1__MigrationResourceErrorEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MigrationResourceErrorEvent() { ns1__MigrationResourceErrorEvent::soap_default(NULL); }
	virtual ~ns1__MigrationResourceErrorEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostOvercommittedEvent
#define SOAP_TYPE_ns1__HostOvercommittedEvent (1315)
/* ns1:HostOvercommittedEvent */
class SOAP_CMAC ns1__HostOvercommittedEvent : public ns1__ClusterOvercommittedEvent
{
public:
	virtual int soap_type() const { return 1315; } /* = unique id SOAP_TYPE_ns1__HostOvercommittedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostOvercommittedEvent() { ns1__HostOvercommittedEvent::soap_default(NULL); }
	virtual ~ns1__HostOvercommittedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HostStatusChangedEvent
#define SOAP_TYPE_ns1__HostStatusChangedEvent (1317)
/* ns1:HostStatusChangedEvent */
class SOAP_CMAC ns1__HostStatusChangedEvent : public ns1__ClusterStatusChangedEvent
{
public:
	virtual int soap_type() const { return 1317; } /* = unique id SOAP_TYPE_ns1__HostStatusChangedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HostStatusChangedEvent() { ns1__HostStatusChangedEvent::soap_default(NULL); }
	virtual ~ns1__HostStatusChangedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationStartedEvent
#define SOAP_TYPE_ns1__CustomizationStartedEvent (1337)
/* ns1:CustomizationStartedEvent */
class SOAP_CMAC ns1__CustomizationStartedEvent : public ns1__CustomizationEvent
{
public:
	virtual int soap_type() const { return 1337; } /* = unique id SOAP_TYPE_ns1__CustomizationStartedEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationStartedEvent() { ns1__CustomizationStartedEvent::soap_default(NULL); }
	virtual ~ns1__CustomizationStartedEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSucceeded
#define SOAP_TYPE_ns1__CustomizationSucceeded (1338)
/* ns1:CustomizationSucceeded */
class SOAP_CMAC ns1__CustomizationSucceeded : public ns1__CustomizationEvent
{
public:
	virtual int soap_type() const { return 1338; } /* = unique id SOAP_TYPE_ns1__CustomizationSucceeded */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSucceeded() { ns1__CustomizationSucceeded::soap_default(NULL); }
	virtual ~ns1__CustomizationSucceeded() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationFailed
#define SOAP_TYPE_ns1__CustomizationFailed (1339)
/* ns1:CustomizationFailed */
class SOAP_CMAC ns1__CustomizationFailed : public ns1__CustomizationEvent
{
public:
	virtual int soap_type() const { return 1339; } /* = unique id SOAP_TYPE_ns1__CustomizationFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationFailed() { ns1__CustomizationFailed::soap_default(NULL); }
	virtual ~ns1__CustomizationFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessVmConfig
#define SOAP_TYPE_ns1__CannotAccessVmConfig (1435)
/* ns1:CannotAccessVmConfig */
class SOAP_CMAC ns1__CannotAccessVmConfig : public ns1__CannotAccessVmComponent
{
public:
	ns1__LocalizedMethodFault *reason;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1435; } /* = unique id SOAP_TYPE_ns1__CannotAccessVmConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessVmConfig() { ns1__CannotAccessVmConfig::soap_default(NULL); }
	virtual ~ns1__CannotAccessVmConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessVmDevice
#define SOAP_TYPE_ns1__CannotAccessVmDevice (1436)
/* ns1:CannotAccessVmDevice */
class SOAP_CMAC ns1__CannotAccessVmDevice : public ns1__CannotAccessVmComponent
{
public:
	std::string device;	/* required element of type xsd:string */
	std::string backing;	/* required element of type xsd:string */
	bool connected;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1436; } /* = unique id SOAP_TYPE_ns1__CannotAccessVmDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessVmDevice() { ns1__CannotAccessVmDevice::soap_default(NULL); }
	virtual ~ns1__CannotAccessVmDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ConnectedIso
#define SOAP_TYPE_ns1__ConnectedIso (1455)
/* ns1:ConnectedIso */
class SOAP_CMAC ns1__ConnectedIso : public ns1__OvfExport
{
public:
	ns1__VirtualCdrom *cdrom;	/* required element of type ns1:VirtualCdrom */
	std::string filename;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1455; } /* = unique id SOAP_TYPE_ns1__ConnectedIso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ConnectedIso() { ns1__ConnectedIso::soap_default(NULL); }
	virtual ~ns1__ConnectedIso() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CpuIncompatible
#define SOAP_TYPE_ns1__CpuIncompatible (1458)
/* ns1:CpuIncompatible */
class SOAP_CMAC ns1__CpuIncompatible : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int level;	/* required element of type xsd:int */
	std::string registerName;	/* required element of type xsd:string */
	std::string *registerBits;	/* optional element of type xsd:string */
	std::string *desiredBits;	/* optional element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1458; } /* = unique id SOAP_TYPE_ns1__CpuIncompatible */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CpuIncompatible() { ns1__CpuIncompatible::soap_default(NULL); }
	virtual ~ns1__CpuIncompatible() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceNotSupported
#define SOAP_TYPE_ns1__DeviceNotSupported (1475)
/* ns1:DeviceNotSupported */
class SOAP_CMAC ns1__DeviceNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	std::string device;	/* required element of type xsd:string */
	std::string *reason;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1475; } /* = unique id SOAP_TYPE_ns1__DeviceNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceNotSupported() { ns1__DeviceNotSupported::soap_default(NULL); }
	virtual ~ns1__DeviceNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DiskNotSupported
#define SOAP_TYPE_ns1__DiskNotSupported (1483)
/* ns1:DiskNotSupported */
class SOAP_CMAC ns1__DiskNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int disk;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1483; } /* = unique id SOAP_TYPE_ns1__DiskNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DiskNotSupported() { ns1__DiskNotSupported::soap_default(NULL); }
	virtual ~ns1__DiskNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DrsVmotionIncompatibleFault
#define SOAP_TYPE_ns1__DrsVmotionIncompatibleFault (1486)
/* ns1:DrsVmotionIncompatibleFault */
class SOAP_CMAC ns1__DrsVmotionIncompatibleFault : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1486; } /* = unique id SOAP_TYPE_ns1__DrsVmotionIncompatibleFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DrsVmotionIncompatibleFault() { ns1__DrsVmotionIncompatibleFault::soap_default(NULL); }
	virtual ~ns1__DrsVmotionIncompatibleFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExpiredAddonLicense
#define SOAP_TYPE_ns1__ExpiredAddonLicense (1505)
/* ns1:ExpiredAddonLicense */
class SOAP_CMAC ns1__ExpiredAddonLicense : public ns1__ExpiredFeatureLicense
{
public:
	virtual int soap_type() const { return 1505; } /* = unique id SOAP_TYPE_ns1__ExpiredAddonLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExpiredAddonLicense() { ns1__ExpiredAddonLicense::soap_default(NULL); }
	virtual ~ns1__ExpiredAddonLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExpiredEditionLicense
#define SOAP_TYPE_ns1__ExpiredEditionLicense (1506)
/* ns1:ExpiredEditionLicense */
class SOAP_CMAC ns1__ExpiredEditionLicense : public ns1__ExpiredFeatureLicense
{
public:
	virtual int soap_type() const { return 1506; } /* = unique id SOAP_TYPE_ns1__ExpiredEditionLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExpiredEditionLicense() { ns1__ExpiredEditionLicense::soap_default(NULL); }
	virtual ~ns1__ExpiredEditionLicense() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FullStorageVMotionNotSupported
#define SOAP_TYPE_ns1__FullStorageVMotionNotSupported (1526)
/* ns1:FullStorageVMotionNotSupported */
class SOAP_CMAC ns1__FullStorageVMotionNotSupported : public ns1__MigrationFeatureNotSupported
{
public:
	virtual int soap_type() const { return 1526; } /* = unique id SOAP_TYPE_ns1__FullStorageVMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FullStorageVMotionNotSupported() { ns1__FullStorageVMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__FullStorageVMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HotSnapshotMoveNotSupported
#define SOAP_TYPE_ns1__HotSnapshotMoveNotSupported (1538)
/* ns1:HotSnapshotMoveNotSupported */
class SOAP_CMAC ns1__HotSnapshotMoveNotSupported : public ns1__SnapshotCopyNotSupported
{
public:
	virtual int soap_type() const { return 1538; } /* = unique id SOAP_TYPE_ns1__HotSnapshotMoveNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HotSnapshotMoveNotSupported() { ns1__HotSnapshotMoveNotSupported::soap_default(NULL); }
	virtual ~ns1__HotSnapshotMoveNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IndependentDiskVMotionNotSupported
#define SOAP_TYPE_ns1__IndependentDiskVMotionNotSupported (1548)
/* ns1:IndependentDiskVMotionNotSupported */
class SOAP_CMAC ns1__IndependentDiskVMotionNotSupported : public ns1__MigrationFeatureNotSupported
{
public:
	virtual int soap_type() const { return 1548; } /* = unique id SOAP_TYPE_ns1__IndependentDiskVMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IndependentDiskVMotionNotSupported() { ns1__IndependentDiskVMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__IndependentDiskVMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientHostCpuCapacityFault
#define SOAP_TYPE_ns1__InsufficientHostCpuCapacityFault (1552)
/* ns1:InsufficientHostCpuCapacityFault */
class SOAP_CMAC ns1__InsufficientHostCpuCapacityFault : public ns1__InsufficientHostCapacityFault
{
public:
	LONG64 unreserved;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1552; } /* = unique id SOAP_TYPE_ns1__InsufficientHostCpuCapacityFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientHostCpuCapacityFault() { ns1__InsufficientHostCpuCapacityFault::soap_default(NULL); }
	virtual ~ns1__InsufficientHostCpuCapacityFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientHostMemoryCapacityFault
#define SOAP_TYPE_ns1__InsufficientHostMemoryCapacityFault (1553)
/* ns1:InsufficientHostMemoryCapacityFault */
class SOAP_CMAC ns1__InsufficientHostMemoryCapacityFault : public ns1__InsufficientHostCapacityFault
{
public:
	LONG64 unreserved;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1553; } /* = unique id SOAP_TYPE_ns1__InsufficientHostMemoryCapacityFault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientHostMemoryCapacityFault() { ns1__InsufficientHostMemoryCapacityFault::soap_default(NULL); }
	virtual ~ns1__InsufficientHostMemoryCapacityFault() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientPerCpuCapacity
#define SOAP_TYPE_ns1__InsufficientPerCpuCapacity (1555)
/* ns1:InsufficientPerCpuCapacity */
class SOAP_CMAC ns1__InsufficientPerCpuCapacity : public ns1__InsufficientHostCapacityFault
{
public:
	virtual int soap_type() const { return 1555; } /* = unique id SOAP_TYPE_ns1__InsufficientPerCpuCapacity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientPerCpuCapacity() { ns1__InsufficientPerCpuCapacity::soap_default(NULL); }
	virtual ~ns1__InsufficientPerCpuCapacity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientStandbyCpuResource
#define SOAP_TYPE_ns1__InsufficientStandbyCpuResource (1557)
/* ns1:InsufficientStandbyCpuResource */
class SOAP_CMAC ns1__InsufficientStandbyCpuResource : public ns1__InsufficientStandbyResource
{
public:
	LONG64 available;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1557; } /* = unique id SOAP_TYPE_ns1__InsufficientStandbyCpuResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientStandbyCpuResource() { ns1__InsufficientStandbyCpuResource::soap_default(NULL); }
	virtual ~ns1__InsufficientStandbyCpuResource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsufficientStandbyMemoryResource
#define SOAP_TYPE_ns1__InsufficientStandbyMemoryResource (1558)
/* ns1:InsufficientStandbyMemoryResource */
class SOAP_CMAC ns1__InsufficientStandbyMemoryResource : public ns1__InsufficientStandbyResource
{
public:
	LONG64 available;	/* required element of type xsd:long */
	LONG64 requested;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 1558; } /* = unique id SOAP_TYPE_ns1__InsufficientStandbyMemoryResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsufficientStandbyMemoryResource() { ns1__InsufficientStandbyMemoryResource::soap_default(NULL); }
	virtual ~ns1__InsufficientStandbyMemoryResource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidBundle
#define SOAP_TYPE_ns1__InvalidBundle (1562)
/* ns1:InvalidBundle */
class SOAP_CMAC ns1__InvalidBundle : public ns1__PlatformConfigFault
{
public:
	virtual int soap_type() const { return 1562; } /* = unique id SOAP_TYPE_ns1__InvalidBundle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidBundle() { ns1__InvalidBundle::soap_default(NULL); }
	virtual ~ns1__InvalidBundle() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDeviceSpec
#define SOAP_TYPE_ns1__InvalidDeviceSpec (1570)
/* ns1:InvalidDeviceSpec */
class SOAP_CMAC ns1__InvalidDeviceSpec : public ns1__InvalidVmConfig
{
public:
	int deviceIndex;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1570; } /* = unique id SOAP_TYPE_ns1__InvalidDeviceSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDeviceSpec() { ns1__InvalidDeviceSpec::soap_default(NULL); }
	virtual ~ns1__InvalidDeviceSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDiskFormat
#define SOAP_TYPE_ns1__InvalidDiskFormat (1571)
/* ns1:InvalidDiskFormat */
class SOAP_CMAC ns1__InvalidDiskFormat : public ns1__InvalidFormat
{
public:
	virtual int soap_type() const { return 1571; } /* = unique id SOAP_TYPE_ns1__InvalidDiskFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDiskFormat() { ns1__InvalidDiskFormat::soap_default(NULL); }
	virtual ~ns1__InvalidDiskFormat() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidNasCredentials
#define SOAP_TYPE_ns1__InvalidNasCredentials (1586)
/* ns1:InvalidNasCredentials */
class SOAP_CMAC ns1__InvalidNasCredentials : public ns1__NasConfigFault
{
public:
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1586; } /* = unique id SOAP_TYPE_ns1__InvalidNasCredentials */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidNasCredentials() { ns1__InvalidNasCredentials::soap_default(NULL); }
	virtual ~ns1__InvalidNasCredentials() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidNetworkInType
#define SOAP_TYPE_ns1__InvalidNetworkInType (1587)
/* ns1:InvalidNetworkInType */
class SOAP_CMAC ns1__InvalidNetworkInType : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1587; } /* = unique id SOAP_TYPE_ns1__InvalidNetworkInType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidNetworkInType() { ns1__InvalidNetworkInType::soap_default(NULL); }
	virtual ~ns1__InvalidNetworkInType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidNetworkResource
#define SOAP_TYPE_ns1__InvalidNetworkResource (1588)
/* ns1:InvalidNetworkResource */
class SOAP_CMAC ns1__InvalidNetworkResource : public ns1__NasConfigFault
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1588; } /* = unique id SOAP_TYPE_ns1__InvalidNetworkResource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidNetworkResource() { ns1__InvalidNetworkResource::soap_default(NULL); }
	virtual ~ns1__InvalidNetworkResource() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidPropertyType
#define SOAP_TYPE_ns1__InvalidPropertyType (1592)
/* ns1:InvalidPropertyType */
class SOAP_CMAC ns1__InvalidPropertyType : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1592; } /* = unique id SOAP_TYPE_ns1__InvalidPropertyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidPropertyType() { ns1__InvalidPropertyType::soap_default(NULL); }
	virtual ~ns1__InvalidPropertyType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidPropertyValue
#define SOAP_TYPE_ns1__InvalidPropertyValue (1593)
/* ns1:InvalidPropertyValue */
class SOAP_CMAC ns1__InvalidPropertyValue : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1593; } /* = unique id SOAP_TYPE_ns1__InvalidPropertyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidPropertyValue() { ns1__InvalidPropertyValue::soap_default(NULL); }
	virtual ~ns1__InvalidPropertyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidSnapshotFormat
#define SOAP_TYPE_ns1__InvalidSnapshotFormat (1595)
/* ns1:InvalidSnapshotFormat */
class SOAP_CMAC ns1__InvalidSnapshotFormat : public ns1__InvalidFormat
{
public:
	virtual int soap_type() const { return 1595; } /* = unique id SOAP_TYPE_ns1__InvalidSnapshotFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidSnapshotFormat() { ns1__InvalidSnapshotFormat::soap_default(NULL); }
	virtual ~ns1__InvalidSnapshotFormat() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MemorySizeNotRecommended
#define SOAP_TYPE_ns1__MemorySizeNotRecommended (1614)
/* ns1:MemorySizeNotRecommended */
class SOAP_CMAC ns1__MemorySizeNotRecommended : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int memorySizeMB;	/* required element of type xsd:int */
	int minMemorySizeMB;	/* required element of type xsd:int */
	int maxMemorySizeMB;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1614; } /* = unique id SOAP_TYPE_ns1__MemorySizeNotRecommended */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MemorySizeNotRecommended() { ns1__MemorySizeNotRecommended::soap_default(NULL); }
	virtual ~ns1__MemorySizeNotRecommended() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MemorySizeNotSupported
#define SOAP_TYPE_ns1__MemorySizeNotSupported (1615)
/* ns1:MemorySizeNotSupported */
class SOAP_CMAC ns1__MemorySizeNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int memorySizeMB;	/* required element of type xsd:int */
	int minMemorySizeMB;	/* required element of type xsd:int */
	int maxMemorySizeMB;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1615; } /* = unique id SOAP_TYPE_ns1__MemorySizeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MemorySizeNotSupported() { ns1__MemorySizeNotSupported::soap_default(NULL); }
	virtual ~ns1__MemorySizeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingNetworkIpConfig
#define SOAP_TYPE_ns1__MissingNetworkIpConfig (1629)
/* ns1:MissingNetworkIpConfig */
class SOAP_CMAC ns1__MissingNetworkIpConfig : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1629; } /* = unique id SOAP_TYPE_ns1__MissingNetworkIpConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingNetworkIpConfig() { ns1__MissingNetworkIpConfig::soap_default(NULL); }
	virtual ~ns1__MissingNetworkIpConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasConnectionLimitReached
#define SOAP_TYPE_ns1__NasConnectionLimitReached (1639)
/* ns1:NasConnectionLimitReached */
class SOAP_CMAC ns1__NasConnectionLimitReached : public ns1__NasConfigFault
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1639; } /* = unique id SOAP_TYPE_ns1__NasConnectionLimitReached */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasConnectionLimitReached() { ns1__NasConnectionLimitReached::soap_default(NULL); }
	virtual ~ns1__NasConnectionLimitReached() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasSessionCredentialConflict
#define SOAP_TYPE_ns1__NasSessionCredentialConflict (1640)
/* ns1:NasSessionCredentialConflict */
class SOAP_CMAC ns1__NasSessionCredentialConflict : public ns1__NasConfigFault
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
	std::string userName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1640; } /* = unique id SOAP_TYPE_ns1__NasSessionCredentialConflict */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasSessionCredentialConflict() { ns1__NasSessionCredentialConflict::soap_default(NULL); }
	virtual ~ns1__NasSessionCredentialConflict() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NasVolumeNotMounted
#define SOAP_TYPE_ns1__NasVolumeNotMounted (1641)
/* ns1:NasVolumeNotMounted */
class SOAP_CMAC ns1__NasVolumeNotMounted : public ns1__NasConfigFault
{
public:
	std::string remoteHost;	/* required element of type xsd:string */
	std::string remotePath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1641; } /* = unique id SOAP_TYPE_ns1__NasVolumeNotMounted */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NasVolumeNotMounted() { ns1__NasVolumeNotMounted::soap_default(NULL); }
	virtual ~ns1__NasVolumeNotMounted() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NetworkInaccessible
#define SOAP_TYPE_ns1__NetworkInaccessible (1643)
/* ns1:NetworkInaccessible */
class SOAP_CMAC ns1__NetworkInaccessible : public ns1__NasConfigFault
{
public:
	virtual int soap_type() const { return 1643; } /* = unique id SOAP_TYPE_ns1__NetworkInaccessible */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NetworkInaccessible() { ns1__NetworkInaccessible::soap_default(NULL); }
	virtual ~ns1__NetworkInaccessible() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoAvailableIp
#define SOAP_TYPE_ns1__NoAvailableIp (1647)
/* ns1:NoAvailableIp */
class SOAP_CMAC ns1__NoAvailableIp : public ns1__VAppPropertyFault
{
public:
	ns1__ManagedObjectReference *network;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1647; } /* = unique id SOAP_TYPE_ns1__NoAvailableIp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoAvailableIp() { ns1__NoAvailableIp::soap_default(NULL); }
	virtual ~ns1__NoAvailableIp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoPermissionOnNasVolume
#define SOAP_TYPE_ns1__NoPermissionOnNasVolume (1665)
/* ns1:NoPermissionOnNasVolume */
class SOAP_CMAC ns1__NoPermissionOnNasVolume : public ns1__NasConfigFault
{
public:
	std::string *userName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1665; } /* = unique id SOAP_TYPE_ns1__NoPermissionOnNasVolume */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoPermissionOnNasVolume() { ns1__NoPermissionOnNasVolume::soap_default(NULL); }
	virtual ~ns1__NoPermissionOnNasVolume() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoVcManagedIpConfigured
#define SOAP_TYPE_ns1__NoVcManagedIpConfigured (1667)
/* ns1:NoVcManagedIpConfigured */
class SOAP_CMAC ns1__NoVcManagedIpConfigured : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1667; } /* = unique id SOAP_TYPE_ns1__NoVcManagedIpConfigured */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoVcManagedIpConfigured() { ns1__NoVcManagedIpConfigured::soap_default(NULL); }
	virtual ~ns1__NoVcManagedIpConfigured() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NonHomeRDMVMotionNotSupported
#define SOAP_TYPE_ns1__NonHomeRDMVMotionNotSupported (1671)
/* ns1:NonHomeRDMVMotionNotSupported */
class SOAP_CMAC ns1__NonHomeRDMVMotionNotSupported : public ns1__MigrationFeatureNotSupported
{
public:
	std::string device;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1671; } /* = unique id SOAP_TYPE_ns1__NonHomeRDMVMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NonHomeRDMVMotionNotSupported() { ns1__NonHomeRDMVMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__NonHomeRDMVMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotAuthenticated
#define SOAP_TYPE_ns1__NotAuthenticated (1673)
/* ns1:NotAuthenticated */
class SOAP_CMAC ns1__NotAuthenticated : public ns1__NoPermission
{
public:
	virtual int soap_type() const { return 1673; } /* = unique id SOAP_TYPE_ns1__NotAuthenticated */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotAuthenticated() { ns1__NotAuthenticated::soap_default(NULL); }
	virtual ~ns1__NotAuthenticated() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotEnoughCpus
#define SOAP_TYPE_ns1__NotEnoughCpus (1674)
/* ns1:NotEnoughCpus */
class SOAP_CMAC ns1__NotEnoughCpus : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int numCpuDest;	/* required element of type xsd:int */
	int numCpuVm;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1674; } /* = unique id SOAP_TYPE_ns1__NotEnoughCpus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotEnoughCpus() { ns1__NotEnoughCpus::soap_default(NULL); }
	virtual ~ns1__NotEnoughCpus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedHostInCluster
#define SOAP_TYPE_ns1__NotSupportedHostInCluster (1679)
/* ns1:NotSupportedHostInCluster */
class SOAP_CMAC ns1__NotSupportedHostInCluster : public ns1__NotSupportedHost
{
public:
	virtual int soap_type() const { return 1679; } /* = unique id SOAP_TYPE_ns1__NotSupportedHostInCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupportedHostInCluster() { ns1__NotSupportedHostInCluster::soap_default(NULL); }
	virtual ~ns1__NotSupportedHostInCluster() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotSupportedHostInDvs
#define SOAP_TYPE_ns1__NotSupportedHostInDvs (1680)
/* ns1:NotSupportedHostInDvs */
class SOAP_CMAC ns1__NotSupportedHostInDvs : public ns1__NotSupportedHost
{
public:
	ns1__DistributedVirtualSwitchProductSpec *switchProductSpec;	/* required element of type ns1:DistributedVirtualSwitchProductSpec */
public:
	virtual int soap_type() const { return 1680; } /* = unique id SOAP_TYPE_ns1__NotSupportedHostInDvs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotSupportedHostInDvs() { ns1__NotSupportedHostInDvs::soap_default(NULL); }
	virtual ~ns1__NotSupportedHostInDvs() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotUserConfigurableProperty
#define SOAP_TYPE_ns1__NotUserConfigurableProperty (1681)
/* ns1:NotUserConfigurableProperty */
class SOAP_CMAC ns1__NotUserConfigurableProperty : public ns1__VAppPropertyFault
{
public:
	virtual int soap_type() const { return 1681; } /* = unique id SOAP_TYPE_ns1__NotUserConfigurableProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotUserConfigurableProperty() { ns1__NotUserConfigurableProperty::soap_default(NULL); }
	virtual ~ns1__NotUserConfigurableProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NumVirtualCpusNotSupported
#define SOAP_TYPE_ns1__NumVirtualCpusNotSupported (1684)
/* ns1:NumVirtualCpusNotSupported */
class SOAP_CMAC ns1__NumVirtualCpusNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	int maxSupportedVcpusDest;	/* required element of type xsd:int */
	int numCpuVm;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1684; } /* = unique id SOAP_TYPE_ns1__NumVirtualCpusNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NumVirtualCpusNotSupported() { ns1__NumVirtualCpusNotSupported::soap_default(NULL); }
	virtual ~ns1__NumVirtualCpusNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfAttribute
#define SOAP_TYPE_ns1__OvfAttribute (1686)
/* ns1:OvfAttribute */
class SOAP_CMAC ns1__OvfAttribute : public ns1__OvfInvalidPackage
{
public:
	std::string elementName;	/* required element of type xsd:string */
	std::string attributeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1686; } /* = unique id SOAP_TYPE_ns1__OvfAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfAttribute() { ns1__OvfAttribute::soap_default(NULL); }
	virtual ~ns1__OvfAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfConstraint
#define SOAP_TYPE_ns1__OvfConstraint (1690)
/* ns1:OvfConstraint */
class SOAP_CMAC ns1__OvfConstraint : public ns1__OvfInvalidPackage
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1690; } /* = unique id SOAP_TYPE_ns1__OvfConstraint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfConstraint() { ns1__OvfConstraint::soap_default(NULL); }
	virtual ~ns1__OvfConstraint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfDiskMappingNotFound
#define SOAP_TYPE_ns1__OvfDiskMappingNotFound (1691)
/* ns1:OvfDiskMappingNotFound */
class SOAP_CMAC ns1__OvfDiskMappingNotFound : public ns1__OvfSystemFault
{
public:
	std::string diskName;	/* required element of type xsd:string */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1691; } /* = unique id SOAP_TYPE_ns1__OvfDiskMappingNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfDiskMappingNotFound() { ns1__OvfDiskMappingNotFound::soap_default(NULL); }
	virtual ~ns1__OvfDiskMappingNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfElement
#define SOAP_TYPE_ns1__OvfElement (1695)
/* ns1:OvfElement */
class SOAP_CMAC ns1__OvfElement : public ns1__OvfInvalidPackage
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1695; } /* = unique id SOAP_TYPE_ns1__OvfElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfElement() { ns1__OvfElement::soap_default(NULL); }
	virtual ~ns1__OvfElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfExportFailed
#define SOAP_TYPE_ns1__OvfExportFailed (1698)
/* ns1:OvfExportFailed */
class SOAP_CMAC ns1__OvfExportFailed : public ns1__OvfExport
{
public:
	virtual int soap_type() const { return 1698; } /* = unique id SOAP_TYPE_ns1__OvfExportFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfExportFailed() { ns1__OvfExportFailed::soap_default(NULL); }
	virtual ~ns1__OvfExportFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfHardwareCheck
#define SOAP_TYPE_ns1__OvfHardwareCheck (1700)
/* ns1:OvfHardwareCheck */
class SOAP_CMAC ns1__OvfHardwareCheck : public ns1__OvfImport
{
public:
	virtual int soap_type() const { return 1700; } /* = unique id SOAP_TYPE_ns1__OvfHardwareCheck */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfHardwareCheck() { ns1__OvfHardwareCheck::soap_default(NULL); }
	virtual ~ns1__OvfHardwareCheck() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfHardwareExport
#define SOAP_TYPE_ns1__OvfHardwareExport (1701)
/* ns1:OvfHardwareExport */
class SOAP_CMAC ns1__OvfHardwareExport : public ns1__OvfExport
{
public:
	ns1__VirtualDevice *device;	/* optional element of type ns1:VirtualDevice */
	std::string vmPath;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1701; } /* = unique id SOAP_TYPE_ns1__OvfHardwareExport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfHardwareExport() { ns1__OvfHardwareExport::soap_default(NULL); }
	virtual ~ns1__OvfHardwareExport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfHostValueNotParsed
#define SOAP_TYPE_ns1__OvfHostValueNotParsed (1703)
/* ns1:OvfHostValueNotParsed */
class SOAP_CMAC ns1__OvfHostValueNotParsed : public ns1__OvfSystemFault
{
public:
	std::string property;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1703; } /* = unique id SOAP_TYPE_ns1__OvfHostValueNotParsed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfHostValueNotParsed() { ns1__OvfHostValueNotParsed::soap_default(NULL); }
	virtual ~ns1__OvfHostValueNotParsed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfImportFailed
#define SOAP_TYPE_ns1__OvfImportFailed (1705)
/* ns1:OvfImportFailed */
class SOAP_CMAC ns1__OvfImportFailed : public ns1__OvfImport
{
public:
	virtual int soap_type() const { return 1705; } /* = unique id SOAP_TYPE_ns1__OvfImportFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfImportFailed() { ns1__OvfImportFailed::soap_default(NULL); }
	virtual ~ns1__OvfImportFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInternalError
#define SOAP_TYPE_ns1__OvfInternalError (1706)
/* ns1:OvfInternalError */
class SOAP_CMAC ns1__OvfInternalError : public ns1__OvfSystemFault
{
public:
	virtual int soap_type() const { return 1706; } /* = unique id SOAP_TYPE_ns1__OvfInternalError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInternalError() { ns1__OvfInternalError::soap_default(NULL); }
	virtual ~ns1__OvfInternalError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidVmName
#define SOAP_TYPE_ns1__OvfInvalidVmName (1713)
/* ns1:OvfInvalidVmName */
class SOAP_CMAC ns1__OvfInvalidVmName : public ns1__OvfUnsupportedPackage
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1713; } /* = unique id SOAP_TYPE_ns1__OvfInvalidVmName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidVmName() { ns1__OvfInvalidVmName::soap_default(NULL); }
	virtual ~ns1__OvfInvalidVmName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfMappedOsId
#define SOAP_TYPE_ns1__OvfMappedOsId (1714)
/* ns1:OvfMappedOsId */
class SOAP_CMAC ns1__OvfMappedOsId : public ns1__OvfImport
{
public:
	int ovfId;	/* required element of type xsd:int */
	std::string ovfDescription;	/* required element of type xsd:string */
	std::string targetDescription;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1714; } /* = unique id SOAP_TYPE_ns1__OvfMappedOsId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfMappedOsId() { ns1__OvfMappedOsId::soap_default(NULL); }
	virtual ~ns1__OvfMappedOsId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfMissingHardware
#define SOAP_TYPE_ns1__OvfMissingHardware (1718)
/* ns1:OvfMissingHardware */
class SOAP_CMAC ns1__OvfMissingHardware : public ns1__OvfImport
{
public:
	std::string name;	/* required element of type xsd:string */
	int resourceType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1718; } /* = unique id SOAP_TYPE_ns1__OvfMissingHardware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfMissingHardware() { ns1__OvfMissingHardware::soap_default(NULL); }
	virtual ~ns1__OvfMissingHardware() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfNoHostNic
#define SOAP_TYPE_ns1__OvfNoHostNic (1719)
/* ns1:OvfNoHostNic */
class SOAP_CMAC ns1__OvfNoHostNic : public ns1__OvfUnsupportedPackage
{
public:
	virtual int soap_type() const { return 1719; } /* = unique id SOAP_TYPE_ns1__OvfNoHostNic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfNoHostNic() { ns1__OvfNoHostNic::soap_default(NULL); }
	virtual ~ns1__OvfNoHostNic() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfNoSupportedHardwareFamily
#define SOAP_TYPE_ns1__OvfNoSupportedHardwareFamily (1720)
/* ns1:OvfNoSupportedHardwareFamily */
class SOAP_CMAC ns1__OvfNoSupportedHardwareFamily : public ns1__OvfUnsupportedPackage
{
public:
	std::string version;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1720; } /* = unique id SOAP_TYPE_ns1__OvfNoSupportedHardwareFamily */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfNoSupportedHardwareFamily() { ns1__OvfNoSupportedHardwareFamily::soap_default(NULL); }
	virtual ~ns1__OvfNoSupportedHardwareFamily() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfProperty
#define SOAP_TYPE_ns1__OvfProperty (1721)
/* ns1:OvfProperty */
class SOAP_CMAC ns1__OvfProperty : public ns1__OvfInvalidPackage
{
public:
	std::string type;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1721; } /* = unique id SOAP_TYPE_ns1__OvfProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfProperty() { ns1__OvfProperty::soap_default(NULL); }
	virtual ~ns1__OvfProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyExport
#define SOAP_TYPE_ns1__OvfPropertyExport (1722)
/* ns1:OvfPropertyExport */
class SOAP_CMAC ns1__OvfPropertyExport : public ns1__OvfExport
{
public:
	std::string type;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1722; } /* = unique id SOAP_TYPE_ns1__OvfPropertyExport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyExport() { ns1__OvfPropertyExport::soap_default(NULL); }
	virtual ~ns1__OvfPropertyExport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfToXmlUnsupportedElement
#define SOAP_TYPE_ns1__OvfToXmlUnsupportedElement (1730)
/* ns1:OvfToXmlUnsupportedElement */
class SOAP_CMAC ns1__OvfToXmlUnsupportedElement : public ns1__OvfSystemFault
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1730; } /* = unique id SOAP_TYPE_ns1__OvfToXmlUnsupportedElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfToXmlUnsupportedElement() { ns1__OvfToXmlUnsupportedElement::soap_default(NULL); }
	virtual ~ns1__OvfToXmlUnsupportedElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnknownDevice
#define SOAP_TYPE_ns1__OvfUnknownDevice (1733)
/* ns1:OvfUnknownDevice */
class SOAP_CMAC ns1__OvfUnknownDevice : public ns1__OvfSystemFault
{
public:
	ns1__VirtualDevice *device;	/* optional element of type ns1:VirtualDevice */
	std::string vmName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1733; } /* = unique id SOAP_TYPE_ns1__OvfUnknownDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnknownDevice() { ns1__OvfUnknownDevice::soap_default(NULL); }
	virtual ~ns1__OvfUnknownDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnknownEntity
#define SOAP_TYPE_ns1__OvfUnknownEntity (1735)
/* ns1:OvfUnknownEntity */
class SOAP_CMAC ns1__OvfUnknownEntity : public ns1__OvfSystemFault
{
public:
	int lineNumber;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1735; } /* = unique id SOAP_TYPE_ns1__OvfUnknownEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnknownEntity() { ns1__OvfUnknownEntity::soap_default(NULL); }
	virtual ~ns1__OvfUnknownEntity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedAttribute
#define SOAP_TYPE_ns1__OvfUnsupportedAttribute (1736)
/* ns1:OvfUnsupportedAttribute */
class SOAP_CMAC ns1__OvfUnsupportedAttribute : public ns1__OvfUnsupportedPackage
{
public:
	std::string elementName;	/* required element of type xsd:string */
	std::string attributeName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1736; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedAttribute() { ns1__OvfUnsupportedAttribute::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingInfo
#define SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingInfo (1738)
/* ns1:OvfUnsupportedDeviceBackingInfo */
class SOAP_CMAC ns1__OvfUnsupportedDeviceBackingInfo : public ns1__OvfSystemFault
{
public:
	std::string *elementName;	/* optional element of type xsd:string */
	std::string *instanceId;	/* optional element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string *backingName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1738; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedDeviceBackingInfo() { ns1__OvfUnsupportedDeviceBackingInfo::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedDeviceBackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingOption
#define SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingOption (1739)
/* ns1:OvfUnsupportedDeviceBackingOption */
class SOAP_CMAC ns1__OvfUnsupportedDeviceBackingOption : public ns1__OvfSystemFault
{
public:
	std::string *elementName;	/* optional element of type xsd:string */
	std::string *instanceId;	/* optional element of type xsd:string */
	std::string deviceName;	/* required element of type xsd:string */
	std::string *backingName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1739; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedDeviceBackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedDeviceBackingOption() { ns1__OvfUnsupportedDeviceBackingOption::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedDeviceBackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedDiskProvisioning
#define SOAP_TYPE_ns1__OvfUnsupportedDiskProvisioning (1741)
/* ns1:OvfUnsupportedDiskProvisioning */
class SOAP_CMAC ns1__OvfUnsupportedDiskProvisioning : public ns1__OvfImport
{
public:
	std::string diskProvisioning;	/* required element of type xsd:string */
	std::string supportedDiskProvisioning;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1741; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedDiskProvisioning */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedDiskProvisioning() { ns1__OvfUnsupportedDiskProvisioning::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedDiskProvisioning() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedElement
#define SOAP_TYPE_ns1__OvfUnsupportedElement (1742)
/* ns1:OvfUnsupportedElement */
class SOAP_CMAC ns1__OvfUnsupportedElement : public ns1__OvfUnsupportedPackage
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1742; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedElement() { ns1__OvfUnsupportedElement::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedSubType
#define SOAP_TYPE_ns1__OvfUnsupportedSubType (1746)
/* ns1:OvfUnsupportedSubType */
class SOAP_CMAC ns1__OvfUnsupportedSubType : public ns1__OvfUnsupportedPackage
{
public:
	std::string elementName;	/* required element of type xsd:string */
	std::string instanceId;	/* required element of type xsd:string */
	int deviceType;	/* required element of type xsd:int */
	std::string deviceSubType;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1746; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedSubType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedSubType() { ns1__OvfUnsupportedSubType::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedSubType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedType
#define SOAP_TYPE_ns1__OvfUnsupportedType (1747)
/* ns1:OvfUnsupportedType */
class SOAP_CMAC ns1__OvfUnsupportedType : public ns1__OvfUnsupportedPackage
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string instanceId;	/* required element of type xsd:string */
	int deviceType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1747; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedType() { ns1__OvfUnsupportedType::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfWrongNamespace
#define SOAP_TYPE_ns1__OvfWrongNamespace (1749)
/* ns1:OvfWrongNamespace */
class SOAP_CMAC ns1__OvfWrongNamespace : public ns1__OvfInvalidPackage
{
public:
	std::string namespaceName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1749; } /* = unique id SOAP_TYPE_ns1__OvfWrongNamespace */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfWrongNamespace() { ns1__OvfWrongNamespace::soap_default(NULL); }
	virtual ~ns1__OvfWrongNamespace() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfXmlFormat
#define SOAP_TYPE_ns1__OvfXmlFormat (1750)
/* ns1:OvfXmlFormat */
class SOAP_CMAC ns1__OvfXmlFormat : public ns1__OvfInvalidPackage
{
public:
	std::string description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1750; } /* = unique id SOAP_TYPE_ns1__OvfXmlFormat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfXmlFormat() { ns1__OvfXmlFormat::soap_default(NULL); }
	virtual ~ns1__OvfXmlFormat() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchInstallFailed
#define SOAP_TYPE_ns1__PatchInstallFailed (1753)
/* ns1:PatchInstallFailed */
class SOAP_CMAC ns1__PatchInstallFailed : public ns1__PlatformConfigFault
{
public:
	bool rolledBack;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1753; } /* = unique id SOAP_TYPE_ns1__PatchInstallFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchInstallFailed() { ns1__PatchInstallFailed::soap_default(NULL); }
	virtual ~ns1__PatchInstallFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PatchIntegrityError
#define SOAP_TYPE_ns1__PatchIntegrityError (1754)
/* ns1:PatchIntegrityError */
class SOAP_CMAC ns1__PatchIntegrityError : public ns1__PlatformConfigFault
{
public:
	virtual int soap_type() const { return 1754; } /* = unique id SOAP_TYPE_ns1__PatchIntegrityError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PatchIntegrityError() { ns1__PatchIntegrityError::soap_default(NULL); }
	virtual ~ns1__PatchIntegrityError() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotCloneNotSupported
#define SOAP_TYPE_ns1__SnapshotCloneNotSupported (1792)
/* ns1:SnapshotCloneNotSupported */
class SOAP_CMAC ns1__SnapshotCloneNotSupported : public ns1__SnapshotCopyNotSupported
{
public:
	virtual int soap_type() const { return 1792; } /* = unique id SOAP_TYPE_ns1__SnapshotCloneNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotCloneNotSupported() { ns1__SnapshotCloneNotSupported::soap_default(NULL); }
	virtual ~ns1__SnapshotCloneNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotMoveFromNonHomeNotSupported
#define SOAP_TYPE_ns1__SnapshotMoveFromNonHomeNotSupported (1798)
/* ns1:SnapshotMoveFromNonHomeNotSupported */
class SOAP_CMAC ns1__SnapshotMoveFromNonHomeNotSupported : public ns1__SnapshotCopyNotSupported
{
public:
	virtual int soap_type() const { return 1798; } /* = unique id SOAP_TYPE_ns1__SnapshotMoveFromNonHomeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotMoveFromNonHomeNotSupported() { ns1__SnapshotMoveFromNonHomeNotSupported::soap_default(NULL); }
	virtual ~ns1__SnapshotMoveFromNonHomeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotMoveNotSupported
#define SOAP_TYPE_ns1__SnapshotMoveNotSupported (1799)
/* ns1:SnapshotMoveNotSupported */
class SOAP_CMAC ns1__SnapshotMoveNotSupported : public ns1__SnapshotCopyNotSupported
{
public:
	virtual int soap_type() const { return 1799; } /* = unique id SOAP_TYPE_ns1__SnapshotMoveNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotMoveNotSupported() { ns1__SnapshotMoveNotSupported::soap_default(NULL); }
	virtual ~ns1__SnapshotMoveNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SnapshotMoveToNonHomeNotSupported
#define SOAP_TYPE_ns1__SnapshotMoveToNonHomeNotSupported (1800)
/* ns1:SnapshotMoveToNonHomeNotSupported */
class SOAP_CMAC ns1__SnapshotMoveToNonHomeNotSupported : public ns1__SnapshotCopyNotSupported
{
public:
	virtual int soap_type() const { return 1800; } /* = unique id SOAP_TYPE_ns1__SnapshotMoveToNonHomeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SnapshotMoveToNonHomeNotSupported() { ns1__SnapshotMoveToNonHomeNotSupported::soap_default(NULL); }
	virtual ~ns1__SnapshotMoveToNonHomeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StorageVMotionNotSupported
#define SOAP_TYPE_ns1__StorageVMotionNotSupported (1805)
/* ns1:StorageVMotionNotSupported */
class SOAP_CMAC ns1__StorageVMotionNotSupported : public ns1__MigrationFeatureNotSupported
{
public:
	virtual int soap_type() const { return 1805; } /* = unique id SOAP_TYPE_ns1__StorageVMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StorageVMotionNotSupported() { ns1__StorageVMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__StorageVMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SwapDatastoreNotWritableOnHost
#define SOAP_TYPE_ns1__SwapDatastoreNotWritableOnHost (1807)
/* ns1:SwapDatastoreNotWritableOnHost */
class SOAP_CMAC ns1__SwapDatastoreNotWritableOnHost : public ns1__DatastoreNotWritableOnHost
{
public:
	virtual int soap_type() const { return 1807; } /* = unique id SOAP_TYPE_ns1__SwapDatastoreNotWritableOnHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SwapDatastoreNotWritableOnHost() { ns1__SwapDatastoreNotWritableOnHost::soap_default(NULL); }
	virtual ~ns1__SwapDatastoreNotWritableOnHost() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SwapPlacementOverrideNotSupported
#define SOAP_TYPE_ns1__SwapPlacementOverrideNotSupported (1809)
/* ns1:SwapPlacementOverrideNotSupported */
class SOAP_CMAC ns1__SwapPlacementOverrideNotSupported : public ns1__InvalidVmConfig
{
public:
	virtual int soap_type() const { return 1809; } /* = unique id SOAP_TYPE_ns1__SwapPlacementOverrideNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SwapPlacementOverrideNotSupported() { ns1__SwapPlacementOverrideNotSupported::soap_default(NULL); }
	virtual ~ns1__SwapPlacementOverrideNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TooManyDevices
#define SOAP_TYPE_ns1__TooManyDevices (1814)
/* ns1:TooManyDevices */
class SOAP_CMAC ns1__TooManyDevices : public ns1__InvalidVmConfig
{
public:
	virtual int soap_type() const { return 1814; } /* = unique id SOAP_TYPE_ns1__TooManyDevices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TooManyDevices() { ns1__TooManyDevices::soap_default(NULL); }
	virtual ~ns1__TooManyDevices() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnsharedSwapVMotionNotSupported
#define SOAP_TYPE_ns1__UnsharedSwapVMotionNotSupported (1830)
/* ns1:UnsharedSwapVMotionNotSupported */
class SOAP_CMAC ns1__UnsharedSwapVMotionNotSupported : public ns1__MigrationFeatureNotSupported
{
public:
	virtual int soap_type() const { return 1830; } /* = unique id SOAP_TYPE_ns1__UnsharedSwapVMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnsharedSwapVMotionNotSupported() { ns1__UnsharedSwapVMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__UnsharedSwapVMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnsupportedGuest
#define SOAP_TYPE_ns1__UnsupportedGuest (1832)
/* ns1:UnsupportedGuest */
class SOAP_CMAC ns1__UnsupportedGuest : public ns1__InvalidVmConfig
{
public:
	std::string unsupportedGuestOS;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1832; } /* = unique id SOAP_TYPE_ns1__UnsupportedGuest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnsupportedGuest() { ns1__UnsupportedGuest::soap_default(NULL); }
	virtual ~ns1__UnsupportedGuest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionLinkCapacityLow
#define SOAP_TYPE_ns1__VMotionLinkCapacityLow (1845)
/* ns1:VMotionLinkCapacityLow */
class SOAP_CMAC ns1__VMotionLinkCapacityLow : public ns1__VMotionInterfaceIssue
{
public:
	std::string network;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1845; } /* = unique id SOAP_TYPE_ns1__VMotionLinkCapacityLow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionLinkCapacityLow() { ns1__VMotionLinkCapacityLow::soap_default(NULL); }
	virtual ~ns1__VMotionLinkCapacityLow() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionLinkDown
#define SOAP_TYPE_ns1__VMotionLinkDown (1846)
/* ns1:VMotionLinkDown */
class SOAP_CMAC ns1__VMotionLinkDown : public ns1__VMotionInterfaceIssue
{
public:
	std::string network;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1846; } /* = unique id SOAP_TYPE_ns1__VMotionLinkDown */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionLinkDown() { ns1__VMotionLinkDown::soap_default(NULL); }
	virtual ~ns1__VMotionLinkDown() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionNotConfigured
#define SOAP_TYPE_ns1__VMotionNotConfigured (1847)
/* ns1:VMotionNotConfigured */
class SOAP_CMAC ns1__VMotionNotConfigured : public ns1__VMotionInterfaceIssue
{
public:
	virtual int soap_type() const { return 1847; } /* = unique id SOAP_TYPE_ns1__VMotionNotConfigured */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionNotConfigured() { ns1__VMotionNotConfigured::soap_default(NULL); }
	virtual ~ns1__VMotionNotConfigured() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionNotLicensed
#define SOAP_TYPE_ns1__VMotionNotLicensed (1848)
/* ns1:VMotionNotLicensed */
class SOAP_CMAC ns1__VMotionNotLicensed : public ns1__VMotionInterfaceIssue
{
public:
	virtual int soap_type() const { return 1848; } /* = unique id SOAP_TYPE_ns1__VMotionNotLicensed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionNotLicensed() { ns1__VMotionNotLicensed::soap_default(NULL); }
	virtual ~ns1__VMotionNotLicensed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMotionNotSupported
#define SOAP_TYPE_ns1__VMotionNotSupported (1849)
/* ns1:VMotionNotSupported */
class SOAP_CMAC ns1__VMotionNotSupported : public ns1__VMotionInterfaceIssue
{
public:
	virtual int soap_type() const { return 1849; } /* = unique id SOAP_TYPE_ns1__VMotionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMotionNotSupported() { ns1__VMotionNotSupported::soap_default(NULL); }
	virtual ~ns1__VMotionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualHardwareVersionNotSupported
#define SOAP_TYPE_ns1__VirtualHardwareVersionNotSupported (1856)
/* ns1:VirtualHardwareVersionNotSupported */
class SOAP_CMAC ns1__VirtualHardwareVersionNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	std::string hostName;	/* required element of type xsd:string */
	ns1__ManagedObjectReference *host;	/* required element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1856; } /* = unique id SOAP_TYPE_ns1__VirtualHardwareVersionNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualHardwareVersionNotSupported() { ns1__VirtualHardwareVersionNotSupported::soap_default(NULL); }
	virtual ~ns1__VirtualHardwareVersionNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmWwnConflict
#define SOAP_TYPE_ns1__VmWwnConflict (1873)
/* ns1:VmWwnConflict */
class SOAP_CMAC ns1__VmWwnConflict : public ns1__InvalidVmConfig
{
public:
	ns1__ManagedObjectReference *vm;	/* optional element of type ns1:ManagedObjectReference */
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
	std::string *name;	/* optional element of type xsd:string */
	LONG64 *wwn;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 1873; } /* = unique id SOAP_TYPE_ns1__VmWwnConflict */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmWwnConflict() { ns1__VmWwnConflict::soap_default(NULL); }
	virtual ~ns1__VmWwnConflict() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsAlreadyMounted
#define SOAP_TYPE_ns1__VmfsAlreadyMounted (1874)
/* ns1:VmfsAlreadyMounted */
class SOAP_CMAC ns1__VmfsAlreadyMounted : public ns1__VmfsMountFault
{
public:
	virtual int soap_type() const { return 1874; } /* = unique id SOAP_TYPE_ns1__VmfsAlreadyMounted */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsAlreadyMounted() { ns1__VmfsAlreadyMounted::soap_default(NULL); }
	virtual ~ns1__VmfsAlreadyMounted() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VmfsAmbiguousMount
#define SOAP_TYPE_ns1__VmfsAmbiguousMount (1875)
/* ns1:VmfsAmbiguousMount */
class SOAP_CMAC ns1__VmfsAmbiguousMount : public ns1__VmfsMountFault
{
public:
	virtual int soap_type() const { return 1875; } /* = unique id SOAP_TYPE_ns1__VmfsAmbiguousMount */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VmfsAmbiguousMount() { ns1__VmfsAmbiguousMount::soap_default(NULL); }
	virtual ~ns1__VmfsAmbiguousMount() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WakeOnLanNotSupported
#define SOAP_TYPE_ns1__WakeOnLanNotSupported (1879)
/* ns1:WakeOnLanNotSupported */
class SOAP_CMAC ns1__WakeOnLanNotSupported : public ns1__VirtualHardwareCompatibilityIssue
{
public:
	virtual int soap_type() const { return 1879; } /* = unique id SOAP_TYPE_ns1__WakeOnLanNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WakeOnLanNotSupported() { ns1__WakeOnLanNotSupported::soap_default(NULL); }
	virtual ~ns1__WakeOnLanNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileCompleteConfigSpec
#define SOAP_TYPE_ns1__ClusterProfileCompleteConfigSpec (2339)
/* ns1:ClusterProfileCompleteConfigSpec */
class SOAP_CMAC ns1__ClusterProfileCompleteConfigSpec : public ns1__ClusterProfileConfigSpec
{
public:
	ns1__ComplianceProfile *complyProfile;	/* optional element of type ns1:ComplianceProfile */
public:
	virtual int soap_type() const { return 2339; } /* = unique id SOAP_TYPE_ns1__ClusterProfileCompleteConfigSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileCompleteConfigSpec() { ns1__ClusterProfileCompleteConfigSpec::soap_default(NULL); }
	virtual ~ns1__ClusterProfileCompleteConfigSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ClusterProfileConfigServiceCreateSpec
#define SOAP_TYPE_ns1__ClusterProfileConfigServiceCreateSpec (2340)
/* ns1:ClusterProfileConfigServiceCreateSpec */
class SOAP_CMAC ns1__ClusterProfileConfigServiceCreateSpec : public ns1__ClusterProfileConfigSpec
{
public:
	std::vector<std::string >serviceType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 2340; } /* = unique id SOAP_TYPE_ns1__ClusterProfileConfigServiceCreateSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ClusterProfileConfigServiceCreateSpec() { ns1__ClusterProfileConfigServiceCreateSpec::soap_default(NULL); }
	virtual ~ns1__ClusterProfileConfigServiceCreateSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DailyTaskScheduler
#define SOAP_TYPE_ns1__DailyTaskScheduler (2411)
/* ns1:DailyTaskScheduler */
class SOAP_CMAC ns1__DailyTaskScheduler : public ns1__HourlyTaskScheduler
{
public:
	int hour;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2411; } /* = unique id SOAP_TYPE_ns1__DailyTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DailyTaskScheduler() { ns1__DailyTaskScheduler::soap_default(NULL); }
	virtual ~ns1__DailyTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ParaVirtualSCSIController
#define SOAP_TYPE_ns1__ParaVirtualSCSIController (2599)
/* ns1:ParaVirtualSCSIController */
class SOAP_CMAC ns1__ParaVirtualSCSIController : public ns1__VirtualSCSIController
{
public:
	virtual int soap_type() const { return 2599; } /* = unique id SOAP_TYPE_ns1__ParaVirtualSCSIController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ParaVirtualSCSIController() { ns1__ParaVirtualSCSIController::soap_default(NULL); }
	virtual ~ns1__ParaVirtualSCSIController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ParaVirtualSCSIControllerOption
#define SOAP_TYPE_ns1__ParaVirtualSCSIControllerOption (2600)
/* ns1:ParaVirtualSCSIControllerOption */
class SOAP_CMAC ns1__ParaVirtualSCSIControllerOption : public ns1__VirtualSCSIControllerOption
{
public:
	virtual int soap_type() const { return 2600; } /* = unique id SOAP_TYPE_ns1__ParaVirtualSCSIControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ParaVirtualSCSIControllerOption() { ns1__ParaVirtualSCSIControllerOption::soap_default(NULL); }
	virtual ~ns1__ParaVirtualSCSIControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualBusLogicController
#define SOAP_TYPE_ns1__VirtualBusLogicController (2601)
/* ns1:VirtualBusLogicController */
class SOAP_CMAC ns1__VirtualBusLogicController : public ns1__VirtualSCSIController
{
public:
	virtual int soap_type() const { return 2601; } /* = unique id SOAP_TYPE_ns1__VirtualBusLogicController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualBusLogicController() { ns1__VirtualBusLogicController::soap_default(NULL); }
	virtual ~ns1__VirtualBusLogicController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualBusLogicControllerOption
#define SOAP_TYPE_ns1__VirtualBusLogicControllerOption (2602)
/* ns1:VirtualBusLogicControllerOption */
class SOAP_CMAC ns1__VirtualBusLogicControllerOption : public ns1__VirtualSCSIControllerOption
{
public:
	virtual int soap_type() const { return 2602; } /* = unique id SOAP_TYPE_ns1__VirtualBusLogicControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualBusLogicControllerOption() { ns1__VirtualBusLogicControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualBusLogicControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo
#define SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo (2643)
/* ns1:VirtualDiskPartitionedRawDiskVer2BackingInfo */
class SOAP_CMAC ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo : public ns1__VirtualDiskRawDiskVer2BackingInfo
{
public:
	std::vector<int >partition;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2643; } /* = unique id SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo() { ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo::soap_default(NULL); }
	virtual ~ns1__VirtualDiskPartitionedRawDiskVer2BackingInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingOption
#define SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingOption (2652)
/* ns1:VirtualDiskPartitionedRawDiskVer2BackingOption */
class SOAP_CMAC ns1__VirtualDiskPartitionedRawDiskVer2BackingOption : public ns1__VirtualDiskRawDiskVer2BackingOption
{
public:
	virtual int soap_type() const { return 2652; } /* = unique id SOAP_TYPE_ns1__VirtualDiskPartitionedRawDiskVer2BackingOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskPartitionedRawDiskVer2BackingOption() { ns1__VirtualDiskPartitionedRawDiskVer2BackingOption::soap_default(NULL); }
	virtual ~ns1__VirtualDiskPartitionedRawDiskVer2BackingOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualLsiLogicController
#define SOAP_TYPE_ns1__VirtualLsiLogicController (2679)
/* ns1:VirtualLsiLogicController */
class SOAP_CMAC ns1__VirtualLsiLogicController : public ns1__VirtualSCSIController
{
public:
	virtual int soap_type() const { return 2679; } /* = unique id SOAP_TYPE_ns1__VirtualLsiLogicController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualLsiLogicController() { ns1__VirtualLsiLogicController::soap_default(NULL); }
	virtual ~ns1__VirtualLsiLogicController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualLsiLogicControllerOption
#define SOAP_TYPE_ns1__VirtualLsiLogicControllerOption (2680)
/* ns1:VirtualLsiLogicControllerOption */
class SOAP_CMAC ns1__VirtualLsiLogicControllerOption : public ns1__VirtualSCSIControllerOption
{
public:
	virtual int soap_type() const { return 2680; } /* = unique id SOAP_TYPE_ns1__VirtualLsiLogicControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualLsiLogicControllerOption() { ns1__VirtualLsiLogicControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualLsiLogicControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualLsiLogicSASController
#define SOAP_TYPE_ns1__VirtualLsiLogicSASController (2681)
/* ns1:VirtualLsiLogicSASController */
class SOAP_CMAC ns1__VirtualLsiLogicSASController : public ns1__VirtualSCSIController
{
public:
	virtual int soap_type() const { return 2681; } /* = unique id SOAP_TYPE_ns1__VirtualLsiLogicSASController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualLsiLogicSASController() { ns1__VirtualLsiLogicSASController::soap_default(NULL); }
	virtual ~ns1__VirtualLsiLogicSASController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualLsiLogicSASControllerOption
#define SOAP_TYPE_ns1__VirtualLsiLogicSASControllerOption (2682)
/* ns1:VirtualLsiLogicSASControllerOption */
class SOAP_CMAC ns1__VirtualLsiLogicSASControllerOption : public ns1__VirtualSCSIControllerOption
{
public:
	virtual int soap_type() const { return 2682; } /* = unique id SOAP_TYPE_ns1__VirtualLsiLogicSASControllerOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualLsiLogicSASControllerOption() { ns1__VirtualLsiLogicSASControllerOption::soap_default(NULL); }
	virtual ~ns1__VirtualLsiLogicSASControllerOption() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnet2
#define SOAP_TYPE_ns1__VirtualVmxnet2 (2743)
/* ns1:VirtualVmxnet2 */
class SOAP_CMAC ns1__VirtualVmxnet2 : public ns1__VirtualVmxnet
{
public:
	virtual int soap_type() const { return 2743; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnet2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnet2() { ns1__VirtualVmxnet2::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnet2() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnet2Option
#define SOAP_TYPE_ns1__VirtualVmxnet2Option (2744)
/* ns1:VirtualVmxnet2Option */
class SOAP_CMAC ns1__VirtualVmxnet2Option : public ns1__VirtualVmxnetOption
{
public:
	virtual int soap_type() const { return 2744; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnet2Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnet2Option() { ns1__VirtualVmxnet2Option::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnet2Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnet3
#define SOAP_TYPE_ns1__VirtualVmxnet3 (2745)
/* ns1:VirtualVmxnet3 */
class SOAP_CMAC ns1__VirtualVmxnet3 : public ns1__VirtualVmxnet
{
public:
	virtual int soap_type() const { return 2745; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnet3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnet3() { ns1__VirtualVmxnet3::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnet3() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualVmxnet3Option
#define SOAP_TYPE_ns1__VirtualVmxnet3Option (2746)
/* ns1:VirtualVmxnet3Option */
class SOAP_CMAC ns1__VirtualVmxnet3Option : public ns1__VirtualVmxnetOption
{
public:
	virtual int soap_type() const { return 2746; } /* = unique id SOAP_TYPE_ns1__VirtualVmxnet3Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualVmxnet3Option() { ns1__VirtualVmxnet3Option::soap_default(NULL); }
	virtual ~ns1__VirtualVmxnet3Option() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationUnknownFailure
#define SOAP_TYPE_ns1__CustomizationUnknownFailure (1340)
/* ns1:CustomizationUnknownFailure */
class SOAP_CMAC ns1__CustomizationUnknownFailure : public ns1__CustomizationFailed
{
public:
	virtual int soap_type() const { return 1340; } /* = unique id SOAP_TYPE_ns1__CustomizationUnknownFailure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationUnknownFailure() { ns1__CustomizationUnknownFailure::soap_default(NULL); }
	virtual ~ns1__CustomizationUnknownFailure() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationSysprepFailed
#define SOAP_TYPE_ns1__CustomizationSysprepFailed (1341)
/* ns1:CustomizationSysprepFailed */
class SOAP_CMAC ns1__CustomizationSysprepFailed : public ns1__CustomizationFailed
{
public:
	std::string sysprepVersion;	/* required element of type xsd:string */
	std::string systemVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1341; } /* = unique id SOAP_TYPE_ns1__CustomizationSysprepFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationSysprepFailed() { ns1__CustomizationSysprepFailed::soap_default(NULL); }
	virtual ~ns1__CustomizationSysprepFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationLinuxIdentityFailed
#define SOAP_TYPE_ns1__CustomizationLinuxIdentityFailed (1342)
/* ns1:CustomizationLinuxIdentityFailed */
class SOAP_CMAC ns1__CustomizationLinuxIdentityFailed : public ns1__CustomizationFailed
{
public:
	virtual int soap_type() const { return 1342; } /* = unique id SOAP_TYPE_ns1__CustomizationLinuxIdentityFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationLinuxIdentityFailed() { ns1__CustomizationLinuxIdentityFailed::soap_default(NULL); }
	virtual ~ns1__CustomizationLinuxIdentityFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CustomizationNetworkSetupFailed
#define SOAP_TYPE_ns1__CustomizationNetworkSetupFailed (1343)
/* ns1:CustomizationNetworkSetupFailed */
class SOAP_CMAC ns1__CustomizationNetworkSetupFailed : public ns1__CustomizationFailed
{
public:
	virtual int soap_type() const { return 1343; } /* = unique id SOAP_TYPE_ns1__CustomizationNetworkSetupFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CustomizationNetworkSetupFailed() { ns1__CustomizationNetworkSetupFailed::soap_default(NULL); }
	virtual ~ns1__CustomizationNetworkSetupFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessNetwork
#define SOAP_TYPE_ns1__CannotAccessNetwork (1433)
/* ns1:CannotAccessNetwork */
class SOAP_CMAC ns1__CannotAccessNetwork : public ns1__CannotAccessVmDevice
{
public:
	virtual int soap_type() const { return 1433; } /* = unique id SOAP_TYPE_ns1__CannotAccessNetwork */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessNetwork() { ns1__CannotAccessNetwork::soap_default(NULL); }
	virtual ~ns1__CannotAccessNetwork() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CannotAccessVmDisk
#define SOAP_TYPE_ns1__CannotAccessVmDisk (1437)
/* ns1:CannotAccessVmDisk */
class SOAP_CMAC ns1__CannotAccessVmDisk : public ns1__CannotAccessVmDevice
{
public:
	ns1__LocalizedMethodFault *fault;	/* required element of type ns1:LocalizedMethodFault */
public:
	virtual int soap_type() const { return 1437; } /* = unique id SOAP_TYPE_ns1__CannotAccessVmDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CannotAccessVmDisk() { ns1__CannotAccessVmDisk::soap_default(NULL); }
	virtual ~ns1__CannotAccessVmDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CpuCompatibilityUnknown
#define SOAP_TYPE_ns1__CpuCompatibilityUnknown (1456)
/* ns1:CpuCompatibilityUnknown */
class SOAP_CMAC ns1__CpuCompatibilityUnknown : public ns1__CpuIncompatible
{
public:
	virtual int soap_type() const { return 1456; } /* = unique id SOAP_TYPE_ns1__CpuCompatibilityUnknown */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CpuCompatibilityUnknown() { ns1__CpuCompatibilityUnknown::soap_default(NULL); }
	virtual ~ns1__CpuCompatibilityUnknown() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CpuIncompatible1ECX
#define SOAP_TYPE_ns1__CpuIncompatible1ECX (1459)
/* ns1:CpuIncompatible1ECX */
class SOAP_CMAC ns1__CpuIncompatible1ECX : public ns1__CpuIncompatible
{
public:
	bool sse3;	/* required element of type xsd:boolean */
	bool ssse3;	/* required element of type xsd:boolean */
	bool sse41;	/* required element of type xsd:boolean */
	bool sse42;	/* required element of type xsd:boolean */
	bool other;	/* required element of type xsd:boolean */
	bool otherOnly;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1459; } /* = unique id SOAP_TYPE_ns1__CpuIncompatible1ECX */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CpuIncompatible1ECX() { ns1__CpuIncompatible1ECX::soap_default(NULL); }
	virtual ~ns1__CpuIncompatible1ECX() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CpuIncompatible81EDX
#define SOAP_TYPE_ns1__CpuIncompatible81EDX (1460)
/* ns1:CpuIncompatible81EDX */
class SOAP_CMAC ns1__CpuIncompatible81EDX : public ns1__CpuIncompatible
{
public:
	bool nx;	/* required element of type xsd:boolean */
	bool ffxsr;	/* required element of type xsd:boolean */
	bool rdtscp;	/* required element of type xsd:boolean */
	bool lm;	/* required element of type xsd:boolean */
	bool other;	/* required element of type xsd:boolean */
	bool otherOnly;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1460; } /* = unique id SOAP_TYPE_ns1__CpuIncompatible81EDX */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CpuIncompatible81EDX() { ns1__CpuIncompatible81EDX::soap_default(NULL); }
	virtual ~ns1__CpuIncompatible81EDX() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceBackingNotSupported
#define SOAP_TYPE_ns1__DeviceBackingNotSupported (1471)
/* ns1:DeviceBackingNotSupported */
class SOAP_CMAC ns1__DeviceBackingNotSupported : public ns1__DeviceNotSupported
{
public:
	std::string backing;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1471; } /* = unique id SOAP_TYPE_ns1__DeviceBackingNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceBackingNotSupported() { ns1__DeviceBackingNotSupported::soap_default(NULL); }
	virtual ~ns1__DeviceBackingNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceControllerNotSupported
#define SOAP_TYPE_ns1__DeviceControllerNotSupported (1472)
/* ns1:DeviceControllerNotSupported */
class SOAP_CMAC ns1__DeviceControllerNotSupported : public ns1__DeviceNotSupported
{
public:
	std::string controller;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1472; } /* = unique id SOAP_TYPE_ns1__DeviceControllerNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceControllerNotSupported() { ns1__DeviceControllerNotSupported::soap_default(NULL); }
	virtual ~ns1__DeviceControllerNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceHotPlugNotSupported
#define SOAP_TYPE_ns1__DeviceHotPlugNotSupported (1473)
/* ns1:DeviceHotPlugNotSupported */
class SOAP_CMAC ns1__DeviceHotPlugNotSupported : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1473; } /* = unique id SOAP_TYPE_ns1__DeviceHotPlugNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceHotPlugNotSupported() { ns1__DeviceHotPlugNotSupported::soap_default(NULL); }
	virtual ~ns1__DeviceHotPlugNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceNotFound
#define SOAP_TYPE_ns1__DeviceNotFound (1474)
/* ns1:DeviceNotFound */
class SOAP_CMAC ns1__DeviceNotFound : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1474; } /* = unique id SOAP_TYPE_ns1__DeviceNotFound */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceNotFound() { ns1__DeviceNotFound::soap_default(NULL); }
	virtual ~ns1__DeviceNotFound() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceUnsupportedForVmPlatform
#define SOAP_TYPE_ns1__DeviceUnsupportedForVmPlatform (1476)
/* ns1:DeviceUnsupportedForVmPlatform */
class SOAP_CMAC ns1__DeviceUnsupportedForVmPlatform : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1476; } /* = unique id SOAP_TYPE_ns1__DeviceUnsupportedForVmPlatform */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceUnsupportedForVmPlatform() { ns1__DeviceUnsupportedForVmPlatform::soap_default(NULL); }
	virtual ~ns1__DeviceUnsupportedForVmPlatform() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeviceUnsupportedForVmVersion
#define SOAP_TYPE_ns1__DeviceUnsupportedForVmVersion (1477)
/* ns1:DeviceUnsupportedForVmVersion */
class SOAP_CMAC ns1__DeviceUnsupportedForVmVersion : public ns1__InvalidDeviceSpec
{
public:
	std::string currentVersion;	/* required element of type xsd:string */
	std::string expectedVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1477; } /* = unique id SOAP_TYPE_ns1__DeviceUnsupportedForVmVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceUnsupportedForVmVersion() { ns1__DeviceUnsupportedForVmVersion::soap_default(NULL); }
	virtual ~ns1__DeviceUnsupportedForVmVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DisallowedDiskModeChange
#define SOAP_TYPE_ns1__DisallowedDiskModeChange (1479)
/* ns1:DisallowedDiskModeChange */
class SOAP_CMAC ns1__DisallowedDiskModeChange : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1479; } /* = unique id SOAP_TYPE_ns1__DisallowedDiskModeChange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DisallowedDiskModeChange() { ns1__DisallowedDiskModeChange::soap_default(NULL); }
	virtual ~ns1__DisallowedDiskModeChange() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailed
#define SOAP_TYPE_ns1__EVCAdmissionFailed (1494)
/* ns1:EVCAdmissionFailed */
class SOAP_CMAC ns1__EVCAdmissionFailed : public ns1__NotSupportedHostInCluster
{
public:
	virtual int soap_type() const { return 1494; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailed() { ns1__EVCAdmissionFailed::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FaultToleranceCpuIncompatible
#define SOAP_TYPE_ns1__FaultToleranceCpuIncompatible (1512)
/* ns1:FaultToleranceCpuIncompatible */
class SOAP_CMAC ns1__FaultToleranceCpuIncompatible : public ns1__CpuIncompatible
{
public:
	bool model;	/* required element of type xsd:boolean */
	bool family;	/* required element of type xsd:boolean */
	bool stepping;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1512; } /* = unique id SOAP_TYPE_ns1__FaultToleranceCpuIncompatible */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FaultToleranceCpuIncompatible() { ns1__FaultToleranceCpuIncompatible::soap_default(NULL); }
	virtual ~ns1__FaultToleranceCpuIncompatible() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FileBackedPortNotSupported
#define SOAP_TYPE_ns1__FileBackedPortNotSupported (1518)
/* ns1:FileBackedPortNotSupported */
class SOAP_CMAC ns1__FileBackedPortNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1518; } /* = unique id SOAP_TYPE_ns1__FileBackedPortNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileBackedPortNotSupported() { ns1__FileBackedPortNotSupported::soap_default(NULL); }
	virtual ~ns1__FileBackedPortNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IDEDiskNotSupported
#define SOAP_TYPE_ns1__IDEDiskNotSupported (1539)
/* ns1:IDEDiskNotSupported */
class SOAP_CMAC ns1__IDEDiskNotSupported : public ns1__DiskNotSupported
{
public:
	virtual int soap_type() const { return 1539; } /* = unique id SOAP_TYPE_ns1__IDEDiskNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IDEDiskNotSupported() { ns1__IDEDiskNotSupported::soap_default(NULL); }
	virtual ~ns1__IDEDiskNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidController
#define SOAP_TYPE_ns1__InvalidController (1564)
/* ns1:InvalidController */
class SOAP_CMAC ns1__InvalidController : public ns1__InvalidDeviceSpec
{
public:
	int controllerKey;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 1564; } /* = unique id SOAP_TYPE_ns1__InvalidController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidController() { ns1__InvalidController::soap_default(NULL); }
	virtual ~ns1__InvalidController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDeviceBacking
#define SOAP_TYPE_ns1__InvalidDeviceBacking (1568)
/* ns1:InvalidDeviceBacking */
class SOAP_CMAC ns1__InvalidDeviceBacking : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1568; } /* = unique id SOAP_TYPE_ns1__InvalidDeviceBacking */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDeviceBacking() { ns1__InvalidDeviceBacking::soap_default(NULL); }
	virtual ~ns1__InvalidDeviceBacking() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InvalidDeviceOperation
#define SOAP_TYPE_ns1__InvalidDeviceOperation (1569)
/* ns1:InvalidDeviceOperation */
class SOAP_CMAC ns1__InvalidDeviceOperation : public ns1__InvalidDeviceSpec
{
public:
	enum ns1__VirtualDeviceConfigSpecOperation *badOp;	/* optional element of type ns1:VirtualDeviceConfigSpecOperation */
	enum ns1__VirtualDeviceConfigSpecFileOperation *badFileOp;	/* optional element of type ns1:VirtualDeviceConfigSpecFileOperation */
public:
	virtual int soap_type() const { return 1569; } /* = unique id SOAP_TYPE_ns1__InvalidDeviceOperation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InvalidDeviceOperation() { ns1__InvalidDeviceOperation::soap_default(NULL); }
	virtual ~ns1__InvalidDeviceOperation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MissingController
#define SOAP_TYPE_ns1__MissingController (1627)
/* ns1:MissingController */
class SOAP_CMAC ns1__MissingController : public ns1__InvalidDeviceSpec
{
public:
	virtual int soap_type() const { return 1627; } /* = unique id SOAP_TYPE_ns1__MissingController */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MissingController() { ns1__MissingController::soap_default(NULL); }
	virtual ~ns1__MissingController() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NonPersistentDisksNotSupported
#define SOAP_TYPE_ns1__NonPersistentDisksNotSupported (1672)
/* ns1:NonPersistentDisksNotSupported */
class SOAP_CMAC ns1__NonPersistentDisksNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1672; } /* = unique id SOAP_TYPE_ns1__NonPersistentDisksNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NonPersistentDisksNotSupported() { ns1__NonPersistentDisksNotSupported::soap_default(NULL); }
	virtual ~ns1__NonPersistentDisksNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NotEnoughLogicalCpus
#define SOAP_TYPE_ns1__NotEnoughLogicalCpus (1675)
/* ns1:NotEnoughLogicalCpus */
class SOAP_CMAC ns1__NotEnoughLogicalCpus : public ns1__NotEnoughCpus
{
public:
	ns1__ManagedObjectReference *host;	/* optional element of type ns1:ManagedObjectReference */
public:
	virtual int soap_type() const { return 1675; } /* = unique id SOAP_TYPE_ns1__NotEnoughLogicalCpus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NotEnoughLogicalCpus() { ns1__NotEnoughLogicalCpus::soap_default(NULL); }
	virtual ~ns1__NotEnoughLogicalCpus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfConnectedDevice
#define SOAP_TYPE_ns1__OvfConnectedDevice (1687)
/* ns1:OvfConnectedDevice */
class SOAP_CMAC ns1__OvfConnectedDevice : public ns1__OvfHardwareExport
{
public:
	virtual int soap_type() const { return 1687; } /* = unique id SOAP_TYPE_ns1__OvfConnectedDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfConnectedDevice() { ns1__OvfConnectedDevice::soap_default(NULL); }
	virtual ~ns1__OvfConnectedDevice() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfDiskOrderConstraint
#define SOAP_TYPE_ns1__OvfDiskOrderConstraint (1692)
/* ns1:OvfDiskOrderConstraint */
class SOAP_CMAC ns1__OvfDiskOrderConstraint : public ns1__OvfConstraint
{
public:
	virtual int soap_type() const { return 1692; } /* = unique id SOAP_TYPE_ns1__OvfDiskOrderConstraint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfDiskOrderConstraint() { ns1__OvfDiskOrderConstraint::soap_default(NULL); }
	virtual ~ns1__OvfDiskOrderConstraint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfDuplicateElement
#define SOAP_TYPE_ns1__OvfDuplicateElement (1693)
/* ns1:OvfDuplicateElement */
class SOAP_CMAC ns1__OvfDuplicateElement : public ns1__OvfElement
{
public:
	virtual int soap_type() const { return 1693; } /* = unique id SOAP_TYPE_ns1__OvfDuplicateElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfDuplicateElement() { ns1__OvfDuplicateElement::soap_default(NULL); }
	virtual ~ns1__OvfDuplicateElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfDuplicatedElementBoundary
#define SOAP_TYPE_ns1__OvfDuplicatedElementBoundary (1694)
/* ns1:OvfDuplicatedElementBoundary */
class SOAP_CMAC ns1__OvfDuplicatedElementBoundary : public ns1__OvfElement
{
public:
	std::string boundary;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1694; } /* = unique id SOAP_TYPE_ns1__OvfDuplicatedElementBoundary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfDuplicatedElementBoundary() { ns1__OvfDuplicatedElementBoundary::soap_default(NULL); }
	virtual ~ns1__OvfDuplicatedElementBoundary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfElementInvalidValue
#define SOAP_TYPE_ns1__OvfElementInvalidValue (1696)
/* ns1:OvfElementInvalidValue */
class SOAP_CMAC ns1__OvfElementInvalidValue : public ns1__OvfElement
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1696; } /* = unique id SOAP_TYPE_ns1__OvfElementInvalidValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfElementInvalidValue() { ns1__OvfElementInvalidValue::soap_default(NULL); }
	virtual ~ns1__OvfElementInvalidValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfHostResourceConstraint
#define SOAP_TYPE_ns1__OvfHostResourceConstraint (1702)
/* ns1:OvfHostResourceConstraint */
class SOAP_CMAC ns1__OvfHostResourceConstraint : public ns1__OvfConstraint
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1702; } /* = unique id SOAP_TYPE_ns1__OvfHostResourceConstraint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfHostResourceConstraint() { ns1__OvfHostResourceConstraint::soap_default(NULL); }
	virtual ~ns1__OvfHostResourceConstraint() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidValue
#define SOAP_TYPE_ns1__OvfInvalidValue (1708)
/* ns1:OvfInvalidValue */
class SOAP_CMAC ns1__OvfInvalidValue : public ns1__OvfAttribute
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1708; } /* = unique id SOAP_TYPE_ns1__OvfInvalidValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidValue() { ns1__OvfInvalidValue::soap_default(NULL); }
	virtual ~ns1__OvfInvalidValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfMissingAttribute
#define SOAP_TYPE_ns1__OvfMissingAttribute (1715)
/* ns1:OvfMissingAttribute */
class SOAP_CMAC ns1__OvfMissingAttribute : public ns1__OvfAttribute
{
public:
	virtual int soap_type() const { return 1715; } /* = unique id SOAP_TYPE_ns1__OvfMissingAttribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfMissingAttribute() { ns1__OvfMissingAttribute::soap_default(NULL); }
	virtual ~ns1__OvfMissingAttribute() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfMissingElement
#define SOAP_TYPE_ns1__OvfMissingElement (1716)
/* ns1:OvfMissingElement */
class SOAP_CMAC ns1__OvfMissingElement : public ns1__OvfElement
{
public:
	virtual int soap_type() const { return 1716; } /* = unique id SOAP_TYPE_ns1__OvfMissingElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfMissingElement() { ns1__OvfMissingElement::soap_default(NULL); }
	virtual ~ns1__OvfMissingElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyNetwork
#define SOAP_TYPE_ns1__OvfPropertyNetwork (1723)
/* ns1:OvfPropertyNetwork */
class SOAP_CMAC ns1__OvfPropertyNetwork : public ns1__OvfProperty
{
public:
	virtual int soap_type() const { return 1723; } /* = unique id SOAP_TYPE_ns1__OvfPropertyNetwork */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyNetwork() { ns1__OvfPropertyNetwork::soap_default(NULL); }
	virtual ~ns1__OvfPropertyNetwork() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyQualifier
#define SOAP_TYPE_ns1__OvfPropertyQualifier (1724)
/* ns1:OvfPropertyQualifier */
class SOAP_CMAC ns1__OvfPropertyQualifier : public ns1__OvfProperty
{
public:
	std::string qualifier;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1724; } /* = unique id SOAP_TYPE_ns1__OvfPropertyQualifier */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyQualifier() { ns1__OvfPropertyQualifier::soap_default(NULL); }
	virtual ~ns1__OvfPropertyQualifier() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyQualifierDuplicate
#define SOAP_TYPE_ns1__OvfPropertyQualifierDuplicate (1725)
/* ns1:OvfPropertyQualifierDuplicate */
class SOAP_CMAC ns1__OvfPropertyQualifierDuplicate : public ns1__OvfProperty
{
public:
	std::string qualifier;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1725; } /* = unique id SOAP_TYPE_ns1__OvfPropertyQualifierDuplicate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyQualifierDuplicate() { ns1__OvfPropertyQualifierDuplicate::soap_default(NULL); }
	virtual ~ns1__OvfPropertyQualifierDuplicate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyQualifierIgnored
#define SOAP_TYPE_ns1__OvfPropertyQualifierIgnored (1726)
/* ns1:OvfPropertyQualifierIgnored */
class SOAP_CMAC ns1__OvfPropertyQualifierIgnored : public ns1__OvfProperty
{
public:
	std::string qualifier;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1726; } /* = unique id SOAP_TYPE_ns1__OvfPropertyQualifierIgnored */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyQualifierIgnored() { ns1__OvfPropertyQualifierIgnored::soap_default(NULL); }
	virtual ~ns1__OvfPropertyQualifierIgnored() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyType
#define SOAP_TYPE_ns1__OvfPropertyType (1727)
/* ns1:OvfPropertyType */
class SOAP_CMAC ns1__OvfPropertyType : public ns1__OvfProperty
{
public:
	virtual int soap_type() const { return 1727; } /* = unique id SOAP_TYPE_ns1__OvfPropertyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyType() { ns1__OvfPropertyType::soap_default(NULL); }
	virtual ~ns1__OvfPropertyType() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfPropertyValue
#define SOAP_TYPE_ns1__OvfPropertyValue (1728)
/* ns1:OvfPropertyValue */
class SOAP_CMAC ns1__OvfPropertyValue : public ns1__OvfProperty
{
public:
	virtual int soap_type() const { return 1728; } /* = unique id SOAP_TYPE_ns1__OvfPropertyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfPropertyValue() { ns1__OvfPropertyValue::soap_default(NULL); }
	virtual ~ns1__OvfPropertyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnableToExportDisk
#define SOAP_TYPE_ns1__OvfUnableToExportDisk (1731)
/* ns1:OvfUnableToExportDisk */
class SOAP_CMAC ns1__OvfUnableToExportDisk : public ns1__OvfHardwareExport
{
public:
	std::string diskName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1731; } /* = unique id SOAP_TYPE_ns1__OvfUnableToExportDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnableToExportDisk() { ns1__OvfUnableToExportDisk::soap_default(NULL); }
	virtual ~ns1__OvfUnableToExportDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnexpectedElement
#define SOAP_TYPE_ns1__OvfUnexpectedElement (1732)
/* ns1:OvfUnexpectedElement */
class SOAP_CMAC ns1__OvfUnexpectedElement : public ns1__OvfElement
{
public:
	virtual int soap_type() const { return 1732; } /* = unique id SOAP_TYPE_ns1__OvfUnexpectedElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnexpectedElement() { ns1__OvfUnexpectedElement::soap_default(NULL); }
	virtual ~ns1__OvfUnexpectedElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnknownDeviceBacking
#define SOAP_TYPE_ns1__OvfUnknownDeviceBacking (1734)
/* ns1:OvfUnknownDeviceBacking */
class SOAP_CMAC ns1__OvfUnknownDeviceBacking : public ns1__OvfHardwareExport
{
public:
	ns1__VirtualDeviceBackingInfo *backing;	/* required element of type ns1:VirtualDeviceBackingInfo */
public:
	virtual int soap_type() const { return 1734; } /* = unique id SOAP_TYPE_ns1__OvfUnknownDeviceBacking */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnknownDeviceBacking() { ns1__OvfUnknownDeviceBacking::soap_default(NULL); }
	virtual ~ns1__OvfUnknownDeviceBacking() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedAttributeValue
#define SOAP_TYPE_ns1__OvfUnsupportedAttributeValue (1737)
/* ns1:OvfUnsupportedAttributeValue */
class SOAP_CMAC ns1__OvfUnsupportedAttributeValue : public ns1__OvfUnsupportedAttribute
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1737; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedAttributeValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedAttributeValue() { ns1__OvfUnsupportedAttributeValue::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedAttributeValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedDeviceExport
#define SOAP_TYPE_ns1__OvfUnsupportedDeviceExport (1740)
/* ns1:OvfUnsupportedDeviceExport */
class SOAP_CMAC ns1__OvfUnsupportedDeviceExport : public ns1__OvfHardwareExport
{
public:
	virtual int soap_type() const { return 1740; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedDeviceExport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedDeviceExport() { ns1__OvfUnsupportedDeviceExport::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedDeviceExport() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedElementValue
#define SOAP_TYPE_ns1__OvfUnsupportedElementValue (1743)
/* ns1:OvfUnsupportedElementValue */
class SOAP_CMAC ns1__OvfUnsupportedElementValue : public ns1__OvfUnsupportedElement
{
public:
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1743; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedElementValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedElementValue() { ns1__OvfUnsupportedElementValue::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedElementValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfUnsupportedSection
#define SOAP_TYPE_ns1__OvfUnsupportedSection (1745)
/* ns1:OvfUnsupportedSection */
class SOAP_CMAC ns1__OvfUnsupportedSection : public ns1__OvfUnsupportedElement
{
public:
	std::string info;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1745; } /* = unique id SOAP_TYPE_ns1__OvfUnsupportedSection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfUnsupportedSection() { ns1__OvfUnsupportedSection::soap_default(NULL); }
	virtual ~ns1__OvfUnsupportedSection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfWrongElement
#define SOAP_TYPE_ns1__OvfWrongElement (1748)
/* ns1:OvfWrongElement */
class SOAP_CMAC ns1__OvfWrongElement : public ns1__OvfElement
{
public:
	virtual int soap_type() const { return 1748; } /* = unique id SOAP_TYPE_ns1__OvfWrongElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfWrongElement() { ns1__OvfWrongElement::soap_default(NULL); }
	virtual ~ns1__OvfWrongElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RDMNotSupported
#define SOAP_TYPE_ns1__RDMNotSupported (1771)
/* ns1:RDMNotSupported */
class SOAP_CMAC ns1__RDMNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1771; } /* = unique id SOAP_TYPE_ns1__RDMNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RDMNotSupported() { ns1__RDMNotSupported::soap_default(NULL); }
	virtual ~ns1__RDMNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RawDiskNotSupported
#define SOAP_TYPE_ns1__RawDiskNotSupported (1774)
/* ns1:RawDiskNotSupported */
class SOAP_CMAC ns1__RawDiskNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1774; } /* = unique id SOAP_TYPE_ns1__RawDiskNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RawDiskNotSupported() { ns1__RawDiskNotSupported::soap_default(NULL); }
	virtual ~ns1__RawDiskNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoteDeviceNotSupported
#define SOAP_TYPE_ns1__RemoteDeviceNotSupported (1778)
/* ns1:RemoteDeviceNotSupported */
class SOAP_CMAC ns1__RemoteDeviceNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1778; } /* = unique id SOAP_TYPE_ns1__RemoteDeviceNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoteDeviceNotSupported() { ns1__RemoteDeviceNotSupported::soap_default(NULL); }
	virtual ~ns1__RemoteDeviceNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SharedBusControllerNotSupported
#define SOAP_TYPE_ns1__SharedBusControllerNotSupported (1791)
/* ns1:SharedBusControllerNotSupported */
class SOAP_CMAC ns1__SharedBusControllerNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1791; } /* = unique id SOAP_TYPE_ns1__SharedBusControllerNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SharedBusControllerNotSupported() { ns1__SharedBusControllerNotSupported::soap_default(NULL); }
	virtual ~ns1__SharedBusControllerNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnconfiguredPropertyValue
#define SOAP_TYPE_ns1__UnconfiguredPropertyValue (1826)
/* ns1:UnconfiguredPropertyValue */
class SOAP_CMAC ns1__UnconfiguredPropertyValue : public ns1__InvalidPropertyValue
{
public:
	virtual int soap_type() const { return 1826; } /* = unique id SOAP_TYPE_ns1__UnconfiguredPropertyValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnconfiguredPropertyValue() { ns1__UnconfiguredPropertyValue::soap_default(NULL); }
	virtual ~ns1__UnconfiguredPropertyValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMINotSupported
#define SOAP_TYPE_ns1__VMINotSupported (1841)
/* ns1:VMINotSupported */
class SOAP_CMAC ns1__VMINotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1841; } /* = unique id SOAP_TYPE_ns1__VMINotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMINotSupported() { ns1__VMINotSupported::soap_default(NULL); }
	virtual ~ns1__VMINotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskModeNotSupported
#define SOAP_TYPE_ns1__VirtualDiskModeNotSupported (1853)
/* ns1:VirtualDiskModeNotSupported */
class SOAP_CMAC ns1__VirtualDiskModeNotSupported : public ns1__DeviceNotSupported
{
public:
	std::string mode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1853; } /* = unique id SOAP_TYPE_ns1__VirtualDiskModeNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskModeNotSupported() { ns1__VirtualDiskModeNotSupported::soap_default(NULL); }
	virtual ~ns1__VirtualDiskModeNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualEthernetCardNotSupported
#define SOAP_TYPE_ns1__VirtualEthernetCardNotSupported (1854)
/* ns1:VirtualEthernetCardNotSupported */
class SOAP_CMAC ns1__VirtualEthernetCardNotSupported : public ns1__DeviceNotSupported
{
public:
	virtual int soap_type() const { return 1854; } /* = unique id SOAP_TYPE_ns1__VirtualEthernetCardNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualEthernetCardNotSupported() { ns1__VirtualEthernetCardNotSupported::soap_default(NULL); }
	virtual ~ns1__VirtualEthernetCardNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__WeeklyTaskScheduler
#define SOAP_TYPE_ns1__WeeklyTaskScheduler (2412)
/* ns1:WeeklyTaskScheduler */
class SOAP_CMAC ns1__WeeklyTaskScheduler : public ns1__DailyTaskScheduler
{
public:
	bool sunday;	/* required element of type xsd:boolean */
	bool monday;	/* required element of type xsd:boolean */
	bool tuesday;	/* required element of type xsd:boolean */
	bool wednesday;	/* required element of type xsd:boolean */
	bool thursday;	/* required element of type xsd:boolean */
	bool friday;	/* required element of type xsd:boolean */
	bool saturday;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 2412; } /* = unique id SOAP_TYPE_ns1__WeeklyTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WeeklyTaskScheduler() { ns1__WeeklyTaskScheduler::soap_default(NULL); }
	virtual ~ns1__WeeklyTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MonthlyTaskScheduler
#define SOAP_TYPE_ns1__MonthlyTaskScheduler (2413)
/* ns1:MonthlyTaskScheduler */
class SOAP_CMAC ns1__MonthlyTaskScheduler : public ns1__DailyTaskScheduler
{
public:
	virtual int soap_type() const { return 2413; } /* = unique id SOAP_TYPE_ns1__MonthlyTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MonthlyTaskScheduler() { ns1__MonthlyTaskScheduler::soap_default(NULL); }
	virtual ~ns1__MonthlyTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DVPortNotSupported
#define SOAP_TYPE_ns1__DVPortNotSupported (1463)
/* ns1:DVPortNotSupported */
class SOAP_CMAC ns1__DVPortNotSupported : public ns1__DeviceBackingNotSupported
{
public:
	virtual int soap_type() const { return 1463; } /* = unique id SOAP_TYPE_ns1__DVPortNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DVPortNotSupported() { ns1__DVPortNotSupported::soap_default(NULL); }
	virtual ~ns1__DVPortNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestinationSwitchFull
#define SOAP_TYPE_ns1__DestinationSwitchFull (1470)
/* ns1:DestinationSwitchFull */
class SOAP_CMAC ns1__DestinationSwitchFull : public ns1__CannotAccessNetwork
{
public:
	virtual int soap_type() const { return 1470; } /* = unique id SOAP_TYPE_ns1__DestinationSwitchFull */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestinationSwitchFull() { ns1__DestinationSwitchFull::soap_default(NULL); }
	virtual ~ns1__DestinationSwitchFull() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedCPUFeaturesForMode
#define SOAP_TYPE_ns1__EVCAdmissionFailedCPUFeaturesForMode (1495)
/* ns1:EVCAdmissionFailedCPUFeaturesForMode */
class SOAP_CMAC ns1__EVCAdmissionFailedCPUFeaturesForMode : public ns1__EVCAdmissionFailed
{
public:
	std::string currentEVCModeKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1495; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedCPUFeaturesForMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedCPUFeaturesForMode() { ns1__EVCAdmissionFailedCPUFeaturesForMode::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedCPUFeaturesForMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedCPUModel
#define SOAP_TYPE_ns1__EVCAdmissionFailedCPUModel (1496)
/* ns1:EVCAdmissionFailedCPUModel */
class SOAP_CMAC ns1__EVCAdmissionFailedCPUModel : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1496; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedCPUModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedCPUModel() { ns1__EVCAdmissionFailedCPUModel::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedCPUModel() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedCPUModelForMode
#define SOAP_TYPE_ns1__EVCAdmissionFailedCPUModelForMode (1497)
/* ns1:EVCAdmissionFailedCPUModelForMode */
class SOAP_CMAC ns1__EVCAdmissionFailedCPUModelForMode : public ns1__EVCAdmissionFailed
{
public:
	std::string currentEVCModeKey;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1497; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedCPUModelForMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedCPUModelForMode() { ns1__EVCAdmissionFailedCPUModelForMode::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedCPUModelForMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendor
#define SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendor (1498)
/* ns1:EVCAdmissionFailedCPUVendor */
class SOAP_CMAC ns1__EVCAdmissionFailedCPUVendor : public ns1__EVCAdmissionFailed
{
public:
	std::string clusterCPUVendor;	/* required element of type xsd:string */
	std::string hostCPUVendor;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1498; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedCPUVendor() { ns1__EVCAdmissionFailedCPUVendor::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedCPUVendor() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendorUnknown
#define SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendorUnknown (1499)
/* ns1:EVCAdmissionFailedCPUVendorUnknown */
class SOAP_CMAC ns1__EVCAdmissionFailedCPUVendorUnknown : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1499; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedCPUVendorUnknown */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedCPUVendorUnknown() { ns1__EVCAdmissionFailedCPUVendorUnknown::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedCPUVendorUnknown() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedHostDisconnected
#define SOAP_TYPE_ns1__EVCAdmissionFailedHostDisconnected (1500)
/* ns1:EVCAdmissionFailedHostDisconnected */
class SOAP_CMAC ns1__EVCAdmissionFailedHostDisconnected : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1500; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedHostDisconnected */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedHostDisconnected() { ns1__EVCAdmissionFailedHostDisconnected::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedHostDisconnected() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftware
#define SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftware (1501)
/* ns1:EVCAdmissionFailedHostSoftware */
class SOAP_CMAC ns1__EVCAdmissionFailedHostSoftware : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1501; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedHostSoftware() { ns1__EVCAdmissionFailedHostSoftware::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedHostSoftware() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftwareForMode
#define SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftwareForMode (1502)
/* ns1:EVCAdmissionFailedHostSoftwareForMode */
class SOAP_CMAC ns1__EVCAdmissionFailedHostSoftwareForMode : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1502; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedHostSoftwareForMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedHostSoftwareForMode() { ns1__EVCAdmissionFailedHostSoftwareForMode::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedHostSoftwareForMode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EVCAdmissionFailedVmActive
#define SOAP_TYPE_ns1__EVCAdmissionFailedVmActive (1503)
/* ns1:EVCAdmissionFailedVmActive */
class SOAP_CMAC ns1__EVCAdmissionFailedVmActive : public ns1__EVCAdmissionFailed
{
public:
	virtual int soap_type() const { return 1503; } /* = unique id SOAP_TYPE_ns1__EVCAdmissionFailedVmActive */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EVCAdmissionFailedVmActive() { ns1__EVCAdmissionFailedVmActive::soap_default(NULL); }
	virtual ~ns1__EVCAdmissionFailedVmActive() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LegacyNetworkInterfaceInUse
#define SOAP_TYPE_ns1__LegacyNetworkInterfaceInUse (1600)
/* ns1:LegacyNetworkInterfaceInUse */
class SOAP_CMAC ns1__LegacyNetworkInterfaceInUse : public ns1__CannotAccessNetwork
{
public:
	virtual int soap_type() const { return 1600; } /* = unique id SOAP_TYPE_ns1__LegacyNetworkInterfaceInUse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LegacyNetworkInterfaceInUse() { ns1__LegacyNetworkInterfaceInUse::soap_default(NULL); }
	virtual ~ns1__LegacyNetworkInterfaceInUse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfConnectedDeviceFloppy
#define SOAP_TYPE_ns1__OvfConnectedDeviceFloppy (1688)
/* ns1:OvfConnectedDeviceFloppy */
class SOAP_CMAC ns1__OvfConnectedDeviceFloppy : public ns1__OvfConnectedDevice
{
public:
	std::string filename;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1688; } /* = unique id SOAP_TYPE_ns1__OvfConnectedDeviceFloppy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfConnectedDeviceFloppy() { ns1__OvfConnectedDeviceFloppy::soap_default(NULL); }
	virtual ~ns1__OvfConnectedDeviceFloppy() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfConnectedDeviceIso
#define SOAP_TYPE_ns1__OvfConnectedDeviceIso (1689)
/* ns1:OvfConnectedDeviceIso */
class SOAP_CMAC ns1__OvfConnectedDeviceIso : public ns1__OvfConnectedDevice
{
public:
	std::string filename;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1689; } /* = unique id SOAP_TYPE_ns1__OvfConnectedDeviceIso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfConnectedDeviceIso() { ns1__OvfConnectedDeviceIso::soap_default(NULL); }
	virtual ~ns1__OvfConnectedDeviceIso() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidValueConfiguration
#define SOAP_TYPE_ns1__OvfInvalidValueConfiguration (1709)
/* ns1:OvfInvalidValueConfiguration */
class SOAP_CMAC ns1__OvfInvalidValueConfiguration : public ns1__OvfInvalidValue
{
public:
	virtual int soap_type() const { return 1709; } /* = unique id SOAP_TYPE_ns1__OvfInvalidValueConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidValueConfiguration() { ns1__OvfInvalidValueConfiguration::soap_default(NULL); }
	virtual ~ns1__OvfInvalidValueConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidValueEmpty
#define SOAP_TYPE_ns1__OvfInvalidValueEmpty (1710)
/* ns1:OvfInvalidValueEmpty */
class SOAP_CMAC ns1__OvfInvalidValueEmpty : public ns1__OvfInvalidValue
{
public:
	virtual int soap_type() const { return 1710; } /* = unique id SOAP_TYPE_ns1__OvfInvalidValueEmpty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidValueEmpty() { ns1__OvfInvalidValueEmpty::soap_default(NULL); }
	virtual ~ns1__OvfInvalidValueEmpty() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidValueFormatMalformed
#define SOAP_TYPE_ns1__OvfInvalidValueFormatMalformed (1711)
/* ns1:OvfInvalidValueFormatMalformed */
class SOAP_CMAC ns1__OvfInvalidValueFormatMalformed : public ns1__OvfInvalidValue
{
public:
	virtual int soap_type() const { return 1711; } /* = unique id SOAP_TYPE_ns1__OvfInvalidValueFormatMalformed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidValueFormatMalformed() { ns1__OvfInvalidValueFormatMalformed::soap_default(NULL); }
	virtual ~ns1__OvfInvalidValueFormatMalformed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfInvalidValueReference
#define SOAP_TYPE_ns1__OvfInvalidValueReference (1712)
/* ns1:OvfInvalidValueReference */
class SOAP_CMAC ns1__OvfInvalidValueReference : public ns1__OvfInvalidValue
{
public:
	virtual int soap_type() const { return 1712; } /* = unique id SOAP_TYPE_ns1__OvfInvalidValueReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfInvalidValueReference() { ns1__OvfInvalidValueReference::soap_default(NULL); }
	virtual ~ns1__OvfInvalidValueReference() { }
};
#endif

#ifndef SOAP_TYPE_ns1__OvfMissingElementNormalBoundary
#define SOAP_TYPE_ns1__OvfMissingElementNormalBoundary (1717)
/* ns1:OvfMissingElementNormalBoundary */
class SOAP_CMAC ns1__OvfMissingElementNormalBoundary : public ns1__OvfMissingElement
{
public:
	std::string boundary;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1717; } /* = unique id SOAP_TYPE_ns1__OvfMissingElementNormalBoundary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__OvfMissingElementNormalBoundary() { ns1__OvfMissingElementNormalBoundary::soap_default(NULL); }
	virtual ~ns1__OvfMissingElementNormalBoundary() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PhysCompatRDMNotSupported
#define SOAP_TYPE_ns1__PhysCompatRDMNotSupported (1761)
/* ns1:PhysCompatRDMNotSupported */
class SOAP_CMAC ns1__PhysCompatRDMNotSupported : public ns1__RDMNotSupported
{
public:
	virtual int soap_type() const { return 1761; } /* = unique id SOAP_TYPE_ns1__PhysCompatRDMNotSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PhysCompatRDMNotSupported() { ns1__PhysCompatRDMNotSupported::soap_default(NULL); }
	virtual ~ns1__PhysCompatRDMNotSupported() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RDMPointsToInaccessibleDisk
#define SOAP_TYPE_ns1__RDMPointsToInaccessibleDisk (1773)
/* ns1:RDMPointsToInaccessibleDisk */
class SOAP_CMAC ns1__RDMPointsToInaccessibleDisk : public ns1__CannotAccessVmDisk
{
public:
	virtual int soap_type() const { return 1773; } /* = unique id SOAP_TYPE_ns1__RDMPointsToInaccessibleDisk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RDMPointsToInaccessibleDisk() { ns1__RDMPointsToInaccessibleDisk::soap_default(NULL); }
	virtual ~ns1__RDMPointsToInaccessibleDisk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UnusedVirtualDiskBlocksNotScrubbed
#define SOAP_TYPE_ns1__UnusedVirtualDiskBlocksNotScrubbed (1835)
/* ns1:UnusedVirtualDiskBlocksNotScrubbed */
class SOAP_CMAC ns1__UnusedVirtualDiskBlocksNotScrubbed : public ns1__DeviceBackingNotSupported
{
public:
	virtual int soap_type() const { return 1835; } /* = unique id SOAP_TYPE_ns1__UnusedVirtualDiskBlocksNotScrubbed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UnusedVirtualDiskBlocksNotScrubbed() { ns1__UnusedVirtualDiskBlocksNotScrubbed::soap_default(NULL); }
	virtual ~ns1__UnusedVirtualDiskBlocksNotScrubbed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMOnConflictDVPort
#define SOAP_TYPE_ns1__VMOnConflictDVPort (1842)
/* ns1:VMOnConflictDVPort */
class SOAP_CMAC ns1__VMOnConflictDVPort : public ns1__CannotAccessNetwork
{
public:
	virtual int soap_type() const { return 1842; } /* = unique id SOAP_TYPE_ns1__VMOnConflictDVPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMOnConflictDVPort() { ns1__VMOnConflictDVPort::soap_default(NULL); }
	virtual ~ns1__VMOnConflictDVPort() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VMOnVirtualIntranet
#define SOAP_TYPE_ns1__VMOnVirtualIntranet (1843)
/* ns1:VMOnVirtualIntranet */
class SOAP_CMAC ns1__VMOnVirtualIntranet : public ns1__CannotAccessNetwork
{
public:
	virtual int soap_type() const { return 1843; } /* = unique id SOAP_TYPE_ns1__VMOnVirtualIntranet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VMOnVirtualIntranet() { ns1__VMOnVirtualIntranet::soap_default(NULL); }
	virtual ~ns1__VMOnVirtualIntranet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VirtualDiskBlocksNotFullyProvisioned
#define SOAP_TYPE_ns1__VirtualDiskBlocksNotFullyProvisioned (1852)
/* ns1:VirtualDiskBlocksNotFullyProvisioned */
class SOAP_CMAC ns1__VirtualDiskBlocksNotFullyProvisioned : public ns1__DeviceBackingNotSupported
{
public:
	virtual int soap_type() const { return 1852; } /* = unique id SOAP_TYPE_ns1__VirtualDiskBlocksNotFullyProvisioned */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VirtualDiskBlocksNotFullyProvisioned() { ns1__VirtualDiskBlocksNotFullyProvisioned::soap_default(NULL); }
	virtual ~ns1__VirtualDiskBlocksNotFullyProvisioned() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MonthlyByDayTaskScheduler
#define SOAP_TYPE_ns1__MonthlyByDayTaskScheduler (2414)
/* ns1:MonthlyByDayTaskScheduler */
class SOAP_CMAC ns1__MonthlyByDayTaskScheduler : public ns1__MonthlyTaskScheduler
{
public:
	int day;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 2414; } /* = unique id SOAP_TYPE_ns1__MonthlyByDayTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MonthlyByDayTaskScheduler() { ns1__MonthlyByDayTaskScheduler::soap_default(NULL); }
	virtual ~ns1__MonthlyByDayTaskScheduler() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MonthlyByWeekdayTaskScheduler
#define SOAP_TYPE_ns1__MonthlyByWeekdayTaskScheduler (2415)
/* ns1:MonthlyByWeekdayTaskScheduler */
class SOAP_CMAC ns1__MonthlyByWeekdayTaskScheduler : public ns1__MonthlyTaskScheduler
{
public:
	enum ns1__WeekOfMonth offset;	/* required element of type ns1:WeekOfMonth */
	enum ns1__DayOfWeek weekday;	/* required element of type ns1:DayOfWeek */
public:
	virtual int soap_type() const { return 2415; } /* = unique id SOAP_TYPE_ns1__MonthlyByWeekdayTaskScheduler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MonthlyByWeekdayTaskScheduler() { ns1__MonthlyByWeekdayTaskScheduler::soap_default(NULL); }
	virtual ~ns1__MonthlyByWeekdayTaskScheduler() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (4659)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	ns1__ActiveDirectoryFault *ns1__ActiveDirectoryFaultFault;	/* optional element of type ns1:ActiveDirectoryFault */
	ns1__AlreadyExists *ns1__AlreadyExistsFault;	/* optional element of type ns1:AlreadyExists */
	ns1__AlreadyUpgraded *ns1__AlreadyUpgradedFault;	/* optional element of type ns1:AlreadyUpgraded */
	ns1__AuthMinimumAdminPermission *ns1__AuthMinimumAdminPermissionFault;	/* optional element of type ns1:AuthMinimumAdminPermission */
	ns1__CannotAccessFile *ns1__CannotAccessFileFault;	/* optional element of type ns1:CannotAccessFile */
	ns1__CannotAccessLocalSource *ns1__CannotAccessLocalSourceFault;	/* optional element of type ns1:CannotAccessLocalSource */
	ns1__ConcurrentAccess *ns1__ConcurrentAccessFault;	/* optional element of type ns1:ConcurrentAccess */
	ns1__CustomizationFault *ns1__CustomizationFaultFault;	/* optional element of type ns1:CustomizationFault */
	ns1__DasConfigFault *ns1__DasConfigFaultFault;	/* optional element of type ns1:DasConfigFault */
	ns1__DatastoreNotWritableOnHost *ns1__DatastoreNotWritableOnHostFault;	/* optional element of type ns1:DatastoreNotWritableOnHost */
	ns1__DuplicateName *ns1__DuplicateNameFault;	/* optional element of type ns1:DuplicateName */
	ns1__DvsFault *ns1__DvsFaultFault;	/* optional element of type ns1:DvsFault */
	ns1__DvsNotAuthorized *ns1__DvsNotAuthorizedFault;	/* optional element of type ns1:DvsNotAuthorized */
	ns1__FileFault *ns1__FileFaultFault;	/* optional element of type ns1:FileFault */
	ns1__FileNotFound *ns1__FileNotFoundFault;	/* optional element of type ns1:FileNotFound */
	ns1__HostConfigFailed *ns1__HostConfigFailedFault;	/* optional element of type ns1:HostConfigFailed */
	ns1__HostConfigFault *ns1__HostConfigFaultFault;	/* optional element of type ns1:HostConfigFault */
	ns1__HostConnectFault *ns1__HostConnectFaultFault;	/* optional element of type ns1:HostConnectFault */
	ns1__HostIncompatibleForRecordReplay *ns1__HostIncompatibleForRecordReplayFault;	/* optional element of type ns1:HostIncompatibleForRecordReplay */
	ns1__HostPowerOpFailed *ns1__HostPowerOpFailedFault;	/* optional element of type ns1:HostPowerOpFailed */
	ns1__IORMNotSupportedHostOnDatastore *ns1__IORMNotSupportedHostOnDatastoreFault;	/* optional element of type ns1:IORMNotSupportedHostOnDatastore */
	ns1__InaccessibleDatastore *ns1__InaccessibleDatastoreFault;	/* optional element of type ns1:InaccessibleDatastore */
	ns1__InsufficientResourcesFault *ns1__InsufficientResourcesFaultFault;	/* optional element of type ns1:InsufficientResourcesFault */
	ns1__InvalidArgument *ns1__InvalidArgumentFault;	/* optional element of type ns1:InvalidArgument */
	ns1__InvalidBundle *ns1__InvalidBundleFault;	/* optional element of type ns1:InvalidBundle */
	ns1__InvalidCollectorVersion *ns1__InvalidCollectorVersionFault;	/* optional element of type ns1:InvalidCollectorVersion */
	ns1__InvalidDatastore *ns1__InvalidDatastoreFault;	/* optional element of type ns1:InvalidDatastore */
	ns1__InvalidEvent *ns1__InvalidEventFault;	/* optional element of type ns1:InvalidEvent */
	ns1__InvalidFolder *ns1__InvalidFolderFault;	/* optional element of type ns1:InvalidFolder */
	ns1__InvalidHostState *ns1__InvalidHostStateFault;	/* optional element of type ns1:InvalidHostState */
	ns1__InvalidIpmiLoginInfo *ns1__InvalidIpmiLoginInfoFault;	/* optional element of type ns1:InvalidIpmiLoginInfo */
	ns1__InvalidIpmiMacAddress *ns1__InvalidIpmiMacAddressFault;	/* optional element of type ns1:InvalidIpmiMacAddress */
	ns1__InvalidLicense *ns1__InvalidLicenseFault;	/* optional element of type ns1:InvalidLicense */
	ns1__InvalidLocale *ns1__InvalidLocaleFault;	/* optional element of type ns1:InvalidLocale */
	ns1__InvalidLogin *ns1__InvalidLoginFault;	/* optional element of type ns1:InvalidLogin */
	ns1__InvalidName *ns1__InvalidNameFault;	/* optional element of type ns1:InvalidName */
	ns1__InvalidPowerState *ns1__InvalidPowerStateFault;	/* optional element of type ns1:InvalidPowerState */
	ns1__InvalidPrivilege *ns1__InvalidPrivilegeFault;	/* optional element of type ns1:InvalidPrivilege */
	ns1__InvalidProperty *ns1__InvalidPropertyFault;	/* optional element of type ns1:InvalidProperty */
	ns1__InvalidState *ns1__InvalidStateFault;	/* optional element of type ns1:InvalidState */
	ns1__LicenseEntityNotFound *ns1__LicenseEntityNotFoundFault;	/* optional element of type ns1:LicenseEntityNotFound */
	ns1__LicenseServerUnavailable *ns1__LicenseServerUnavailableFault;	/* optional element of type ns1:LicenseServerUnavailable */
	ns1__LimitExceeded *ns1__LimitExceededFault;	/* optional element of type ns1:LimitExceeded */
	ns1__LogBundlingFailed *ns1__LogBundlingFailedFault;	/* optional element of type ns1:LogBundlingFailed */
	ns1__MigrationFault *ns1__MigrationFaultFault;	/* optional element of type ns1:MigrationFault */
	ns1__MismatchedBundle *ns1__MismatchedBundleFault;	/* optional element of type ns1:MismatchedBundle */
	ns1__NoActiveHostInCluster *ns1__NoActiveHostInClusterFault;	/* optional element of type ns1:NoActiveHostInCluster */
	ns1__NoClientCertificate *ns1__NoClientCertificateFault;	/* optional element of type ns1:NoClientCertificate */
	ns1__NoDiskFound *ns1__NoDiskFoundFault;	/* optional element of type ns1:NoDiskFound */
	ns1__NoDiskSpace *ns1__NoDiskSpaceFault;	/* optional element of type ns1:NoDiskSpace */
	ns1__NoSubjectName *ns1__NoSubjectNameFault;	/* optional element of type ns1:NoSubjectName */
	ns1__NotFound *ns1__NotFoundFault;	/* optional element of type ns1:NotFound */
	ns1__NotSupported *ns1__NotSupportedFault;	/* optional element of type ns1:NotSupported */
	ns1__OutOfBounds *ns1__OutOfBoundsFault;	/* optional element of type ns1:OutOfBounds */
	ns1__PatchBinariesNotFound *ns1__PatchBinariesNotFoundFault;	/* optional element of type ns1:PatchBinariesNotFound */
	ns1__PatchInstallFailed *ns1__PatchInstallFailedFault;	/* optional element of type ns1:PatchInstallFailed */
	ns1__PatchMetadataInvalid *ns1__PatchMetadataInvalidFault;	/* optional element of type ns1:PatchMetadataInvalid */
	ns1__PatchNotApplicable *ns1__PatchNotApplicableFault;	/* optional element of type ns1:PatchNotApplicable */
	ns1__PlatformConfigFault *ns1__PlatformConfigFaultFault;	/* optional element of type ns1:PlatformConfigFault */
	ns1__ProfileUpdateFailed *ns1__ProfileUpdateFailedFault;	/* optional element of type ns1:ProfileUpdateFailed */
	ns1__RebootRequired *ns1__RebootRequiredFault;	/* optional element of type ns1:RebootRequired */
	ns1__RecordReplayDisabled *ns1__RecordReplayDisabledFault;	/* optional element of type ns1:RecordReplayDisabled */
	ns1__RemoveFailed *ns1__RemoveFailedFault;	/* optional element of type ns1:RemoveFailed */
	ns1__RequestCanceled *ns1__RequestCanceledFault;	/* optional element of type ns1:RequestCanceled */
	ns1__ResourceInUse *ns1__ResourceInUseFault;	/* optional element of type ns1:ResourceInUse */
	ns1__ResourceNotAvailable *ns1__ResourceNotAvailableFault;	/* optional element of type ns1:ResourceNotAvailable */
	ns1__RuntimeFault *ns1__RuntimeFaultFault;	/* optional element of type ns1:RuntimeFault */
	ns1__SSPIChallenge *ns1__SSPIChallengeFault;	/* optional element of type ns1:SSPIChallenge */
	ns1__SnapshotFault *ns1__SnapshotFaultFault;	/* optional element of type ns1:SnapshotFault */
	ns1__TaskInProgress *ns1__TaskInProgressFault;	/* optional element of type ns1:TaskInProgress */
	ns1__Timedout *ns1__TimedoutFault;	/* optional element of type ns1:Timedout */
	ns1__TooManyHosts *ns1__TooManyHostsFault;	/* optional element of type ns1:TooManyHosts */
	ns1__ToolsUnavailable *ns1__ToolsUnavailableFault;	/* optional element of type ns1:ToolsUnavailable */
	ns1__UserNotFound *ns1__UserNotFoundFault;	/* optional element of type ns1:UserNotFound */
	ns1__VAppConfigFault *ns1__VAppConfigFaultFault;	/* optional element of type ns1:VAppConfigFault */
	ns1__VimFault *ns1__VimFaultFault;	/* optional element of type ns1:VimFault */
	ns1__VmConfigFault *ns1__VmConfigFaultFault;	/* optional element of type ns1:VmConfigFault */
	ns1__VmFaultToleranceIssue *ns1__VmFaultToleranceIssueFault;	/* optional element of type ns1:VmFaultToleranceIssue */
	ns1__VmToolsUpgradeFault *ns1__VmToolsUpgradeFaultFault;	/* optional element of type ns1:VmToolsUpgradeFault */
	ns1__VmfsAmbiguousMount *ns1__VmfsAmbiguousMountFault;	/* optional element of type ns1:VmfsAmbiguousMount */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef SOAP_TYPE___ns1__DestroyPropertyFilter
#define SOAP_TYPE___ns1__DestroyPropertyFilter (4745)
/* Operation wrapper: */
struct __ns1__DestroyPropertyFilter
{
public:
	ns1__DestroyPropertyFilterRequestType *ns1__DestroyPropertyFilter;	/* optional element of type ns1:DestroyPropertyFilterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateFilter
#define SOAP_TYPE___ns1__CreateFilter (4749)
/* Operation wrapper: */
struct __ns1__CreateFilter
{
public:
	ns1__CreateFilterRequestType *ns1__CreateFilter;	/* optional element of type ns1:CreateFilterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveProperties
#define SOAP_TYPE___ns1__RetrieveProperties (4753)
/* Operation wrapper: */
struct __ns1__RetrieveProperties
{
public:
	ns1__RetrievePropertiesRequestType *ns1__RetrieveProperties;	/* optional element of type ns1:RetrievePropertiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckForUpdates
#define SOAP_TYPE___ns1__CheckForUpdates (4757)
/* Operation wrapper: */
struct __ns1__CheckForUpdates
{
public:
	ns1__CheckForUpdatesRequestType *ns1__CheckForUpdates;	/* optional element of type ns1:CheckForUpdatesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__WaitForUpdates
#define SOAP_TYPE___ns1__WaitForUpdates (4761)
/* Operation wrapper: */
struct __ns1__WaitForUpdates
{
public:
	ns1__WaitForUpdatesRequestType *ns1__WaitForUpdates;	/* optional element of type ns1:WaitForUpdatesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CancelWaitForUpdates
#define SOAP_TYPE___ns1__CancelWaitForUpdates (4765)
/* Operation wrapper: */
struct __ns1__CancelWaitForUpdates
{
public:
	ns1__CancelWaitForUpdatesRequestType *ns1__CancelWaitForUpdates;	/* optional element of type ns1:CancelWaitForUpdatesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__WaitForUpdatesEx
#define SOAP_TYPE___ns1__WaitForUpdatesEx (4769)
/* Operation wrapper: */
struct __ns1__WaitForUpdatesEx
{
public:
	ns1__WaitForUpdatesExRequestType *ns1__WaitForUpdatesEx;	/* optional element of type ns1:WaitForUpdatesExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrievePropertiesEx
#define SOAP_TYPE___ns1__RetrievePropertiesEx (4773)
/* Operation wrapper: */
struct __ns1__RetrievePropertiesEx
{
public:
	ns1__RetrievePropertiesExRequestType *ns1__RetrievePropertiesEx;	/* optional element of type ns1:RetrievePropertiesExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ContinueRetrievePropertiesEx
#define SOAP_TYPE___ns1__ContinueRetrievePropertiesEx (4777)
/* Operation wrapper: */
struct __ns1__ContinueRetrievePropertiesEx
{
public:
	ns1__ContinueRetrievePropertiesExRequestType *ns1__ContinueRetrievePropertiesEx;	/* optional element of type ns1:ContinueRetrievePropertiesExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CancelRetrievePropertiesEx
#define SOAP_TYPE___ns1__CancelRetrievePropertiesEx (4781)
/* Operation wrapper: */
struct __ns1__CancelRetrievePropertiesEx
{
public:
	ns1__CancelRetrievePropertiesExRequestType *ns1__CancelRetrievePropertiesEx;	/* optional element of type ns1:CancelRetrievePropertiesExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreatePropertyCollector
#define SOAP_TYPE___ns1__CreatePropertyCollector (4785)
/* Operation wrapper: */
struct __ns1__CreatePropertyCollector
{
public:
	ns1__CreatePropertyCollectorRequestType *ns1__CreatePropertyCollector;	/* optional element of type ns1:CreatePropertyCollectorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyPropertyCollector
#define SOAP_TYPE___ns1__DestroyPropertyCollector (4789)
/* Operation wrapper: */
struct __ns1__DestroyPropertyCollector
{
public:
	ns1__DestroyPropertyCollectorRequestType *ns1__DestroyPropertyCollector;	/* optional element of type ns1:DestroyPropertyCollectorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddAuthorizationRole
#define SOAP_TYPE___ns1__AddAuthorizationRole (4793)
/* Operation wrapper: */
struct __ns1__AddAuthorizationRole
{
public:
	ns1__AddAuthorizationRoleRequestType *ns1__AddAuthorizationRole;	/* optional element of type ns1:AddAuthorizationRoleRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveAuthorizationRole
#define SOAP_TYPE___ns1__RemoveAuthorizationRole (4797)
/* Operation wrapper: */
struct __ns1__RemoveAuthorizationRole
{
public:
	ns1__RemoveAuthorizationRoleRequestType *ns1__RemoveAuthorizationRole;	/* optional element of type ns1:RemoveAuthorizationRoleRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAuthorizationRole
#define SOAP_TYPE___ns1__UpdateAuthorizationRole (4801)
/* Operation wrapper: */
struct __ns1__UpdateAuthorizationRole
{
public:
	ns1__UpdateAuthorizationRoleRequestType *ns1__UpdateAuthorizationRole;	/* optional element of type ns1:UpdateAuthorizationRoleRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MergePermissions
#define SOAP_TYPE___ns1__MergePermissions (4805)
/* Operation wrapper: */
struct __ns1__MergePermissions
{
public:
	ns1__MergePermissionsRequestType *ns1__MergePermissions;	/* optional element of type ns1:MergePermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveRolePermissions
#define SOAP_TYPE___ns1__RetrieveRolePermissions (4809)
/* Operation wrapper: */
struct __ns1__RetrieveRolePermissions
{
public:
	ns1__RetrieveRolePermissionsRequestType *ns1__RetrieveRolePermissions;	/* optional element of type ns1:RetrieveRolePermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveEntityPermissions
#define SOAP_TYPE___ns1__RetrieveEntityPermissions (4813)
/* Operation wrapper: */
struct __ns1__RetrieveEntityPermissions
{
public:
	ns1__RetrieveEntityPermissionsRequestType *ns1__RetrieveEntityPermissions;	/* optional element of type ns1:RetrieveEntityPermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveAllPermissions
#define SOAP_TYPE___ns1__RetrieveAllPermissions (4817)
/* Operation wrapper: */
struct __ns1__RetrieveAllPermissions
{
public:
	ns1__RetrieveAllPermissionsRequestType *ns1__RetrieveAllPermissions;	/* optional element of type ns1:RetrieveAllPermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetEntityPermissions
#define SOAP_TYPE___ns1__SetEntityPermissions (4821)
/* Operation wrapper: */
struct __ns1__SetEntityPermissions
{
public:
	ns1__SetEntityPermissionsRequestType *ns1__SetEntityPermissions;	/* optional element of type ns1:SetEntityPermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetEntityPermissions
#define SOAP_TYPE___ns1__ResetEntityPermissions (4825)
/* Operation wrapper: */
struct __ns1__ResetEntityPermissions
{
public:
	ns1__ResetEntityPermissionsRequestType *ns1__ResetEntityPermissions;	/* optional element of type ns1:ResetEntityPermissionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveEntityPermission
#define SOAP_TYPE___ns1__RemoveEntityPermission (4829)
/* Operation wrapper: */
struct __ns1__RemoveEntityPermission
{
public:
	ns1__RemoveEntityPermissionRequestType *ns1__RemoveEntityPermission;	/* optional element of type ns1:RemoveEntityPermissionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureCluster_USCORETask
#define SOAP_TYPE___ns1__ReconfigureCluster_USCORETask (4833)
/* Operation wrapper: */
struct __ns1__ReconfigureCluster_USCORETask
{
public:
	ns1__ReconfigureClusterRequestType *ns1__ReconfigureCluster_USCORETask;	/* optional element of type ns1:ReconfigureClusterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ApplyRecommendation
#define SOAP_TYPE___ns1__ApplyRecommendation (4837)
/* Operation wrapper: */
struct __ns1__ApplyRecommendation
{
public:
	ns1__ApplyRecommendationRequestType *ns1__ApplyRecommendation;	/* optional element of type ns1:ApplyRecommendationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CancelRecommendation
#define SOAP_TYPE___ns1__CancelRecommendation (4841)
/* Operation wrapper: */
struct __ns1__CancelRecommendation
{
public:
	ns1__CancelRecommendationRequestType *ns1__CancelRecommendation;	/* optional element of type ns1:CancelRecommendationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RecommendHostsForVm
#define SOAP_TYPE___ns1__RecommendHostsForVm (4845)
/* Operation wrapper: */
struct __ns1__RecommendHostsForVm
{
public:
	ns1__RecommendHostsForVmRequestType *ns1__RecommendHostsForVm;	/* optional element of type ns1:RecommendHostsForVmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddHost_USCORETask
#define SOAP_TYPE___ns1__AddHost_USCORETask (4849)
/* Operation wrapper: */
struct __ns1__AddHost_USCORETask
{
public:
	ns1__AddHostRequestType *ns1__AddHost_USCORETask;	/* optional element of type ns1:AddHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveInto_USCORETask
#define SOAP_TYPE___ns1__MoveInto_USCORETask (4853)
/* Operation wrapper: */
struct __ns1__MoveInto_USCORETask
{
public:
	ns1__MoveIntoRequestType *ns1__MoveInto_USCORETask;	/* optional element of type ns1:MoveIntoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveHostInto_USCORETask
#define SOAP_TYPE___ns1__MoveHostInto_USCORETask (4857)
/* Operation wrapper: */
struct __ns1__MoveHostInto_USCORETask
{
public:
	ns1__MoveHostIntoRequestType *ns1__MoveHostInto_USCORETask;	/* optional element of type ns1:MoveHostIntoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshRecommendation
#define SOAP_TYPE___ns1__RefreshRecommendation (4861)
/* Operation wrapper: */
struct __ns1__RefreshRecommendation
{
public:
	ns1__RefreshRecommendationRequestType *ns1__RefreshRecommendation;	/* optional element of type ns1:RefreshRecommendationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveDasAdvancedRuntimeInfo
#define SOAP_TYPE___ns1__RetrieveDasAdvancedRuntimeInfo (4865)
/* Operation wrapper: */
struct __ns1__RetrieveDasAdvancedRuntimeInfo
{
public:
	ns1__RetrieveDasAdvancedRuntimeInfoRequestType *ns1__RetrieveDasAdvancedRuntimeInfo;	/* optional element of type ns1:RetrieveDasAdvancedRuntimeInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureComputeResource_USCORETask
#define SOAP_TYPE___ns1__ReconfigureComputeResource_USCORETask (4869)
/* Operation wrapper: */
struct __ns1__ReconfigureComputeResource_USCORETask
{
public:
	ns1__ReconfigureComputeResourceRequestType *ns1__ReconfigureComputeResource_USCORETask;	/* optional element of type ns1:ReconfigureComputeResourceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddCustomFieldDef
#define SOAP_TYPE___ns1__AddCustomFieldDef (4873)
/* Operation wrapper: */
struct __ns1__AddCustomFieldDef
{
public:
	ns1__AddCustomFieldDefRequestType *ns1__AddCustomFieldDef;	/* optional element of type ns1:AddCustomFieldDefRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveCustomFieldDef
#define SOAP_TYPE___ns1__RemoveCustomFieldDef (4877)
/* Operation wrapper: */
struct __ns1__RemoveCustomFieldDef
{
public:
	ns1__RemoveCustomFieldDefRequestType *ns1__RemoveCustomFieldDef;	/* optional element of type ns1:RemoveCustomFieldDefRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RenameCustomFieldDef
#define SOAP_TYPE___ns1__RenameCustomFieldDef (4881)
/* Operation wrapper: */
struct __ns1__RenameCustomFieldDef
{
public:
	ns1__RenameCustomFieldDefRequestType *ns1__RenameCustomFieldDef;	/* optional element of type ns1:RenameCustomFieldDefRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetField
#define SOAP_TYPE___ns1__SetField (4885)
/* Operation wrapper: */
struct __ns1__SetField
{
public:
	ns1__SetFieldRequestType *ns1__SetField;	/* optional element of type ns1:SetFieldRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DoesCustomizationSpecExist
#define SOAP_TYPE___ns1__DoesCustomizationSpecExist (4889)
/* Operation wrapper: */
struct __ns1__DoesCustomizationSpecExist
{
public:
	ns1__DoesCustomizationSpecExistRequestType *ns1__DoesCustomizationSpecExist;	/* optional element of type ns1:DoesCustomizationSpecExistRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCustomizationSpec
#define SOAP_TYPE___ns1__GetCustomizationSpec (4893)
/* Operation wrapper: */
struct __ns1__GetCustomizationSpec
{
public:
	ns1__GetCustomizationSpecRequestType *ns1__GetCustomizationSpec;	/* optional element of type ns1:GetCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateCustomizationSpec
#define SOAP_TYPE___ns1__CreateCustomizationSpec (4897)
/* Operation wrapper: */
struct __ns1__CreateCustomizationSpec
{
public:
	ns1__CreateCustomizationSpecRequestType *ns1__CreateCustomizationSpec;	/* optional element of type ns1:CreateCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__OverwriteCustomizationSpec
#define SOAP_TYPE___ns1__OverwriteCustomizationSpec (4901)
/* Operation wrapper: */
struct __ns1__OverwriteCustomizationSpec
{
public:
	ns1__OverwriteCustomizationSpecRequestType *ns1__OverwriteCustomizationSpec;	/* optional element of type ns1:OverwriteCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteCustomizationSpec
#define SOAP_TYPE___ns1__DeleteCustomizationSpec (4905)
/* Operation wrapper: */
struct __ns1__DeleteCustomizationSpec
{
public:
	ns1__DeleteCustomizationSpecRequestType *ns1__DeleteCustomizationSpec;	/* optional element of type ns1:DeleteCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DuplicateCustomizationSpec
#define SOAP_TYPE___ns1__DuplicateCustomizationSpec (4909)
/* Operation wrapper: */
struct __ns1__DuplicateCustomizationSpec
{
public:
	ns1__DuplicateCustomizationSpecRequestType *ns1__DuplicateCustomizationSpec;	/* optional element of type ns1:DuplicateCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RenameCustomizationSpec
#define SOAP_TYPE___ns1__RenameCustomizationSpec (4913)
/* Operation wrapper: */
struct __ns1__RenameCustomizationSpec
{
public:
	ns1__RenameCustomizationSpecRequestType *ns1__RenameCustomizationSpec;	/* optional element of type ns1:RenameCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CustomizationSpecItemToXml
#define SOAP_TYPE___ns1__CustomizationSpecItemToXml (4917)
/* Operation wrapper: */
struct __ns1__CustomizationSpecItemToXml
{
public:
	ns1__CustomizationSpecItemToXmlRequestType *ns1__CustomizationSpecItemToXml;	/* optional element of type ns1:CustomizationSpecItemToXmlRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__XmlToCustomizationSpecItem
#define SOAP_TYPE___ns1__XmlToCustomizationSpecItem (4921)
/* Operation wrapper: */
struct __ns1__XmlToCustomizationSpecItem
{
public:
	ns1__XmlToCustomizationSpecItemRequestType *ns1__XmlToCustomizationSpecItem;	/* optional element of type ns1:XmlToCustomizationSpecItemRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckCustomizationResources
#define SOAP_TYPE___ns1__CheckCustomizationResources (4925)
/* Operation wrapper: */
struct __ns1__CheckCustomizationResources
{
public:
	ns1__CheckCustomizationResourcesRequestType *ns1__CheckCustomizationResources;	/* optional element of type ns1:CheckCustomizationResourcesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryConnectionInfo
#define SOAP_TYPE___ns1__QueryConnectionInfo (4929)
/* Operation wrapper: */
struct __ns1__QueryConnectionInfo
{
public:
	ns1__QueryConnectionInfoRequestType *ns1__QueryConnectionInfo;	/* optional element of type ns1:QueryConnectionInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerOnMultiVM_USCORETask
#define SOAP_TYPE___ns1__PowerOnMultiVM_USCORETask (4933)
/* Operation wrapper: */
struct __ns1__PowerOnMultiVM_USCORETask
{
public:
	ns1__PowerOnMultiVMRequestType *ns1__PowerOnMultiVM_USCORETask;	/* optional element of type ns1:PowerOnMultiVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshDatastore
#define SOAP_TYPE___ns1__RefreshDatastore (4937)
/* Operation wrapper: */
struct __ns1__RefreshDatastore
{
public:
	ns1__RefreshDatastoreRequestType *ns1__RefreshDatastore;	/* optional element of type ns1:RefreshDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshDatastoreStorageInfo
#define SOAP_TYPE___ns1__RefreshDatastoreStorageInfo (4941)
/* Operation wrapper: */
struct __ns1__RefreshDatastoreStorageInfo
{
public:
	ns1__RefreshDatastoreStorageInfoRequestType *ns1__RefreshDatastoreStorageInfo;	/* optional element of type ns1:RefreshDatastoreStorageInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateVirtualMachineFiles_USCORETask
#define SOAP_TYPE___ns1__UpdateVirtualMachineFiles_USCORETask (4945)
/* Operation wrapper: */
struct __ns1__UpdateVirtualMachineFiles_USCORETask
{
public:
	ns1__UpdateVirtualMachineFilesRequestType *ns1__UpdateVirtualMachineFiles_USCORETask;	/* optional element of type ns1:UpdateVirtualMachineFilesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RenameDatastore
#define SOAP_TYPE___ns1__RenameDatastore (4949)
/* Operation wrapper: */
struct __ns1__RenameDatastore
{
public:
	ns1__RenameDatastoreRequestType *ns1__RenameDatastore;	/* optional element of type ns1:RenameDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyDatastore
#define SOAP_TYPE___ns1__DestroyDatastore (4953)
/* Operation wrapper: */
struct __ns1__DestroyDatastore
{
public:
	ns1__DestroyDatastoreRequestType *ns1__DestroyDatastore;	/* optional element of type ns1:DestroyDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDescriptions
#define SOAP_TYPE___ns1__QueryDescriptions (4957)
/* Operation wrapper: */
struct __ns1__QueryDescriptions
{
public:
	ns1__QueryDescriptionsRequestType *ns1__QueryDescriptions;	/* optional element of type ns1:QueryDescriptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__BrowseDiagnosticLog
#define SOAP_TYPE___ns1__BrowseDiagnosticLog (4961)
/* Operation wrapper: */
struct __ns1__BrowseDiagnosticLog
{
public:
	ns1__BrowseDiagnosticLogRequestType *ns1__BrowseDiagnosticLog;	/* optional element of type ns1:BrowseDiagnosticLogRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GenerateLogBundles_USCORETask
#define SOAP_TYPE___ns1__GenerateLogBundles_USCORETask (4965)
/* Operation wrapper: */
struct __ns1__GenerateLogBundles_USCORETask
{
public:
	ns1__GenerateLogBundlesRequestType *ns1__GenerateLogBundles_USCORETask;	/* optional element of type ns1:GenerateLogBundlesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FetchDVPortKeys
#define SOAP_TYPE___ns1__FetchDVPortKeys (4969)
/* Operation wrapper: */
struct __ns1__FetchDVPortKeys
{
public:
	ns1__FetchDVPortKeysRequestType *ns1__FetchDVPortKeys;	/* optional element of type ns1:FetchDVPortKeysRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FetchDVPorts
#define SOAP_TYPE___ns1__FetchDVPorts (4973)
/* Operation wrapper: */
struct __ns1__FetchDVPorts
{
public:
	ns1__FetchDVPortsRequestType *ns1__FetchDVPorts;	/* optional element of type ns1:FetchDVPortsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUsedVlanIdInDvs
#define SOAP_TYPE___ns1__QueryUsedVlanIdInDvs (4977)
/* Operation wrapper: */
struct __ns1__QueryUsedVlanIdInDvs
{
public:
	ns1__QueryUsedVlanIdInDvsRequestType *ns1__QueryUsedVlanIdInDvs;	/* optional element of type ns1:QueryUsedVlanIdInDvsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureDvs_USCORETask
#define SOAP_TYPE___ns1__ReconfigureDvs_USCORETask (4981)
/* Operation wrapper: */
struct __ns1__ReconfigureDvs_USCORETask
{
public:
	ns1__ReconfigureDvsRequestType *ns1__ReconfigureDvs_USCORETask;	/* optional element of type ns1:ReconfigureDvsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PerformDvsProductSpecOperation_USCORETask
#define SOAP_TYPE___ns1__PerformDvsProductSpecOperation_USCORETask (4985)
/* Operation wrapper: */
struct __ns1__PerformDvsProductSpecOperation_USCORETask
{
public:
	ns1__PerformDvsProductSpecOperationRequestType *ns1__PerformDvsProductSpecOperation_USCORETask;	/* optional element of type ns1:PerformDvsProductSpecOperationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MergeDvs_USCORETask
#define SOAP_TYPE___ns1__MergeDvs_USCORETask (4989)
/* Operation wrapper: */
struct __ns1__MergeDvs_USCORETask
{
public:
	ns1__MergeDvsRequestType *ns1__MergeDvs_USCORETask;	/* optional element of type ns1:MergeDvsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddDVPortgroup_USCORETask
#define SOAP_TYPE___ns1__AddDVPortgroup_USCORETask (4993)
/* Operation wrapper: */
struct __ns1__AddDVPortgroup_USCORETask
{
public:
	ns1__AddDVPortgroupRequestType *ns1__AddDVPortgroup_USCORETask;	/* optional element of type ns1:AddDVPortgroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveDVPort_USCORETask
#define SOAP_TYPE___ns1__MoveDVPort_USCORETask (4997)
/* Operation wrapper: */
struct __ns1__MoveDVPort_USCORETask
{
public:
	ns1__MoveDVPortRequestType *ns1__MoveDVPort_USCORETask;	/* optional element of type ns1:MoveDVPortRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDvsCapability
#define SOAP_TYPE___ns1__UpdateDvsCapability (5001)
/* Operation wrapper: */
struct __ns1__UpdateDvsCapability
{
public:
	ns1__UpdateDvsCapabilityRequestType *ns1__UpdateDvsCapability;	/* optional element of type ns1:UpdateDvsCapabilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureDVPort_USCORETask
#define SOAP_TYPE___ns1__ReconfigureDVPort_USCORETask (5005)
/* Operation wrapper: */
struct __ns1__ReconfigureDVPort_USCORETask
{
public:
	ns1__ReconfigureDVPortRequestType *ns1__ReconfigureDVPort_USCORETask;	/* optional element of type ns1:ReconfigureDVPortRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshDVPortState
#define SOAP_TYPE___ns1__RefreshDVPortState (5009)
/* Operation wrapper: */
struct __ns1__RefreshDVPortState
{
public:
	ns1__RefreshDVPortStateRequestType *ns1__RefreshDVPortState;	/* optional element of type ns1:RefreshDVPortStateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RectifyDvsHost_USCORETask
#define SOAP_TYPE___ns1__RectifyDvsHost_USCORETask (5013)
/* Operation wrapper: */
struct __ns1__RectifyDvsHost_USCORETask
{
public:
	ns1__RectifyDvsHostRequestType *ns1__RectifyDvsHost_USCORETask;	/* optional element of type ns1:RectifyDvsHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateNetworkResourcePool
#define SOAP_TYPE___ns1__UpdateNetworkResourcePool (5017)
/* Operation wrapper: */
struct __ns1__UpdateNetworkResourcePool
{
public:
	ns1__UpdateNetworkResourcePoolRequestType *ns1__UpdateNetworkResourcePool;	/* optional element of type ns1:UpdateNetworkResourcePoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableNetworkResourceManagement
#define SOAP_TYPE___ns1__EnableNetworkResourceManagement (5021)
/* Operation wrapper: */
struct __ns1__EnableNetworkResourceManagement
{
public:
	ns1__EnableNetworkResourceManagementRequestType *ns1__EnableNetworkResourceManagement;	/* optional element of type ns1:EnableNetworkResourceManagementRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryConfigOptionDescriptor
#define SOAP_TYPE___ns1__QueryConfigOptionDescriptor (5025)
/* Operation wrapper: */
struct __ns1__QueryConfigOptionDescriptor
{
public:
	ns1__QueryConfigOptionDescriptorRequestType *ns1__QueryConfigOptionDescriptor;	/* optional element of type ns1:QueryConfigOptionDescriptorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryConfigOption
#define SOAP_TYPE___ns1__QueryConfigOption (5029)
/* Operation wrapper: */
struct __ns1__QueryConfigOption
{
public:
	ns1__QueryConfigOptionRequestType *ns1__QueryConfigOption;	/* optional element of type ns1:QueryConfigOptionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryConfigTarget
#define SOAP_TYPE___ns1__QueryConfigTarget (5033)
/* Operation wrapper: */
struct __ns1__QueryConfigTarget
{
public:
	ns1__QueryConfigTargetRequestType *ns1__QueryConfigTarget;	/* optional element of type ns1:QueryConfigTargetRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryTargetCapabilities
#define SOAP_TYPE___ns1__QueryTargetCapabilities (5037)
/* Operation wrapper: */
struct __ns1__QueryTargetCapabilities
{
public:
	ns1__QueryTargetCapabilitiesRequestType *ns1__QueryTargetCapabilities;	/* optional element of type ns1:QueryTargetCapabilitiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__setCustomValue
#define SOAP_TYPE___ns1__setCustomValue (5041)
/* Operation wrapper: */
struct __ns1__setCustomValue
{
public:
	ns1__setCustomValueRequestType *ns1__setCustomValue;	/* optional element of type ns1:setCustomValueRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnregisterExtension
#define SOAP_TYPE___ns1__UnregisterExtension (5045)
/* Operation wrapper: */
struct __ns1__UnregisterExtension
{
public:
	ns1__UnregisterExtensionRequestType *ns1__UnregisterExtension;	/* optional element of type ns1:UnregisterExtensionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindExtension
#define SOAP_TYPE___ns1__FindExtension (5049)
/* Operation wrapper: */
struct __ns1__FindExtension
{
public:
	ns1__FindExtensionRequestType *ns1__FindExtension;	/* optional element of type ns1:FindExtensionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RegisterExtension
#define SOAP_TYPE___ns1__RegisterExtension (5053)
/* Operation wrapper: */
struct __ns1__RegisterExtension
{
public:
	ns1__RegisterExtensionRequestType *ns1__RegisterExtension;	/* optional element of type ns1:RegisterExtensionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateExtension
#define SOAP_TYPE___ns1__UpdateExtension (5057)
/* Operation wrapper: */
struct __ns1__UpdateExtension
{
public:
	ns1__UpdateExtensionRequestType *ns1__UpdateExtension;	/* optional element of type ns1:UpdateExtensionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GetPublicKey
#define SOAP_TYPE___ns1__GetPublicKey (5061)
/* Operation wrapper: */
struct __ns1__GetPublicKey
{
public:
	ns1__GetPublicKeyRequestType *ns1__GetPublicKey;	/* optional element of type ns1:GetPublicKeyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetPublicKey
#define SOAP_TYPE___ns1__SetPublicKey (5065)
/* Operation wrapper: */
struct __ns1__SetPublicKey
{
public:
	ns1__SetPublicKeyRequestType *ns1__SetPublicKey;	/* optional element of type ns1:SetPublicKeyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetExtensionCertificate
#define SOAP_TYPE___ns1__SetExtensionCertificate (5069)
/* Operation wrapper: */
struct __ns1__SetExtensionCertificate
{
public:
	ns1__SetExtensionCertificateRequestType *ns1__SetExtensionCertificate;	/* optional element of type ns1:SetExtensionCertificateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveDatastoreFile_USCORETask
#define SOAP_TYPE___ns1__MoveDatastoreFile_USCORETask (5073)
/* Operation wrapper: */
struct __ns1__MoveDatastoreFile_USCORETask
{
public:
	ns1__MoveDatastoreFileRequestType *ns1__MoveDatastoreFile_USCORETask;	/* optional element of type ns1:MoveDatastoreFileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CopyDatastoreFile_USCORETask
#define SOAP_TYPE___ns1__CopyDatastoreFile_USCORETask (5077)
/* Operation wrapper: */
struct __ns1__CopyDatastoreFile_USCORETask
{
public:
	ns1__CopyDatastoreFileRequestType *ns1__CopyDatastoreFile_USCORETask;	/* optional element of type ns1:CopyDatastoreFileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteDatastoreFile_USCORETask
#define SOAP_TYPE___ns1__DeleteDatastoreFile_USCORETask (5081)
/* Operation wrapper: */
struct __ns1__DeleteDatastoreFile_USCORETask
{
public:
	ns1__DeleteDatastoreFileRequestType *ns1__DeleteDatastoreFile_USCORETask;	/* optional element of type ns1:DeleteDatastoreFileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MakeDirectory
#define SOAP_TYPE___ns1__MakeDirectory (5085)
/* Operation wrapper: */
struct __ns1__MakeDirectory
{
public:
	ns1__MakeDirectoryRequestType *ns1__MakeDirectory;	/* optional element of type ns1:MakeDirectoryRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ChangeOwner
#define SOAP_TYPE___ns1__ChangeOwner (5089)
/* Operation wrapper: */
struct __ns1__ChangeOwner
{
public:
	ns1__ChangeOwnerRequestType *ns1__ChangeOwner;	/* optional element of type ns1:ChangeOwnerRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateFolder
#define SOAP_TYPE___ns1__CreateFolder (5093)
/* Operation wrapper: */
struct __ns1__CreateFolder
{
public:
	ns1__CreateFolderRequestType *ns1__CreateFolder;	/* optional element of type ns1:CreateFolderRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveIntoFolder_USCORETask
#define SOAP_TYPE___ns1__MoveIntoFolder_USCORETask (5097)
/* Operation wrapper: */
struct __ns1__MoveIntoFolder_USCORETask
{
public:
	ns1__MoveIntoFolderRequestType *ns1__MoveIntoFolder_USCORETask;	/* optional element of type ns1:MoveIntoFolderRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVM_USCORETask
#define SOAP_TYPE___ns1__CreateVM_USCORETask (5101)
/* Operation wrapper: */
struct __ns1__CreateVM_USCORETask
{
public:
	ns1__CreateVMRequestType *ns1__CreateVM_USCORETask;	/* optional element of type ns1:CreateVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RegisterVM_USCORETask
#define SOAP_TYPE___ns1__RegisterVM_USCORETask (5105)
/* Operation wrapper: */
struct __ns1__RegisterVM_USCORETask
{
public:
	ns1__RegisterVMRequestType *ns1__RegisterVM_USCORETask;	/* optional element of type ns1:RegisterVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateCluster
#define SOAP_TYPE___ns1__CreateCluster (5109)
/* Operation wrapper: */
struct __ns1__CreateCluster
{
public:
	ns1__CreateClusterRequestType *ns1__CreateCluster;	/* optional element of type ns1:CreateClusterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateClusterEx
#define SOAP_TYPE___ns1__CreateClusterEx (5113)
/* Operation wrapper: */
struct __ns1__CreateClusterEx
{
public:
	ns1__CreateClusterExRequestType *ns1__CreateClusterEx;	/* optional element of type ns1:CreateClusterExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddStandaloneHost_USCORETask
#define SOAP_TYPE___ns1__AddStandaloneHost_USCORETask (5117)
/* Operation wrapper: */
struct __ns1__AddStandaloneHost_USCORETask
{
public:
	ns1__AddStandaloneHostRequestType *ns1__AddStandaloneHost_USCORETask;	/* optional element of type ns1:AddStandaloneHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDatacenter
#define SOAP_TYPE___ns1__CreateDatacenter (5121)
/* Operation wrapper: */
struct __ns1__CreateDatacenter
{
public:
	ns1__CreateDatacenterRequestType *ns1__CreateDatacenter;	/* optional element of type ns1:CreateDatacenterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnregisterAndDestroy_USCORETask
#define SOAP_TYPE___ns1__UnregisterAndDestroy_USCORETask (5125)
/* Operation wrapper: */
struct __ns1__UnregisterAndDestroy_USCORETask
{
public:
	ns1__UnregisterAndDestroyRequestType *ns1__UnregisterAndDestroy_USCORETask;	/* optional element of type ns1:UnregisterAndDestroyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDVS_USCORETask
#define SOAP_TYPE___ns1__CreateDVS_USCORETask (5129)
/* Operation wrapper: */
struct __ns1__CreateDVS_USCORETask
{
public:
	ns1__CreateDVSRequestType *ns1__CreateDVS_USCORETask;	/* optional element of type ns1:CreateDVSRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetCollectorPageSize
#define SOAP_TYPE___ns1__SetCollectorPageSize (5133)
/* Operation wrapper: */
struct __ns1__SetCollectorPageSize
{
public:
	ns1__SetCollectorPageSizeRequestType *ns1__SetCollectorPageSize;	/* optional element of type ns1:SetCollectorPageSizeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RewindCollector
#define SOAP_TYPE___ns1__RewindCollector (5137)
/* Operation wrapper: */
struct __ns1__RewindCollector
{
public:
	ns1__RewindCollectorRequestType *ns1__RewindCollector;	/* optional element of type ns1:RewindCollectorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetCollector
#define SOAP_TYPE___ns1__ResetCollector (5141)
/* Operation wrapper: */
struct __ns1__ResetCollector
{
public:
	ns1__ResetCollectorRequestType *ns1__ResetCollector;	/* optional element of type ns1:ResetCollectorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyCollector
#define SOAP_TYPE___ns1__DestroyCollector (5145)
/* Operation wrapper: */
struct __ns1__DestroyCollector
{
public:
	ns1__DestroyCollectorRequestType *ns1__DestroyCollector;	/* optional element of type ns1:DestroyCollectorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryHostConnectionInfo
#define SOAP_TYPE___ns1__QueryHostConnectionInfo (5149)
/* Operation wrapper: */
struct __ns1__QueryHostConnectionInfo
{
public:
	ns1__QueryHostConnectionInfoRequestType *ns1__QueryHostConnectionInfo;	/* optional element of type ns1:QueryHostConnectionInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateSystemResources
#define SOAP_TYPE___ns1__UpdateSystemResources (5153)
/* Operation wrapper: */
struct __ns1__UpdateSystemResources
{
public:
	ns1__UpdateSystemResourcesRequestType *ns1__UpdateSystemResources;	/* optional element of type ns1:UpdateSystemResourcesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconnectHost_USCORETask
#define SOAP_TYPE___ns1__ReconnectHost_USCORETask (5157)
/* Operation wrapper: */
struct __ns1__ReconnectHost_USCORETask
{
public:
	ns1__ReconnectHostRequestType *ns1__ReconnectHost_USCORETask;	/* optional element of type ns1:ReconnectHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisconnectHost_USCORETask
#define SOAP_TYPE___ns1__DisconnectHost_USCORETask (5161)
/* Operation wrapper: */
struct __ns1__DisconnectHost_USCORETask
{
public:
	ns1__DisconnectHostRequestType *ns1__DisconnectHost_USCORETask;	/* optional element of type ns1:DisconnectHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnterMaintenanceMode_USCORETask
#define SOAP_TYPE___ns1__EnterMaintenanceMode_USCORETask (5165)
/* Operation wrapper: */
struct __ns1__EnterMaintenanceMode_USCORETask
{
public:
	ns1__EnterMaintenanceModeRequestType *ns1__EnterMaintenanceMode_USCORETask;	/* optional element of type ns1:EnterMaintenanceModeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExitMaintenanceMode_USCORETask
#define SOAP_TYPE___ns1__ExitMaintenanceMode_USCORETask (5169)
/* Operation wrapper: */
struct __ns1__ExitMaintenanceMode_USCORETask
{
public:
	ns1__ExitMaintenanceModeRequestType *ns1__ExitMaintenanceMode_USCORETask;	/* optional element of type ns1:ExitMaintenanceModeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RebootHost_USCORETask
#define SOAP_TYPE___ns1__RebootHost_USCORETask (5173)
/* Operation wrapper: */
struct __ns1__RebootHost_USCORETask
{
public:
	ns1__RebootHostRequestType *ns1__RebootHost_USCORETask;	/* optional element of type ns1:RebootHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ShutdownHost_USCORETask
#define SOAP_TYPE___ns1__ShutdownHost_USCORETask (5177)
/* Operation wrapper: */
struct __ns1__ShutdownHost_USCORETask
{
public:
	ns1__ShutdownHostRequestType *ns1__ShutdownHost_USCORETask;	/* optional element of type ns1:ShutdownHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerDownHostToStandBy_USCORETask
#define SOAP_TYPE___ns1__PowerDownHostToStandBy_USCORETask (5181)
/* Operation wrapper: */
struct __ns1__PowerDownHostToStandBy_USCORETask
{
public:
	ns1__PowerDownHostToStandByRequestType *ns1__PowerDownHostToStandBy_USCORETask;	/* optional element of type ns1:PowerDownHostToStandByRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerUpHostFromStandBy_USCORETask
#define SOAP_TYPE___ns1__PowerUpHostFromStandBy_USCORETask (5185)
/* Operation wrapper: */
struct __ns1__PowerUpHostFromStandBy_USCORETask
{
public:
	ns1__PowerUpHostFromStandByRequestType *ns1__PowerUpHostFromStandBy_USCORETask;	/* optional element of type ns1:PowerUpHostFromStandByRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryMemoryOverhead
#define SOAP_TYPE___ns1__QueryMemoryOverhead (5189)
/* Operation wrapper: */
struct __ns1__QueryMemoryOverhead
{
public:
	ns1__QueryMemoryOverheadRequestType *ns1__QueryMemoryOverhead;	/* optional element of type ns1:QueryMemoryOverheadRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryMemoryOverheadEx
#define SOAP_TYPE___ns1__QueryMemoryOverheadEx (5193)
/* Operation wrapper: */
struct __ns1__QueryMemoryOverheadEx
{
public:
	ns1__QueryMemoryOverheadExRequestType *ns1__QueryMemoryOverheadEx;	/* optional element of type ns1:QueryMemoryOverheadExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureHostForDAS_USCORETask
#define SOAP_TYPE___ns1__ReconfigureHostForDAS_USCORETask (5197)
/* Operation wrapper: */
struct __ns1__ReconfigureHostForDAS_USCORETask
{
public:
	ns1__ReconfigureHostForDASRequestType *ns1__ReconfigureHostForDAS_USCORETask;	/* optional element of type ns1:ReconfigureHostForDASRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateFlags
#define SOAP_TYPE___ns1__UpdateFlags (5201)
/* Operation wrapper: */
struct __ns1__UpdateFlags
{
public:
	ns1__UpdateFlagsRequestType *ns1__UpdateFlags;	/* optional element of type ns1:UpdateFlagsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnterLockdownMode
#define SOAP_TYPE___ns1__EnterLockdownMode (5205)
/* Operation wrapper: */
struct __ns1__EnterLockdownMode
{
public:
	ns1__EnterLockdownModeRequestType *ns1__EnterLockdownMode;	/* optional element of type ns1:EnterLockdownModeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExitLockdownMode
#define SOAP_TYPE___ns1__ExitLockdownMode (5209)
/* Operation wrapper: */
struct __ns1__ExitLockdownMode
{
public:
	ns1__ExitLockdownModeRequestType *ns1__ExitLockdownMode;	/* optional element of type ns1:ExitLockdownModeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcquireCimServicesTicket
#define SOAP_TYPE___ns1__AcquireCimServicesTicket (5213)
/* Operation wrapper: */
struct __ns1__AcquireCimServicesTicket
{
public:
	ns1__AcquireCimServicesTicketRequestType *ns1__AcquireCimServicesTicket;	/* optional element of type ns1:AcquireCimServicesTicketRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateIpmi
#define SOAP_TYPE___ns1__UpdateIpmi (5217)
/* Operation wrapper: */
struct __ns1__UpdateIpmi
{
public:
	ns1__UpdateIpmiRequestType *ns1__UpdateIpmi;	/* optional element of type ns1:UpdateIpmiRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveHardwareUptime
#define SOAP_TYPE___ns1__RetrieveHardwareUptime (5221)
/* Operation wrapper: */
struct __ns1__RetrieveHardwareUptime
{
public:
	ns1__RetrieveHardwareUptimeRequestType *ns1__RetrieveHardwareUptime;	/* optional element of type ns1:RetrieveHardwareUptimeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__HttpNfcLeaseGetManifest
#define SOAP_TYPE___ns1__HttpNfcLeaseGetManifest (5225)
/* Operation wrapper: */
struct __ns1__HttpNfcLeaseGetManifest
{
public:
	ns1__HttpNfcLeaseGetManifestRequestType *ns1__HttpNfcLeaseGetManifest;	/* optional element of type ns1:HttpNfcLeaseGetManifestRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__HttpNfcLeaseComplete
#define SOAP_TYPE___ns1__HttpNfcLeaseComplete (5229)
/* Operation wrapper: */
struct __ns1__HttpNfcLeaseComplete
{
public:
	ns1__HttpNfcLeaseCompleteRequestType *ns1__HttpNfcLeaseComplete;	/* optional element of type ns1:HttpNfcLeaseCompleteRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__HttpNfcLeaseAbort
#define SOAP_TYPE___ns1__HttpNfcLeaseAbort (5233)
/* Operation wrapper: */
struct __ns1__HttpNfcLeaseAbort
{
public:
	ns1__HttpNfcLeaseAbortRequestType *ns1__HttpNfcLeaseAbort;	/* optional element of type ns1:HttpNfcLeaseAbortRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__HttpNfcLeaseProgress
#define SOAP_TYPE___ns1__HttpNfcLeaseProgress (5237)
/* Operation wrapper: */
struct __ns1__HttpNfcLeaseProgress
{
public:
	ns1__HttpNfcLeaseProgressRequestType *ns1__HttpNfcLeaseProgress;	/* optional element of type ns1:HttpNfcLeaseProgressRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryIpPools
#define SOAP_TYPE___ns1__QueryIpPools (5241)
/* Operation wrapper: */
struct __ns1__QueryIpPools
{
public:
	ns1__QueryIpPoolsRequestType *ns1__QueryIpPools;	/* optional element of type ns1:QueryIpPoolsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateIpPool
#define SOAP_TYPE___ns1__CreateIpPool (5245)
/* Operation wrapper: */
struct __ns1__CreateIpPool
{
public:
	ns1__CreateIpPoolRequestType *ns1__CreateIpPool;	/* optional element of type ns1:CreateIpPoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateIpPool
#define SOAP_TYPE___ns1__UpdateIpPool (5249)
/* Operation wrapper: */
struct __ns1__UpdateIpPool
{
public:
	ns1__UpdateIpPoolRequestType *ns1__UpdateIpPool;	/* optional element of type ns1:UpdateIpPoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyIpPool
#define SOAP_TYPE___ns1__DestroyIpPool (5253)
/* Operation wrapper: */
struct __ns1__DestroyIpPool
{
public:
	ns1__DestroyIpPoolRequestType *ns1__DestroyIpPool;	/* optional element of type ns1:DestroyIpPoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAssignedLicense
#define SOAP_TYPE___ns1__UpdateAssignedLicense (5257)
/* Operation wrapper: */
struct __ns1__UpdateAssignedLicense
{
public:
	ns1__UpdateAssignedLicenseRequestType *ns1__UpdateAssignedLicense;	/* optional element of type ns1:UpdateAssignedLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveAssignedLicense
#define SOAP_TYPE___ns1__RemoveAssignedLicense (5261)
/* Operation wrapper: */
struct __ns1__RemoveAssignedLicense
{
public:
	ns1__RemoveAssignedLicenseRequestType *ns1__RemoveAssignedLicense;	/* optional element of type ns1:RemoveAssignedLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAssignedLicenses
#define SOAP_TYPE___ns1__QueryAssignedLicenses (5265)
/* Operation wrapper: */
struct __ns1__QueryAssignedLicenses
{
public:
	ns1__QueryAssignedLicensesRequestType *ns1__QueryAssignedLicenses;	/* optional element of type ns1:QueryAssignedLicensesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QuerySupportedFeatures
#define SOAP_TYPE___ns1__QuerySupportedFeatures (5269)
/* Operation wrapper: */
struct __ns1__QuerySupportedFeatures
{
public:
	ns1__QuerySupportedFeaturesRequestType *ns1__QuerySupportedFeatures;	/* optional element of type ns1:QuerySupportedFeaturesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryLicenseSourceAvailability
#define SOAP_TYPE___ns1__QueryLicenseSourceAvailability (5273)
/* Operation wrapper: */
struct __ns1__QueryLicenseSourceAvailability
{
public:
	ns1__QueryLicenseSourceAvailabilityRequestType *ns1__QueryLicenseSourceAvailability;	/* optional element of type ns1:QueryLicenseSourceAvailabilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryLicenseUsage
#define SOAP_TYPE___ns1__QueryLicenseUsage (5277)
/* Operation wrapper: */
struct __ns1__QueryLicenseUsage
{
public:
	ns1__QueryLicenseUsageRequestType *ns1__QueryLicenseUsage;	/* optional element of type ns1:QueryLicenseUsageRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetLicenseEdition
#define SOAP_TYPE___ns1__SetLicenseEdition (5281)
/* Operation wrapper: */
struct __ns1__SetLicenseEdition
{
public:
	ns1__SetLicenseEditionRequestType *ns1__SetLicenseEdition;	/* optional element of type ns1:SetLicenseEditionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckLicenseFeature
#define SOAP_TYPE___ns1__CheckLicenseFeature (5285)
/* Operation wrapper: */
struct __ns1__CheckLicenseFeature
{
public:
	ns1__CheckLicenseFeatureRequestType *ns1__CheckLicenseFeature;	/* optional element of type ns1:CheckLicenseFeatureRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableFeature
#define SOAP_TYPE___ns1__EnableFeature (5289)
/* Operation wrapper: */
struct __ns1__EnableFeature
{
public:
	ns1__EnableFeatureRequestType *ns1__EnableFeature;	/* optional element of type ns1:EnableFeatureRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableFeature
#define SOAP_TYPE___ns1__DisableFeature (5293)
/* Operation wrapper: */
struct __ns1__DisableFeature
{
public:
	ns1__DisableFeatureRequestType *ns1__DisableFeature;	/* optional element of type ns1:DisableFeatureRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ConfigureLicenseSource
#define SOAP_TYPE___ns1__ConfigureLicenseSource (5297)
/* Operation wrapper: */
struct __ns1__ConfigureLicenseSource
{
public:
	ns1__ConfigureLicenseSourceRequestType *ns1__ConfigureLicenseSource;	/* optional element of type ns1:ConfigureLicenseSourceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateLicense
#define SOAP_TYPE___ns1__UpdateLicense (5301)
/* Operation wrapper: */
struct __ns1__UpdateLicense
{
public:
	ns1__UpdateLicenseRequestType *ns1__UpdateLicense;	/* optional element of type ns1:UpdateLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddLicense
#define SOAP_TYPE___ns1__AddLicense (5305)
/* Operation wrapper: */
struct __ns1__AddLicense
{
public:
	ns1__AddLicenseRequestType *ns1__AddLicense;	/* optional element of type ns1:AddLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveLicense
#define SOAP_TYPE___ns1__RemoveLicense (5309)
/* Operation wrapper: */
struct __ns1__RemoveLicense
{
public:
	ns1__RemoveLicenseRequestType *ns1__RemoveLicense;	/* optional element of type ns1:RemoveLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DecodeLicense
#define SOAP_TYPE___ns1__DecodeLicense (5313)
/* Operation wrapper: */
struct __ns1__DecodeLicense
{
public:
	ns1__DecodeLicenseRequestType *ns1__DecodeLicense;	/* optional element of type ns1:DecodeLicenseRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateLicenseLabel
#define SOAP_TYPE___ns1__UpdateLicenseLabel (5317)
/* Operation wrapper: */
struct __ns1__UpdateLicenseLabel
{
public:
	ns1__UpdateLicenseLabelRequestType *ns1__UpdateLicenseLabel;	/* optional element of type ns1:UpdateLicenseLabelRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveLicenseLabel
#define SOAP_TYPE___ns1__RemoveLicenseLabel (5321)
/* Operation wrapper: */
struct __ns1__RemoveLicenseLabel
{
public:
	ns1__RemoveLicenseLabelRequestType *ns1__RemoveLicenseLabel;	/* optional element of type ns1:RemoveLicenseLabelRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Reload
#define SOAP_TYPE___ns1__Reload (5325)
/* Operation wrapper: */
struct __ns1__Reload
{
public:
	ns1__ReloadRequestType *ns1__Reload;	/* optional element of type ns1:ReloadRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Rename_USCORETask
#define SOAP_TYPE___ns1__Rename_USCORETask (5329)
/* Operation wrapper: */
struct __ns1__Rename_USCORETask
{
public:
	ns1__RenameRequestType *ns1__Rename_USCORETask;	/* optional element of type ns1:RenameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Destroy_USCORETask
#define SOAP_TYPE___ns1__Destroy_USCORETask (5333)
/* Operation wrapper: */
struct __ns1__Destroy_USCORETask
{
public:
	ns1__DestroyRequestType *ns1__Destroy_USCORETask;	/* optional element of type ns1:DestroyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyNetwork
#define SOAP_TYPE___ns1__DestroyNetwork (5337)
/* Operation wrapper: */
struct __ns1__DestroyNetwork
{
public:
	ns1__DestroyNetworkRequestType *ns1__DestroyNetwork;	/* optional element of type ns1:DestroyNetworkRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ValidateHost
#define SOAP_TYPE___ns1__ValidateHost (5341)
/* Operation wrapper: */
struct __ns1__ValidateHost
{
public:
	ns1__ValidateHostRequestType *ns1__ValidateHost;	/* optional element of type ns1:ValidateHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ParseDescriptor
#define SOAP_TYPE___ns1__ParseDescriptor (5345)
/* Operation wrapper: */
struct __ns1__ParseDescriptor
{
public:
	ns1__ParseDescriptorRequestType *ns1__ParseDescriptor;	/* optional element of type ns1:ParseDescriptorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateImportSpec
#define SOAP_TYPE___ns1__CreateImportSpec (5349)
/* Operation wrapper: */
struct __ns1__CreateImportSpec
{
public:
	ns1__CreateImportSpecRequestType *ns1__CreateImportSpec;	/* optional element of type ns1:CreateImportSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDescriptor
#define SOAP_TYPE___ns1__CreateDescriptor (5353)
/* Operation wrapper: */
struct __ns1__CreateDescriptor
{
public:
	ns1__CreateDescriptorRequestType *ns1__CreateDescriptor;	/* optional element of type ns1:CreateDescriptorRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPerfProviderSummary
#define SOAP_TYPE___ns1__QueryPerfProviderSummary (5357)
/* Operation wrapper: */
struct __ns1__QueryPerfProviderSummary
{
public:
	ns1__QueryPerfProviderSummaryRequestType *ns1__QueryPerfProviderSummary;	/* optional element of type ns1:QueryPerfProviderSummaryRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAvailablePerfMetric
#define SOAP_TYPE___ns1__QueryAvailablePerfMetric (5361)
/* Operation wrapper: */
struct __ns1__QueryAvailablePerfMetric
{
public:
	ns1__QueryAvailablePerfMetricRequestType *ns1__QueryAvailablePerfMetric;	/* optional element of type ns1:QueryAvailablePerfMetricRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPerfCounter
#define SOAP_TYPE___ns1__QueryPerfCounter (5365)
/* Operation wrapper: */
struct __ns1__QueryPerfCounter
{
public:
	ns1__QueryPerfCounterRequestType *ns1__QueryPerfCounter;	/* optional element of type ns1:QueryPerfCounterRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPerfCounterByLevel
#define SOAP_TYPE___ns1__QueryPerfCounterByLevel (5369)
/* Operation wrapper: */
struct __ns1__QueryPerfCounterByLevel
{
public:
	ns1__QueryPerfCounterByLevelRequestType *ns1__QueryPerfCounterByLevel;	/* optional element of type ns1:QueryPerfCounterByLevelRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPerf
#define SOAP_TYPE___ns1__QueryPerf (5373)
/* Operation wrapper: */
struct __ns1__QueryPerf
{
public:
	ns1__QueryPerfRequestType *ns1__QueryPerf;	/* optional element of type ns1:QueryPerfRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPerfComposite
#define SOAP_TYPE___ns1__QueryPerfComposite (5377)
/* Operation wrapper: */
struct __ns1__QueryPerfComposite
{
public:
	ns1__QueryPerfCompositeRequestType *ns1__QueryPerfComposite;	/* optional element of type ns1:QueryPerfCompositeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreatePerfInterval
#define SOAP_TYPE___ns1__CreatePerfInterval (5381)
/* Operation wrapper: */
struct __ns1__CreatePerfInterval
{
public:
	ns1__CreatePerfIntervalRequestType *ns1__CreatePerfInterval;	/* optional element of type ns1:CreatePerfIntervalRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemovePerfInterval
#define SOAP_TYPE___ns1__RemovePerfInterval (5385)
/* Operation wrapper: */
struct __ns1__RemovePerfInterval
{
public:
	ns1__RemovePerfIntervalRequestType *ns1__RemovePerfInterval;	/* optional element of type ns1:RemovePerfIntervalRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdatePerfInterval
#define SOAP_TYPE___ns1__UpdatePerfInterval (5389)
/* Operation wrapper: */
struct __ns1__UpdatePerfInterval
{
public:
	ns1__UpdatePerfIntervalRequestType *ns1__UpdatePerfInterval;	/* optional element of type ns1:UpdatePerfIntervalRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EstimateDatabaseSize
#define SOAP_TYPE___ns1__EstimateDatabaseSize (5393)
/* Operation wrapper: */
struct __ns1__EstimateDatabaseSize
{
public:
	ns1__EstimateDatabaseSizeRequestType *ns1__EstimateDatabaseSize;	/* optional element of type ns1:EstimateDatabaseSizeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateConfig
#define SOAP_TYPE___ns1__UpdateConfig (5397)
/* Operation wrapper: */
struct __ns1__UpdateConfig
{
public:
	ns1__UpdateConfigRequestType *ns1__UpdateConfig;	/* optional element of type ns1:UpdateConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveIntoResourcePool
#define SOAP_TYPE___ns1__MoveIntoResourcePool (5401)
/* Operation wrapper: */
struct __ns1__MoveIntoResourcePool
{
public:
	ns1__MoveIntoResourcePoolRequestType *ns1__MoveIntoResourcePool;	/* optional element of type ns1:MoveIntoResourcePoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateChildResourceConfiguration
#define SOAP_TYPE___ns1__UpdateChildResourceConfiguration (5405)
/* Operation wrapper: */
struct __ns1__UpdateChildResourceConfiguration
{
public:
	ns1__UpdateChildResourceConfigurationRequestType *ns1__UpdateChildResourceConfiguration;	/* optional element of type ns1:UpdateChildResourceConfigurationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateResourcePool
#define SOAP_TYPE___ns1__CreateResourcePool (5409)
/* Operation wrapper: */
struct __ns1__CreateResourcePool
{
public:
	ns1__CreateResourcePoolRequestType *ns1__CreateResourcePool;	/* optional element of type ns1:CreateResourcePoolRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyChildren
#define SOAP_TYPE___ns1__DestroyChildren (5413)
/* Operation wrapper: */
struct __ns1__DestroyChildren
{
public:
	ns1__DestroyChildrenRequestType *ns1__DestroyChildren;	/* optional element of type ns1:DestroyChildrenRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVApp
#define SOAP_TYPE___ns1__CreateVApp (5417)
/* Operation wrapper: */
struct __ns1__CreateVApp
{
public:
	ns1__CreateVAppRequestType *ns1__CreateVApp;	/* optional element of type ns1:CreateVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateChildVM_USCORETask
#define SOAP_TYPE___ns1__CreateChildVM_USCORETask (5421)
/* Operation wrapper: */
struct __ns1__CreateChildVM_USCORETask
{
public:
	ns1__CreateChildVMRequestType *ns1__CreateChildVM_USCORETask;	/* optional element of type ns1:CreateChildVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RegisterChildVM_USCORETask
#define SOAP_TYPE___ns1__RegisterChildVM_USCORETask (5425)
/* Operation wrapper: */
struct __ns1__RegisterChildVM_USCORETask
{
public:
	ns1__RegisterChildVMRequestType *ns1__RegisterChildVM_USCORETask;	/* optional element of type ns1:RegisterChildVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ImportVApp
#define SOAP_TYPE___ns1__ImportVApp (5429)
/* Operation wrapper: */
struct __ns1__ImportVApp
{
public:
	ns1__ImportVAppRequestType *ns1__ImportVApp;	/* optional element of type ns1:ImportVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryResourceConfigOption
#define SOAP_TYPE___ns1__QueryResourceConfigOption (5433)
/* Operation wrapper: */
struct __ns1__QueryResourceConfigOption
{
public:
	ns1__QueryResourceConfigOptionRequestType *ns1__QueryResourceConfigOption;	/* optional element of type ns1:QueryResourceConfigOptionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshRuntime
#define SOAP_TYPE___ns1__RefreshRuntime (5437)
/* Operation wrapper: */
struct __ns1__RefreshRuntime
{
public:
	ns1__RefreshRuntimeRequestType *ns1__RefreshRuntime;	/* optional element of type ns1:RefreshRuntimeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindByUuid
#define SOAP_TYPE___ns1__FindByUuid (5441)
/* Operation wrapper: */
struct __ns1__FindByUuid
{
public:
	ns1__FindByUuidRequestType *ns1__FindByUuid;	/* optional element of type ns1:FindByUuidRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindByDatastorePath
#define SOAP_TYPE___ns1__FindByDatastorePath (5445)
/* Operation wrapper: */
struct __ns1__FindByDatastorePath
{
public:
	ns1__FindByDatastorePathRequestType *ns1__FindByDatastorePath;	/* optional element of type ns1:FindByDatastorePathRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindByDnsName
#define SOAP_TYPE___ns1__FindByDnsName (5449)
/* Operation wrapper: */
struct __ns1__FindByDnsName
{
public:
	ns1__FindByDnsNameRequestType *ns1__FindByDnsName;	/* optional element of type ns1:FindByDnsNameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindByIp
#define SOAP_TYPE___ns1__FindByIp (5453)
/* Operation wrapper: */
struct __ns1__FindByIp
{
public:
	ns1__FindByIpRequestType *ns1__FindByIp;	/* optional element of type ns1:FindByIpRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindByInventoryPath
#define SOAP_TYPE___ns1__FindByInventoryPath (5457)
/* Operation wrapper: */
struct __ns1__FindByInventoryPath
{
public:
	ns1__FindByInventoryPathRequestType *ns1__FindByInventoryPath;	/* optional element of type ns1:FindByInventoryPathRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindChild
#define SOAP_TYPE___ns1__FindChild (5461)
/* Operation wrapper: */
struct __ns1__FindChild
{
public:
	ns1__FindChildRequestType *ns1__FindChild;	/* optional element of type ns1:FindChildRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindAllByUuid
#define SOAP_TYPE___ns1__FindAllByUuid (5465)
/* Operation wrapper: */
struct __ns1__FindAllByUuid
{
public:
	ns1__FindAllByUuidRequestType *ns1__FindAllByUuid;	/* optional element of type ns1:FindAllByUuidRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindAllByDnsName
#define SOAP_TYPE___ns1__FindAllByDnsName (5469)
/* Operation wrapper: */
struct __ns1__FindAllByDnsName
{
public:
	ns1__FindAllByDnsNameRequestType *ns1__FindAllByDnsName;	/* optional element of type ns1:FindAllByDnsNameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindAllByIp
#define SOAP_TYPE___ns1__FindAllByIp (5473)
/* Operation wrapper: */
struct __ns1__FindAllByIp
{
public:
	ns1__FindAllByIpRequestType *ns1__FindAllByIp;	/* optional element of type ns1:FindAllByIpRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CurrentTime
#define SOAP_TYPE___ns1__CurrentTime (5477)
/* Operation wrapper: */
struct __ns1__CurrentTime
{
public:
	ns1__CurrentTimeRequestType *ns1__CurrentTime;	/* optional element of type ns1:CurrentTimeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveServiceContent
#define SOAP_TYPE___ns1__RetrieveServiceContent (5481)
/* Operation wrapper: */
struct __ns1__RetrieveServiceContent
{
public:
	ns1__RetrieveServiceContentRequestType *ns1__RetrieveServiceContent;	/* optional element of type ns1:RetrieveServiceContentRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ValidateMigration
#define SOAP_TYPE___ns1__ValidateMigration (5485)
/* Operation wrapper: */
struct __ns1__ValidateMigration
{
public:
	ns1__ValidateMigrationRequestType *ns1__ValidateMigration;	/* optional element of type ns1:ValidateMigrationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVMotionCompatibility
#define SOAP_TYPE___ns1__QueryVMotionCompatibility (5489)
/* Operation wrapper: */
struct __ns1__QueryVMotionCompatibility
{
public:
	ns1__QueryVMotionCompatibilityRequestType *ns1__QueryVMotionCompatibility;	/* optional element of type ns1:QueryVMotionCompatibilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveProductComponents
#define SOAP_TYPE___ns1__RetrieveProductComponents (5493)
/* Operation wrapper: */
struct __ns1__RetrieveProductComponents
{
public:
	ns1__RetrieveProductComponentsRequestType *ns1__RetrieveProductComponents;	/* optional element of type ns1:RetrieveProductComponentsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateServiceMessage
#define SOAP_TYPE___ns1__UpdateServiceMessage (5497)
/* Operation wrapper: */
struct __ns1__UpdateServiceMessage
{
public:
	ns1__UpdateServiceMessageRequestType *ns1__UpdateServiceMessage;	/* optional element of type ns1:UpdateServiceMessageRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Login
#define SOAP_TYPE___ns1__Login (5501)
/* Operation wrapper: */
struct __ns1__Login
{
public:
	ns1__LoginRequestType *ns1__Login;	/* optional element of type ns1:LoginRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__LoginBySSPI
#define SOAP_TYPE___ns1__LoginBySSPI (5505)
/* Operation wrapper: */
struct __ns1__LoginBySSPI
{
public:
	ns1__LoginBySSPIRequestType *ns1__LoginBySSPI;	/* optional element of type ns1:LoginBySSPIRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Logout
#define SOAP_TYPE___ns1__Logout (5509)
/* Operation wrapper: */
struct __ns1__Logout
{
public:
	ns1__LogoutRequestType *ns1__Logout;	/* optional element of type ns1:LogoutRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcquireLocalTicket
#define SOAP_TYPE___ns1__AcquireLocalTicket (5513)
/* Operation wrapper: */
struct __ns1__AcquireLocalTicket
{
public:
	ns1__AcquireLocalTicketRequestType *ns1__AcquireLocalTicket;	/* optional element of type ns1:AcquireLocalTicketRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__TerminateSession
#define SOAP_TYPE___ns1__TerminateSession (5517)
/* Operation wrapper: */
struct __ns1__TerminateSession
{
public:
	ns1__TerminateSessionRequestType *ns1__TerminateSession;	/* optional element of type ns1:TerminateSessionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetLocale
#define SOAP_TYPE___ns1__SetLocale (5521)
/* Operation wrapper: */
struct __ns1__SetLocale
{
public:
	ns1__SetLocaleRequestType *ns1__SetLocale;	/* optional element of type ns1:SetLocaleRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__LoginExtensionBySubjectName
#define SOAP_TYPE___ns1__LoginExtensionBySubjectName (5525)
/* Operation wrapper: */
struct __ns1__LoginExtensionBySubjectName
{
public:
	ns1__LoginExtensionBySubjectNameRequestType *ns1__LoginExtensionBySubjectName;	/* optional element of type ns1:LoginExtensionBySubjectNameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__LoginExtensionByCertificate
#define SOAP_TYPE___ns1__LoginExtensionByCertificate (5529)
/* Operation wrapper: */
struct __ns1__LoginExtensionByCertificate
{
public:
	ns1__LoginExtensionByCertificateRequestType *ns1__LoginExtensionByCertificate;	/* optional element of type ns1:LoginExtensionByCertificateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ImpersonateUser
#define SOAP_TYPE___ns1__ImpersonateUser (5533)
/* Operation wrapper: */
struct __ns1__ImpersonateUser
{
public:
	ns1__ImpersonateUserRequestType *ns1__ImpersonateUser;	/* optional element of type ns1:ImpersonateUserRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SessionIsActive
#define SOAP_TYPE___ns1__SessionIsActive (5537)
/* Operation wrapper: */
struct __ns1__SessionIsActive
{
public:
	ns1__SessionIsActiveRequestType *ns1__SessionIsActive;	/* optional element of type ns1:SessionIsActiveRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcquireCloneTicket
#define SOAP_TYPE___ns1__AcquireCloneTicket (5541)
/* Operation wrapper: */
struct __ns1__AcquireCloneTicket
{
public:
	ns1__AcquireCloneTicketRequestType *ns1__AcquireCloneTicket;	/* optional element of type ns1:AcquireCloneTicketRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CloneSession
#define SOAP_TYPE___ns1__CloneSession (5545)
/* Operation wrapper: */
struct __ns1__CloneSession
{
public:
	ns1__CloneSessionRequestType *ns1__CloneSession;	/* optional element of type ns1:CloneSessionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ConfigureDatastoreIORM_USCORETask
#define SOAP_TYPE___ns1__ConfigureDatastoreIORM_USCORETask (5549)
/* Operation wrapper: */
struct __ns1__ConfigureDatastoreIORM_USCORETask
{
public:
	ns1__ConfigureDatastoreIORMRequestType *ns1__ConfigureDatastoreIORM_USCORETask;	/* optional element of type ns1:ConfigureDatastoreIORMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryIORMConfigOption
#define SOAP_TYPE___ns1__QueryIORMConfigOption (5553)
/* Operation wrapper: */
struct __ns1__QueryIORMConfigOption
{
public:
	ns1__QueryIORMConfigOptionRequestType *ns1__QueryIORMConfigOption;	/* optional element of type ns1:QueryIORMConfigOptionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CancelTask
#define SOAP_TYPE___ns1__CancelTask (5557)
/* Operation wrapper: */
struct __ns1__CancelTask
{
public:
	ns1__CancelTaskRequestType *ns1__CancelTask;	/* optional element of type ns1:CancelTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateProgress
#define SOAP_TYPE___ns1__UpdateProgress (5561)
/* Operation wrapper: */
struct __ns1__UpdateProgress
{
public:
	ns1__UpdateProgressRequestType *ns1__UpdateProgress;	/* optional element of type ns1:UpdateProgressRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTaskState
#define SOAP_TYPE___ns1__SetTaskState (5565)
/* Operation wrapper: */
struct __ns1__SetTaskState
{
public:
	ns1__SetTaskStateRequestType *ns1__SetTaskState;	/* optional element of type ns1:SetTaskStateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTaskDescription
#define SOAP_TYPE___ns1__SetTaskDescription (5569)
/* Operation wrapper: */
struct __ns1__SetTaskDescription
{
public:
	ns1__SetTaskDescriptionRequestType *ns1__SetTaskDescription;	/* optional element of type ns1:SetTaskDescriptionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReadNextTasks
#define SOAP_TYPE___ns1__ReadNextTasks (5573)
/* Operation wrapper: */
struct __ns1__ReadNextTasks
{
public:
	ns1__ReadNextTasksRequestType *ns1__ReadNextTasks;	/* optional element of type ns1:ReadNextTasksRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReadPreviousTasks
#define SOAP_TYPE___ns1__ReadPreviousTasks (5577)
/* Operation wrapper: */
struct __ns1__ReadPreviousTasks
{
public:
	ns1__ReadPreviousTasksRequestType *ns1__ReadPreviousTasks;	/* optional element of type ns1:ReadPreviousTasksRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateCollectorForTasks
#define SOAP_TYPE___ns1__CreateCollectorForTasks (5581)
/* Operation wrapper: */
struct __ns1__CreateCollectorForTasks
{
public:
	ns1__CreateCollectorForTasksRequestType *ns1__CreateCollectorForTasks;	/* optional element of type ns1:CreateCollectorForTasksRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateTask
#define SOAP_TYPE___ns1__CreateTask (5585)
/* Operation wrapper: */
struct __ns1__CreateTask
{
public:
	ns1__CreateTaskRequestType *ns1__CreateTask;	/* optional element of type ns1:CreateTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveUserGroups
#define SOAP_TYPE___ns1__RetrieveUserGroups (5589)
/* Operation wrapper: */
struct __ns1__RetrieveUserGroups
{
public:
	ns1__RetrieveUserGroupsRequestType *ns1__RetrieveUserGroups;	/* optional element of type ns1:RetrieveUserGroupsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateVAppConfig
#define SOAP_TYPE___ns1__UpdateVAppConfig (5593)
/* Operation wrapper: */
struct __ns1__UpdateVAppConfig
{
public:
	ns1__UpdateVAppConfigRequestType *ns1__UpdateVAppConfig;	/* optional element of type ns1:UpdateVAppConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateLinkedChildren
#define SOAP_TYPE___ns1__UpdateLinkedChildren (5597)
/* Operation wrapper: */
struct __ns1__UpdateLinkedChildren
{
public:
	ns1__UpdateLinkedChildrenRequestType *ns1__UpdateLinkedChildren;	/* optional element of type ns1:UpdateLinkedChildrenRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CloneVApp_USCORETask
#define SOAP_TYPE___ns1__CloneVApp_USCORETask (5601)
/* Operation wrapper: */
struct __ns1__CloneVApp_USCORETask
{
public:
	ns1__CloneVAppRequestType *ns1__CloneVApp_USCORETask;	/* optional element of type ns1:CloneVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExportVApp
#define SOAP_TYPE___ns1__ExportVApp (5605)
/* Operation wrapper: */
struct __ns1__ExportVApp
{
public:
	ns1__ExportVAppRequestType *ns1__ExportVApp;	/* optional element of type ns1:ExportVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerOnVApp_USCORETask
#define SOAP_TYPE___ns1__PowerOnVApp_USCORETask (5609)
/* Operation wrapper: */
struct __ns1__PowerOnVApp_USCORETask
{
public:
	ns1__PowerOnVAppRequestType *ns1__PowerOnVApp_USCORETask;	/* optional element of type ns1:PowerOnVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerOffVApp_USCORETask
#define SOAP_TYPE___ns1__PowerOffVApp_USCORETask (5613)
/* Operation wrapper: */
struct __ns1__PowerOffVApp_USCORETask
{
public:
	ns1__PowerOffVAppRequestType *ns1__PowerOffVApp_USCORETask;	/* optional element of type ns1:PowerOffVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SuspendVApp_USCORETask
#define SOAP_TYPE___ns1__SuspendVApp_USCORETask (5617)
/* Operation wrapper: */
struct __ns1__SuspendVApp_USCORETask
{
public:
	ns1__SuspendVAppRequestType *ns1__SuspendVApp_USCORETask;	/* optional element of type ns1:SuspendVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__unregisterVApp_USCORETask
#define SOAP_TYPE___ns1__unregisterVApp_USCORETask (5621)
/* Operation wrapper: */
struct __ns1__unregisterVApp_USCORETask
{
public:
	ns1__unregisterVAppRequestType *ns1__unregisterVApp_USCORETask;	/* optional element of type ns1:unregisterVAppRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__CreateVirtualDisk_USCORETask (5625)
/* Operation wrapper: */
struct __ns1__CreateVirtualDisk_USCORETask
{
public:
	ns1__CreateVirtualDiskRequestType *ns1__CreateVirtualDisk_USCORETask;	/* optional element of type ns1:CreateVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__DeleteVirtualDisk_USCORETask (5629)
/* Operation wrapper: */
struct __ns1__DeleteVirtualDisk_USCORETask
{
public:
	ns1__DeleteVirtualDiskRequestType *ns1__DeleteVirtualDisk_USCORETask;	/* optional element of type ns1:DeleteVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__MoveVirtualDisk_USCORETask (5633)
/* Operation wrapper: */
struct __ns1__MoveVirtualDisk_USCORETask
{
public:
	ns1__MoveVirtualDiskRequestType *ns1__MoveVirtualDisk_USCORETask;	/* optional element of type ns1:MoveVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CopyVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__CopyVirtualDisk_USCORETask (5637)
/* Operation wrapper: */
struct __ns1__CopyVirtualDisk_USCORETask
{
public:
	ns1__CopyVirtualDiskRequestType *ns1__CopyVirtualDisk_USCORETask;	/* optional element of type ns1:CopyVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExtendVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__ExtendVirtualDisk_USCORETask (5641)
/* Operation wrapper: */
struct __ns1__ExtendVirtualDisk_USCORETask
{
public:
	ns1__ExtendVirtualDiskRequestType *ns1__ExtendVirtualDisk_USCORETask;	/* optional element of type ns1:ExtendVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVirtualDiskFragmentation
#define SOAP_TYPE___ns1__QueryVirtualDiskFragmentation (5645)
/* Operation wrapper: */
struct __ns1__QueryVirtualDiskFragmentation
{
public:
	ns1__QueryVirtualDiskFragmentationRequestType *ns1__QueryVirtualDiskFragmentation;	/* optional element of type ns1:QueryVirtualDiskFragmentationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DefragmentVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__DefragmentVirtualDisk_USCORETask (5649)
/* Operation wrapper: */
struct __ns1__DefragmentVirtualDisk_USCORETask
{
public:
	ns1__DefragmentVirtualDiskRequestType *ns1__DefragmentVirtualDisk_USCORETask;	/* optional element of type ns1:DefragmentVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ShrinkVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__ShrinkVirtualDisk_USCORETask (5653)
/* Operation wrapper: */
struct __ns1__ShrinkVirtualDisk_USCORETask
{
public:
	ns1__ShrinkVirtualDiskRequestType *ns1__ShrinkVirtualDisk_USCORETask;	/* optional element of type ns1:ShrinkVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__InflateVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__InflateVirtualDisk_USCORETask (5657)
/* Operation wrapper: */
struct __ns1__InflateVirtualDisk_USCORETask
{
public:
	ns1__InflateVirtualDiskRequestType *ns1__InflateVirtualDisk_USCORETask;	/* optional element of type ns1:InflateVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EagerZeroVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__EagerZeroVirtualDisk_USCORETask (5661)
/* Operation wrapper: */
struct __ns1__EagerZeroVirtualDisk_USCORETask
{
public:
	ns1__EagerZeroVirtualDiskRequestType *ns1__EagerZeroVirtualDisk_USCORETask;	/* optional element of type ns1:EagerZeroVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ZeroFillVirtualDisk_USCORETask
#define SOAP_TYPE___ns1__ZeroFillVirtualDisk_USCORETask (5665)
/* Operation wrapper: */
struct __ns1__ZeroFillVirtualDisk_USCORETask
{
public:
	ns1__ZeroFillVirtualDiskRequestType *ns1__ZeroFillVirtualDisk_USCORETask;	/* optional element of type ns1:ZeroFillVirtualDiskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetVirtualDiskUuid
#define SOAP_TYPE___ns1__SetVirtualDiskUuid (5669)
/* Operation wrapper: */
struct __ns1__SetVirtualDiskUuid
{
public:
	ns1__SetVirtualDiskUuidRequestType *ns1__SetVirtualDiskUuid;	/* optional element of type ns1:SetVirtualDiskUuidRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVirtualDiskUuid
#define SOAP_TYPE___ns1__QueryVirtualDiskUuid (5673)
/* Operation wrapper: */
struct __ns1__QueryVirtualDiskUuid
{
public:
	ns1__QueryVirtualDiskUuidRequestType *ns1__QueryVirtualDiskUuid;	/* optional element of type ns1:QueryVirtualDiskUuidRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVirtualDiskGeometry
#define SOAP_TYPE___ns1__QueryVirtualDiskGeometry (5677)
/* Operation wrapper: */
struct __ns1__QueryVirtualDiskGeometry
{
public:
	ns1__QueryVirtualDiskGeometryRequestType *ns1__QueryVirtualDiskGeometry;	/* optional element of type ns1:QueryVirtualDiskGeometryRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshStorageInfo
#define SOAP_TYPE___ns1__RefreshStorageInfo (5681)
/* Operation wrapper: */
struct __ns1__RefreshStorageInfo
{
public:
	ns1__RefreshStorageInfoRequestType *ns1__RefreshStorageInfo;	/* optional element of type ns1:RefreshStorageInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateSnapshot_USCORETask
#define SOAP_TYPE___ns1__CreateSnapshot_USCORETask (5685)
/* Operation wrapper: */
struct __ns1__CreateSnapshot_USCORETask
{
public:
	ns1__CreateSnapshotRequestType *ns1__CreateSnapshot_USCORETask;	/* optional element of type ns1:CreateSnapshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RevertToCurrentSnapshot_USCORETask
#define SOAP_TYPE___ns1__RevertToCurrentSnapshot_USCORETask (5689)
/* Operation wrapper: */
struct __ns1__RevertToCurrentSnapshot_USCORETask
{
public:
	ns1__RevertToCurrentSnapshotRequestType *ns1__RevertToCurrentSnapshot_USCORETask;	/* optional element of type ns1:RevertToCurrentSnapshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveAllSnapshots_USCORETask
#define SOAP_TYPE___ns1__RemoveAllSnapshots_USCORETask (5693)
/* Operation wrapper: */
struct __ns1__RemoveAllSnapshots_USCORETask
{
public:
	ns1__RemoveAllSnapshotsRequestType *ns1__RemoveAllSnapshots_USCORETask;	/* optional element of type ns1:RemoveAllSnapshotsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigVM_USCORETask
#define SOAP_TYPE___ns1__ReconfigVM_USCORETask (5697)
/* Operation wrapper: */
struct __ns1__ReconfigVM_USCORETask
{
public:
	ns1__ReconfigVMRequestType *ns1__ReconfigVM_USCORETask;	/* optional element of type ns1:ReconfigVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpgradeVM_USCORETask
#define SOAP_TYPE___ns1__UpgradeVM_USCORETask (5701)
/* Operation wrapper: */
struct __ns1__UpgradeVM_USCORETask
{
public:
	ns1__UpgradeVMRequestType *ns1__UpgradeVM_USCORETask;	/* optional element of type ns1:UpgradeVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExtractOvfEnvironment
#define SOAP_TYPE___ns1__ExtractOvfEnvironment (5705)
/* Operation wrapper: */
struct __ns1__ExtractOvfEnvironment
{
public:
	ns1__ExtractOvfEnvironmentRequestType *ns1__ExtractOvfEnvironment;	/* optional element of type ns1:ExtractOvfEnvironmentRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerOnVM_USCORETask
#define SOAP_TYPE___ns1__PowerOnVM_USCORETask (5709)
/* Operation wrapper: */
struct __ns1__PowerOnVM_USCORETask
{
public:
	ns1__PowerOnVMRequestType *ns1__PowerOnVM_USCORETask;	/* optional element of type ns1:PowerOnVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PowerOffVM_USCORETask
#define SOAP_TYPE___ns1__PowerOffVM_USCORETask (5713)
/* Operation wrapper: */
struct __ns1__PowerOffVM_USCORETask
{
public:
	ns1__PowerOffVMRequestType *ns1__PowerOffVM_USCORETask;	/* optional element of type ns1:PowerOffVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SuspendVM_USCORETask
#define SOAP_TYPE___ns1__SuspendVM_USCORETask (5717)
/* Operation wrapper: */
struct __ns1__SuspendVM_USCORETask
{
public:
	ns1__SuspendVMRequestType *ns1__SuspendVM_USCORETask;	/* optional element of type ns1:SuspendVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetVM_USCORETask
#define SOAP_TYPE___ns1__ResetVM_USCORETask (5721)
/* Operation wrapper: */
struct __ns1__ResetVM_USCORETask
{
public:
	ns1__ResetVMRequestType *ns1__ResetVM_USCORETask;	/* optional element of type ns1:ResetVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ShutdownGuest
#define SOAP_TYPE___ns1__ShutdownGuest (5725)
/* Operation wrapper: */
struct __ns1__ShutdownGuest
{
public:
	ns1__ShutdownGuestRequestType *ns1__ShutdownGuest;	/* optional element of type ns1:ShutdownGuestRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RebootGuest
#define SOAP_TYPE___ns1__RebootGuest (5729)
/* Operation wrapper: */
struct __ns1__RebootGuest
{
public:
	ns1__RebootGuestRequestType *ns1__RebootGuest;	/* optional element of type ns1:RebootGuestRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StandbyGuest
#define SOAP_TYPE___ns1__StandbyGuest (5733)
/* Operation wrapper: */
struct __ns1__StandbyGuest
{
public:
	ns1__StandbyGuestRequestType *ns1__StandbyGuest;	/* optional element of type ns1:StandbyGuestRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AnswerVM
#define SOAP_TYPE___ns1__AnswerVM (5737)
/* Operation wrapper: */
struct __ns1__AnswerVM
{
public:
	ns1__AnswerVMRequestType *ns1__AnswerVM;	/* optional element of type ns1:AnswerVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CustomizeVM_USCORETask
#define SOAP_TYPE___ns1__CustomizeVM_USCORETask (5741)
/* Operation wrapper: */
struct __ns1__CustomizeVM_USCORETask
{
public:
	ns1__CustomizeVMRequestType *ns1__CustomizeVM_USCORETask;	/* optional element of type ns1:CustomizeVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckCustomizationSpec
#define SOAP_TYPE___ns1__CheckCustomizationSpec (5745)
/* Operation wrapper: */
struct __ns1__CheckCustomizationSpec
{
public:
	ns1__CheckCustomizationSpecRequestType *ns1__CheckCustomizationSpec;	/* optional element of type ns1:CheckCustomizationSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MigrateVM_USCORETask
#define SOAP_TYPE___ns1__MigrateVM_USCORETask (5749)
/* Operation wrapper: */
struct __ns1__MigrateVM_USCORETask
{
public:
	ns1__MigrateVMRequestType *ns1__MigrateVM_USCORETask;	/* optional element of type ns1:MigrateVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RelocateVM_USCORETask
#define SOAP_TYPE___ns1__RelocateVM_USCORETask (5753)
/* Operation wrapper: */
struct __ns1__RelocateVM_USCORETask
{
public:
	ns1__RelocateVMRequestType *ns1__RelocateVM_USCORETask;	/* optional element of type ns1:RelocateVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CloneVM_USCORETask
#define SOAP_TYPE___ns1__CloneVM_USCORETask (5757)
/* Operation wrapper: */
struct __ns1__CloneVM_USCORETask
{
public:
	ns1__CloneVMRequestType *ns1__CloneVM_USCORETask;	/* optional element of type ns1:CloneVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExportVm
#define SOAP_TYPE___ns1__ExportVm (5761)
/* Operation wrapper: */
struct __ns1__ExportVm
{
public:
	ns1__ExportVmRequestType *ns1__ExportVm;	/* optional element of type ns1:ExportVmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MarkAsTemplate
#define SOAP_TYPE___ns1__MarkAsTemplate (5765)
/* Operation wrapper: */
struct __ns1__MarkAsTemplate
{
public:
	ns1__MarkAsTemplateRequestType *ns1__MarkAsTemplate;	/* optional element of type ns1:MarkAsTemplateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MarkAsVirtualMachine
#define SOAP_TYPE___ns1__MarkAsVirtualMachine (5769)
/* Operation wrapper: */
struct __ns1__MarkAsVirtualMachine
{
public:
	ns1__MarkAsVirtualMachineRequestType *ns1__MarkAsVirtualMachine;	/* optional element of type ns1:MarkAsVirtualMachineRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnregisterVM
#define SOAP_TYPE___ns1__UnregisterVM (5773)
/* Operation wrapper: */
struct __ns1__UnregisterVM
{
public:
	ns1__UnregisterVMRequestType *ns1__UnregisterVM;	/* optional element of type ns1:UnregisterVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetGuestInformation
#define SOAP_TYPE___ns1__ResetGuestInformation (5777)
/* Operation wrapper: */
struct __ns1__ResetGuestInformation
{
public:
	ns1__ResetGuestInformationRequestType *ns1__ResetGuestInformation;	/* optional element of type ns1:ResetGuestInformationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MountToolsInstaller
#define SOAP_TYPE___ns1__MountToolsInstaller (5781)
/* Operation wrapper: */
struct __ns1__MountToolsInstaller
{
public:
	ns1__MountToolsInstallerRequestType *ns1__MountToolsInstaller;	/* optional element of type ns1:MountToolsInstallerRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnmountToolsInstaller
#define SOAP_TYPE___ns1__UnmountToolsInstaller (5785)
/* Operation wrapper: */
struct __ns1__UnmountToolsInstaller
{
public:
	ns1__UnmountToolsInstallerRequestType *ns1__UnmountToolsInstaller;	/* optional element of type ns1:UnmountToolsInstallerRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpgradeTools_USCORETask
#define SOAP_TYPE___ns1__UpgradeTools_USCORETask (5789)
/* Operation wrapper: */
struct __ns1__UpgradeTools_USCORETask
{
public:
	ns1__UpgradeToolsRequestType *ns1__UpgradeTools_USCORETask;	/* optional element of type ns1:UpgradeToolsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcquireMksTicket
#define SOAP_TYPE___ns1__AcquireMksTicket (5793)
/* Operation wrapper: */
struct __ns1__AcquireMksTicket
{
public:
	ns1__AcquireMksTicketRequestType *ns1__AcquireMksTicket;	/* optional element of type ns1:AcquireMksTicketRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcquireTicket
#define SOAP_TYPE___ns1__AcquireTicket (5797)
/* Operation wrapper: */
struct __ns1__AcquireTicket
{
public:
	ns1__AcquireTicketRequestType *ns1__AcquireTicket;	/* optional element of type ns1:AcquireTicketRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetScreenResolution
#define SOAP_TYPE___ns1__SetScreenResolution (5801)
/* Operation wrapper: */
struct __ns1__SetScreenResolution
{
public:
	ns1__SetScreenResolutionRequestType *ns1__SetScreenResolution;	/* optional element of type ns1:SetScreenResolutionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DefragmentAllDisks
#define SOAP_TYPE___ns1__DefragmentAllDisks (5805)
/* Operation wrapper: */
struct __ns1__DefragmentAllDisks
{
public:
	ns1__DefragmentAllDisksRequestType *ns1__DefragmentAllDisks;	/* optional element of type ns1:DefragmentAllDisksRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateSecondaryVM_USCORETask
#define SOAP_TYPE___ns1__CreateSecondaryVM_USCORETask (5809)
/* Operation wrapper: */
struct __ns1__CreateSecondaryVM_USCORETask
{
public:
	ns1__CreateSecondaryVMRequestType *ns1__CreateSecondaryVM_USCORETask;	/* optional element of type ns1:CreateSecondaryVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__TurnOffFaultToleranceForVM_USCORETask
#define SOAP_TYPE___ns1__TurnOffFaultToleranceForVM_USCORETask (5813)
/* Operation wrapper: */
struct __ns1__TurnOffFaultToleranceForVM_USCORETask
{
public:
	ns1__TurnOffFaultToleranceForVMRequestType *ns1__TurnOffFaultToleranceForVM_USCORETask;	/* optional element of type ns1:TurnOffFaultToleranceForVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__MakePrimaryVM_USCORETask
#define SOAP_TYPE___ns1__MakePrimaryVM_USCORETask (5817)
/* Operation wrapper: */
struct __ns1__MakePrimaryVM_USCORETask
{
public:
	ns1__MakePrimaryVMRequestType *ns1__MakePrimaryVM_USCORETask;	/* optional element of type ns1:MakePrimaryVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__TerminateFaultTolerantVM_USCORETask
#define SOAP_TYPE___ns1__TerminateFaultTolerantVM_USCORETask (5821)
/* Operation wrapper: */
struct __ns1__TerminateFaultTolerantVM_USCORETask
{
public:
	ns1__TerminateFaultTolerantVMRequestType *ns1__TerminateFaultTolerantVM_USCORETask;	/* optional element of type ns1:TerminateFaultTolerantVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableSecondaryVM_USCORETask
#define SOAP_TYPE___ns1__DisableSecondaryVM_USCORETask (5825)
/* Operation wrapper: */
struct __ns1__DisableSecondaryVM_USCORETask
{
public:
	ns1__DisableSecondaryVMRequestType *ns1__DisableSecondaryVM_USCORETask;	/* optional element of type ns1:DisableSecondaryVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableSecondaryVM_USCORETask
#define SOAP_TYPE___ns1__EnableSecondaryVM_USCORETask (5829)
/* Operation wrapper: */
struct __ns1__EnableSecondaryVM_USCORETask
{
public:
	ns1__EnableSecondaryVMRequestType *ns1__EnableSecondaryVM_USCORETask;	/* optional element of type ns1:EnableSecondaryVMRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetDisplayTopology
#define SOAP_TYPE___ns1__SetDisplayTopology (5833)
/* Operation wrapper: */
struct __ns1__SetDisplayTopology
{
public:
	ns1__SetDisplayTopologyRequestType *ns1__SetDisplayTopology;	/* optional element of type ns1:SetDisplayTopologyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StartRecording_USCORETask
#define SOAP_TYPE___ns1__StartRecording_USCORETask (5837)
/* Operation wrapper: */
struct __ns1__StartRecording_USCORETask
{
public:
	ns1__StartRecordingRequestType *ns1__StartRecording_USCORETask;	/* optional element of type ns1:StartRecordingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StopRecording_USCORETask
#define SOAP_TYPE___ns1__StopRecording_USCORETask (5841)
/* Operation wrapper: */
struct __ns1__StopRecording_USCORETask
{
public:
	ns1__StopRecordingRequestType *ns1__StopRecording_USCORETask;	/* optional element of type ns1:StopRecordingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StartReplaying_USCORETask
#define SOAP_TYPE___ns1__StartReplaying_USCORETask (5845)
/* Operation wrapper: */
struct __ns1__StartReplaying_USCORETask
{
public:
	ns1__StartReplayingRequestType *ns1__StartReplaying_USCORETask;	/* optional element of type ns1:StartReplayingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StopReplaying_USCORETask
#define SOAP_TYPE___ns1__StopReplaying_USCORETask (5849)
/* Operation wrapper: */
struct __ns1__StopReplaying_USCORETask
{
public:
	ns1__StopReplayingRequestType *ns1__StopReplaying_USCORETask;	/* optional element of type ns1:StopReplayingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PromoteDisks_USCORETask
#define SOAP_TYPE___ns1__PromoteDisks_USCORETask (5853)
/* Operation wrapper: */
struct __ns1__PromoteDisks_USCORETask
{
public:
	ns1__PromoteDisksRequestType *ns1__PromoteDisks_USCORETask;	/* optional element of type ns1:PromoteDisksRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateScreenshot_USCORETask
#define SOAP_TYPE___ns1__CreateScreenshot_USCORETask (5857)
/* Operation wrapper: */
struct __ns1__CreateScreenshot_USCORETask
{
public:
	ns1__CreateScreenshotRequestType *ns1__CreateScreenshot_USCORETask;	/* optional element of type ns1:CreateScreenshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryChangedDiskAreas
#define SOAP_TYPE___ns1__QueryChangedDiskAreas (5861)
/* Operation wrapper: */
struct __ns1__QueryChangedDiskAreas
{
public:
	ns1__QueryChangedDiskAreasRequestType *ns1__QueryChangedDiskAreas;	/* optional element of type ns1:QueryChangedDiskAreasRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUnownedFiles
#define SOAP_TYPE___ns1__QueryUnownedFiles (5865)
/* Operation wrapper: */
struct __ns1__QueryUnownedFiles
{
public:
	ns1__QueryUnownedFilesRequestType *ns1__QueryUnownedFiles;	/* optional element of type ns1:QueryUnownedFilesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__reloadVirtualMachineFromPath_USCORETask
#define SOAP_TYPE___ns1__reloadVirtualMachineFromPath_USCORETask (5869)
/* Operation wrapper: */
struct __ns1__reloadVirtualMachineFromPath_USCORETask
{
public:
	ns1__reloadVirtualMachineFromPathRequestType *ns1__reloadVirtualMachineFromPath_USCORETask;	/* optional element of type ns1:reloadVirtualMachineFromPathRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryFaultToleranceCompatibility
#define SOAP_TYPE___ns1__QueryFaultToleranceCompatibility (5873)
/* Operation wrapper: */
struct __ns1__QueryFaultToleranceCompatibility
{
public:
	ns1__QueryFaultToleranceCompatibilityRequestType *ns1__QueryFaultToleranceCompatibility;	/* optional element of type ns1:QueryFaultToleranceCompatibilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveAlarm
#define SOAP_TYPE___ns1__RemoveAlarm (5877)
/* Operation wrapper: */
struct __ns1__RemoveAlarm
{
public:
	ns1__RemoveAlarmRequestType *ns1__RemoveAlarm;	/* optional element of type ns1:RemoveAlarmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureAlarm
#define SOAP_TYPE___ns1__ReconfigureAlarm (5881)
/* Operation wrapper: */
struct __ns1__ReconfigureAlarm
{
public:
	ns1__ReconfigureAlarmRequestType *ns1__ReconfigureAlarm;	/* optional element of type ns1:ReconfigureAlarmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateAlarm
#define SOAP_TYPE___ns1__CreateAlarm (5885)
/* Operation wrapper: */
struct __ns1__CreateAlarm
{
public:
	ns1__CreateAlarmRequestType *ns1__CreateAlarm;	/* optional element of type ns1:CreateAlarmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAlarm
#define SOAP_TYPE___ns1__GetAlarm (5889)
/* Operation wrapper: */
struct __ns1__GetAlarm
{
public:
	ns1__GetAlarmRequestType *ns1__GetAlarm;	/* optional element of type ns1:GetAlarmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AreAlarmActionsEnabled
#define SOAP_TYPE___ns1__AreAlarmActionsEnabled (5893)
/* Operation wrapper: */
struct __ns1__AreAlarmActionsEnabled
{
public:
	ns1__AreAlarmActionsEnabledRequestType *ns1__AreAlarmActionsEnabled;	/* optional element of type ns1:AreAlarmActionsEnabledRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableAlarmActions
#define SOAP_TYPE___ns1__EnableAlarmActions (5897)
/* Operation wrapper: */
struct __ns1__EnableAlarmActions
{
public:
	ns1__EnableAlarmActionsRequestType *ns1__EnableAlarmActions;	/* optional element of type ns1:EnableAlarmActionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAlarmState
#define SOAP_TYPE___ns1__GetAlarmState (5901)
/* Operation wrapper: */
struct __ns1__GetAlarmState
{
public:
	ns1__GetAlarmStateRequestType *ns1__GetAlarmState;	/* optional element of type ns1:GetAlarmStateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AcknowledgeAlarm
#define SOAP_TYPE___ns1__AcknowledgeAlarm (5905)
/* Operation wrapper: */
struct __ns1__AcknowledgeAlarm
{
public:
	ns1__AcknowledgeAlarmRequestType *ns1__AcknowledgeAlarm;	/* optional element of type ns1:AcknowledgeAlarmRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureDVPortgroup_USCORETask
#define SOAP_TYPE___ns1__ReconfigureDVPortgroup_USCORETask (5909)
/* Operation wrapper: */
struct __ns1__ReconfigureDVPortgroup_USCORETask
{
public:
	ns1__ReconfigureDVPortgroupRequestType *ns1__ReconfigureDVPortgroup_USCORETask;	/* optional element of type ns1:ReconfigureDVPortgroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAvailableDvsSpec
#define SOAP_TYPE___ns1__QueryAvailableDvsSpec (5913)
/* Operation wrapper: */
struct __ns1__QueryAvailableDvsSpec
{
public:
	ns1__QueryAvailableDvsSpecRequestType *ns1__QueryAvailableDvsSpec;	/* optional element of type ns1:QueryAvailableDvsSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryCompatibleHostForNewDvs
#define SOAP_TYPE___ns1__QueryCompatibleHostForNewDvs (5917)
/* Operation wrapper: */
struct __ns1__QueryCompatibleHostForNewDvs
{
public:
	ns1__QueryCompatibleHostForNewDvsRequestType *ns1__QueryCompatibleHostForNewDvs;	/* optional element of type ns1:QueryCompatibleHostForNewDvsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryCompatibleHostForExistingDvs
#define SOAP_TYPE___ns1__QueryCompatibleHostForExistingDvs (5921)
/* Operation wrapper: */
struct __ns1__QueryCompatibleHostForExistingDvs
{
public:
	ns1__QueryCompatibleHostForExistingDvsRequestType *ns1__QueryCompatibleHostForExistingDvs;	/* optional element of type ns1:QueryCompatibleHostForExistingDvsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDvsCompatibleHostSpec
#define SOAP_TYPE___ns1__QueryDvsCompatibleHostSpec (5925)
/* Operation wrapper: */
struct __ns1__QueryDvsCompatibleHostSpec
{
public:
	ns1__QueryDvsCompatibleHostSpecRequestType *ns1__QueryDvsCompatibleHostSpec;	/* optional element of type ns1:QueryDvsCompatibleHostSpecRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDvsFeatureCapability
#define SOAP_TYPE___ns1__QueryDvsFeatureCapability (5929)
/* Operation wrapper: */
struct __ns1__QueryDvsFeatureCapability
{
public:
	ns1__QueryDvsFeatureCapabilityRequestType *ns1__QueryDvsFeatureCapability;	/* optional element of type ns1:QueryDvsFeatureCapabilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDvsByUuid
#define SOAP_TYPE___ns1__QueryDvsByUuid (5933)
/* Operation wrapper: */
struct __ns1__QueryDvsByUuid
{
public:
	ns1__QueryDvsByUuidRequestType *ns1__QueryDvsByUuid;	/* optional element of type ns1:QueryDvsByUuidRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDvsConfigTarget
#define SOAP_TYPE___ns1__QueryDvsConfigTarget (5937)
/* Operation wrapper: */
struct __ns1__QueryDvsConfigTarget
{
public:
	ns1__QueryDvsConfigTargetRequestType *ns1__QueryDvsConfigTarget;	/* optional element of type ns1:QueryDvsConfigTargetRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDvsCheckCompatibility
#define SOAP_TYPE___ns1__QueryDvsCheckCompatibility (5941)
/* Operation wrapper: */
struct __ns1__QueryDvsCheckCompatibility
{
public:
	ns1__QueryDvsCheckCompatibilityRequestType *ns1__QueryDvsCheckCompatibility;	/* optional element of type ns1:QueryDvsCheckCompatibilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReadNextEvents
#define SOAP_TYPE___ns1__ReadNextEvents (5945)
/* Operation wrapper: */
struct __ns1__ReadNextEvents
{
public:
	ns1__ReadNextEventsRequestType *ns1__ReadNextEvents;	/* optional element of type ns1:ReadNextEventsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReadPreviousEvents
#define SOAP_TYPE___ns1__ReadPreviousEvents (5949)
/* Operation wrapper: */
struct __ns1__ReadPreviousEvents
{
public:
	ns1__ReadPreviousEventsRequestType *ns1__ReadPreviousEvents;	/* optional element of type ns1:ReadPreviousEventsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveArgumentDescription
#define SOAP_TYPE___ns1__RetrieveArgumentDescription (5953)
/* Operation wrapper: */
struct __ns1__RetrieveArgumentDescription
{
public:
	ns1__RetrieveArgumentDescriptionRequestType *ns1__RetrieveArgumentDescription;	/* optional element of type ns1:RetrieveArgumentDescriptionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateCollectorForEvents
#define SOAP_TYPE___ns1__CreateCollectorForEvents (5957)
/* Operation wrapper: */
struct __ns1__CreateCollectorForEvents
{
public:
	ns1__CreateCollectorForEventsRequestType *ns1__CreateCollectorForEvents;	/* optional element of type ns1:CreateCollectorForEventsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__LogUserEvent
#define SOAP_TYPE___ns1__LogUserEvent (5961)
/* Operation wrapper: */
struct __ns1__LogUserEvent
{
public:
	ns1__LogUserEventRequestType *ns1__LogUserEvent;	/* optional element of type ns1:LogUserEventRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryEvents
#define SOAP_TYPE___ns1__QueryEvents (5965)
/* Operation wrapper: */
struct __ns1__QueryEvents
{
public:
	ns1__QueryEventsRequestType *ns1__QueryEvents;	/* optional element of type ns1:QueryEventsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__PostEvent
#define SOAP_TYPE___ns1__PostEvent (5969)
/* Operation wrapper: */
struct __ns1__PostEvent
{
public:
	ns1__PostEventRequestType *ns1__PostEvent;	/* optional element of type ns1:PostEventRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__JoinDomain_USCORETask
#define SOAP_TYPE___ns1__JoinDomain_USCORETask (5973)
/* Operation wrapper: */
struct __ns1__JoinDomain_USCORETask
{
public:
	ns1__JoinDomainRequestType *ns1__JoinDomain_USCORETask;	/* optional element of type ns1:JoinDomainRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__LeaveCurrentDomain_USCORETask
#define SOAP_TYPE___ns1__LeaveCurrentDomain_USCORETask (5977)
/* Operation wrapper: */
struct __ns1__LeaveCurrentDomain_USCORETask
{
public:
	ns1__LeaveCurrentDomainRequestType *ns1__LeaveCurrentDomain_USCORETask;	/* optional element of type ns1:LeaveCurrentDomainRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureAutostart
#define SOAP_TYPE___ns1__ReconfigureAutostart (5981)
/* Operation wrapper: */
struct __ns1__ReconfigureAutostart
{
public:
	ns1__ReconfigureAutostartRequestType *ns1__ReconfigureAutostart;	/* optional element of type ns1:ReconfigureAutostartRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AutoStartPowerOn
#define SOAP_TYPE___ns1__AutoStartPowerOn (5985)
/* Operation wrapper: */
struct __ns1__AutoStartPowerOn
{
public:
	ns1__AutoStartPowerOnRequestType *ns1__AutoStartPowerOn;	/* optional element of type ns1:AutoStartPowerOnRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AutoStartPowerOff
#define SOAP_TYPE___ns1__AutoStartPowerOff (5989)
/* Operation wrapper: */
struct __ns1__AutoStartPowerOff
{
public:
	ns1__AutoStartPowerOffRequestType *ns1__AutoStartPowerOff;	/* optional element of type ns1:AutoStartPowerOffRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryBootDevices
#define SOAP_TYPE___ns1__QueryBootDevices (5993)
/* Operation wrapper: */
struct __ns1__QueryBootDevices
{
public:
	ns1__QueryBootDevicesRequestType *ns1__QueryBootDevices;	/* optional element of type ns1:QueryBootDevicesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateBootDevice
#define SOAP_TYPE___ns1__UpdateBootDevice (5997)
/* Operation wrapper: */
struct __ns1__UpdateBootDevice
{
public:
	ns1__UpdateBootDeviceRequestType *ns1__UpdateBootDevice;	/* optional element of type ns1:UpdateBootDeviceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableHyperThreading
#define SOAP_TYPE___ns1__EnableHyperThreading (6001)
/* Operation wrapper: */
struct __ns1__EnableHyperThreading
{
public:
	ns1__EnableHyperThreadingRequestType *ns1__EnableHyperThreading;	/* optional element of type ns1:EnableHyperThreadingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableHyperThreading
#define SOAP_TYPE___ns1__DisableHyperThreading (6005)
/* Operation wrapper: */
struct __ns1__DisableHyperThreading
{
public:
	ns1__DisableHyperThreadingRequestType *ns1__DisableHyperThreading;	/* optional element of type ns1:DisableHyperThreadingRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SearchDatastore_USCORETask
#define SOAP_TYPE___ns1__SearchDatastore_USCORETask (6009)
/* Operation wrapper: */
struct __ns1__SearchDatastore_USCORETask
{
public:
	ns1__SearchDatastoreRequestType *ns1__SearchDatastore_USCORETask;	/* optional element of type ns1:SearchDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SearchDatastoreSubFolders_USCORETask
#define SOAP_TYPE___ns1__SearchDatastoreSubFolders_USCORETask (6013)
/* Operation wrapper: */
struct __ns1__SearchDatastoreSubFolders_USCORETask
{
public:
	ns1__SearchDatastoreSubFoldersRequestType *ns1__SearchDatastoreSubFolders_USCORETask;	/* optional element of type ns1:SearchDatastoreSubFoldersRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFile
#define SOAP_TYPE___ns1__DeleteFile (6017)
/* Operation wrapper: */
struct __ns1__DeleteFile
{
public:
	ns1__DeleteFileRequestType *ns1__DeleteFile;	/* optional element of type ns1:DeleteFileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateLocalSwapDatastore
#define SOAP_TYPE___ns1__UpdateLocalSwapDatastore (6021)
/* Operation wrapper: */
struct __ns1__UpdateLocalSwapDatastore
{
public:
	ns1__UpdateLocalSwapDatastoreRequestType *ns1__UpdateLocalSwapDatastore;	/* optional element of type ns1:UpdateLocalSwapDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAvailableDisksForVmfs
#define SOAP_TYPE___ns1__QueryAvailableDisksForVmfs (6025)
/* Operation wrapper: */
struct __ns1__QueryAvailableDisksForVmfs
{
public:
	ns1__QueryAvailableDisksForVmfsRequestType *ns1__QueryAvailableDisksForVmfs;	/* optional element of type ns1:QueryAvailableDisksForVmfsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVmfsDatastoreCreateOptions
#define SOAP_TYPE___ns1__QueryVmfsDatastoreCreateOptions (6029)
/* Operation wrapper: */
struct __ns1__QueryVmfsDatastoreCreateOptions
{
public:
	ns1__QueryVmfsDatastoreCreateOptionsRequestType *ns1__QueryVmfsDatastoreCreateOptions;	/* optional element of type ns1:QueryVmfsDatastoreCreateOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateVmfsDatastore
#define SOAP_TYPE___ns1__CreateVmfsDatastore (6033)
/* Operation wrapper: */
struct __ns1__CreateVmfsDatastore
{
public:
	ns1__CreateVmfsDatastoreRequestType *ns1__CreateVmfsDatastore;	/* optional element of type ns1:CreateVmfsDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVmfsDatastoreExtendOptions
#define SOAP_TYPE___ns1__QueryVmfsDatastoreExtendOptions (6037)
/* Operation wrapper: */
struct __ns1__QueryVmfsDatastoreExtendOptions
{
public:
	ns1__QueryVmfsDatastoreExtendOptionsRequestType *ns1__QueryVmfsDatastoreExtendOptions;	/* optional element of type ns1:QueryVmfsDatastoreExtendOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVmfsDatastoreExpandOptions
#define SOAP_TYPE___ns1__QueryVmfsDatastoreExpandOptions (6041)
/* Operation wrapper: */
struct __ns1__QueryVmfsDatastoreExpandOptions
{
public:
	ns1__QueryVmfsDatastoreExpandOptionsRequestType *ns1__QueryVmfsDatastoreExpandOptions;	/* optional element of type ns1:QueryVmfsDatastoreExpandOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExtendVmfsDatastore
#define SOAP_TYPE___ns1__ExtendVmfsDatastore (6045)
/* Operation wrapper: */
struct __ns1__ExtendVmfsDatastore
{
public:
	ns1__ExtendVmfsDatastoreRequestType *ns1__ExtendVmfsDatastore;	/* optional element of type ns1:ExtendVmfsDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExpandVmfsDatastore
#define SOAP_TYPE___ns1__ExpandVmfsDatastore (6049)
/* Operation wrapper: */
struct __ns1__ExpandVmfsDatastore
{
public:
	ns1__ExpandVmfsDatastoreRequestType *ns1__ExpandVmfsDatastore;	/* optional element of type ns1:ExpandVmfsDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateNasDatastore
#define SOAP_TYPE___ns1__CreateNasDatastore (6053)
/* Operation wrapper: */
struct __ns1__CreateNasDatastore
{
public:
	ns1__CreateNasDatastoreRequestType *ns1__CreateNasDatastore;	/* optional element of type ns1:CreateNasDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateLocalDatastore
#define SOAP_TYPE___ns1__CreateLocalDatastore (6057)
/* Operation wrapper: */
struct __ns1__CreateLocalDatastore
{
public:
	ns1__CreateLocalDatastoreRequestType *ns1__CreateLocalDatastore;	/* optional element of type ns1:CreateLocalDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveDatastore
#define SOAP_TYPE___ns1__RemoveDatastore (6061)
/* Operation wrapper: */
struct __ns1__RemoveDatastore
{
public:
	ns1__RemoveDatastoreRequestType *ns1__RemoveDatastore;	/* optional element of type ns1:RemoveDatastoreRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ConfigureDatastorePrincipal
#define SOAP_TYPE___ns1__ConfigureDatastorePrincipal (6065)
/* Operation wrapper: */
struct __ns1__ConfigureDatastorePrincipal
{
public:
	ns1__ConfigureDatastorePrincipalRequestType *ns1__ConfigureDatastorePrincipal;	/* optional element of type ns1:ConfigureDatastorePrincipalRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUnresolvedVmfsVolumes
#define SOAP_TYPE___ns1__QueryUnresolvedVmfsVolumes (6069)
/* Operation wrapper: */
struct __ns1__QueryUnresolvedVmfsVolumes
{
public:
	ns1__QueryUnresolvedVmfsVolumesRequestType *ns1__QueryUnresolvedVmfsVolumes;	/* optional element of type ns1:QueryUnresolvedVmfsVolumesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResignatureUnresolvedVmfsVolume_USCORETask
#define SOAP_TYPE___ns1__ResignatureUnresolvedVmfsVolume_USCORETask (6073)
/* Operation wrapper: */
struct __ns1__ResignatureUnresolvedVmfsVolume_USCORETask
{
public:
	ns1__ResignatureUnresolvedVmfsVolumeRequestType *ns1__ResignatureUnresolvedVmfsVolume_USCORETask;	/* optional element of type ns1:ResignatureUnresolvedVmfsVolumeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDateTimeConfig
#define SOAP_TYPE___ns1__UpdateDateTimeConfig (6077)
/* Operation wrapper: */
struct __ns1__UpdateDateTimeConfig
{
public:
	ns1__UpdateDateTimeConfigRequestType *ns1__UpdateDateTimeConfig;	/* optional element of type ns1:UpdateDateTimeConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAvailableTimeZones
#define SOAP_TYPE___ns1__QueryAvailableTimeZones (6081)
/* Operation wrapper: */
struct __ns1__QueryAvailableTimeZones
{
public:
	ns1__QueryAvailableTimeZonesRequestType *ns1__QueryAvailableTimeZones;	/* optional element of type ns1:QueryAvailableTimeZonesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryDateTime
#define SOAP_TYPE___ns1__QueryDateTime (6085)
/* Operation wrapper: */
struct __ns1__QueryDateTime
{
public:
	ns1__QueryDateTimeRequestType *ns1__QueryDateTime;	/* optional element of type ns1:QueryDateTimeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDateTime
#define SOAP_TYPE___ns1__UpdateDateTime (6089)
/* Operation wrapper: */
struct __ns1__UpdateDateTime
{
public:
	ns1__UpdateDateTimeRequestType *ns1__UpdateDateTime;	/* optional element of type ns1:UpdateDateTimeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshDateTimeSystem
#define SOAP_TYPE___ns1__RefreshDateTimeSystem (6093)
/* Operation wrapper: */
struct __ns1__RefreshDateTimeSystem
{
public:
	ns1__RefreshDateTimeSystemRequestType *ns1__RefreshDateTimeSystem;	/* optional element of type ns1:RefreshDateTimeSystemRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryAvailablePartition
#define SOAP_TYPE___ns1__QueryAvailablePartition (6097)
/* Operation wrapper: */
struct __ns1__QueryAvailablePartition
{
public:
	ns1__QueryAvailablePartitionRequestType *ns1__QueryAvailablePartition;	/* optional element of type ns1:QueryAvailablePartitionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SelectActivePartition
#define SOAP_TYPE___ns1__SelectActivePartition (6101)
/* Operation wrapper: */
struct __ns1__SelectActivePartition
{
public:
	ns1__SelectActivePartitionRequestType *ns1__SelectActivePartition;	/* optional element of type ns1:SelectActivePartitionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPartitionCreateOptions
#define SOAP_TYPE___ns1__QueryPartitionCreateOptions (6105)
/* Operation wrapper: */
struct __ns1__QueryPartitionCreateOptions
{
public:
	ns1__QueryPartitionCreateOptionsRequestType *ns1__QueryPartitionCreateOptions;	/* optional element of type ns1:QueryPartitionCreateOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPartitionCreateDesc
#define SOAP_TYPE___ns1__QueryPartitionCreateDesc (6109)
/* Operation wrapper: */
struct __ns1__QueryPartitionCreateDesc
{
public:
	ns1__QueryPartitionCreateDescRequestType *ns1__QueryPartitionCreateDesc;	/* optional element of type ns1:QueryPartitionCreateDescRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDiagnosticPartition
#define SOAP_TYPE___ns1__CreateDiagnosticPartition (6113)
/* Operation wrapper: */
struct __ns1__CreateDiagnosticPartition
{
public:
	ns1__CreateDiagnosticPartitionRequestType *ns1__CreateDiagnosticPartition;	/* optional element of type ns1:CreateDiagnosticPartitionRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDefaultPolicy
#define SOAP_TYPE___ns1__UpdateDefaultPolicy (6117)
/* Operation wrapper: */
struct __ns1__UpdateDefaultPolicy
{
public:
	ns1__UpdateDefaultPolicyRequestType *ns1__UpdateDefaultPolicy;	/* optional element of type ns1:UpdateDefaultPolicyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableRuleset
#define SOAP_TYPE___ns1__EnableRuleset (6121)
/* Operation wrapper: */
struct __ns1__EnableRuleset
{
public:
	ns1__EnableRulesetRequestType *ns1__EnableRuleset;	/* optional element of type ns1:EnableRulesetRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableRuleset
#define SOAP_TYPE___ns1__DisableRuleset (6125)
/* Operation wrapper: */
struct __ns1__DisableRuleset
{
public:
	ns1__DisableRulesetRequestType *ns1__DisableRuleset;	/* optional element of type ns1:DisableRulesetRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshFirewall
#define SOAP_TYPE___ns1__RefreshFirewall (6129)
/* Operation wrapper: */
struct __ns1__RefreshFirewall
{
public:
	ns1__RefreshFirewallRequestType *ns1__RefreshFirewall;	/* optional element of type ns1:RefreshFirewallRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetFirmwareToFactoryDefaults
#define SOAP_TYPE___ns1__ResetFirmwareToFactoryDefaults (6133)
/* Operation wrapper: */
struct __ns1__ResetFirmwareToFactoryDefaults
{
public:
	ns1__ResetFirmwareToFactoryDefaultsRequestType *ns1__ResetFirmwareToFactoryDefaults;	/* optional element of type ns1:ResetFirmwareToFactoryDefaultsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__BackupFirmwareConfiguration
#define SOAP_TYPE___ns1__BackupFirmwareConfiguration (6137)
/* Operation wrapper: */
struct __ns1__BackupFirmwareConfiguration
{
public:
	ns1__BackupFirmwareConfigurationRequestType *ns1__BackupFirmwareConfiguration;	/* optional element of type ns1:BackupFirmwareConfigurationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryFirmwareConfigUploadURL
#define SOAP_TYPE___ns1__QueryFirmwareConfigUploadURL (6141)
/* Operation wrapper: */
struct __ns1__QueryFirmwareConfigUploadURL
{
public:
	ns1__QueryFirmwareConfigUploadURLRequestType *ns1__QueryFirmwareConfigUploadURL;	/* optional element of type ns1:QueryFirmwareConfigUploadURLRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RestoreFirmwareConfiguration
#define SOAP_TYPE___ns1__RestoreFirmwareConfiguration (6145)
/* Operation wrapper: */
struct __ns1__RestoreFirmwareConfiguration
{
public:
	ns1__RestoreFirmwareConfigurationRequestType *ns1__RestoreFirmwareConfiguration;	/* optional element of type ns1:RestoreFirmwareConfigurationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshHealthStatusSystem
#define SOAP_TYPE___ns1__RefreshHealthStatusSystem (6149)
/* Operation wrapper: */
struct __ns1__RefreshHealthStatusSystem
{
public:
	ns1__RefreshHealthStatusSystemRequestType *ns1__RefreshHealthStatusSystem;	/* optional element of type ns1:RefreshHealthStatusSystemRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetSystemHealthInfo
#define SOAP_TYPE___ns1__ResetSystemHealthInfo (6153)
/* Operation wrapper: */
struct __ns1__ResetSystemHealthInfo
{
public:
	ns1__ResetSystemHealthInfoRequestType *ns1__ResetSystemHealthInfo;	/* optional element of type ns1:ResetSystemHealthInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryModules
#define SOAP_TYPE___ns1__QueryModules (6157)
/* Operation wrapper: */
struct __ns1__QueryModules
{
public:
	ns1__QueryModulesRequestType *ns1__QueryModules;	/* optional element of type ns1:QueryModulesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateModuleOptionString
#define SOAP_TYPE___ns1__UpdateModuleOptionString (6161)
/* Operation wrapper: */
struct __ns1__UpdateModuleOptionString
{
public:
	ns1__UpdateModuleOptionStringRequestType *ns1__UpdateModuleOptionString;	/* optional element of type ns1:UpdateModuleOptionStringRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryConfiguredModuleOptionString
#define SOAP_TYPE___ns1__QueryConfiguredModuleOptionString (6165)
/* Operation wrapper: */
struct __ns1__QueryConfiguredModuleOptionString
{
public:
	ns1__QueryConfiguredModuleOptionStringRequestType *ns1__QueryConfiguredModuleOptionString;	/* optional element of type ns1:QueryConfiguredModuleOptionStringRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateUser
#define SOAP_TYPE___ns1__CreateUser (6169)
/* Operation wrapper: */
struct __ns1__CreateUser
{
public:
	ns1__CreateUserRequestType *ns1__CreateUser;	/* optional element of type ns1:CreateUserRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateUser
#define SOAP_TYPE___ns1__UpdateUser (6173)
/* Operation wrapper: */
struct __ns1__UpdateUser
{
public:
	ns1__UpdateUserRequestType *ns1__UpdateUser;	/* optional element of type ns1:UpdateUserRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateGroup
#define SOAP_TYPE___ns1__CreateGroup (6177)
/* Operation wrapper: */
struct __ns1__CreateGroup
{
public:
	ns1__CreateGroupRequestType *ns1__CreateGroup;	/* optional element of type ns1:CreateGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveUser
#define SOAP_TYPE___ns1__RemoveUser (6181)
/* Operation wrapper: */
struct __ns1__RemoveUser
{
public:
	ns1__RemoveUserRequestType *ns1__RemoveUser;	/* optional element of type ns1:RemoveUserRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveGroup
#define SOAP_TYPE___ns1__RemoveGroup (6185)
/* Operation wrapper: */
struct __ns1__RemoveGroup
{
public:
	ns1__RemoveGroupRequestType *ns1__RemoveGroup;	/* optional element of type ns1:RemoveGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AssignUserToGroup
#define SOAP_TYPE___ns1__AssignUserToGroup (6189)
/* Operation wrapper: */
struct __ns1__AssignUserToGroup
{
public:
	ns1__AssignUserToGroupRequestType *ns1__AssignUserToGroup;	/* optional element of type ns1:AssignUserToGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnassignUserFromGroup
#define SOAP_TYPE___ns1__UnassignUserFromGroup (6193)
/* Operation wrapper: */
struct __ns1__UnassignUserFromGroup
{
public:
	ns1__UnassignUserFromGroupRequestType *ns1__UnassignUserFromGroup;	/* optional element of type ns1:UnassignUserFromGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureServiceConsoleReservation
#define SOAP_TYPE___ns1__ReconfigureServiceConsoleReservation (6197)
/* Operation wrapper: */
struct __ns1__ReconfigureServiceConsoleReservation
{
public:
	ns1__ReconfigureServiceConsoleReservationRequestType *ns1__ReconfigureServiceConsoleReservation;	/* optional element of type ns1:ReconfigureServiceConsoleReservationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureVirtualMachineReservation
#define SOAP_TYPE___ns1__ReconfigureVirtualMachineReservation (6201)
/* Operation wrapper: */
struct __ns1__ReconfigureVirtualMachineReservation
{
public:
	ns1__ReconfigureVirtualMachineReservationRequestType *ns1__ReconfigureVirtualMachineReservation;	/* optional element of type ns1:ReconfigureVirtualMachineReservationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateNetworkConfig
#define SOAP_TYPE___ns1__UpdateNetworkConfig (6205)
/* Operation wrapper: */
struct __ns1__UpdateNetworkConfig
{
public:
	ns1__UpdateNetworkConfigRequestType *ns1__UpdateNetworkConfig;	/* optional element of type ns1:UpdateNetworkConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDnsConfig
#define SOAP_TYPE___ns1__UpdateDnsConfig (6209)
/* Operation wrapper: */
struct __ns1__UpdateDnsConfig
{
public:
	ns1__UpdateDnsConfigRequestType *ns1__UpdateDnsConfig;	/* optional element of type ns1:UpdateDnsConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateIpRouteConfig
#define SOAP_TYPE___ns1__UpdateIpRouteConfig (6213)
/* Operation wrapper: */
struct __ns1__UpdateIpRouteConfig
{
public:
	ns1__UpdateIpRouteConfigRequestType *ns1__UpdateIpRouteConfig;	/* optional element of type ns1:UpdateIpRouteConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateConsoleIpRouteConfig
#define SOAP_TYPE___ns1__UpdateConsoleIpRouteConfig (6217)
/* Operation wrapper: */
struct __ns1__UpdateConsoleIpRouteConfig
{
public:
	ns1__UpdateConsoleIpRouteConfigRequestType *ns1__UpdateConsoleIpRouteConfig;	/* optional element of type ns1:UpdateConsoleIpRouteConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateIpRouteTableConfig
#define SOAP_TYPE___ns1__UpdateIpRouteTableConfig (6221)
/* Operation wrapper: */
struct __ns1__UpdateIpRouteTableConfig
{
public:
	ns1__UpdateIpRouteTableConfigRequestType *ns1__UpdateIpRouteTableConfig;	/* optional element of type ns1:UpdateIpRouteTableConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddVirtualSwitch
#define SOAP_TYPE___ns1__AddVirtualSwitch (6225)
/* Operation wrapper: */
struct __ns1__AddVirtualSwitch
{
public:
	ns1__AddVirtualSwitchRequestType *ns1__AddVirtualSwitch;	/* optional element of type ns1:AddVirtualSwitchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveVirtualSwitch
#define SOAP_TYPE___ns1__RemoveVirtualSwitch (6229)
/* Operation wrapper: */
struct __ns1__RemoveVirtualSwitch
{
public:
	ns1__RemoveVirtualSwitchRequestType *ns1__RemoveVirtualSwitch;	/* optional element of type ns1:RemoveVirtualSwitchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateVirtualSwitch
#define SOAP_TYPE___ns1__UpdateVirtualSwitch (6233)
/* Operation wrapper: */
struct __ns1__UpdateVirtualSwitch
{
public:
	ns1__UpdateVirtualSwitchRequestType *ns1__UpdateVirtualSwitch;	/* optional element of type ns1:UpdateVirtualSwitchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddPortGroup
#define SOAP_TYPE___ns1__AddPortGroup (6237)
/* Operation wrapper: */
struct __ns1__AddPortGroup
{
public:
	ns1__AddPortGroupRequestType *ns1__AddPortGroup;	/* optional element of type ns1:AddPortGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemovePortGroup
#define SOAP_TYPE___ns1__RemovePortGroup (6241)
/* Operation wrapper: */
struct __ns1__RemovePortGroup
{
public:
	ns1__RemovePortGroupRequestType *ns1__RemovePortGroup;	/* optional element of type ns1:RemovePortGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdatePortGroup
#define SOAP_TYPE___ns1__UpdatePortGroup (6245)
/* Operation wrapper: */
struct __ns1__UpdatePortGroup
{
public:
	ns1__UpdatePortGroupRequestType *ns1__UpdatePortGroup;	/* optional element of type ns1:UpdatePortGroupRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdatePhysicalNicLinkSpeed
#define SOAP_TYPE___ns1__UpdatePhysicalNicLinkSpeed (6249)
/* Operation wrapper: */
struct __ns1__UpdatePhysicalNicLinkSpeed
{
public:
	ns1__UpdatePhysicalNicLinkSpeedRequestType *ns1__UpdatePhysicalNicLinkSpeed;	/* optional element of type ns1:UpdatePhysicalNicLinkSpeedRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryNetworkHint
#define SOAP_TYPE___ns1__QueryNetworkHint (6253)
/* Operation wrapper: */
struct __ns1__QueryNetworkHint
{
public:
	ns1__QueryNetworkHintRequestType *ns1__QueryNetworkHint;	/* optional element of type ns1:QueryNetworkHintRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddVirtualNic
#define SOAP_TYPE___ns1__AddVirtualNic (6257)
/* Operation wrapper: */
struct __ns1__AddVirtualNic
{
public:
	ns1__AddVirtualNicRequestType *ns1__AddVirtualNic;	/* optional element of type ns1:AddVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveVirtualNic
#define SOAP_TYPE___ns1__RemoveVirtualNic (6261)
/* Operation wrapper: */
struct __ns1__RemoveVirtualNic
{
public:
	ns1__RemoveVirtualNicRequestType *ns1__RemoveVirtualNic;	/* optional element of type ns1:RemoveVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateVirtualNic
#define SOAP_TYPE___ns1__UpdateVirtualNic (6265)
/* Operation wrapper: */
struct __ns1__UpdateVirtualNic
{
public:
	ns1__UpdateVirtualNicRequestType *ns1__UpdateVirtualNic;	/* optional element of type ns1:UpdateVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddServiceConsoleVirtualNic
#define SOAP_TYPE___ns1__AddServiceConsoleVirtualNic (6269)
/* Operation wrapper: */
struct __ns1__AddServiceConsoleVirtualNic
{
public:
	ns1__AddServiceConsoleVirtualNicRequestType *ns1__AddServiceConsoleVirtualNic;	/* optional element of type ns1:AddServiceConsoleVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveServiceConsoleVirtualNic
#define SOAP_TYPE___ns1__RemoveServiceConsoleVirtualNic (6273)
/* Operation wrapper: */
struct __ns1__RemoveServiceConsoleVirtualNic
{
public:
	ns1__RemoveServiceConsoleVirtualNicRequestType *ns1__RemoveServiceConsoleVirtualNic;	/* optional element of type ns1:RemoveServiceConsoleVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateServiceConsoleVirtualNic
#define SOAP_TYPE___ns1__UpdateServiceConsoleVirtualNic (6277)
/* Operation wrapper: */
struct __ns1__UpdateServiceConsoleVirtualNic
{
public:
	ns1__UpdateServiceConsoleVirtualNicRequestType *ns1__UpdateServiceConsoleVirtualNic;	/* optional element of type ns1:UpdateServiceConsoleVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RestartServiceConsoleVirtualNic
#define SOAP_TYPE___ns1__RestartServiceConsoleVirtualNic (6281)
/* Operation wrapper: */
struct __ns1__RestartServiceConsoleVirtualNic
{
public:
	ns1__RestartServiceConsoleVirtualNicRequestType *ns1__RestartServiceConsoleVirtualNic;	/* optional element of type ns1:RestartServiceConsoleVirtualNicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshNetworkSystem
#define SOAP_TYPE___ns1__RefreshNetworkSystem (6285)
/* Operation wrapper: */
struct __ns1__RefreshNetworkSystem
{
public:
	ns1__RefreshNetworkSystemRequestType *ns1__RefreshNetworkSystem;	/* optional element of type ns1:RefreshNetworkSystemRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckHostPatch_USCORETask
#define SOAP_TYPE___ns1__CheckHostPatch_USCORETask (6289)
/* Operation wrapper: */
struct __ns1__CheckHostPatch_USCORETask
{
public:
	ns1__CheckHostPatchRequestType *ns1__CheckHostPatch_USCORETask;	/* optional element of type ns1:CheckHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ScanHostPatch_USCORETask
#define SOAP_TYPE___ns1__ScanHostPatch_USCORETask (6293)
/* Operation wrapper: */
struct __ns1__ScanHostPatch_USCORETask
{
public:
	ns1__ScanHostPatchRequestType *ns1__ScanHostPatch_USCORETask;	/* optional element of type ns1:ScanHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ScanHostPatchV2_USCORETask
#define SOAP_TYPE___ns1__ScanHostPatchV2_USCORETask (6297)
/* Operation wrapper: */
struct __ns1__ScanHostPatchV2_USCORETask
{
public:
	ns1__ScanHostPatchV2RequestType *ns1__ScanHostPatchV2_USCORETask;	/* optional element of type ns1:ScanHostPatchV2RequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StageHostPatch_USCORETask
#define SOAP_TYPE___ns1__StageHostPatch_USCORETask (6301)
/* Operation wrapper: */
struct __ns1__StageHostPatch_USCORETask
{
public:
	ns1__StageHostPatchRequestType *ns1__StageHostPatch_USCORETask;	/* optional element of type ns1:StageHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__InstallHostPatch_USCORETask
#define SOAP_TYPE___ns1__InstallHostPatch_USCORETask (6305)
/* Operation wrapper: */
struct __ns1__InstallHostPatch_USCORETask
{
public:
	ns1__InstallHostPatchRequestType *ns1__InstallHostPatch_USCORETask;	/* optional element of type ns1:InstallHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__InstallHostPatchV2_USCORETask
#define SOAP_TYPE___ns1__InstallHostPatchV2_USCORETask (6309)
/* Operation wrapper: */
struct __ns1__InstallHostPatchV2_USCORETask
{
public:
	ns1__InstallHostPatchV2RequestType *ns1__InstallHostPatchV2_USCORETask;	/* optional element of type ns1:InstallHostPatchV2RequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UninstallHostPatch_USCORETask
#define SOAP_TYPE___ns1__UninstallHostPatch_USCORETask (6313)
/* Operation wrapper: */
struct __ns1__UninstallHostPatch_USCORETask
{
public:
	ns1__UninstallHostPatchRequestType *ns1__UninstallHostPatch_USCORETask;	/* optional element of type ns1:UninstallHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryHostPatch_USCORETask
#define SOAP_TYPE___ns1__QueryHostPatch_USCORETask (6317)
/* Operation wrapper: */
struct __ns1__QueryHostPatch_USCORETask
{
public:
	ns1__QueryHostPatchRequestType *ns1__QueryHostPatch_USCORETask;	/* optional element of type ns1:QueryHostPatchRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__Refresh
#define SOAP_TYPE___ns1__Refresh (6321)
/* Operation wrapper: */
struct __ns1__Refresh
{
public:
	ns1__RefreshRequestType *ns1__Refresh;	/* optional element of type ns1:RefreshRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdatePassthruConfig
#define SOAP_TYPE___ns1__UpdatePassthruConfig (6325)
/* Operation wrapper: */
struct __ns1__UpdatePassthruConfig
{
public:
	ns1__UpdatePassthruConfigRequestType *ns1__UpdatePassthruConfig;	/* optional element of type ns1:UpdatePassthruConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ConfigurePowerPolicy
#define SOAP_TYPE___ns1__ConfigurePowerPolicy (6329)
/* Operation wrapper: */
struct __ns1__ConfigurePowerPolicy
{
public:
	ns1__ConfigurePowerPolicyRequestType *ns1__ConfigurePowerPolicy;	/* optional element of type ns1:ConfigurePowerPolicyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateServicePolicy
#define SOAP_TYPE___ns1__UpdateServicePolicy (6333)
/* Operation wrapper: */
struct __ns1__UpdateServicePolicy
{
public:
	ns1__UpdateServicePolicyRequestType *ns1__UpdateServicePolicy;	/* optional element of type ns1:UpdateServicePolicyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StartService
#define SOAP_TYPE___ns1__StartService (6337)
/* Operation wrapper: */
struct __ns1__StartService
{
public:
	ns1__StartServiceRequestType *ns1__StartService;	/* optional element of type ns1:StartServiceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__StopService
#define SOAP_TYPE___ns1__StopService (6341)
/* Operation wrapper: */
struct __ns1__StopService
{
public:
	ns1__StopServiceRequestType *ns1__StopService;	/* optional element of type ns1:StopServiceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RestartService
#define SOAP_TYPE___ns1__RestartService (6345)
/* Operation wrapper: */
struct __ns1__RestartService
{
public:
	ns1__RestartServiceRequestType *ns1__RestartService;	/* optional element of type ns1:RestartServiceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UninstallService
#define SOAP_TYPE___ns1__UninstallService (6349)
/* Operation wrapper: */
struct __ns1__UninstallService
{
public:
	ns1__UninstallServiceRequestType *ns1__UninstallService;	/* optional element of type ns1:UninstallServiceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshServices
#define SOAP_TYPE___ns1__RefreshServices (6353)
/* Operation wrapper: */
struct __ns1__RefreshServices
{
public:
	ns1__RefreshServicesRequestType *ns1__RefreshServices;	/* optional element of type ns1:RefreshServicesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureSnmpAgent
#define SOAP_TYPE___ns1__ReconfigureSnmpAgent (6357)
/* Operation wrapper: */
struct __ns1__ReconfigureSnmpAgent
{
public:
	ns1__ReconfigureSnmpAgentRequestType *ns1__ReconfigureSnmpAgent;	/* optional element of type ns1:ReconfigureSnmpAgentRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SendTestNotification
#define SOAP_TYPE___ns1__SendTestNotification (6361)
/* Operation wrapper: */
struct __ns1__SendTestNotification
{
public:
	ns1__SendTestNotificationRequestType *ns1__SendTestNotification;	/* optional element of type ns1:SendTestNotificationRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveDiskPartitionInfo
#define SOAP_TYPE___ns1__RetrieveDiskPartitionInfo (6365)
/* Operation wrapper: */
struct __ns1__RetrieveDiskPartitionInfo
{
public:
	ns1__RetrieveDiskPartitionInfoRequestType *ns1__RetrieveDiskPartitionInfo;	/* optional element of type ns1:RetrieveDiskPartitionInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ComputeDiskPartitionInfo
#define SOAP_TYPE___ns1__ComputeDiskPartitionInfo (6369)
/* Operation wrapper: */
struct __ns1__ComputeDiskPartitionInfo
{
public:
	ns1__ComputeDiskPartitionInfoRequestType *ns1__ComputeDiskPartitionInfo;	/* optional element of type ns1:ComputeDiskPartitionInfoRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ComputeDiskPartitionInfoForResize
#define SOAP_TYPE___ns1__ComputeDiskPartitionInfoForResize (6373)
/* Operation wrapper: */
struct __ns1__ComputeDiskPartitionInfoForResize
{
public:
	ns1__ComputeDiskPartitionInfoForResizeRequestType *ns1__ComputeDiskPartitionInfoForResize;	/* optional element of type ns1:ComputeDiskPartitionInfoForResizeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateDiskPartitions
#define SOAP_TYPE___ns1__UpdateDiskPartitions (6377)
/* Operation wrapper: */
struct __ns1__UpdateDiskPartitions
{
public:
	ns1__UpdateDiskPartitionsRequestType *ns1__UpdateDiskPartitions;	/* optional element of type ns1:UpdateDiskPartitionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FormatVmfs
#define SOAP_TYPE___ns1__FormatVmfs (6381)
/* Operation wrapper: */
struct __ns1__FormatVmfs
{
public:
	ns1__FormatVmfsRequestType *ns1__FormatVmfs;	/* optional element of type ns1:FormatVmfsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RescanVmfs
#define SOAP_TYPE___ns1__RescanVmfs (6385)
/* Operation wrapper: */
struct __ns1__RescanVmfs
{
public:
	ns1__RescanVmfsRequestType *ns1__RescanVmfs;	/* optional element of type ns1:RescanVmfsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AttachVmfsExtent
#define SOAP_TYPE___ns1__AttachVmfsExtent (6389)
/* Operation wrapper: */
struct __ns1__AttachVmfsExtent
{
public:
	ns1__AttachVmfsExtentRequestType *ns1__AttachVmfsExtent;	/* optional element of type ns1:AttachVmfsExtentRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExpandVmfsExtent
#define SOAP_TYPE___ns1__ExpandVmfsExtent (6393)
/* Operation wrapper: */
struct __ns1__ExpandVmfsExtent
{
public:
	ns1__ExpandVmfsExtentRequestType *ns1__ExpandVmfsExtent;	/* optional element of type ns1:ExpandVmfsExtentRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpgradeVmfs
#define SOAP_TYPE___ns1__UpgradeVmfs (6397)
/* Operation wrapper: */
struct __ns1__UpgradeVmfs
{
public:
	ns1__UpgradeVmfsRequestType *ns1__UpgradeVmfs;	/* optional element of type ns1:UpgradeVmfsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpgradeVmLayout
#define SOAP_TYPE___ns1__UpgradeVmLayout (6401)
/* Operation wrapper: */
struct __ns1__UpgradeVmLayout
{
public:
	ns1__UpgradeVmLayoutRequestType *ns1__UpgradeVmLayout;	/* optional element of type ns1:UpgradeVmLayoutRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUnresolvedVmfsVolume
#define SOAP_TYPE___ns1__QueryUnresolvedVmfsVolume (6405)
/* Operation wrapper: */
struct __ns1__QueryUnresolvedVmfsVolume
{
public:
	ns1__QueryUnresolvedVmfsVolumeRequestType *ns1__QueryUnresolvedVmfsVolume;	/* optional element of type ns1:QueryUnresolvedVmfsVolumeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResolveMultipleUnresolvedVmfsVolumes
#define SOAP_TYPE___ns1__ResolveMultipleUnresolvedVmfsVolumes (6409)
/* Operation wrapper: */
struct __ns1__ResolveMultipleUnresolvedVmfsVolumes
{
public:
	ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType *ns1__ResolveMultipleUnresolvedVmfsVolumes;	/* optional element of type ns1:ResolveMultipleUnresolvedVmfsVolumesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UnmountForceMountedVmfsVolume
#define SOAP_TYPE___ns1__UnmountForceMountedVmfsVolume (6413)
/* Operation wrapper: */
struct __ns1__UnmountForceMountedVmfsVolume
{
public:
	ns1__UnmountForceMountedVmfsVolumeRequestType *ns1__UnmountForceMountedVmfsVolume;	/* optional element of type ns1:UnmountForceMountedVmfsVolumeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RescanHba
#define SOAP_TYPE___ns1__RescanHba (6417)
/* Operation wrapper: */
struct __ns1__RescanHba
{
public:
	ns1__RescanHbaRequestType *ns1__RescanHba;	/* optional element of type ns1:RescanHbaRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RescanAllHba
#define SOAP_TYPE___ns1__RescanAllHba (6421)
/* Operation wrapper: */
struct __ns1__RescanAllHba
{
public:
	ns1__RescanAllHbaRequestType *ns1__RescanAllHba;	/* optional element of type ns1:RescanAllHbaRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateSoftwareInternetScsiEnabled
#define SOAP_TYPE___ns1__UpdateSoftwareInternetScsiEnabled (6425)
/* Operation wrapper: */
struct __ns1__UpdateSoftwareInternetScsiEnabled
{
public:
	ns1__UpdateSoftwareInternetScsiEnabledRequestType *ns1__UpdateSoftwareInternetScsiEnabled;	/* optional element of type ns1:UpdateSoftwareInternetScsiEnabledRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiDiscoveryProperties
#define SOAP_TYPE___ns1__UpdateInternetScsiDiscoveryProperties (6429)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiDiscoveryProperties
{
public:
	ns1__UpdateInternetScsiDiscoveryPropertiesRequestType *ns1__UpdateInternetScsiDiscoveryProperties;	/* optional element of type ns1:UpdateInternetScsiDiscoveryPropertiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiAuthenticationProperties
#define SOAP_TYPE___ns1__UpdateInternetScsiAuthenticationProperties (6433)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiAuthenticationProperties
{
public:
	ns1__UpdateInternetScsiAuthenticationPropertiesRequestType *ns1__UpdateInternetScsiAuthenticationProperties;	/* optional element of type ns1:UpdateInternetScsiAuthenticationPropertiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiDigestProperties
#define SOAP_TYPE___ns1__UpdateInternetScsiDigestProperties (6437)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiDigestProperties
{
public:
	ns1__UpdateInternetScsiDigestPropertiesRequestType *ns1__UpdateInternetScsiDigestProperties;	/* optional element of type ns1:UpdateInternetScsiDigestPropertiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiAdvancedOptions
#define SOAP_TYPE___ns1__UpdateInternetScsiAdvancedOptions (6441)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiAdvancedOptions
{
public:
	ns1__UpdateInternetScsiAdvancedOptionsRequestType *ns1__UpdateInternetScsiAdvancedOptions;	/* optional element of type ns1:UpdateInternetScsiAdvancedOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiIPProperties
#define SOAP_TYPE___ns1__UpdateInternetScsiIPProperties (6445)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiIPProperties
{
public:
	ns1__UpdateInternetScsiIPPropertiesRequestType *ns1__UpdateInternetScsiIPProperties;	/* optional element of type ns1:UpdateInternetScsiIPPropertiesRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiName
#define SOAP_TYPE___ns1__UpdateInternetScsiName (6449)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiName
{
public:
	ns1__UpdateInternetScsiNameRequestType *ns1__UpdateInternetScsiName;	/* optional element of type ns1:UpdateInternetScsiNameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateInternetScsiAlias
#define SOAP_TYPE___ns1__UpdateInternetScsiAlias (6453)
/* Operation wrapper: */
struct __ns1__UpdateInternetScsiAlias
{
public:
	ns1__UpdateInternetScsiAliasRequestType *ns1__UpdateInternetScsiAlias;	/* optional element of type ns1:UpdateInternetScsiAliasRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddInternetScsiSendTargets
#define SOAP_TYPE___ns1__AddInternetScsiSendTargets (6457)
/* Operation wrapper: */
struct __ns1__AddInternetScsiSendTargets
{
public:
	ns1__AddInternetScsiSendTargetsRequestType *ns1__AddInternetScsiSendTargets;	/* optional element of type ns1:AddInternetScsiSendTargetsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveInternetScsiSendTargets
#define SOAP_TYPE___ns1__RemoveInternetScsiSendTargets (6461)
/* Operation wrapper: */
struct __ns1__RemoveInternetScsiSendTargets
{
public:
	ns1__RemoveInternetScsiSendTargetsRequestType *ns1__RemoveInternetScsiSendTargets;	/* optional element of type ns1:RemoveInternetScsiSendTargetsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AddInternetScsiStaticTargets
#define SOAP_TYPE___ns1__AddInternetScsiStaticTargets (6465)
/* Operation wrapper: */
struct __ns1__AddInternetScsiStaticTargets
{
public:
	ns1__AddInternetScsiStaticTargetsRequestType *ns1__AddInternetScsiStaticTargets;	/* optional element of type ns1:AddInternetScsiStaticTargetsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveInternetScsiStaticTargets
#define SOAP_TYPE___ns1__RemoveInternetScsiStaticTargets (6469)
/* Operation wrapper: */
struct __ns1__RemoveInternetScsiStaticTargets
{
public:
	ns1__RemoveInternetScsiStaticTargetsRequestType *ns1__RemoveInternetScsiStaticTargets;	/* optional element of type ns1:RemoveInternetScsiStaticTargetsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__EnableMultipathPath
#define SOAP_TYPE___ns1__EnableMultipathPath (6473)
/* Operation wrapper: */
struct __ns1__EnableMultipathPath
{
public:
	ns1__EnableMultipathPathRequestType *ns1__EnableMultipathPath;	/* optional element of type ns1:EnableMultipathPathRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DisableMultipathPath
#define SOAP_TYPE___ns1__DisableMultipathPath (6477)
/* Operation wrapper: */
struct __ns1__DisableMultipathPath
{
public:
	ns1__DisableMultipathPathRequestType *ns1__DisableMultipathPath;	/* optional element of type ns1:DisableMultipathPathRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SetMultipathLunPolicy
#define SOAP_TYPE___ns1__SetMultipathLunPolicy (6481)
/* Operation wrapper: */
struct __ns1__SetMultipathLunPolicy
{
public:
	ns1__SetMultipathLunPolicyRequestType *ns1__SetMultipathLunPolicy;	/* optional element of type ns1:SetMultipathLunPolicyRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPathSelectionPolicyOptions
#define SOAP_TYPE___ns1__QueryPathSelectionPolicyOptions (6485)
/* Operation wrapper: */
struct __ns1__QueryPathSelectionPolicyOptions
{
public:
	ns1__QueryPathSelectionPolicyOptionsRequestType *ns1__QueryPathSelectionPolicyOptions;	/* optional element of type ns1:QueryPathSelectionPolicyOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryStorageArrayTypePolicyOptions
#define SOAP_TYPE___ns1__QueryStorageArrayTypePolicyOptions (6489)
/* Operation wrapper: */
struct __ns1__QueryStorageArrayTypePolicyOptions
{
public:
	ns1__QueryStorageArrayTypePolicyOptionsRequestType *ns1__QueryStorageArrayTypePolicyOptions;	/* optional element of type ns1:QueryStorageArrayTypePolicyOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateScsiLunDisplayName
#define SOAP_TYPE___ns1__UpdateScsiLunDisplayName (6493)
/* Operation wrapper: */
struct __ns1__UpdateScsiLunDisplayName
{
public:
	ns1__UpdateScsiLunDisplayNameRequestType *ns1__UpdateScsiLunDisplayName;	/* optional element of type ns1:UpdateScsiLunDisplayNameRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RefreshStorageSystem
#define SOAP_TYPE___ns1__RefreshStorageSystem (6497)
/* Operation wrapper: */
struct __ns1__RefreshStorageSystem
{
public:
	ns1__RefreshStorageSystemRequestType *ns1__RefreshStorageSystem;	/* optional element of type ns1:RefreshStorageSystemRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateIpConfig
#define SOAP_TYPE___ns1__UpdateIpConfig (6501)
/* Operation wrapper: */
struct __ns1__UpdateIpConfig
{
public:
	ns1__UpdateIpConfigRequestType *ns1__UpdateIpConfig;	/* optional element of type ns1:UpdateIpConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SelectVnic
#define SOAP_TYPE___ns1__SelectVnic (6505)
/* Operation wrapper: */
struct __ns1__SelectVnic
{
public:
	ns1__SelectVnicRequestType *ns1__SelectVnic;	/* optional element of type ns1:SelectVnicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeselectVnic
#define SOAP_TYPE___ns1__DeselectVnic (6509)
/* Operation wrapper: */
struct __ns1__DeselectVnic
{
public:
	ns1__DeselectVnicRequestType *ns1__DeselectVnic;	/* optional element of type ns1:DeselectVnicRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryNetConfig
#define SOAP_TYPE___ns1__QueryNetConfig (6513)
/* Operation wrapper: */
struct __ns1__QueryNetConfig
{
public:
	ns1__QueryNetConfigRequestType *ns1__QueryNetConfig;	/* optional element of type ns1:QueryNetConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__SelectVnicForNicType
#define SOAP_TYPE___ns1__SelectVnicForNicType (6517)
/* Operation wrapper: */
struct __ns1__SelectVnicForNicType
{
public:
	ns1__SelectVnicForNicTypeRequestType *ns1__SelectVnicForNicType;	/* optional element of type ns1:SelectVnicForNicTypeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DeselectVnicForNicType
#define SOAP_TYPE___ns1__DeselectVnicForNicType (6521)
/* Operation wrapper: */
struct __ns1__DeselectVnicForNicType
{
public:
	ns1__DeselectVnicForNicTypeRequestType *ns1__DeselectVnicForNicType;	/* optional element of type ns1:DeselectVnicForNicTypeRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryOptions
#define SOAP_TYPE___ns1__QueryOptions (6525)
/* Operation wrapper: */
struct __ns1__QueryOptions
{
public:
	ns1__QueryOptionsRequestType *ns1__QueryOptions;	/* optional element of type ns1:QueryOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateOptions
#define SOAP_TYPE___ns1__UpdateOptions (6529)
/* Operation wrapper: */
struct __ns1__UpdateOptions
{
public:
	ns1__UpdateOptionsRequestType *ns1__UpdateOptions;	/* optional element of type ns1:UpdateOptionsRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckCompliance_USCORETask
#define SOAP_TYPE___ns1__CheckCompliance_USCORETask (6533)
/* Operation wrapper: */
struct __ns1__CheckCompliance_USCORETask
{
public:
	ns1__CheckComplianceRequestType *ns1__CheckCompliance_USCORETask;	/* optional element of type ns1:CheckComplianceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryComplianceStatus
#define SOAP_TYPE___ns1__QueryComplianceStatus (6537)
/* Operation wrapper: */
struct __ns1__QueryComplianceStatus
{
public:
	ns1__QueryComplianceStatusRequestType *ns1__QueryComplianceStatus;	/* optional element of type ns1:QueryComplianceStatusRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ClearComplianceStatus
#define SOAP_TYPE___ns1__ClearComplianceStatus (6541)
/* Operation wrapper: */
struct __ns1__ClearComplianceStatus
{
public:
	ns1__ClearComplianceStatusRequestType *ns1__ClearComplianceStatus;	/* optional element of type ns1:ClearComplianceStatusRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryExpressionMetadata
#define SOAP_TYPE___ns1__QueryExpressionMetadata (6545)
/* Operation wrapper: */
struct __ns1__QueryExpressionMetadata
{
public:
	ns1__QueryExpressionMetadataRequestType *ns1__QueryExpressionMetadata;	/* optional element of type ns1:QueryExpressionMetadataRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyProfile
#define SOAP_TYPE___ns1__DestroyProfile (6549)
/* Operation wrapper: */
struct __ns1__DestroyProfile
{
public:
	ns1__DestroyProfileRequestType *ns1__DestroyProfile;	/* optional element of type ns1:DestroyProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__AssociateProfile
#define SOAP_TYPE___ns1__AssociateProfile (6553)
/* Operation wrapper: */
struct __ns1__AssociateProfile
{
public:
	ns1__AssociateProfileRequestType *ns1__AssociateProfile;	/* optional element of type ns1:AssociateProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DissociateProfile
#define SOAP_TYPE___ns1__DissociateProfile (6557)
/* Operation wrapper: */
struct __ns1__DissociateProfile
{
public:
	ns1__DissociateProfileRequestType *ns1__DissociateProfile;	/* optional element of type ns1:DissociateProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckProfileCompliance_USCORETask
#define SOAP_TYPE___ns1__CheckProfileCompliance_USCORETask (6561)
/* Operation wrapper: */
struct __ns1__CheckProfileCompliance_USCORETask
{
public:
	ns1__CheckProfileComplianceRequestType *ns1__CheckProfileCompliance_USCORETask;	/* optional element of type ns1:CheckProfileComplianceRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExportProfile
#define SOAP_TYPE___ns1__ExportProfile (6565)
/* Operation wrapper: */
struct __ns1__ExportProfile
{
public:
	ns1__ExportProfileRequestType *ns1__ExportProfile;	/* optional element of type ns1:ExportProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateProfile
#define SOAP_TYPE___ns1__CreateProfile (6569)
/* Operation wrapper: */
struct __ns1__CreateProfile
{
public:
	ns1__CreateProfileRequestType *ns1__CreateProfile;	/* optional element of type ns1:CreateProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryPolicyMetadata
#define SOAP_TYPE___ns1__QueryPolicyMetadata (6573)
/* Operation wrapper: */
struct __ns1__QueryPolicyMetadata
{
public:
	ns1__QueryPolicyMetadataRequestType *ns1__QueryPolicyMetadata;	/* optional element of type ns1:QueryPolicyMetadataRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__FindAssociatedProfile
#define SOAP_TYPE___ns1__FindAssociatedProfile (6577)
/* Operation wrapper: */
struct __ns1__FindAssociatedProfile
{
public:
	ns1__FindAssociatedProfileRequestType *ns1__FindAssociatedProfile;	/* optional element of type ns1:FindAssociatedProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateClusterProfile
#define SOAP_TYPE___ns1__UpdateClusterProfile (6581)
/* Operation wrapper: */
struct __ns1__UpdateClusterProfile
{
public:
	ns1__UpdateClusterProfileRequestType *ns1__UpdateClusterProfile;	/* optional element of type ns1:UpdateClusterProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateReferenceHost
#define SOAP_TYPE___ns1__UpdateReferenceHost (6585)
/* Operation wrapper: */
struct __ns1__UpdateReferenceHost
{
public:
	ns1__UpdateReferenceHostRequestType *ns1__UpdateReferenceHost;	/* optional element of type ns1:UpdateReferenceHostRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateHostProfile
#define SOAP_TYPE___ns1__UpdateHostProfile (6589)
/* Operation wrapper: */
struct __ns1__UpdateHostProfile
{
public:
	ns1__UpdateHostProfileRequestType *ns1__UpdateHostProfile;	/* optional element of type ns1:UpdateHostProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ExecuteHostProfile
#define SOAP_TYPE___ns1__ExecuteHostProfile (6593)
/* Operation wrapper: */
struct __ns1__ExecuteHostProfile
{
public:
	ns1__ExecuteHostProfileRequestType *ns1__ExecuteHostProfile;	/* optional element of type ns1:ExecuteHostProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ApplyHostConfig_USCORETask
#define SOAP_TYPE___ns1__ApplyHostConfig_USCORETask (6597)
/* Operation wrapper: */
struct __ns1__ApplyHostConfig_USCORETask
{
public:
	ns1__ApplyHostConfigRequestType *ns1__ApplyHostConfig_USCORETask;	/* optional element of type ns1:ApplyHostConfigRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__GenerateConfigTaskList
#define SOAP_TYPE___ns1__GenerateConfigTaskList (6601)
/* Operation wrapper: */
struct __ns1__GenerateConfigTaskList
{
public:
	ns1__GenerateConfigTaskListRequestType *ns1__GenerateConfigTaskList;	/* optional element of type ns1:GenerateConfigTaskListRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryHostProfileMetadata
#define SOAP_TYPE___ns1__QueryHostProfileMetadata (6605)
/* Operation wrapper: */
struct __ns1__QueryHostProfileMetadata
{
public:
	ns1__QueryHostProfileMetadataRequestType *ns1__QueryHostProfileMetadata;	/* optional element of type ns1:QueryHostProfileMetadataRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDefaultProfile
#define SOAP_TYPE___ns1__CreateDefaultProfile (6609)
/* Operation wrapper: */
struct __ns1__CreateDefaultProfile
{
public:
	ns1__CreateDefaultProfileRequestType *ns1__CreateDefaultProfile;	/* optional element of type ns1:CreateDefaultProfileRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveScheduledTask
#define SOAP_TYPE___ns1__RemoveScheduledTask (6613)
/* Operation wrapper: */
struct __ns1__RemoveScheduledTask
{
public:
	ns1__RemoveScheduledTaskRequestType *ns1__RemoveScheduledTask;	/* optional element of type ns1:RemoveScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ReconfigureScheduledTask
#define SOAP_TYPE___ns1__ReconfigureScheduledTask (6617)
/* Operation wrapper: */
struct __ns1__ReconfigureScheduledTask
{
public:
	ns1__ReconfigureScheduledTaskRequestType *ns1__ReconfigureScheduledTask;	/* optional element of type ns1:ReconfigureScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RunScheduledTask
#define SOAP_TYPE___ns1__RunScheduledTask (6621)
/* Operation wrapper: */
struct __ns1__RunScheduledTask
{
public:
	ns1__RunScheduledTaskRequestType *ns1__RunScheduledTask;	/* optional element of type ns1:RunScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateScheduledTask
#define SOAP_TYPE___ns1__CreateScheduledTask (6625)
/* Operation wrapper: */
struct __ns1__CreateScheduledTask
{
public:
	ns1__CreateScheduledTaskRequestType *ns1__CreateScheduledTask;	/* optional element of type ns1:CreateScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveEntityScheduledTask
#define SOAP_TYPE___ns1__RetrieveEntityScheduledTask (6629)
/* Operation wrapper: */
struct __ns1__RetrieveEntityScheduledTask
{
public:
	ns1__RetrieveEntityScheduledTaskRequestType *ns1__RetrieveEntityScheduledTask;	/* optional element of type ns1:RetrieveEntityScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateObjectScheduledTask
#define SOAP_TYPE___ns1__CreateObjectScheduledTask (6633)
/* Operation wrapper: */
struct __ns1__CreateObjectScheduledTask
{
public:
	ns1__CreateObjectScheduledTaskRequestType *ns1__CreateObjectScheduledTask;	/* optional element of type ns1:CreateObjectScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RetrieveObjectScheduledTask
#define SOAP_TYPE___ns1__RetrieveObjectScheduledTask (6637)
/* Operation wrapper: */
struct __ns1__RetrieveObjectScheduledTask
{
public:
	ns1__RetrieveObjectScheduledTaskRequestType *ns1__RetrieveObjectScheduledTask;	/* optional element of type ns1:RetrieveObjectScheduledTaskRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__OpenInventoryViewFolder
#define SOAP_TYPE___ns1__OpenInventoryViewFolder (6641)
/* Operation wrapper: */
struct __ns1__OpenInventoryViewFolder
{
public:
	ns1__OpenInventoryViewFolderRequestType *ns1__OpenInventoryViewFolder;	/* optional element of type ns1:OpenInventoryViewFolderRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CloseInventoryViewFolder
#define SOAP_TYPE___ns1__CloseInventoryViewFolder (6645)
/* Operation wrapper: */
struct __ns1__CloseInventoryViewFolder
{
public:
	ns1__CloseInventoryViewFolderRequestType *ns1__CloseInventoryViewFolder;	/* optional element of type ns1:CloseInventoryViewFolderRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyListView
#define SOAP_TYPE___ns1__ModifyListView (6649)
/* Operation wrapper: */
struct __ns1__ModifyListView
{
public:
	ns1__ModifyListViewRequestType *ns1__ModifyListView;	/* optional element of type ns1:ModifyListViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetListView
#define SOAP_TYPE___ns1__ResetListView (6653)
/* Operation wrapper: */
struct __ns1__ResetListView
{
public:
	ns1__ResetListViewRequestType *ns1__ResetListView;	/* optional element of type ns1:ResetListViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetListViewFromView
#define SOAP_TYPE___ns1__ResetListViewFromView (6657)
/* Operation wrapper: */
struct __ns1__ResetListViewFromView
{
public:
	ns1__ResetListViewFromViewRequestType *ns1__ResetListViewFromView;	/* optional element of type ns1:ResetListViewFromViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyView
#define SOAP_TYPE___ns1__DestroyView (6661)
/* Operation wrapper: */
struct __ns1__DestroyView
{
public:
	ns1__DestroyViewRequestType *ns1__DestroyView;	/* optional element of type ns1:DestroyViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateInventoryView
#define SOAP_TYPE___ns1__CreateInventoryView (6665)
/* Operation wrapper: */
struct __ns1__CreateInventoryView
{
public:
	ns1__CreateInventoryViewRequestType *ns1__CreateInventoryView;	/* optional element of type ns1:CreateInventoryViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateContainerView
#define SOAP_TYPE___ns1__CreateContainerView (6669)
/* Operation wrapper: */
struct __ns1__CreateContainerView
{
public:
	ns1__CreateContainerViewRequestType *ns1__CreateContainerView;	/* optional element of type ns1:CreateContainerViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateListView
#define SOAP_TYPE___ns1__CreateListView (6673)
/* Operation wrapper: */
struct __ns1__CreateListView
{
public:
	ns1__CreateListViewRequestType *ns1__CreateListView;	/* optional element of type ns1:CreateListViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateListViewFromView
#define SOAP_TYPE___ns1__CreateListViewFromView (6677)
/* Operation wrapper: */
struct __ns1__CreateListViewFromView
{
public:
	ns1__CreateListViewFromViewRequestType *ns1__CreateListViewFromView;	/* optional element of type ns1:CreateListViewFromViewRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RevertToSnapshot_USCORETask
#define SOAP_TYPE___ns1__RevertToSnapshot_USCORETask (6681)
/* Operation wrapper: */
struct __ns1__RevertToSnapshot_USCORETask
{
public:
	ns1__RevertToSnapshotRequestType *ns1__RevertToSnapshot_USCORETask;	/* optional element of type ns1:RevertToSnapshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveSnapshot_USCORETask
#define SOAP_TYPE___ns1__RemoveSnapshot_USCORETask (6685)
/* Operation wrapper: */
struct __ns1__RemoveSnapshot_USCORETask
{
public:
	ns1__RemoveSnapshotRequestType *ns1__RemoveSnapshot_USCORETask;	/* optional element of type ns1:RemoveSnapshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__RenameSnapshot
#define SOAP_TYPE___ns1__RenameSnapshot (6689)
/* Operation wrapper: */
struct __ns1__RenameSnapshot
{
public:
	ns1__RenameSnapshotRequestType *ns1__RenameSnapshot;	/* optional element of type ns1:RenameSnapshotRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckCompatibility_USCORETask
#define SOAP_TYPE___ns1__CheckCompatibility_USCORETask (6693)
/* Operation wrapper: */
struct __ns1__CheckCompatibility_USCORETask
{
public:
	ns1__CheckCompatibilityRequestType *ns1__CheckCompatibility_USCORETask;	/* optional element of type ns1:CheckCompatibilityRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryVMotionCompatibilityEx_USCORETask
#define SOAP_TYPE___ns1__QueryVMotionCompatibilityEx_USCORETask (6697)
/* Operation wrapper: */
struct __ns1__QueryVMotionCompatibilityEx_USCORETask
{
public:
	ns1__QueryVMotionCompatibilityExRequestType *ns1__QueryVMotionCompatibilityEx_USCORETask;	/* optional element of type ns1:QueryVMotionCompatibilityExRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckMigrate_USCORETask
#define SOAP_TYPE___ns1__CheckMigrate_USCORETask (6701)
/* Operation wrapper: */
struct __ns1__CheckMigrate_USCORETask
{
public:
	ns1__CheckMigrateRequestType *ns1__CheckMigrate_USCORETask;	/* optional element of type ns1:CheckMigrateRequestType */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckRelocate_USCORETask
#define SOAP_TYPE___ns1__CheckRelocate_USCORETask (6705)
/* Operation wrapper: */
struct __ns1__CheckRelocate_USCORETask
{
public:
	ns1__CheckRelocateRequestType *ns1__CheckRelocate_USCORETask;	/* optional element of type ns1:CheckRelocateRequestType */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (6706)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (6707)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (6709)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (6710)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (12)
typedef char xsd__byte;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyPropertyFilter(struct soap*, ns1__DestroyPropertyFilterRequestType *ns1__DestroyPropertyFilter, _ns1__DestroyPropertyFilterResponse *ns1__DestroyPropertyFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateFilter(struct soap*, ns1__CreateFilterRequestType *ns1__CreateFilter, _ns1__CreateFilterResponse *ns1__CreateFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveProperties(struct soap*, ns1__RetrievePropertiesRequestType *ns1__RetrieveProperties, _ns1__RetrievePropertiesResponse *ns1__RetrievePropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckForUpdates(struct soap*, ns1__CheckForUpdatesRequestType *ns1__CheckForUpdates, _ns1__CheckForUpdatesResponse *ns1__CheckForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__WaitForUpdates(struct soap*, ns1__WaitForUpdatesRequestType *ns1__WaitForUpdates, _ns1__WaitForUpdatesResponse *ns1__WaitForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CancelWaitForUpdates(struct soap*, ns1__CancelWaitForUpdatesRequestType *ns1__CancelWaitForUpdates, _ns1__CancelWaitForUpdatesResponse *ns1__CancelWaitForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__WaitForUpdatesEx(struct soap*, ns1__WaitForUpdatesExRequestType *ns1__WaitForUpdatesEx, _ns1__WaitForUpdatesExResponse *ns1__WaitForUpdatesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrievePropertiesEx(struct soap*, ns1__RetrievePropertiesExRequestType *ns1__RetrievePropertiesEx, _ns1__RetrievePropertiesExResponse *ns1__RetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ContinueRetrievePropertiesEx(struct soap*, ns1__ContinueRetrievePropertiesExRequestType *ns1__ContinueRetrievePropertiesEx, _ns1__ContinueRetrievePropertiesExResponse *ns1__ContinueRetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CancelRetrievePropertiesEx(struct soap*, ns1__CancelRetrievePropertiesExRequestType *ns1__CancelRetrievePropertiesEx, _ns1__CancelRetrievePropertiesExResponse *ns1__CancelRetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreatePropertyCollector(struct soap*, ns1__CreatePropertyCollectorRequestType *ns1__CreatePropertyCollector, _ns1__CreatePropertyCollectorResponse *ns1__CreatePropertyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyPropertyCollector(struct soap*, ns1__DestroyPropertyCollectorRequestType *ns1__DestroyPropertyCollector, _ns1__DestroyPropertyCollectorResponse *ns1__DestroyPropertyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddAuthorizationRole(struct soap*, ns1__AddAuthorizationRoleRequestType *ns1__AddAuthorizationRole, _ns1__AddAuthorizationRoleResponse *ns1__AddAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveAuthorizationRole(struct soap*, ns1__RemoveAuthorizationRoleRequestType *ns1__RemoveAuthorizationRole, _ns1__RemoveAuthorizationRoleResponse *ns1__RemoveAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateAuthorizationRole(struct soap*, ns1__UpdateAuthorizationRoleRequestType *ns1__UpdateAuthorizationRole, _ns1__UpdateAuthorizationRoleResponse *ns1__UpdateAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MergePermissions(struct soap*, ns1__MergePermissionsRequestType *ns1__MergePermissions, _ns1__MergePermissionsResponse *ns1__MergePermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveRolePermissions(struct soap*, ns1__RetrieveRolePermissionsRequestType *ns1__RetrieveRolePermissions, _ns1__RetrieveRolePermissionsResponse *ns1__RetrieveRolePermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveEntityPermissions(struct soap*, ns1__RetrieveEntityPermissionsRequestType *ns1__RetrieveEntityPermissions, _ns1__RetrieveEntityPermissionsResponse *ns1__RetrieveEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveAllPermissions(struct soap*, ns1__RetrieveAllPermissionsRequestType *ns1__RetrieveAllPermissions, _ns1__RetrieveAllPermissionsResponse *ns1__RetrieveAllPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetEntityPermissions(struct soap*, ns1__SetEntityPermissionsRequestType *ns1__SetEntityPermissions, _ns1__SetEntityPermissionsResponse *ns1__SetEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetEntityPermissions(struct soap*, ns1__ResetEntityPermissionsRequestType *ns1__ResetEntityPermissions, _ns1__ResetEntityPermissionsResponse *ns1__ResetEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveEntityPermission(struct soap*, ns1__RemoveEntityPermissionRequestType *ns1__RemoveEntityPermission, _ns1__RemoveEntityPermissionResponse *ns1__RemoveEntityPermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureCluster_USCORETask(struct soap*, ns1__ReconfigureClusterRequestType *ns1__ReconfigureCluster_USCORETask, _ns1__ReconfigureCluster_USCORETaskResponse *ns1__ReconfigureCluster_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ApplyRecommendation(struct soap*, ns1__ApplyRecommendationRequestType *ns1__ApplyRecommendation, _ns1__ApplyRecommendationResponse *ns1__ApplyRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CancelRecommendation(struct soap*, ns1__CancelRecommendationRequestType *ns1__CancelRecommendation, _ns1__CancelRecommendationResponse *ns1__CancelRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RecommendHostsForVm(struct soap*, ns1__RecommendHostsForVmRequestType *ns1__RecommendHostsForVm, _ns1__RecommendHostsForVmResponse *ns1__RecommendHostsForVmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddHost_USCORETask(struct soap*, ns1__AddHostRequestType *ns1__AddHost_USCORETask, _ns1__AddHost_USCORETaskResponse *ns1__AddHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveInto_USCORETask(struct soap*, ns1__MoveIntoRequestType *ns1__MoveInto_USCORETask, _ns1__MoveInto_USCORETaskResponse *ns1__MoveInto_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveHostInto_USCORETask(struct soap*, ns1__MoveHostIntoRequestType *ns1__MoveHostInto_USCORETask, _ns1__MoveHostInto_USCORETaskResponse *ns1__MoveHostInto_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshRecommendation(struct soap*, ns1__RefreshRecommendationRequestType *ns1__RefreshRecommendation, _ns1__RefreshRecommendationResponse *ns1__RefreshRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveDasAdvancedRuntimeInfo(struct soap*, ns1__RetrieveDasAdvancedRuntimeInfoRequestType *ns1__RetrieveDasAdvancedRuntimeInfo, _ns1__RetrieveDasAdvancedRuntimeInfoResponse *ns1__RetrieveDasAdvancedRuntimeInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureComputeResource_USCORETask(struct soap*, ns1__ReconfigureComputeResourceRequestType *ns1__ReconfigureComputeResource_USCORETask, _ns1__ReconfigureComputeResource_USCORETaskResponse *ns1__ReconfigureComputeResource_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddCustomFieldDef(struct soap*, ns1__AddCustomFieldDefRequestType *ns1__AddCustomFieldDef, _ns1__AddCustomFieldDefResponse *ns1__AddCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveCustomFieldDef(struct soap*, ns1__RemoveCustomFieldDefRequestType *ns1__RemoveCustomFieldDef, _ns1__RemoveCustomFieldDefResponse *ns1__RemoveCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RenameCustomFieldDef(struct soap*, ns1__RenameCustomFieldDefRequestType *ns1__RenameCustomFieldDef, _ns1__RenameCustomFieldDefResponse *ns1__RenameCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetField(struct soap*, ns1__SetFieldRequestType *ns1__SetField, _ns1__SetFieldResponse *ns1__SetFieldResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DoesCustomizationSpecExist(struct soap*, ns1__DoesCustomizationSpecExistRequestType *ns1__DoesCustomizationSpecExist, _ns1__DoesCustomizationSpecExistResponse *ns1__DoesCustomizationSpecExistResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetCustomizationSpec(struct soap*, ns1__GetCustomizationSpecRequestType *ns1__GetCustomizationSpec, _ns1__GetCustomizationSpecResponse *ns1__GetCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateCustomizationSpec(struct soap*, ns1__CreateCustomizationSpecRequestType *ns1__CreateCustomizationSpec, _ns1__CreateCustomizationSpecResponse *ns1__CreateCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__OverwriteCustomizationSpec(struct soap*, ns1__OverwriteCustomizationSpecRequestType *ns1__OverwriteCustomizationSpec, _ns1__OverwriteCustomizationSpecResponse *ns1__OverwriteCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteCustomizationSpec(struct soap*, ns1__DeleteCustomizationSpecRequestType *ns1__DeleteCustomizationSpec, _ns1__DeleteCustomizationSpecResponse *ns1__DeleteCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DuplicateCustomizationSpec(struct soap*, ns1__DuplicateCustomizationSpecRequestType *ns1__DuplicateCustomizationSpec, _ns1__DuplicateCustomizationSpecResponse *ns1__DuplicateCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RenameCustomizationSpec(struct soap*, ns1__RenameCustomizationSpecRequestType *ns1__RenameCustomizationSpec, _ns1__RenameCustomizationSpecResponse *ns1__RenameCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CustomizationSpecItemToXml(struct soap*, ns1__CustomizationSpecItemToXmlRequestType *ns1__CustomizationSpecItemToXml, _ns1__CustomizationSpecItemToXmlResponse *ns1__CustomizationSpecItemToXmlResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__XmlToCustomizationSpecItem(struct soap*, ns1__XmlToCustomizationSpecItemRequestType *ns1__XmlToCustomizationSpecItem, _ns1__XmlToCustomizationSpecItemResponse *ns1__XmlToCustomizationSpecItemResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckCustomizationResources(struct soap*, ns1__CheckCustomizationResourcesRequestType *ns1__CheckCustomizationResources, _ns1__CheckCustomizationResourcesResponse *ns1__CheckCustomizationResourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryConnectionInfo(struct soap*, ns1__QueryConnectionInfoRequestType *ns1__QueryConnectionInfo, _ns1__QueryConnectionInfoResponse *ns1__QueryConnectionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerOnMultiVM_USCORETask(struct soap*, ns1__PowerOnMultiVMRequestType *ns1__PowerOnMultiVM_USCORETask, _ns1__PowerOnMultiVM_USCORETaskResponse *ns1__PowerOnMultiVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshDatastore(struct soap*, ns1__RefreshDatastoreRequestType *ns1__RefreshDatastore, _ns1__RefreshDatastoreResponse *ns1__RefreshDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshDatastoreStorageInfo(struct soap*, ns1__RefreshDatastoreStorageInfoRequestType *ns1__RefreshDatastoreStorageInfo, _ns1__RefreshDatastoreStorageInfoResponse *ns1__RefreshDatastoreStorageInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateVirtualMachineFiles_USCORETask(struct soap*, ns1__UpdateVirtualMachineFilesRequestType *ns1__UpdateVirtualMachineFiles_USCORETask, _ns1__UpdateVirtualMachineFiles_USCORETaskResponse *ns1__UpdateVirtualMachineFiles_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RenameDatastore(struct soap*, ns1__RenameDatastoreRequestType *ns1__RenameDatastore, _ns1__RenameDatastoreResponse *ns1__RenameDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyDatastore(struct soap*, ns1__DestroyDatastoreRequestType *ns1__DestroyDatastore, _ns1__DestroyDatastoreResponse *ns1__DestroyDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDescriptions(struct soap*, ns1__QueryDescriptionsRequestType *ns1__QueryDescriptions, _ns1__QueryDescriptionsResponse *ns1__QueryDescriptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__BrowseDiagnosticLog(struct soap*, ns1__BrowseDiagnosticLogRequestType *ns1__BrowseDiagnosticLog, _ns1__BrowseDiagnosticLogResponse *ns1__BrowseDiagnosticLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GenerateLogBundles_USCORETask(struct soap*, ns1__GenerateLogBundlesRequestType *ns1__GenerateLogBundles_USCORETask, _ns1__GenerateLogBundles_USCORETaskResponse *ns1__GenerateLogBundles_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FetchDVPortKeys(struct soap*, ns1__FetchDVPortKeysRequestType *ns1__FetchDVPortKeys, _ns1__FetchDVPortKeysResponse *ns1__FetchDVPortKeysResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FetchDVPorts(struct soap*, ns1__FetchDVPortsRequestType *ns1__FetchDVPorts, _ns1__FetchDVPortsResponse *ns1__FetchDVPortsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryUsedVlanIdInDvs(struct soap*, ns1__QueryUsedVlanIdInDvsRequestType *ns1__QueryUsedVlanIdInDvs, _ns1__QueryUsedVlanIdInDvsResponse *ns1__QueryUsedVlanIdInDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureDvs_USCORETask(struct soap*, ns1__ReconfigureDvsRequestType *ns1__ReconfigureDvs_USCORETask, _ns1__ReconfigureDvs_USCORETaskResponse *ns1__ReconfigureDvs_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PerformDvsProductSpecOperation_USCORETask(struct soap*, ns1__PerformDvsProductSpecOperationRequestType *ns1__PerformDvsProductSpecOperation_USCORETask, _ns1__PerformDvsProductSpecOperation_USCORETaskResponse *ns1__PerformDvsProductSpecOperation_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MergeDvs_USCORETask(struct soap*, ns1__MergeDvsRequestType *ns1__MergeDvs_USCORETask, _ns1__MergeDvs_USCORETaskResponse *ns1__MergeDvs_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddDVPortgroup_USCORETask(struct soap*, ns1__AddDVPortgroupRequestType *ns1__AddDVPortgroup_USCORETask, _ns1__AddDVPortgroup_USCORETaskResponse *ns1__AddDVPortgroup_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveDVPort_USCORETask(struct soap*, ns1__MoveDVPortRequestType *ns1__MoveDVPort_USCORETask, _ns1__MoveDVPort_USCORETaskResponse *ns1__MoveDVPort_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDvsCapability(struct soap*, ns1__UpdateDvsCapabilityRequestType *ns1__UpdateDvsCapability, _ns1__UpdateDvsCapabilityResponse *ns1__UpdateDvsCapabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureDVPort_USCORETask(struct soap*, ns1__ReconfigureDVPortRequestType *ns1__ReconfigureDVPort_USCORETask, _ns1__ReconfigureDVPort_USCORETaskResponse *ns1__ReconfigureDVPort_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshDVPortState(struct soap*, ns1__RefreshDVPortStateRequestType *ns1__RefreshDVPortState, _ns1__RefreshDVPortStateResponse *ns1__RefreshDVPortStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RectifyDvsHost_USCORETask(struct soap*, ns1__RectifyDvsHostRequestType *ns1__RectifyDvsHost_USCORETask, _ns1__RectifyDvsHost_USCORETaskResponse *ns1__RectifyDvsHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateNetworkResourcePool(struct soap*, ns1__UpdateNetworkResourcePoolRequestType *ns1__UpdateNetworkResourcePool, _ns1__UpdateNetworkResourcePoolResponse *ns1__UpdateNetworkResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableNetworkResourceManagement(struct soap*, ns1__EnableNetworkResourceManagementRequestType *ns1__EnableNetworkResourceManagement, _ns1__EnableNetworkResourceManagementResponse *ns1__EnableNetworkResourceManagementResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryConfigOptionDescriptor(struct soap*, ns1__QueryConfigOptionDescriptorRequestType *ns1__QueryConfigOptionDescriptor, _ns1__QueryConfigOptionDescriptorResponse *ns1__QueryConfigOptionDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryConfigOption(struct soap*, ns1__QueryConfigOptionRequestType *ns1__QueryConfigOption, _ns1__QueryConfigOptionResponse *ns1__QueryConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryConfigTarget(struct soap*, ns1__QueryConfigTargetRequestType *ns1__QueryConfigTarget, _ns1__QueryConfigTargetResponse *ns1__QueryConfigTargetResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryTargetCapabilities(struct soap*, ns1__QueryTargetCapabilitiesRequestType *ns1__QueryTargetCapabilities, _ns1__QueryTargetCapabilitiesResponse *ns1__QueryTargetCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__setCustomValue(struct soap*, ns1__setCustomValueRequestType *ns1__setCustomValue, _ns1__setCustomValueResponse *ns1__setCustomValueResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnregisterExtension(struct soap*, ns1__UnregisterExtensionRequestType *ns1__UnregisterExtension, _ns1__UnregisterExtensionResponse *ns1__UnregisterExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindExtension(struct soap*, ns1__FindExtensionRequestType *ns1__FindExtension, _ns1__FindExtensionResponse *ns1__FindExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RegisterExtension(struct soap*, ns1__RegisterExtensionRequestType *ns1__RegisterExtension, _ns1__RegisterExtensionResponse *ns1__RegisterExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateExtension(struct soap*, ns1__UpdateExtensionRequestType *ns1__UpdateExtension, _ns1__UpdateExtensionResponse *ns1__UpdateExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetPublicKey(struct soap*, ns1__GetPublicKeyRequestType *ns1__GetPublicKey, _ns1__GetPublicKeyResponse *ns1__GetPublicKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetPublicKey(struct soap*, ns1__SetPublicKeyRequestType *ns1__SetPublicKey, _ns1__SetPublicKeyResponse *ns1__SetPublicKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetExtensionCertificate(struct soap*, ns1__SetExtensionCertificateRequestType *ns1__SetExtensionCertificate, _ns1__SetExtensionCertificateResponse *ns1__SetExtensionCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveDatastoreFile_USCORETask(struct soap*, ns1__MoveDatastoreFileRequestType *ns1__MoveDatastoreFile_USCORETask, _ns1__MoveDatastoreFile_USCORETaskResponse *ns1__MoveDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CopyDatastoreFile_USCORETask(struct soap*, ns1__CopyDatastoreFileRequestType *ns1__CopyDatastoreFile_USCORETask, _ns1__CopyDatastoreFile_USCORETaskResponse *ns1__CopyDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteDatastoreFile_USCORETask(struct soap*, ns1__DeleteDatastoreFileRequestType *ns1__DeleteDatastoreFile_USCORETask, _ns1__DeleteDatastoreFile_USCORETaskResponse *ns1__DeleteDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MakeDirectory(struct soap*, ns1__MakeDirectoryRequestType *ns1__MakeDirectory, _ns1__MakeDirectoryResponse *ns1__MakeDirectoryResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ChangeOwner(struct soap*, ns1__ChangeOwnerRequestType *ns1__ChangeOwner, _ns1__ChangeOwnerResponse *ns1__ChangeOwnerResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateFolder(struct soap*, ns1__CreateFolderRequestType *ns1__CreateFolder, _ns1__CreateFolderResponse *ns1__CreateFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveIntoFolder_USCORETask(struct soap*, ns1__MoveIntoFolderRequestType *ns1__MoveIntoFolder_USCORETask, _ns1__MoveIntoFolder_USCORETaskResponse *ns1__MoveIntoFolder_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateVM_USCORETask(struct soap*, ns1__CreateVMRequestType *ns1__CreateVM_USCORETask, _ns1__CreateVM_USCORETaskResponse *ns1__CreateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RegisterVM_USCORETask(struct soap*, ns1__RegisterVMRequestType *ns1__RegisterVM_USCORETask, _ns1__RegisterVM_USCORETaskResponse *ns1__RegisterVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateCluster(struct soap*, ns1__CreateClusterRequestType *ns1__CreateCluster, _ns1__CreateClusterResponse *ns1__CreateClusterResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateClusterEx(struct soap*, ns1__CreateClusterExRequestType *ns1__CreateClusterEx, _ns1__CreateClusterExResponse *ns1__CreateClusterExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddStandaloneHost_USCORETask(struct soap*, ns1__AddStandaloneHostRequestType *ns1__AddStandaloneHost_USCORETask, _ns1__AddStandaloneHost_USCORETaskResponse *ns1__AddStandaloneHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateDatacenter(struct soap*, ns1__CreateDatacenterRequestType *ns1__CreateDatacenter, _ns1__CreateDatacenterResponse *ns1__CreateDatacenterResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnregisterAndDestroy_USCORETask(struct soap*, ns1__UnregisterAndDestroyRequestType *ns1__UnregisterAndDestroy_USCORETask, _ns1__UnregisterAndDestroy_USCORETaskResponse *ns1__UnregisterAndDestroy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateDVS_USCORETask(struct soap*, ns1__CreateDVSRequestType *ns1__CreateDVS_USCORETask, _ns1__CreateDVS_USCORETaskResponse *ns1__CreateDVS_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetCollectorPageSize(struct soap*, ns1__SetCollectorPageSizeRequestType *ns1__SetCollectorPageSize, _ns1__SetCollectorPageSizeResponse *ns1__SetCollectorPageSizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RewindCollector(struct soap*, ns1__RewindCollectorRequestType *ns1__RewindCollector, _ns1__RewindCollectorResponse *ns1__RewindCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetCollector(struct soap*, ns1__ResetCollectorRequestType *ns1__ResetCollector, _ns1__ResetCollectorResponse *ns1__ResetCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyCollector(struct soap*, ns1__DestroyCollectorRequestType *ns1__DestroyCollector, _ns1__DestroyCollectorResponse *ns1__DestroyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryHostConnectionInfo(struct soap*, ns1__QueryHostConnectionInfoRequestType *ns1__QueryHostConnectionInfo, _ns1__QueryHostConnectionInfoResponse *ns1__QueryHostConnectionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateSystemResources(struct soap*, ns1__UpdateSystemResourcesRequestType *ns1__UpdateSystemResources, _ns1__UpdateSystemResourcesResponse *ns1__UpdateSystemResourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconnectHost_USCORETask(struct soap*, ns1__ReconnectHostRequestType *ns1__ReconnectHost_USCORETask, _ns1__ReconnectHost_USCORETaskResponse *ns1__ReconnectHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisconnectHost_USCORETask(struct soap*, ns1__DisconnectHostRequestType *ns1__DisconnectHost_USCORETask, _ns1__DisconnectHost_USCORETaskResponse *ns1__DisconnectHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnterMaintenanceMode_USCORETask(struct soap*, ns1__EnterMaintenanceModeRequestType *ns1__EnterMaintenanceMode_USCORETask, _ns1__EnterMaintenanceMode_USCORETaskResponse *ns1__EnterMaintenanceMode_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExitMaintenanceMode_USCORETask(struct soap*, ns1__ExitMaintenanceModeRequestType *ns1__ExitMaintenanceMode_USCORETask, _ns1__ExitMaintenanceMode_USCORETaskResponse *ns1__ExitMaintenanceMode_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RebootHost_USCORETask(struct soap*, ns1__RebootHostRequestType *ns1__RebootHost_USCORETask, _ns1__RebootHost_USCORETaskResponse *ns1__RebootHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ShutdownHost_USCORETask(struct soap*, ns1__ShutdownHostRequestType *ns1__ShutdownHost_USCORETask, _ns1__ShutdownHost_USCORETaskResponse *ns1__ShutdownHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerDownHostToStandBy_USCORETask(struct soap*, ns1__PowerDownHostToStandByRequestType *ns1__PowerDownHostToStandBy_USCORETask, _ns1__PowerDownHostToStandBy_USCORETaskResponse *ns1__PowerDownHostToStandBy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerUpHostFromStandBy_USCORETask(struct soap*, ns1__PowerUpHostFromStandByRequestType *ns1__PowerUpHostFromStandBy_USCORETask, _ns1__PowerUpHostFromStandBy_USCORETaskResponse *ns1__PowerUpHostFromStandBy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryMemoryOverhead(struct soap*, ns1__QueryMemoryOverheadRequestType *ns1__QueryMemoryOverhead, _ns1__QueryMemoryOverheadResponse *ns1__QueryMemoryOverheadResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryMemoryOverheadEx(struct soap*, ns1__QueryMemoryOverheadExRequestType *ns1__QueryMemoryOverheadEx, _ns1__QueryMemoryOverheadExResponse *ns1__QueryMemoryOverheadExResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureHostForDAS_USCORETask(struct soap*, ns1__ReconfigureHostForDASRequestType *ns1__ReconfigureHostForDAS_USCORETask, _ns1__ReconfigureHostForDAS_USCORETaskResponse *ns1__ReconfigureHostForDAS_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateFlags(struct soap*, ns1__UpdateFlagsRequestType *ns1__UpdateFlags, _ns1__UpdateFlagsResponse *ns1__UpdateFlagsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnterLockdownMode(struct soap*, ns1__EnterLockdownModeRequestType *ns1__EnterLockdownMode, _ns1__EnterLockdownModeResponse *ns1__EnterLockdownModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExitLockdownMode(struct soap*, ns1__ExitLockdownModeRequestType *ns1__ExitLockdownMode, _ns1__ExitLockdownModeResponse *ns1__ExitLockdownModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcquireCimServicesTicket(struct soap*, ns1__AcquireCimServicesTicketRequestType *ns1__AcquireCimServicesTicket, _ns1__AcquireCimServicesTicketResponse *ns1__AcquireCimServicesTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateIpmi(struct soap*, ns1__UpdateIpmiRequestType *ns1__UpdateIpmi, _ns1__UpdateIpmiResponse *ns1__UpdateIpmiResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveHardwareUptime(struct soap*, ns1__RetrieveHardwareUptimeRequestType *ns1__RetrieveHardwareUptime, _ns1__RetrieveHardwareUptimeResponse *ns1__RetrieveHardwareUptimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__HttpNfcLeaseGetManifest(struct soap*, ns1__HttpNfcLeaseGetManifestRequestType *ns1__HttpNfcLeaseGetManifest, _ns1__HttpNfcLeaseGetManifestResponse *ns1__HttpNfcLeaseGetManifestResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__HttpNfcLeaseComplete(struct soap*, ns1__HttpNfcLeaseCompleteRequestType *ns1__HttpNfcLeaseComplete, _ns1__HttpNfcLeaseCompleteResponse *ns1__HttpNfcLeaseCompleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__HttpNfcLeaseAbort(struct soap*, ns1__HttpNfcLeaseAbortRequestType *ns1__HttpNfcLeaseAbort, _ns1__HttpNfcLeaseAbortResponse *ns1__HttpNfcLeaseAbortResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__HttpNfcLeaseProgress(struct soap*, ns1__HttpNfcLeaseProgressRequestType *ns1__HttpNfcLeaseProgress, _ns1__HttpNfcLeaseProgressResponse *ns1__HttpNfcLeaseProgressResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryIpPools(struct soap*, ns1__QueryIpPoolsRequestType *ns1__QueryIpPools, _ns1__QueryIpPoolsResponse *ns1__QueryIpPoolsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateIpPool(struct soap*, ns1__CreateIpPoolRequestType *ns1__CreateIpPool, _ns1__CreateIpPoolResponse *ns1__CreateIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateIpPool(struct soap*, ns1__UpdateIpPoolRequestType *ns1__UpdateIpPool, _ns1__UpdateIpPoolResponse *ns1__UpdateIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyIpPool(struct soap*, ns1__DestroyIpPoolRequestType *ns1__DestroyIpPool, _ns1__DestroyIpPoolResponse *ns1__DestroyIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateAssignedLicense(struct soap*, ns1__UpdateAssignedLicenseRequestType *ns1__UpdateAssignedLicense, _ns1__UpdateAssignedLicenseResponse *ns1__UpdateAssignedLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveAssignedLicense(struct soap*, ns1__RemoveAssignedLicenseRequestType *ns1__RemoveAssignedLicense, _ns1__RemoveAssignedLicenseResponse *ns1__RemoveAssignedLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAssignedLicenses(struct soap*, ns1__QueryAssignedLicensesRequestType *ns1__QueryAssignedLicenses, _ns1__QueryAssignedLicensesResponse *ns1__QueryAssignedLicensesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QuerySupportedFeatures(struct soap*, ns1__QuerySupportedFeaturesRequestType *ns1__QuerySupportedFeatures, _ns1__QuerySupportedFeaturesResponse *ns1__QuerySupportedFeaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryLicenseSourceAvailability(struct soap*, ns1__QueryLicenseSourceAvailabilityRequestType *ns1__QueryLicenseSourceAvailability, _ns1__QueryLicenseSourceAvailabilityResponse *ns1__QueryLicenseSourceAvailabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryLicenseUsage(struct soap*, ns1__QueryLicenseUsageRequestType *ns1__QueryLicenseUsage, _ns1__QueryLicenseUsageResponse *ns1__QueryLicenseUsageResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetLicenseEdition(struct soap*, ns1__SetLicenseEditionRequestType *ns1__SetLicenseEdition, _ns1__SetLicenseEditionResponse *ns1__SetLicenseEditionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckLicenseFeature(struct soap*, ns1__CheckLicenseFeatureRequestType *ns1__CheckLicenseFeature, _ns1__CheckLicenseFeatureResponse *ns1__CheckLicenseFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableFeature(struct soap*, ns1__EnableFeatureRequestType *ns1__EnableFeature, _ns1__EnableFeatureResponse *ns1__EnableFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisableFeature(struct soap*, ns1__DisableFeatureRequestType *ns1__DisableFeature, _ns1__DisableFeatureResponse *ns1__DisableFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ConfigureLicenseSource(struct soap*, ns1__ConfigureLicenseSourceRequestType *ns1__ConfigureLicenseSource, _ns1__ConfigureLicenseSourceResponse *ns1__ConfigureLicenseSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateLicense(struct soap*, ns1__UpdateLicenseRequestType *ns1__UpdateLicense, _ns1__UpdateLicenseResponse *ns1__UpdateLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddLicense(struct soap*, ns1__AddLicenseRequestType *ns1__AddLicense, _ns1__AddLicenseResponse *ns1__AddLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveLicense(struct soap*, ns1__RemoveLicenseRequestType *ns1__RemoveLicense, _ns1__RemoveLicenseResponse *ns1__RemoveLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DecodeLicense(struct soap*, ns1__DecodeLicenseRequestType *ns1__DecodeLicense, _ns1__DecodeLicenseResponse *ns1__DecodeLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateLicenseLabel(struct soap*, ns1__UpdateLicenseLabelRequestType *ns1__UpdateLicenseLabel, _ns1__UpdateLicenseLabelResponse *ns1__UpdateLicenseLabelResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveLicenseLabel(struct soap*, ns1__RemoveLicenseLabelRequestType *ns1__RemoveLicenseLabel, _ns1__RemoveLicenseLabelResponse *ns1__RemoveLicenseLabelResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Reload(struct soap*, ns1__ReloadRequestType *ns1__Reload, _ns1__ReloadResponse *ns1__ReloadResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Rename_USCORETask(struct soap*, ns1__RenameRequestType *ns1__Rename_USCORETask, _ns1__Rename_USCORETaskResponse *ns1__Rename_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Destroy_USCORETask(struct soap*, ns1__DestroyRequestType *ns1__Destroy_USCORETask, _ns1__Destroy_USCORETaskResponse *ns1__Destroy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyNetwork(struct soap*, ns1__DestroyNetworkRequestType *ns1__DestroyNetwork, _ns1__DestroyNetworkResponse *ns1__DestroyNetworkResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ValidateHost(struct soap*, ns1__ValidateHostRequestType *ns1__ValidateHost, _ns1__ValidateHostResponse *ns1__ValidateHostResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ParseDescriptor(struct soap*, ns1__ParseDescriptorRequestType *ns1__ParseDescriptor, _ns1__ParseDescriptorResponse *ns1__ParseDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateImportSpec(struct soap*, ns1__CreateImportSpecRequestType *ns1__CreateImportSpec, _ns1__CreateImportSpecResponse *ns1__CreateImportSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateDescriptor(struct soap*, ns1__CreateDescriptorRequestType *ns1__CreateDescriptor, _ns1__CreateDescriptorResponse *ns1__CreateDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPerfProviderSummary(struct soap*, ns1__QueryPerfProviderSummaryRequestType *ns1__QueryPerfProviderSummary, _ns1__QueryPerfProviderSummaryResponse *ns1__QueryPerfProviderSummaryResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAvailablePerfMetric(struct soap*, ns1__QueryAvailablePerfMetricRequestType *ns1__QueryAvailablePerfMetric, _ns1__QueryAvailablePerfMetricResponse *ns1__QueryAvailablePerfMetricResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPerfCounter(struct soap*, ns1__QueryPerfCounterRequestType *ns1__QueryPerfCounter, _ns1__QueryPerfCounterResponse *ns1__QueryPerfCounterResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPerfCounterByLevel(struct soap*, ns1__QueryPerfCounterByLevelRequestType *ns1__QueryPerfCounterByLevel, _ns1__QueryPerfCounterByLevelResponse *ns1__QueryPerfCounterByLevelResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPerf(struct soap*, ns1__QueryPerfRequestType *ns1__QueryPerf, _ns1__QueryPerfResponse *ns1__QueryPerfResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPerfComposite(struct soap*, ns1__QueryPerfCompositeRequestType *ns1__QueryPerfComposite, _ns1__QueryPerfCompositeResponse *ns1__QueryPerfCompositeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreatePerfInterval(struct soap*, ns1__CreatePerfIntervalRequestType *ns1__CreatePerfInterval, _ns1__CreatePerfIntervalResponse *ns1__CreatePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemovePerfInterval(struct soap*, ns1__RemovePerfIntervalRequestType *ns1__RemovePerfInterval, _ns1__RemovePerfIntervalResponse *ns1__RemovePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdatePerfInterval(struct soap*, ns1__UpdatePerfIntervalRequestType *ns1__UpdatePerfInterval, _ns1__UpdatePerfIntervalResponse *ns1__UpdatePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EstimateDatabaseSize(struct soap*, ns1__EstimateDatabaseSizeRequestType *ns1__EstimateDatabaseSize, _ns1__EstimateDatabaseSizeResponse *ns1__EstimateDatabaseSizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateConfig(struct soap*, ns1__UpdateConfigRequestType *ns1__UpdateConfig, _ns1__UpdateConfigResponse *ns1__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveIntoResourcePool(struct soap*, ns1__MoveIntoResourcePoolRequestType *ns1__MoveIntoResourcePool, _ns1__MoveIntoResourcePoolResponse *ns1__MoveIntoResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateChildResourceConfiguration(struct soap*, ns1__UpdateChildResourceConfigurationRequestType *ns1__UpdateChildResourceConfiguration, _ns1__UpdateChildResourceConfigurationResponse *ns1__UpdateChildResourceConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateResourcePool(struct soap*, ns1__CreateResourcePoolRequestType *ns1__CreateResourcePool, _ns1__CreateResourcePoolResponse *ns1__CreateResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyChildren(struct soap*, ns1__DestroyChildrenRequestType *ns1__DestroyChildren, _ns1__DestroyChildrenResponse *ns1__DestroyChildrenResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateVApp(struct soap*, ns1__CreateVAppRequestType *ns1__CreateVApp, _ns1__CreateVAppResponse *ns1__CreateVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateChildVM_USCORETask(struct soap*, ns1__CreateChildVMRequestType *ns1__CreateChildVM_USCORETask, _ns1__CreateChildVM_USCORETaskResponse *ns1__CreateChildVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RegisterChildVM_USCORETask(struct soap*, ns1__RegisterChildVMRequestType *ns1__RegisterChildVM_USCORETask, _ns1__RegisterChildVM_USCORETaskResponse *ns1__RegisterChildVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ImportVApp(struct soap*, ns1__ImportVAppRequestType *ns1__ImportVApp, _ns1__ImportVAppResponse *ns1__ImportVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryResourceConfigOption(struct soap*, ns1__QueryResourceConfigOptionRequestType *ns1__QueryResourceConfigOption, _ns1__QueryResourceConfigOptionResponse *ns1__QueryResourceConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshRuntime(struct soap*, ns1__RefreshRuntimeRequestType *ns1__RefreshRuntime, _ns1__RefreshRuntimeResponse *ns1__RefreshRuntimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindByUuid(struct soap*, ns1__FindByUuidRequestType *ns1__FindByUuid, _ns1__FindByUuidResponse *ns1__FindByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindByDatastorePath(struct soap*, ns1__FindByDatastorePathRequestType *ns1__FindByDatastorePath, _ns1__FindByDatastorePathResponse *ns1__FindByDatastorePathResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindByDnsName(struct soap*, ns1__FindByDnsNameRequestType *ns1__FindByDnsName, _ns1__FindByDnsNameResponse *ns1__FindByDnsNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindByIp(struct soap*, ns1__FindByIpRequestType *ns1__FindByIp, _ns1__FindByIpResponse *ns1__FindByIpResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindByInventoryPath(struct soap*, ns1__FindByInventoryPathRequestType *ns1__FindByInventoryPath, _ns1__FindByInventoryPathResponse *ns1__FindByInventoryPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindChild(struct soap*, ns1__FindChildRequestType *ns1__FindChild, _ns1__FindChildResponse *ns1__FindChildResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindAllByUuid(struct soap*, ns1__FindAllByUuidRequestType *ns1__FindAllByUuid, _ns1__FindAllByUuidResponse *ns1__FindAllByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindAllByDnsName(struct soap*, ns1__FindAllByDnsNameRequestType *ns1__FindAllByDnsName, _ns1__FindAllByDnsNameResponse *ns1__FindAllByDnsNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindAllByIp(struct soap*, ns1__FindAllByIpRequestType *ns1__FindAllByIp, _ns1__FindAllByIpResponse *ns1__FindAllByIpResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CurrentTime(struct soap*, ns1__CurrentTimeRequestType *ns1__CurrentTime, _ns1__CurrentTimeResponse *ns1__CurrentTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveServiceContent(struct soap*, ns1__RetrieveServiceContentRequestType *ns1__RetrieveServiceContent, _ns1__RetrieveServiceContentResponse *ns1__RetrieveServiceContentResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ValidateMigration(struct soap*, ns1__ValidateMigrationRequestType *ns1__ValidateMigration, _ns1__ValidateMigrationResponse *ns1__ValidateMigrationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVMotionCompatibility(struct soap*, ns1__QueryVMotionCompatibilityRequestType *ns1__QueryVMotionCompatibility, _ns1__QueryVMotionCompatibilityResponse *ns1__QueryVMotionCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveProductComponents(struct soap*, ns1__RetrieveProductComponentsRequestType *ns1__RetrieveProductComponents, _ns1__RetrieveProductComponentsResponse *ns1__RetrieveProductComponentsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateServiceMessage(struct soap*, ns1__UpdateServiceMessageRequestType *ns1__UpdateServiceMessage, _ns1__UpdateServiceMessageResponse *ns1__UpdateServiceMessageResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Login(struct soap*, ns1__LoginRequestType *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__LoginBySSPI(struct soap*, ns1__LoginBySSPIRequestType *ns1__LoginBySSPI, _ns1__LoginBySSPIResponse *ns1__LoginBySSPIResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Logout(struct soap*, ns1__LogoutRequestType *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcquireLocalTicket(struct soap*, ns1__AcquireLocalTicketRequestType *ns1__AcquireLocalTicket, _ns1__AcquireLocalTicketResponse *ns1__AcquireLocalTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__TerminateSession(struct soap*, ns1__TerminateSessionRequestType *ns1__TerminateSession, _ns1__TerminateSessionResponse *ns1__TerminateSessionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetLocale(struct soap*, ns1__SetLocaleRequestType *ns1__SetLocale, _ns1__SetLocaleResponse *ns1__SetLocaleResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__LoginExtensionBySubjectName(struct soap*, ns1__LoginExtensionBySubjectNameRequestType *ns1__LoginExtensionBySubjectName, _ns1__LoginExtensionBySubjectNameResponse *ns1__LoginExtensionBySubjectNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__LoginExtensionByCertificate(struct soap*, ns1__LoginExtensionByCertificateRequestType *ns1__LoginExtensionByCertificate, _ns1__LoginExtensionByCertificateResponse *ns1__LoginExtensionByCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ImpersonateUser(struct soap*, ns1__ImpersonateUserRequestType *ns1__ImpersonateUser, _ns1__ImpersonateUserResponse *ns1__ImpersonateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SessionIsActive(struct soap*, ns1__SessionIsActiveRequestType *ns1__SessionIsActive, _ns1__SessionIsActiveResponse *ns1__SessionIsActiveResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcquireCloneTicket(struct soap*, ns1__AcquireCloneTicketRequestType *ns1__AcquireCloneTicket, _ns1__AcquireCloneTicketResponse *ns1__AcquireCloneTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CloneSession(struct soap*, ns1__CloneSessionRequestType *ns1__CloneSession, _ns1__CloneSessionResponse *ns1__CloneSessionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ConfigureDatastoreIORM_USCORETask(struct soap*, ns1__ConfigureDatastoreIORMRequestType *ns1__ConfigureDatastoreIORM_USCORETask, _ns1__ConfigureDatastoreIORM_USCORETaskResponse *ns1__ConfigureDatastoreIORM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryIORMConfigOption(struct soap*, ns1__QueryIORMConfigOptionRequestType *ns1__QueryIORMConfigOption, _ns1__QueryIORMConfigOptionResponse *ns1__QueryIORMConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CancelTask(struct soap*, ns1__CancelTaskRequestType *ns1__CancelTask, _ns1__CancelTaskResponse *ns1__CancelTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateProgress(struct soap*, ns1__UpdateProgressRequestType *ns1__UpdateProgress, _ns1__UpdateProgressResponse *ns1__UpdateProgressResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetTaskState(struct soap*, ns1__SetTaskStateRequestType *ns1__SetTaskState, _ns1__SetTaskStateResponse *ns1__SetTaskStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetTaskDescription(struct soap*, ns1__SetTaskDescriptionRequestType *ns1__SetTaskDescription, _ns1__SetTaskDescriptionResponse *ns1__SetTaskDescriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReadNextTasks(struct soap*, ns1__ReadNextTasksRequestType *ns1__ReadNextTasks, _ns1__ReadNextTasksResponse *ns1__ReadNextTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReadPreviousTasks(struct soap*, ns1__ReadPreviousTasksRequestType *ns1__ReadPreviousTasks, _ns1__ReadPreviousTasksResponse *ns1__ReadPreviousTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateCollectorForTasks(struct soap*, ns1__CreateCollectorForTasksRequestType *ns1__CreateCollectorForTasks, _ns1__CreateCollectorForTasksResponse *ns1__CreateCollectorForTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateTask(struct soap*, ns1__CreateTaskRequestType *ns1__CreateTask, _ns1__CreateTaskResponse *ns1__CreateTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveUserGroups(struct soap*, ns1__RetrieveUserGroupsRequestType *ns1__RetrieveUserGroups, _ns1__RetrieveUserGroupsResponse *ns1__RetrieveUserGroupsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateVAppConfig(struct soap*, ns1__UpdateVAppConfigRequestType *ns1__UpdateVAppConfig, _ns1__UpdateVAppConfigResponse *ns1__UpdateVAppConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateLinkedChildren(struct soap*, ns1__UpdateLinkedChildrenRequestType *ns1__UpdateLinkedChildren, _ns1__UpdateLinkedChildrenResponse *ns1__UpdateLinkedChildrenResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CloneVApp_USCORETask(struct soap*, ns1__CloneVAppRequestType *ns1__CloneVApp_USCORETask, _ns1__CloneVApp_USCORETaskResponse *ns1__CloneVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExportVApp(struct soap*, ns1__ExportVAppRequestType *ns1__ExportVApp, _ns1__ExportVAppResponse *ns1__ExportVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerOnVApp_USCORETask(struct soap*, ns1__PowerOnVAppRequestType *ns1__PowerOnVApp_USCORETask, _ns1__PowerOnVApp_USCORETaskResponse *ns1__PowerOnVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerOffVApp_USCORETask(struct soap*, ns1__PowerOffVAppRequestType *ns1__PowerOffVApp_USCORETask, _ns1__PowerOffVApp_USCORETaskResponse *ns1__PowerOffVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SuspendVApp_USCORETask(struct soap*, ns1__SuspendVAppRequestType *ns1__SuspendVApp_USCORETask, _ns1__SuspendVApp_USCORETaskResponse *ns1__SuspendVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__unregisterVApp_USCORETask(struct soap*, ns1__unregisterVAppRequestType *ns1__unregisterVApp_USCORETask, _ns1__unregisterVApp_USCORETaskResponse *ns1__unregisterVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateVirtualDisk_USCORETask(struct soap*, ns1__CreateVirtualDiskRequestType *ns1__CreateVirtualDisk_USCORETask, _ns1__CreateVirtualDisk_USCORETaskResponse *ns1__CreateVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteVirtualDisk_USCORETask(struct soap*, ns1__DeleteVirtualDiskRequestType *ns1__DeleteVirtualDisk_USCORETask, _ns1__DeleteVirtualDisk_USCORETaskResponse *ns1__DeleteVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MoveVirtualDisk_USCORETask(struct soap*, ns1__MoveVirtualDiskRequestType *ns1__MoveVirtualDisk_USCORETask, _ns1__MoveVirtualDisk_USCORETaskResponse *ns1__MoveVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CopyVirtualDisk_USCORETask(struct soap*, ns1__CopyVirtualDiskRequestType *ns1__CopyVirtualDisk_USCORETask, _ns1__CopyVirtualDisk_USCORETaskResponse *ns1__CopyVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExtendVirtualDisk_USCORETask(struct soap*, ns1__ExtendVirtualDiskRequestType *ns1__ExtendVirtualDisk_USCORETask, _ns1__ExtendVirtualDisk_USCORETaskResponse *ns1__ExtendVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVirtualDiskFragmentation(struct soap*, ns1__QueryVirtualDiskFragmentationRequestType *ns1__QueryVirtualDiskFragmentation, _ns1__QueryVirtualDiskFragmentationResponse *ns1__QueryVirtualDiskFragmentationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DefragmentVirtualDisk_USCORETask(struct soap*, ns1__DefragmentVirtualDiskRequestType *ns1__DefragmentVirtualDisk_USCORETask, _ns1__DefragmentVirtualDisk_USCORETaskResponse *ns1__DefragmentVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ShrinkVirtualDisk_USCORETask(struct soap*, ns1__ShrinkVirtualDiskRequestType *ns1__ShrinkVirtualDisk_USCORETask, _ns1__ShrinkVirtualDisk_USCORETaskResponse *ns1__ShrinkVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__InflateVirtualDisk_USCORETask(struct soap*, ns1__InflateVirtualDiskRequestType *ns1__InflateVirtualDisk_USCORETask, _ns1__InflateVirtualDisk_USCORETaskResponse *ns1__InflateVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EagerZeroVirtualDisk_USCORETask(struct soap*, ns1__EagerZeroVirtualDiskRequestType *ns1__EagerZeroVirtualDisk_USCORETask, _ns1__EagerZeroVirtualDisk_USCORETaskResponse *ns1__EagerZeroVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ZeroFillVirtualDisk_USCORETask(struct soap*, ns1__ZeroFillVirtualDiskRequestType *ns1__ZeroFillVirtualDisk_USCORETask, _ns1__ZeroFillVirtualDisk_USCORETaskResponse *ns1__ZeroFillVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetVirtualDiskUuid(struct soap*, ns1__SetVirtualDiskUuidRequestType *ns1__SetVirtualDiskUuid, _ns1__SetVirtualDiskUuidResponse *ns1__SetVirtualDiskUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVirtualDiskUuid(struct soap*, ns1__QueryVirtualDiskUuidRequestType *ns1__QueryVirtualDiskUuid, _ns1__QueryVirtualDiskUuidResponse *ns1__QueryVirtualDiskUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVirtualDiskGeometry(struct soap*, ns1__QueryVirtualDiskGeometryRequestType *ns1__QueryVirtualDiskGeometry, _ns1__QueryVirtualDiskGeometryResponse *ns1__QueryVirtualDiskGeometryResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshStorageInfo(struct soap*, ns1__RefreshStorageInfoRequestType *ns1__RefreshStorageInfo, _ns1__RefreshStorageInfoResponse *ns1__RefreshStorageInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateSnapshot_USCORETask(struct soap*, ns1__CreateSnapshotRequestType *ns1__CreateSnapshot_USCORETask, _ns1__CreateSnapshot_USCORETaskResponse *ns1__CreateSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RevertToCurrentSnapshot_USCORETask(struct soap*, ns1__RevertToCurrentSnapshotRequestType *ns1__RevertToCurrentSnapshot_USCORETask, _ns1__RevertToCurrentSnapshot_USCORETaskResponse *ns1__RevertToCurrentSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveAllSnapshots_USCORETask(struct soap*, ns1__RemoveAllSnapshotsRequestType *ns1__RemoveAllSnapshots_USCORETask, _ns1__RemoveAllSnapshots_USCORETaskResponse *ns1__RemoveAllSnapshots_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigVM_USCORETask(struct soap*, ns1__ReconfigVMRequestType *ns1__ReconfigVM_USCORETask, _ns1__ReconfigVM_USCORETaskResponse *ns1__ReconfigVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpgradeVM_USCORETask(struct soap*, ns1__UpgradeVMRequestType *ns1__UpgradeVM_USCORETask, _ns1__UpgradeVM_USCORETaskResponse *ns1__UpgradeVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExtractOvfEnvironment(struct soap*, ns1__ExtractOvfEnvironmentRequestType *ns1__ExtractOvfEnvironment, _ns1__ExtractOvfEnvironmentResponse *ns1__ExtractOvfEnvironmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerOnVM_USCORETask(struct soap*, ns1__PowerOnVMRequestType *ns1__PowerOnVM_USCORETask, _ns1__PowerOnVM_USCORETaskResponse *ns1__PowerOnVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PowerOffVM_USCORETask(struct soap*, ns1__PowerOffVMRequestType *ns1__PowerOffVM_USCORETask, _ns1__PowerOffVM_USCORETaskResponse *ns1__PowerOffVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SuspendVM_USCORETask(struct soap*, ns1__SuspendVMRequestType *ns1__SuspendVM_USCORETask, _ns1__SuspendVM_USCORETaskResponse *ns1__SuspendVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetVM_USCORETask(struct soap*, ns1__ResetVMRequestType *ns1__ResetVM_USCORETask, _ns1__ResetVM_USCORETaskResponse *ns1__ResetVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ShutdownGuest(struct soap*, ns1__ShutdownGuestRequestType *ns1__ShutdownGuest, _ns1__ShutdownGuestResponse *ns1__ShutdownGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RebootGuest(struct soap*, ns1__RebootGuestRequestType *ns1__RebootGuest, _ns1__RebootGuestResponse *ns1__RebootGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StandbyGuest(struct soap*, ns1__StandbyGuestRequestType *ns1__StandbyGuest, _ns1__StandbyGuestResponse *ns1__StandbyGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AnswerVM(struct soap*, ns1__AnswerVMRequestType *ns1__AnswerVM, _ns1__AnswerVMResponse *ns1__AnswerVMResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CustomizeVM_USCORETask(struct soap*, ns1__CustomizeVMRequestType *ns1__CustomizeVM_USCORETask, _ns1__CustomizeVM_USCORETaskResponse *ns1__CustomizeVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckCustomizationSpec(struct soap*, ns1__CheckCustomizationSpecRequestType *ns1__CheckCustomizationSpec, _ns1__CheckCustomizationSpecResponse *ns1__CheckCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MigrateVM_USCORETask(struct soap*, ns1__MigrateVMRequestType *ns1__MigrateVM_USCORETask, _ns1__MigrateVM_USCORETaskResponse *ns1__MigrateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RelocateVM_USCORETask(struct soap*, ns1__RelocateVMRequestType *ns1__RelocateVM_USCORETask, _ns1__RelocateVM_USCORETaskResponse *ns1__RelocateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CloneVM_USCORETask(struct soap*, ns1__CloneVMRequestType *ns1__CloneVM_USCORETask, _ns1__CloneVM_USCORETaskResponse *ns1__CloneVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExportVm(struct soap*, ns1__ExportVmRequestType *ns1__ExportVm, _ns1__ExportVmResponse *ns1__ExportVmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MarkAsTemplate(struct soap*, ns1__MarkAsTemplateRequestType *ns1__MarkAsTemplate, _ns1__MarkAsTemplateResponse *ns1__MarkAsTemplateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MarkAsVirtualMachine(struct soap*, ns1__MarkAsVirtualMachineRequestType *ns1__MarkAsVirtualMachine, _ns1__MarkAsVirtualMachineResponse *ns1__MarkAsVirtualMachineResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnregisterVM(struct soap*, ns1__UnregisterVMRequestType *ns1__UnregisterVM, _ns1__UnregisterVMResponse *ns1__UnregisterVMResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetGuestInformation(struct soap*, ns1__ResetGuestInformationRequestType *ns1__ResetGuestInformation, _ns1__ResetGuestInformationResponse *ns1__ResetGuestInformationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MountToolsInstaller(struct soap*, ns1__MountToolsInstallerRequestType *ns1__MountToolsInstaller, _ns1__MountToolsInstallerResponse *ns1__MountToolsInstallerResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnmountToolsInstaller(struct soap*, ns1__UnmountToolsInstallerRequestType *ns1__UnmountToolsInstaller, _ns1__UnmountToolsInstallerResponse *ns1__UnmountToolsInstallerResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpgradeTools_USCORETask(struct soap*, ns1__UpgradeToolsRequestType *ns1__UpgradeTools_USCORETask, _ns1__UpgradeTools_USCORETaskResponse *ns1__UpgradeTools_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcquireMksTicket(struct soap*, ns1__AcquireMksTicketRequestType *ns1__AcquireMksTicket, _ns1__AcquireMksTicketResponse *ns1__AcquireMksTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcquireTicket(struct soap*, ns1__AcquireTicketRequestType *ns1__AcquireTicket, _ns1__AcquireTicketResponse *ns1__AcquireTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetScreenResolution(struct soap*, ns1__SetScreenResolutionRequestType *ns1__SetScreenResolution, _ns1__SetScreenResolutionResponse *ns1__SetScreenResolutionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DefragmentAllDisks(struct soap*, ns1__DefragmentAllDisksRequestType *ns1__DefragmentAllDisks, _ns1__DefragmentAllDisksResponse *ns1__DefragmentAllDisksResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateSecondaryVM_USCORETask(struct soap*, ns1__CreateSecondaryVMRequestType *ns1__CreateSecondaryVM_USCORETask, _ns1__CreateSecondaryVM_USCORETaskResponse *ns1__CreateSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__TurnOffFaultToleranceForVM_USCORETask(struct soap*, ns1__TurnOffFaultToleranceForVMRequestType *ns1__TurnOffFaultToleranceForVM_USCORETask, _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse *ns1__TurnOffFaultToleranceForVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__MakePrimaryVM_USCORETask(struct soap*, ns1__MakePrimaryVMRequestType *ns1__MakePrimaryVM_USCORETask, _ns1__MakePrimaryVM_USCORETaskResponse *ns1__MakePrimaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__TerminateFaultTolerantVM_USCORETask(struct soap*, ns1__TerminateFaultTolerantVMRequestType *ns1__TerminateFaultTolerantVM_USCORETask, _ns1__TerminateFaultTolerantVM_USCORETaskResponse *ns1__TerminateFaultTolerantVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisableSecondaryVM_USCORETask(struct soap*, ns1__DisableSecondaryVMRequestType *ns1__DisableSecondaryVM_USCORETask, _ns1__DisableSecondaryVM_USCORETaskResponse *ns1__DisableSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableSecondaryVM_USCORETask(struct soap*, ns1__EnableSecondaryVMRequestType *ns1__EnableSecondaryVM_USCORETask, _ns1__EnableSecondaryVM_USCORETaskResponse *ns1__EnableSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetDisplayTopology(struct soap*, ns1__SetDisplayTopologyRequestType *ns1__SetDisplayTopology, _ns1__SetDisplayTopologyResponse *ns1__SetDisplayTopologyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StartRecording_USCORETask(struct soap*, ns1__StartRecordingRequestType *ns1__StartRecording_USCORETask, _ns1__StartRecording_USCORETaskResponse *ns1__StartRecording_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StopRecording_USCORETask(struct soap*, ns1__StopRecordingRequestType *ns1__StopRecording_USCORETask, _ns1__StopRecording_USCORETaskResponse *ns1__StopRecording_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StartReplaying_USCORETask(struct soap*, ns1__StartReplayingRequestType *ns1__StartReplaying_USCORETask, _ns1__StartReplaying_USCORETaskResponse *ns1__StartReplaying_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StopReplaying_USCORETask(struct soap*, ns1__StopReplayingRequestType *ns1__StopReplaying_USCORETask, _ns1__StopReplaying_USCORETaskResponse *ns1__StopReplaying_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PromoteDisks_USCORETask(struct soap*, ns1__PromoteDisksRequestType *ns1__PromoteDisks_USCORETask, _ns1__PromoteDisks_USCORETaskResponse *ns1__PromoteDisks_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateScreenshot_USCORETask(struct soap*, ns1__CreateScreenshotRequestType *ns1__CreateScreenshot_USCORETask, _ns1__CreateScreenshot_USCORETaskResponse *ns1__CreateScreenshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryChangedDiskAreas(struct soap*, ns1__QueryChangedDiskAreasRequestType *ns1__QueryChangedDiskAreas, _ns1__QueryChangedDiskAreasResponse *ns1__QueryChangedDiskAreasResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryUnownedFiles(struct soap*, ns1__QueryUnownedFilesRequestType *ns1__QueryUnownedFiles, _ns1__QueryUnownedFilesResponse *ns1__QueryUnownedFilesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__reloadVirtualMachineFromPath_USCORETask(struct soap*, ns1__reloadVirtualMachineFromPathRequestType *ns1__reloadVirtualMachineFromPath_USCORETask, _ns1__reloadVirtualMachineFromPath_USCORETaskResponse *ns1__reloadVirtualMachineFromPath_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryFaultToleranceCompatibility(struct soap*, ns1__QueryFaultToleranceCompatibilityRequestType *ns1__QueryFaultToleranceCompatibility, _ns1__QueryFaultToleranceCompatibilityResponse *ns1__QueryFaultToleranceCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveAlarm(struct soap*, ns1__RemoveAlarmRequestType *ns1__RemoveAlarm, _ns1__RemoveAlarmResponse *ns1__RemoveAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureAlarm(struct soap*, ns1__ReconfigureAlarmRequestType *ns1__ReconfigureAlarm, _ns1__ReconfigureAlarmResponse *ns1__ReconfigureAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateAlarm(struct soap*, ns1__CreateAlarmRequestType *ns1__CreateAlarm, _ns1__CreateAlarmResponse *ns1__CreateAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetAlarm(struct soap*, ns1__GetAlarmRequestType *ns1__GetAlarm, _ns1__GetAlarmResponse *ns1__GetAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AreAlarmActionsEnabled(struct soap*, ns1__AreAlarmActionsEnabledRequestType *ns1__AreAlarmActionsEnabled, _ns1__AreAlarmActionsEnabledResponse *ns1__AreAlarmActionsEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableAlarmActions(struct soap*, ns1__EnableAlarmActionsRequestType *ns1__EnableAlarmActions, _ns1__EnableAlarmActionsResponse *ns1__EnableAlarmActionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetAlarmState(struct soap*, ns1__GetAlarmStateRequestType *ns1__GetAlarmState, _ns1__GetAlarmStateResponse *ns1__GetAlarmStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AcknowledgeAlarm(struct soap*, ns1__AcknowledgeAlarmRequestType *ns1__AcknowledgeAlarm, _ns1__AcknowledgeAlarmResponse *ns1__AcknowledgeAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureDVPortgroup_USCORETask(struct soap*, ns1__ReconfigureDVPortgroupRequestType *ns1__ReconfigureDVPortgroup_USCORETask, _ns1__ReconfigureDVPortgroup_USCORETaskResponse *ns1__ReconfigureDVPortgroup_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAvailableDvsSpec(struct soap*, ns1__QueryAvailableDvsSpecRequestType *ns1__QueryAvailableDvsSpec, _ns1__QueryAvailableDvsSpecResponse *ns1__QueryAvailableDvsSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryCompatibleHostForNewDvs(struct soap*, ns1__QueryCompatibleHostForNewDvsRequestType *ns1__QueryCompatibleHostForNewDvs, _ns1__QueryCompatibleHostForNewDvsResponse *ns1__QueryCompatibleHostForNewDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryCompatibleHostForExistingDvs(struct soap*, ns1__QueryCompatibleHostForExistingDvsRequestType *ns1__QueryCompatibleHostForExistingDvs, _ns1__QueryCompatibleHostForExistingDvsResponse *ns1__QueryCompatibleHostForExistingDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDvsCompatibleHostSpec(struct soap*, ns1__QueryDvsCompatibleHostSpecRequestType *ns1__QueryDvsCompatibleHostSpec, _ns1__QueryDvsCompatibleHostSpecResponse *ns1__QueryDvsCompatibleHostSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDvsFeatureCapability(struct soap*, ns1__QueryDvsFeatureCapabilityRequestType *ns1__QueryDvsFeatureCapability, _ns1__QueryDvsFeatureCapabilityResponse *ns1__QueryDvsFeatureCapabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDvsByUuid(struct soap*, ns1__QueryDvsByUuidRequestType *ns1__QueryDvsByUuid, _ns1__QueryDvsByUuidResponse *ns1__QueryDvsByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDvsConfigTarget(struct soap*, ns1__QueryDvsConfigTargetRequestType *ns1__QueryDvsConfigTarget, _ns1__QueryDvsConfigTargetResponse *ns1__QueryDvsConfigTargetResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDvsCheckCompatibility(struct soap*, ns1__QueryDvsCheckCompatibilityRequestType *ns1__QueryDvsCheckCompatibility, _ns1__QueryDvsCheckCompatibilityResponse *ns1__QueryDvsCheckCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReadNextEvents(struct soap*, ns1__ReadNextEventsRequestType *ns1__ReadNextEvents, _ns1__ReadNextEventsResponse *ns1__ReadNextEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReadPreviousEvents(struct soap*, ns1__ReadPreviousEventsRequestType *ns1__ReadPreviousEvents, _ns1__ReadPreviousEventsResponse *ns1__ReadPreviousEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveArgumentDescription(struct soap*, ns1__RetrieveArgumentDescriptionRequestType *ns1__RetrieveArgumentDescription, _ns1__RetrieveArgumentDescriptionResponse *ns1__RetrieveArgumentDescriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateCollectorForEvents(struct soap*, ns1__CreateCollectorForEventsRequestType *ns1__CreateCollectorForEvents, _ns1__CreateCollectorForEventsResponse *ns1__CreateCollectorForEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__LogUserEvent(struct soap*, ns1__LogUserEventRequestType *ns1__LogUserEvent, _ns1__LogUserEventResponse *ns1__LogUserEventResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryEvents(struct soap*, ns1__QueryEventsRequestType *ns1__QueryEvents, _ns1__QueryEventsResponse *ns1__QueryEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__PostEvent(struct soap*, ns1__PostEventRequestType *ns1__PostEvent, _ns1__PostEventResponse *ns1__PostEventResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__JoinDomain_USCORETask(struct soap*, ns1__JoinDomainRequestType *ns1__JoinDomain_USCORETask, _ns1__JoinDomain_USCORETaskResponse *ns1__JoinDomain_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__LeaveCurrentDomain_USCORETask(struct soap*, ns1__LeaveCurrentDomainRequestType *ns1__LeaveCurrentDomain_USCORETask, _ns1__LeaveCurrentDomain_USCORETaskResponse *ns1__LeaveCurrentDomain_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureAutostart(struct soap*, ns1__ReconfigureAutostartRequestType *ns1__ReconfigureAutostart, _ns1__ReconfigureAutostartResponse *ns1__ReconfigureAutostartResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AutoStartPowerOn(struct soap*, ns1__AutoStartPowerOnRequestType *ns1__AutoStartPowerOn, _ns1__AutoStartPowerOnResponse *ns1__AutoStartPowerOnResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AutoStartPowerOff(struct soap*, ns1__AutoStartPowerOffRequestType *ns1__AutoStartPowerOff, _ns1__AutoStartPowerOffResponse *ns1__AutoStartPowerOffResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryBootDevices(struct soap*, ns1__QueryBootDevicesRequestType *ns1__QueryBootDevices, _ns1__QueryBootDevicesResponse *ns1__QueryBootDevicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateBootDevice(struct soap*, ns1__UpdateBootDeviceRequestType *ns1__UpdateBootDevice, _ns1__UpdateBootDeviceResponse *ns1__UpdateBootDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableHyperThreading(struct soap*, ns1__EnableHyperThreadingRequestType *ns1__EnableHyperThreading, _ns1__EnableHyperThreadingResponse *ns1__EnableHyperThreadingResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisableHyperThreading(struct soap*, ns1__DisableHyperThreadingRequestType *ns1__DisableHyperThreading, _ns1__DisableHyperThreadingResponse *ns1__DisableHyperThreadingResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SearchDatastore_USCORETask(struct soap*, ns1__SearchDatastoreRequestType *ns1__SearchDatastore_USCORETask, _ns1__SearchDatastore_USCORETaskResponse *ns1__SearchDatastore_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SearchDatastoreSubFolders_USCORETask(struct soap*, ns1__SearchDatastoreSubFoldersRequestType *ns1__SearchDatastoreSubFolders_USCORETask, _ns1__SearchDatastoreSubFolders_USCORETaskResponse *ns1__SearchDatastoreSubFolders_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeleteFile(struct soap*, ns1__DeleteFileRequestType *ns1__DeleteFile, _ns1__DeleteFileResponse *ns1__DeleteFileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateLocalSwapDatastore(struct soap*, ns1__UpdateLocalSwapDatastoreRequestType *ns1__UpdateLocalSwapDatastore, _ns1__UpdateLocalSwapDatastoreResponse *ns1__UpdateLocalSwapDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAvailableDisksForVmfs(struct soap*, ns1__QueryAvailableDisksForVmfsRequestType *ns1__QueryAvailableDisksForVmfs, _ns1__QueryAvailableDisksForVmfsResponse *ns1__QueryAvailableDisksForVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVmfsDatastoreCreateOptions(struct soap*, ns1__QueryVmfsDatastoreCreateOptionsRequestType *ns1__QueryVmfsDatastoreCreateOptions, _ns1__QueryVmfsDatastoreCreateOptionsResponse *ns1__QueryVmfsDatastoreCreateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateVmfsDatastore(struct soap*, ns1__CreateVmfsDatastoreRequestType *ns1__CreateVmfsDatastore, _ns1__CreateVmfsDatastoreResponse *ns1__CreateVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVmfsDatastoreExtendOptions(struct soap*, ns1__QueryVmfsDatastoreExtendOptionsRequestType *ns1__QueryVmfsDatastoreExtendOptions, _ns1__QueryVmfsDatastoreExtendOptionsResponse *ns1__QueryVmfsDatastoreExtendOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVmfsDatastoreExpandOptions(struct soap*, ns1__QueryVmfsDatastoreExpandOptionsRequestType *ns1__QueryVmfsDatastoreExpandOptions, _ns1__QueryVmfsDatastoreExpandOptionsResponse *ns1__QueryVmfsDatastoreExpandOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExtendVmfsDatastore(struct soap*, ns1__ExtendVmfsDatastoreRequestType *ns1__ExtendVmfsDatastore, _ns1__ExtendVmfsDatastoreResponse *ns1__ExtendVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExpandVmfsDatastore(struct soap*, ns1__ExpandVmfsDatastoreRequestType *ns1__ExpandVmfsDatastore, _ns1__ExpandVmfsDatastoreResponse *ns1__ExpandVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateNasDatastore(struct soap*, ns1__CreateNasDatastoreRequestType *ns1__CreateNasDatastore, _ns1__CreateNasDatastoreResponse *ns1__CreateNasDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateLocalDatastore(struct soap*, ns1__CreateLocalDatastoreRequestType *ns1__CreateLocalDatastore, _ns1__CreateLocalDatastoreResponse *ns1__CreateLocalDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveDatastore(struct soap*, ns1__RemoveDatastoreRequestType *ns1__RemoveDatastore, _ns1__RemoveDatastoreResponse *ns1__RemoveDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ConfigureDatastorePrincipal(struct soap*, ns1__ConfigureDatastorePrincipalRequestType *ns1__ConfigureDatastorePrincipal, _ns1__ConfigureDatastorePrincipalResponse *ns1__ConfigureDatastorePrincipalResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryUnresolvedVmfsVolumes(struct soap*, ns1__QueryUnresolvedVmfsVolumesRequestType *ns1__QueryUnresolvedVmfsVolumes, _ns1__QueryUnresolvedVmfsVolumesResponse *ns1__QueryUnresolvedVmfsVolumesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResignatureUnresolvedVmfsVolume_USCORETask(struct soap*, ns1__ResignatureUnresolvedVmfsVolumeRequestType *ns1__ResignatureUnresolvedVmfsVolume_USCORETask, _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse *ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDateTimeConfig(struct soap*, ns1__UpdateDateTimeConfigRequestType *ns1__UpdateDateTimeConfig, _ns1__UpdateDateTimeConfigResponse *ns1__UpdateDateTimeConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAvailableTimeZones(struct soap*, ns1__QueryAvailableTimeZonesRequestType *ns1__QueryAvailableTimeZones, _ns1__QueryAvailableTimeZonesResponse *ns1__QueryAvailableTimeZonesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryDateTime(struct soap*, ns1__QueryDateTimeRequestType *ns1__QueryDateTime, _ns1__QueryDateTimeResponse *ns1__QueryDateTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDateTime(struct soap*, ns1__UpdateDateTimeRequestType *ns1__UpdateDateTime, _ns1__UpdateDateTimeResponse *ns1__UpdateDateTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshDateTimeSystem(struct soap*, ns1__RefreshDateTimeSystemRequestType *ns1__RefreshDateTimeSystem, _ns1__RefreshDateTimeSystemResponse *ns1__RefreshDateTimeSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryAvailablePartition(struct soap*, ns1__QueryAvailablePartitionRequestType *ns1__QueryAvailablePartition, _ns1__QueryAvailablePartitionResponse *ns1__QueryAvailablePartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectActivePartition(struct soap*, ns1__SelectActivePartitionRequestType *ns1__SelectActivePartition, _ns1__SelectActivePartitionResponse *ns1__SelectActivePartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPartitionCreateOptions(struct soap*, ns1__QueryPartitionCreateOptionsRequestType *ns1__QueryPartitionCreateOptions, _ns1__QueryPartitionCreateOptionsResponse *ns1__QueryPartitionCreateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPartitionCreateDesc(struct soap*, ns1__QueryPartitionCreateDescRequestType *ns1__QueryPartitionCreateDesc, _ns1__QueryPartitionCreateDescResponse *ns1__QueryPartitionCreateDescResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateDiagnosticPartition(struct soap*, ns1__CreateDiagnosticPartitionRequestType *ns1__CreateDiagnosticPartition, _ns1__CreateDiagnosticPartitionResponse *ns1__CreateDiagnosticPartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDefaultPolicy(struct soap*, ns1__UpdateDefaultPolicyRequestType *ns1__UpdateDefaultPolicy, _ns1__UpdateDefaultPolicyResponse *ns1__UpdateDefaultPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableRuleset(struct soap*, ns1__EnableRulesetRequestType *ns1__EnableRuleset, _ns1__EnableRulesetResponse *ns1__EnableRulesetResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisableRuleset(struct soap*, ns1__DisableRulesetRequestType *ns1__DisableRuleset, _ns1__DisableRulesetResponse *ns1__DisableRulesetResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshFirewall(struct soap*, ns1__RefreshFirewallRequestType *ns1__RefreshFirewall, _ns1__RefreshFirewallResponse *ns1__RefreshFirewallResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetFirmwareToFactoryDefaults(struct soap*, ns1__ResetFirmwareToFactoryDefaultsRequestType *ns1__ResetFirmwareToFactoryDefaults, _ns1__ResetFirmwareToFactoryDefaultsResponse *ns1__ResetFirmwareToFactoryDefaultsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__BackupFirmwareConfiguration(struct soap*, ns1__BackupFirmwareConfigurationRequestType *ns1__BackupFirmwareConfiguration, _ns1__BackupFirmwareConfigurationResponse *ns1__BackupFirmwareConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryFirmwareConfigUploadURL(struct soap*, ns1__QueryFirmwareConfigUploadURLRequestType *ns1__QueryFirmwareConfigUploadURL, _ns1__QueryFirmwareConfigUploadURLResponse *ns1__QueryFirmwareConfigUploadURLResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RestoreFirmwareConfiguration(struct soap*, ns1__RestoreFirmwareConfigurationRequestType *ns1__RestoreFirmwareConfiguration, _ns1__RestoreFirmwareConfigurationResponse *ns1__RestoreFirmwareConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshHealthStatusSystem(struct soap*, ns1__RefreshHealthStatusSystemRequestType *ns1__RefreshHealthStatusSystem, _ns1__RefreshHealthStatusSystemResponse *ns1__RefreshHealthStatusSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetSystemHealthInfo(struct soap*, ns1__ResetSystemHealthInfoRequestType *ns1__ResetSystemHealthInfo, _ns1__ResetSystemHealthInfoResponse *ns1__ResetSystemHealthInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryModules(struct soap*, ns1__QueryModulesRequestType *ns1__QueryModules, _ns1__QueryModulesResponse *ns1__QueryModulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateModuleOptionString(struct soap*, ns1__UpdateModuleOptionStringRequestType *ns1__UpdateModuleOptionString, _ns1__UpdateModuleOptionStringResponse *ns1__UpdateModuleOptionStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryConfiguredModuleOptionString(struct soap*, ns1__QueryConfiguredModuleOptionStringRequestType *ns1__QueryConfiguredModuleOptionString, _ns1__QueryConfiguredModuleOptionStringResponse *ns1__QueryConfiguredModuleOptionStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateUser(struct soap*, ns1__CreateUserRequestType *ns1__CreateUser, _ns1__CreateUserResponse *ns1__CreateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateUser(struct soap*, ns1__UpdateUserRequestType *ns1__UpdateUser, _ns1__UpdateUserResponse *ns1__UpdateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateGroup(struct soap*, ns1__CreateGroupRequestType *ns1__CreateGroup, _ns1__CreateGroupResponse *ns1__CreateGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveUser(struct soap*, ns1__RemoveUserRequestType *ns1__RemoveUser, _ns1__RemoveUserResponse *ns1__RemoveUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveGroup(struct soap*, ns1__RemoveGroupRequestType *ns1__RemoveGroup, _ns1__RemoveGroupResponse *ns1__RemoveGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AssignUserToGroup(struct soap*, ns1__AssignUserToGroupRequestType *ns1__AssignUserToGroup, _ns1__AssignUserToGroupResponse *ns1__AssignUserToGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnassignUserFromGroup(struct soap*, ns1__UnassignUserFromGroupRequestType *ns1__UnassignUserFromGroup, _ns1__UnassignUserFromGroupResponse *ns1__UnassignUserFromGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureServiceConsoleReservation(struct soap*, ns1__ReconfigureServiceConsoleReservationRequestType *ns1__ReconfigureServiceConsoleReservation, _ns1__ReconfigureServiceConsoleReservationResponse *ns1__ReconfigureServiceConsoleReservationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureVirtualMachineReservation(struct soap*, ns1__ReconfigureVirtualMachineReservationRequestType *ns1__ReconfigureVirtualMachineReservation, _ns1__ReconfigureVirtualMachineReservationResponse *ns1__ReconfigureVirtualMachineReservationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateNetworkConfig(struct soap*, ns1__UpdateNetworkConfigRequestType *ns1__UpdateNetworkConfig, _ns1__UpdateNetworkConfigResponse *ns1__UpdateNetworkConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDnsConfig(struct soap*, ns1__UpdateDnsConfigRequestType *ns1__UpdateDnsConfig, _ns1__UpdateDnsConfigResponse *ns1__UpdateDnsConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateIpRouteConfig(struct soap*, ns1__UpdateIpRouteConfigRequestType *ns1__UpdateIpRouteConfig, _ns1__UpdateIpRouteConfigResponse *ns1__UpdateIpRouteConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateConsoleIpRouteConfig(struct soap*, ns1__UpdateConsoleIpRouteConfigRequestType *ns1__UpdateConsoleIpRouteConfig, _ns1__UpdateConsoleIpRouteConfigResponse *ns1__UpdateConsoleIpRouteConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateIpRouteTableConfig(struct soap*, ns1__UpdateIpRouteTableConfigRequestType *ns1__UpdateIpRouteTableConfig, _ns1__UpdateIpRouteTableConfigResponse *ns1__UpdateIpRouteTableConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddVirtualSwitch(struct soap*, ns1__AddVirtualSwitchRequestType *ns1__AddVirtualSwitch, _ns1__AddVirtualSwitchResponse *ns1__AddVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveVirtualSwitch(struct soap*, ns1__RemoveVirtualSwitchRequestType *ns1__RemoveVirtualSwitch, _ns1__RemoveVirtualSwitchResponse *ns1__RemoveVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateVirtualSwitch(struct soap*, ns1__UpdateVirtualSwitchRequestType *ns1__UpdateVirtualSwitch, _ns1__UpdateVirtualSwitchResponse *ns1__UpdateVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddPortGroup(struct soap*, ns1__AddPortGroupRequestType *ns1__AddPortGroup, _ns1__AddPortGroupResponse *ns1__AddPortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemovePortGroup(struct soap*, ns1__RemovePortGroupRequestType *ns1__RemovePortGroup, _ns1__RemovePortGroupResponse *ns1__RemovePortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdatePortGroup(struct soap*, ns1__UpdatePortGroupRequestType *ns1__UpdatePortGroup, _ns1__UpdatePortGroupResponse *ns1__UpdatePortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdatePhysicalNicLinkSpeed(struct soap*, ns1__UpdatePhysicalNicLinkSpeedRequestType *ns1__UpdatePhysicalNicLinkSpeed, _ns1__UpdatePhysicalNicLinkSpeedResponse *ns1__UpdatePhysicalNicLinkSpeedResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryNetworkHint(struct soap*, ns1__QueryNetworkHintRequestType *ns1__QueryNetworkHint, _ns1__QueryNetworkHintResponse *ns1__QueryNetworkHintResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddVirtualNic(struct soap*, ns1__AddVirtualNicRequestType *ns1__AddVirtualNic, _ns1__AddVirtualNicResponse *ns1__AddVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveVirtualNic(struct soap*, ns1__RemoveVirtualNicRequestType *ns1__RemoveVirtualNic, _ns1__RemoveVirtualNicResponse *ns1__RemoveVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateVirtualNic(struct soap*, ns1__UpdateVirtualNicRequestType *ns1__UpdateVirtualNic, _ns1__UpdateVirtualNicResponse *ns1__UpdateVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddServiceConsoleVirtualNic(struct soap*, ns1__AddServiceConsoleVirtualNicRequestType *ns1__AddServiceConsoleVirtualNic, _ns1__AddServiceConsoleVirtualNicResponse *ns1__AddServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveServiceConsoleVirtualNic(struct soap*, ns1__RemoveServiceConsoleVirtualNicRequestType *ns1__RemoveServiceConsoleVirtualNic, _ns1__RemoveServiceConsoleVirtualNicResponse *ns1__RemoveServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateServiceConsoleVirtualNic(struct soap*, ns1__UpdateServiceConsoleVirtualNicRequestType *ns1__UpdateServiceConsoleVirtualNic, _ns1__UpdateServiceConsoleVirtualNicResponse *ns1__UpdateServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RestartServiceConsoleVirtualNic(struct soap*, ns1__RestartServiceConsoleVirtualNicRequestType *ns1__RestartServiceConsoleVirtualNic, _ns1__RestartServiceConsoleVirtualNicResponse *ns1__RestartServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshNetworkSystem(struct soap*, ns1__RefreshNetworkSystemRequestType *ns1__RefreshNetworkSystem, _ns1__RefreshNetworkSystemResponse *ns1__RefreshNetworkSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckHostPatch_USCORETask(struct soap*, ns1__CheckHostPatchRequestType *ns1__CheckHostPatch_USCORETask, _ns1__CheckHostPatch_USCORETaskResponse *ns1__CheckHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ScanHostPatch_USCORETask(struct soap*, ns1__ScanHostPatchRequestType *ns1__ScanHostPatch_USCORETask, _ns1__ScanHostPatch_USCORETaskResponse *ns1__ScanHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ScanHostPatchV2_USCORETask(struct soap*, ns1__ScanHostPatchV2RequestType *ns1__ScanHostPatchV2_USCORETask, _ns1__ScanHostPatchV2_USCORETaskResponse *ns1__ScanHostPatchV2_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StageHostPatch_USCORETask(struct soap*, ns1__StageHostPatchRequestType *ns1__StageHostPatch_USCORETask, _ns1__StageHostPatch_USCORETaskResponse *ns1__StageHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__InstallHostPatch_USCORETask(struct soap*, ns1__InstallHostPatchRequestType *ns1__InstallHostPatch_USCORETask, _ns1__InstallHostPatch_USCORETaskResponse *ns1__InstallHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__InstallHostPatchV2_USCORETask(struct soap*, ns1__InstallHostPatchV2RequestType *ns1__InstallHostPatchV2_USCORETask, _ns1__InstallHostPatchV2_USCORETaskResponse *ns1__InstallHostPatchV2_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UninstallHostPatch_USCORETask(struct soap*, ns1__UninstallHostPatchRequestType *ns1__UninstallHostPatch_USCORETask, _ns1__UninstallHostPatch_USCORETaskResponse *ns1__UninstallHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryHostPatch_USCORETask(struct soap*, ns1__QueryHostPatchRequestType *ns1__QueryHostPatch_USCORETask, _ns1__QueryHostPatch_USCORETaskResponse *ns1__QueryHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Refresh(struct soap*, ns1__RefreshRequestType *ns1__Refresh, _ns1__RefreshResponse *ns1__RefreshResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdatePassthruConfig(struct soap*, ns1__UpdatePassthruConfigRequestType *ns1__UpdatePassthruConfig, _ns1__UpdatePassthruConfigResponse *ns1__UpdatePassthruConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ConfigurePowerPolicy(struct soap*, ns1__ConfigurePowerPolicyRequestType *ns1__ConfigurePowerPolicy, _ns1__ConfigurePowerPolicyResponse *ns1__ConfigurePowerPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateServicePolicy(struct soap*, ns1__UpdateServicePolicyRequestType *ns1__UpdateServicePolicy, _ns1__UpdateServicePolicyResponse *ns1__UpdateServicePolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StartService(struct soap*, ns1__StartServiceRequestType *ns1__StartService, _ns1__StartServiceResponse *ns1__StartServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__StopService(struct soap*, ns1__StopServiceRequestType *ns1__StopService, _ns1__StopServiceResponse *ns1__StopServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RestartService(struct soap*, ns1__RestartServiceRequestType *ns1__RestartService, _ns1__RestartServiceResponse *ns1__RestartServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UninstallService(struct soap*, ns1__UninstallServiceRequestType *ns1__UninstallService, _ns1__UninstallServiceResponse *ns1__UninstallServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshServices(struct soap*, ns1__RefreshServicesRequestType *ns1__RefreshServices, _ns1__RefreshServicesResponse *ns1__RefreshServicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureSnmpAgent(struct soap*, ns1__ReconfigureSnmpAgentRequestType *ns1__ReconfigureSnmpAgent, _ns1__ReconfigureSnmpAgentResponse *ns1__ReconfigureSnmpAgentResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SendTestNotification(struct soap*, ns1__SendTestNotificationRequestType *ns1__SendTestNotification, _ns1__SendTestNotificationResponse *ns1__SendTestNotificationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveDiskPartitionInfo(struct soap*, ns1__RetrieveDiskPartitionInfoRequestType *ns1__RetrieveDiskPartitionInfo, _ns1__RetrieveDiskPartitionInfoResponse *ns1__RetrieveDiskPartitionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ComputeDiskPartitionInfo(struct soap*, ns1__ComputeDiskPartitionInfoRequestType *ns1__ComputeDiskPartitionInfo, _ns1__ComputeDiskPartitionInfoResponse *ns1__ComputeDiskPartitionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ComputeDiskPartitionInfoForResize(struct soap*, ns1__ComputeDiskPartitionInfoForResizeRequestType *ns1__ComputeDiskPartitionInfoForResize, _ns1__ComputeDiskPartitionInfoForResizeResponse *ns1__ComputeDiskPartitionInfoForResizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateDiskPartitions(struct soap*, ns1__UpdateDiskPartitionsRequestType *ns1__UpdateDiskPartitions, _ns1__UpdateDiskPartitionsResponse *ns1__UpdateDiskPartitionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FormatVmfs(struct soap*, ns1__FormatVmfsRequestType *ns1__FormatVmfs, _ns1__FormatVmfsResponse *ns1__FormatVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RescanVmfs(struct soap*, ns1__RescanVmfsRequestType *ns1__RescanVmfs, _ns1__RescanVmfsResponse *ns1__RescanVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AttachVmfsExtent(struct soap*, ns1__AttachVmfsExtentRequestType *ns1__AttachVmfsExtent, _ns1__AttachVmfsExtentResponse *ns1__AttachVmfsExtentResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExpandVmfsExtent(struct soap*, ns1__ExpandVmfsExtentRequestType *ns1__ExpandVmfsExtent, _ns1__ExpandVmfsExtentResponse *ns1__ExpandVmfsExtentResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpgradeVmfs(struct soap*, ns1__UpgradeVmfsRequestType *ns1__UpgradeVmfs, _ns1__UpgradeVmfsResponse *ns1__UpgradeVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpgradeVmLayout(struct soap*, ns1__UpgradeVmLayoutRequestType *ns1__UpgradeVmLayout, _ns1__UpgradeVmLayoutResponse *ns1__UpgradeVmLayoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryUnresolvedVmfsVolume(struct soap*, ns1__QueryUnresolvedVmfsVolumeRequestType *ns1__QueryUnresolvedVmfsVolume, _ns1__QueryUnresolvedVmfsVolumeResponse *ns1__QueryUnresolvedVmfsVolumeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResolveMultipleUnresolvedVmfsVolumes(struct soap*, ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType *ns1__ResolveMultipleUnresolvedVmfsVolumes, _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse *ns1__ResolveMultipleUnresolvedVmfsVolumesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UnmountForceMountedVmfsVolume(struct soap*, ns1__UnmountForceMountedVmfsVolumeRequestType *ns1__UnmountForceMountedVmfsVolume, _ns1__UnmountForceMountedVmfsVolumeResponse *ns1__UnmountForceMountedVmfsVolumeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RescanHba(struct soap*, ns1__RescanHbaRequestType *ns1__RescanHba, _ns1__RescanHbaResponse *ns1__RescanHbaResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RescanAllHba(struct soap*, ns1__RescanAllHbaRequestType *ns1__RescanAllHba, _ns1__RescanAllHbaResponse *ns1__RescanAllHbaResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateSoftwareInternetScsiEnabled(struct soap*, ns1__UpdateSoftwareInternetScsiEnabledRequestType *ns1__UpdateSoftwareInternetScsiEnabled, _ns1__UpdateSoftwareInternetScsiEnabledResponse *ns1__UpdateSoftwareInternetScsiEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiDiscoveryProperties(struct soap*, ns1__UpdateInternetScsiDiscoveryPropertiesRequestType *ns1__UpdateInternetScsiDiscoveryProperties, _ns1__UpdateInternetScsiDiscoveryPropertiesResponse *ns1__UpdateInternetScsiDiscoveryPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiAuthenticationProperties(struct soap*, ns1__UpdateInternetScsiAuthenticationPropertiesRequestType *ns1__UpdateInternetScsiAuthenticationProperties, _ns1__UpdateInternetScsiAuthenticationPropertiesResponse *ns1__UpdateInternetScsiAuthenticationPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiDigestProperties(struct soap*, ns1__UpdateInternetScsiDigestPropertiesRequestType *ns1__UpdateInternetScsiDigestProperties, _ns1__UpdateInternetScsiDigestPropertiesResponse *ns1__UpdateInternetScsiDigestPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiAdvancedOptions(struct soap*, ns1__UpdateInternetScsiAdvancedOptionsRequestType *ns1__UpdateInternetScsiAdvancedOptions, _ns1__UpdateInternetScsiAdvancedOptionsResponse *ns1__UpdateInternetScsiAdvancedOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiIPProperties(struct soap*, ns1__UpdateInternetScsiIPPropertiesRequestType *ns1__UpdateInternetScsiIPProperties, _ns1__UpdateInternetScsiIPPropertiesResponse *ns1__UpdateInternetScsiIPPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiName(struct soap*, ns1__UpdateInternetScsiNameRequestType *ns1__UpdateInternetScsiName, _ns1__UpdateInternetScsiNameResponse *ns1__UpdateInternetScsiNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateInternetScsiAlias(struct soap*, ns1__UpdateInternetScsiAliasRequestType *ns1__UpdateInternetScsiAlias, _ns1__UpdateInternetScsiAliasResponse *ns1__UpdateInternetScsiAliasResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddInternetScsiSendTargets(struct soap*, ns1__AddInternetScsiSendTargetsRequestType *ns1__AddInternetScsiSendTargets, _ns1__AddInternetScsiSendTargetsResponse *ns1__AddInternetScsiSendTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveInternetScsiSendTargets(struct soap*, ns1__RemoveInternetScsiSendTargetsRequestType *ns1__RemoveInternetScsiSendTargets, _ns1__RemoveInternetScsiSendTargetsResponse *ns1__RemoveInternetScsiSendTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddInternetScsiStaticTargets(struct soap*, ns1__AddInternetScsiStaticTargetsRequestType *ns1__AddInternetScsiStaticTargets, _ns1__AddInternetScsiStaticTargetsResponse *ns1__AddInternetScsiStaticTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveInternetScsiStaticTargets(struct soap*, ns1__RemoveInternetScsiStaticTargetsRequestType *ns1__RemoveInternetScsiStaticTargets, _ns1__RemoveInternetScsiStaticTargetsResponse *ns1__RemoveInternetScsiStaticTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__EnableMultipathPath(struct soap*, ns1__EnableMultipathPathRequestType *ns1__EnableMultipathPath, _ns1__EnableMultipathPathResponse *ns1__EnableMultipathPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DisableMultipathPath(struct soap*, ns1__DisableMultipathPathRequestType *ns1__DisableMultipathPath, _ns1__DisableMultipathPathResponse *ns1__DisableMultipathPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SetMultipathLunPolicy(struct soap*, ns1__SetMultipathLunPolicyRequestType *ns1__SetMultipathLunPolicy, _ns1__SetMultipathLunPolicyResponse *ns1__SetMultipathLunPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPathSelectionPolicyOptions(struct soap*, ns1__QueryPathSelectionPolicyOptionsRequestType *ns1__QueryPathSelectionPolicyOptions, _ns1__QueryPathSelectionPolicyOptionsResponse *ns1__QueryPathSelectionPolicyOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryStorageArrayTypePolicyOptions(struct soap*, ns1__QueryStorageArrayTypePolicyOptionsRequestType *ns1__QueryStorageArrayTypePolicyOptions, _ns1__QueryStorageArrayTypePolicyOptionsResponse *ns1__QueryStorageArrayTypePolicyOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateScsiLunDisplayName(struct soap*, ns1__UpdateScsiLunDisplayNameRequestType *ns1__UpdateScsiLunDisplayName, _ns1__UpdateScsiLunDisplayNameResponse *ns1__UpdateScsiLunDisplayNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RefreshStorageSystem(struct soap*, ns1__RefreshStorageSystemRequestType *ns1__RefreshStorageSystem, _ns1__RefreshStorageSystemResponse *ns1__RefreshStorageSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateIpConfig(struct soap*, ns1__UpdateIpConfigRequestType *ns1__UpdateIpConfig, _ns1__UpdateIpConfigResponse *ns1__UpdateIpConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectVnic(struct soap*, ns1__SelectVnicRequestType *ns1__SelectVnic, _ns1__SelectVnicResponse *ns1__SelectVnicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeselectVnic(struct soap*, ns1__DeselectVnicRequestType *ns1__DeselectVnic, _ns1__DeselectVnicResponse *ns1__DeselectVnicResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryNetConfig(struct soap*, ns1__QueryNetConfigRequestType *ns1__QueryNetConfig, _ns1__QueryNetConfigResponse *ns1__QueryNetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__SelectVnicForNicType(struct soap*, ns1__SelectVnicForNicTypeRequestType *ns1__SelectVnicForNicType, _ns1__SelectVnicForNicTypeResponse *ns1__SelectVnicForNicTypeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DeselectVnicForNicType(struct soap*, ns1__DeselectVnicForNicTypeRequestType *ns1__DeselectVnicForNicType, _ns1__DeselectVnicForNicTypeResponse *ns1__DeselectVnicForNicTypeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryOptions(struct soap*, ns1__QueryOptionsRequestType *ns1__QueryOptions, _ns1__QueryOptionsResponse *ns1__QueryOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateOptions(struct soap*, ns1__UpdateOptionsRequestType *ns1__UpdateOptions, _ns1__UpdateOptionsResponse *ns1__UpdateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckCompliance_USCORETask(struct soap*, ns1__CheckComplianceRequestType *ns1__CheckCompliance_USCORETask, _ns1__CheckCompliance_USCORETaskResponse *ns1__CheckCompliance_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryComplianceStatus(struct soap*, ns1__QueryComplianceStatusRequestType *ns1__QueryComplianceStatus, _ns1__QueryComplianceStatusResponse *ns1__QueryComplianceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ClearComplianceStatus(struct soap*, ns1__ClearComplianceStatusRequestType *ns1__ClearComplianceStatus, _ns1__ClearComplianceStatusResponse *ns1__ClearComplianceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryExpressionMetadata(struct soap*, ns1__QueryExpressionMetadataRequestType *ns1__QueryExpressionMetadata, _ns1__QueryExpressionMetadataResponse *ns1__QueryExpressionMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyProfile(struct soap*, ns1__DestroyProfileRequestType *ns1__DestroyProfile, _ns1__DestroyProfileResponse *ns1__DestroyProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AssociateProfile(struct soap*, ns1__AssociateProfileRequestType *ns1__AssociateProfile, _ns1__AssociateProfileResponse *ns1__AssociateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DissociateProfile(struct soap*, ns1__DissociateProfileRequestType *ns1__DissociateProfile, _ns1__DissociateProfileResponse *ns1__DissociateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckProfileCompliance_USCORETask(struct soap*, ns1__CheckProfileComplianceRequestType *ns1__CheckProfileCompliance_USCORETask, _ns1__CheckProfileCompliance_USCORETaskResponse *ns1__CheckProfileCompliance_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExportProfile(struct soap*, ns1__ExportProfileRequestType *ns1__ExportProfile, _ns1__ExportProfileResponse *ns1__ExportProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateProfile(struct soap*, ns1__CreateProfileRequestType *ns1__CreateProfile, _ns1__CreateProfileResponse *ns1__CreateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryPolicyMetadata(struct soap*, ns1__QueryPolicyMetadataRequestType *ns1__QueryPolicyMetadata, _ns1__QueryPolicyMetadataResponse *ns1__QueryPolicyMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__FindAssociatedProfile(struct soap*, ns1__FindAssociatedProfileRequestType *ns1__FindAssociatedProfile, _ns1__FindAssociatedProfileResponse *ns1__FindAssociatedProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateClusterProfile(struct soap*, ns1__UpdateClusterProfileRequestType *ns1__UpdateClusterProfile, _ns1__UpdateClusterProfileResponse *ns1__UpdateClusterProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateReferenceHost(struct soap*, ns1__UpdateReferenceHostRequestType *ns1__UpdateReferenceHost, _ns1__UpdateReferenceHostResponse *ns1__UpdateReferenceHostResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__UpdateHostProfile(struct soap*, ns1__UpdateHostProfileRequestType *ns1__UpdateHostProfile, _ns1__UpdateHostProfileResponse *ns1__UpdateHostProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ExecuteHostProfile(struct soap*, ns1__ExecuteHostProfileRequestType *ns1__ExecuteHostProfile, _ns1__ExecuteHostProfileResponse *ns1__ExecuteHostProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ApplyHostConfig_USCORETask(struct soap*, ns1__ApplyHostConfigRequestType *ns1__ApplyHostConfig_USCORETask, _ns1__ApplyHostConfig_USCORETaskResponse *ns1__ApplyHostConfig_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GenerateConfigTaskList(struct soap*, ns1__GenerateConfigTaskListRequestType *ns1__GenerateConfigTaskList, _ns1__GenerateConfigTaskListResponse *ns1__GenerateConfigTaskListResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryHostProfileMetadata(struct soap*, ns1__QueryHostProfileMetadataRequestType *ns1__QueryHostProfileMetadata, _ns1__QueryHostProfileMetadataResponse *ns1__QueryHostProfileMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateDefaultProfile(struct soap*, ns1__CreateDefaultProfileRequestType *ns1__CreateDefaultProfile, _ns1__CreateDefaultProfileResponse *ns1__CreateDefaultProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveScheduledTask(struct soap*, ns1__RemoveScheduledTaskRequestType *ns1__RemoveScheduledTask, _ns1__RemoveScheduledTaskResponse *ns1__RemoveScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ReconfigureScheduledTask(struct soap*, ns1__ReconfigureScheduledTaskRequestType *ns1__ReconfigureScheduledTask, _ns1__ReconfigureScheduledTaskResponse *ns1__ReconfigureScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RunScheduledTask(struct soap*, ns1__RunScheduledTaskRequestType *ns1__RunScheduledTask, _ns1__RunScheduledTaskResponse *ns1__RunScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateScheduledTask(struct soap*, ns1__CreateScheduledTaskRequestType *ns1__CreateScheduledTask, _ns1__CreateScheduledTaskResponse *ns1__CreateScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveEntityScheduledTask(struct soap*, ns1__RetrieveEntityScheduledTaskRequestType *ns1__RetrieveEntityScheduledTask, _ns1__RetrieveEntityScheduledTaskResponse *ns1__RetrieveEntityScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateObjectScheduledTask(struct soap*, ns1__CreateObjectScheduledTaskRequestType *ns1__CreateObjectScheduledTask, _ns1__CreateObjectScheduledTaskResponse *ns1__CreateObjectScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RetrieveObjectScheduledTask(struct soap*, ns1__RetrieveObjectScheduledTaskRequestType *ns1__RetrieveObjectScheduledTask, _ns1__RetrieveObjectScheduledTaskResponse *ns1__RetrieveObjectScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__OpenInventoryViewFolder(struct soap*, ns1__OpenInventoryViewFolderRequestType *ns1__OpenInventoryViewFolder, _ns1__OpenInventoryViewFolderResponse *ns1__OpenInventoryViewFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CloseInventoryViewFolder(struct soap*, ns1__CloseInventoryViewFolderRequestType *ns1__CloseInventoryViewFolder, _ns1__CloseInventoryViewFolderResponse *ns1__CloseInventoryViewFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ModifyListView(struct soap*, ns1__ModifyListViewRequestType *ns1__ModifyListView, _ns1__ModifyListViewResponse *ns1__ModifyListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetListView(struct soap*, ns1__ResetListViewRequestType *ns1__ResetListView, _ns1__ResetListViewResponse *ns1__ResetListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__ResetListViewFromView(struct soap*, ns1__ResetListViewFromViewRequestType *ns1__ResetListViewFromView, _ns1__ResetListViewFromViewResponse *ns1__ResetListViewFromViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DestroyView(struct soap*, ns1__DestroyViewRequestType *ns1__DestroyView, _ns1__DestroyViewResponse *ns1__DestroyViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateInventoryView(struct soap*, ns1__CreateInventoryViewRequestType *ns1__CreateInventoryView, _ns1__CreateInventoryViewResponse *ns1__CreateInventoryViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateContainerView(struct soap*, ns1__CreateContainerViewRequestType *ns1__CreateContainerView, _ns1__CreateContainerViewResponse *ns1__CreateContainerViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateListView(struct soap*, ns1__CreateListViewRequestType *ns1__CreateListView, _ns1__CreateListViewResponse *ns1__CreateListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CreateListViewFromView(struct soap*, ns1__CreateListViewFromViewRequestType *ns1__CreateListViewFromView, _ns1__CreateListViewFromViewResponse *ns1__CreateListViewFromViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RevertToSnapshot_USCORETask(struct soap*, ns1__RevertToSnapshotRequestType *ns1__RevertToSnapshot_USCORETask, _ns1__RevertToSnapshot_USCORETaskResponse *ns1__RevertToSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RemoveSnapshot_USCORETask(struct soap*, ns1__RemoveSnapshotRequestType *ns1__RemoveSnapshot_USCORETask, _ns1__RemoveSnapshot_USCORETaskResponse *ns1__RemoveSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__RenameSnapshot(struct soap*, ns1__RenameSnapshotRequestType *ns1__RenameSnapshot, _ns1__RenameSnapshotResponse *ns1__RenameSnapshotResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckCompatibility_USCORETask(struct soap*, ns1__CheckCompatibilityRequestType *ns1__CheckCompatibility_USCORETask, _ns1__CheckCompatibility_USCORETaskResponse *ns1__CheckCompatibility_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__QueryVMotionCompatibilityEx_USCORETask(struct soap*, ns1__QueryVMotionCompatibilityExRequestType *ns1__QueryVMotionCompatibilityEx_USCORETask, _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse *ns1__QueryVMotionCompatibilityEx_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckMigrate_USCORETask(struct soap*, ns1__CheckMigrateRequestType *ns1__CheckMigrate_USCORETask, _ns1__CheckMigrate_USCORETaskResponse *ns1__CheckMigrate_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__CheckRelocate_USCORETask(struct soap*, ns1__CheckRelocateRequestType *ns1__CheckRelocate_USCORETask, _ns1__CheckRelocate_USCORETaskResponse *ns1__CheckRelocate_USCORETaskResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyPropertyFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckForUpdates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__WaitForUpdates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CancelWaitForUpdates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__WaitForUpdatesEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrievePropertiesEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ContinueRetrievePropertiesEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CancelRetrievePropertiesEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreatePropertyCollector(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyPropertyCollector(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddAuthorizationRole(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveAuthorizationRole(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateAuthorizationRole(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MergePermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveRolePermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveEntityPermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveAllPermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetEntityPermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetEntityPermissions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveEntityPermission(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureCluster_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ApplyRecommendation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CancelRecommendation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RecommendHostsForVm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveInto_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveHostInto_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshRecommendation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveDasAdvancedRuntimeInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureComputeResource_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddCustomFieldDef(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveCustomFieldDef(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RenameCustomFieldDef(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetField(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DoesCustomizationSpecExist(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OverwriteCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeleteCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DuplicateCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RenameCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CustomizationSpecItemToXml(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__XmlToCustomizationSpecItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckCustomizationResources(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryConnectionInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerOnMultiVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshDatastoreStorageInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateVirtualMachineFiles_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RenameDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDescriptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__BrowseDiagnosticLog(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GenerateLogBundles_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FetchDVPortKeys(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FetchDVPorts(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryUsedVlanIdInDvs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureDvs_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PerformDvsProductSpecOperation_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MergeDvs_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddDVPortgroup_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveDVPort_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDvsCapability(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureDVPort_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshDVPortState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RectifyDvsHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateNetworkResourcePool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableNetworkResourceManagement(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryConfigOptionDescriptor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryConfigOption(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryConfigTarget(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryTargetCapabilities(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__setCustomValue(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnregisterExtension(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindExtension(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RegisterExtension(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateExtension(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetPublicKey(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetPublicKey(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetExtensionCertificate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveDatastoreFile_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CopyDatastoreFile_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeleteDatastoreFile_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MakeDirectory(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ChangeOwner(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateFolder(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveIntoFolder_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RegisterVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateCluster(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateClusterEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddStandaloneHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateDatacenter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnregisterAndDestroy_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateDVS_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetCollectorPageSize(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RewindCollector(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetCollector(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyCollector(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryHostConnectionInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateSystemResources(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconnectHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisconnectHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnterMaintenanceMode_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExitMaintenanceMode_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RebootHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ShutdownHost_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerDownHostToStandBy_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerUpHostFromStandBy_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryMemoryOverhead(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryMemoryOverheadEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureHostForDAS_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateFlags(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnterLockdownMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExitLockdownMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcquireCimServicesTicket(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateIpmi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveHardwareUptime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HttpNfcLeaseGetManifest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HttpNfcLeaseComplete(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HttpNfcLeaseAbort(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HttpNfcLeaseProgress(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryIpPools(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateIpPool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateIpPool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyIpPool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateAssignedLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveAssignedLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAssignedLicenses(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QuerySupportedFeatures(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryLicenseSourceAvailability(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryLicenseUsage(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetLicenseEdition(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckLicenseFeature(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableFeature(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisableFeature(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ConfigureLicenseSource(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DecodeLicense(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateLicenseLabel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveLicenseLabel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Reload(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Rename_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Destroy_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyNetwork(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ValidateHost(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ParseDescriptor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateImportSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateDescriptor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPerfProviderSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAvailablePerfMetric(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPerfCounter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPerfCounterByLevel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPerf(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPerfComposite(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreatePerfInterval(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemovePerfInterval(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdatePerfInterval(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EstimateDatabaseSize(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveIntoResourcePool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateChildResourceConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateResourcePool(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyChildren(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateVApp(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateChildVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RegisterChildVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ImportVApp(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryResourceConfigOption(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshRuntime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindByUuid(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindByDatastorePath(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindByDnsName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindByIp(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindByInventoryPath(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindChild(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindAllByUuid(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindAllByDnsName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindAllByIp(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CurrentTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveServiceContent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ValidateMigration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVMotionCompatibility(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveProductComponents(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateServiceMessage(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Login(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__LoginBySSPI(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Logout(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcquireLocalTicket(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TerminateSession(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetLocale(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__LoginExtensionBySubjectName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__LoginExtensionByCertificate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ImpersonateUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SessionIsActive(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcquireCloneTicket(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CloneSession(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ConfigureDatastoreIORM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryIORMConfigOption(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CancelTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateProgress(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetTaskState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetTaskDescription(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReadNextTasks(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReadPreviousTasks(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateCollectorForTasks(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveUserGroups(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateVAppConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateLinkedChildren(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CloneVApp_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExportVApp(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerOnVApp_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerOffVApp_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SuspendVApp_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__unregisterVApp_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeleteVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MoveVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CopyVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExtendVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVirtualDiskFragmentation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DefragmentVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ShrinkVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__InflateVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EagerZeroVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ZeroFillVirtualDisk_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetVirtualDiskUuid(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVirtualDiskUuid(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVirtualDiskGeometry(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshStorageInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateSnapshot_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RevertToCurrentSnapshot_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveAllSnapshots_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpgradeVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExtractOvfEnvironment(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerOnVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PowerOffVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SuspendVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ShutdownGuest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RebootGuest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StandbyGuest(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AnswerVM(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CustomizeVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckCustomizationSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MigrateVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RelocateVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CloneVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExportVm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MarkAsTemplate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MarkAsVirtualMachine(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnregisterVM(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetGuestInformation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MountToolsInstaller(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnmountToolsInstaller(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpgradeTools_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcquireMksTicket(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcquireTicket(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetScreenResolution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DefragmentAllDisks(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateSecondaryVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TurnOffFaultToleranceForVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__MakePrimaryVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TerminateFaultTolerantVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisableSecondaryVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableSecondaryVM_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetDisplayTopology(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StartRecording_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StopRecording_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StartReplaying_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StopReplaying_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PromoteDisks_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateScreenshot_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryChangedDiskAreas(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryUnownedFiles(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__reloadVirtualMachineFromPath_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryFaultToleranceCompatibility(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveAlarm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureAlarm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateAlarm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetAlarm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AreAlarmActionsEnabled(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableAlarmActions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetAlarmState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AcknowledgeAlarm(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureDVPortgroup_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAvailableDvsSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryCompatibleHostForNewDvs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryCompatibleHostForExistingDvs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDvsCompatibleHostSpec(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDvsFeatureCapability(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDvsByUuid(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDvsConfigTarget(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDvsCheckCompatibility(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReadNextEvents(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReadPreviousEvents(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveArgumentDescription(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateCollectorForEvents(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__LogUserEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryEvents(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__PostEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__JoinDomain_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__LeaveCurrentDomain_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureAutostart(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AutoStartPowerOn(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AutoStartPowerOff(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryBootDevices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateBootDevice(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableHyperThreading(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisableHyperThreading(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SearchDatastore_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SearchDatastoreSubFolders_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeleteFile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateLocalSwapDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAvailableDisksForVmfs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVmfsDatastoreCreateOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateVmfsDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVmfsDatastoreExtendOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVmfsDatastoreExpandOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExtendVmfsDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExpandVmfsDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateNasDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateLocalDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveDatastore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ConfigureDatastorePrincipal(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryUnresolvedVmfsVolumes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDateTimeConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAvailableTimeZones(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryDateTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDateTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshDateTimeSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryAvailablePartition(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectActivePartition(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPartitionCreateOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPartitionCreateDesc(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateDiagnosticPartition(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDefaultPolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableRuleset(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisableRuleset(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshFirewall(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetFirmwareToFactoryDefaults(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__BackupFirmwareConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryFirmwareConfigUploadURL(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RestoreFirmwareConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshHealthStatusSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetSystemHealthInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryModules(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateModuleOptionString(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryConfiguredModuleOptionString(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AssignUserToGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnassignUserFromGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureServiceConsoleReservation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureVirtualMachineReservation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateNetworkConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDnsConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateIpRouteConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateConsoleIpRouteConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateIpRouteTableConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddVirtualSwitch(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveVirtualSwitch(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateVirtualSwitch(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddPortGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemovePortGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdatePortGroup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdatePhysicalNicLinkSpeed(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryNetworkHint(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddServiceConsoleVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveServiceConsoleVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateServiceConsoleVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RestartServiceConsoleVirtualNic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshNetworkSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ScanHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ScanHostPatchV2_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StageHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__InstallHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__InstallHostPatchV2_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UninstallHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryHostPatch_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Refresh(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdatePassthruConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ConfigurePowerPolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateServicePolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StartService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__StopService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RestartService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UninstallService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshServices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureSnmpAgent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SendTestNotification(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveDiskPartitionInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ComputeDiskPartitionInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ComputeDiskPartitionInfoForResize(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateDiskPartitions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FormatVmfs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RescanVmfs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AttachVmfsExtent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExpandVmfsExtent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpgradeVmfs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpgradeVmLayout(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryUnresolvedVmfsVolume(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResolveMultipleUnresolvedVmfsVolumes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UnmountForceMountedVmfsVolume(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RescanHba(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RescanAllHba(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateSoftwareInternetScsiEnabled(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiDiscoveryProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiAuthenticationProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiDigestProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiAdvancedOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiIPProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateInternetScsiAlias(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddInternetScsiSendTargets(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveInternetScsiSendTargets(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddInternetScsiStaticTargets(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveInternetScsiStaticTargets(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__EnableMultipathPath(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DisableMultipathPath(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SetMultipathLunPolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPathSelectionPolicyOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryStorageArrayTypePolicyOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateScsiLunDisplayName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RefreshStorageSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateIpConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectVnic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeselectVnic(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryNetConfig(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__SelectVnicForNicType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DeselectVnicForNicType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckCompliance_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryComplianceStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ClearComplianceStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryExpressionMetadata(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AssociateProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DissociateProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckProfileCompliance_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExportProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryPolicyMetadata(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__FindAssociatedProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateClusterProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateReferenceHost(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__UpdateHostProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ExecuteHostProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ApplyHostConfig_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GenerateConfigTaskList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryHostProfileMetadata(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateDefaultProfile(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ReconfigureScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RunScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveEntityScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateObjectScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RetrieveObjectScheduledTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__OpenInventoryViewFolder(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CloseInventoryViewFolder(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ModifyListView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetListView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__ResetListViewFromView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DestroyView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateInventoryView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateContainerView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateListView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CreateListViewFromView(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RevertToSnapshot_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RemoveSnapshot_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__RenameSnapshot(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckCompatibility_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__QueryVMotionCompatibilityEx_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckMigrate_USCORETask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__CheckRelocate_USCORETask(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyPropertyFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyPropertyFilterRequestType *ns1__DestroyPropertyFilter, _ns1__DestroyPropertyFilterResponse *ns1__DestroyPropertyFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateFilterRequestType *ns1__CreateFilter, _ns1__CreateFilterResponse *ns1__CreateFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrievePropertiesRequestType *ns1__RetrieveProperties, _ns1__RetrievePropertiesResponse *ns1__RetrievePropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckForUpdatesRequestType *ns1__CheckForUpdates, _ns1__CheckForUpdatesResponse *ns1__CheckForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WaitForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WaitForUpdatesRequestType *ns1__WaitForUpdates, _ns1__WaitForUpdatesResponse *ns1__WaitForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelWaitForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelWaitForUpdatesRequestType *ns1__CancelWaitForUpdates, _ns1__CancelWaitForUpdatesResponse *ns1__CancelWaitForUpdatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WaitForUpdatesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WaitForUpdatesExRequestType *ns1__WaitForUpdatesEx, _ns1__WaitForUpdatesExResponse *ns1__WaitForUpdatesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrievePropertiesExRequestType *ns1__RetrievePropertiesEx, _ns1__RetrievePropertiesExResponse *ns1__RetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ContinueRetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ContinueRetrievePropertiesExRequestType *ns1__ContinueRetrievePropertiesEx, _ns1__ContinueRetrievePropertiesExResponse *ns1__ContinueRetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelRetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelRetrievePropertiesExRequestType *ns1__CancelRetrievePropertiesEx, _ns1__CancelRetrievePropertiesExResponse *ns1__CancelRetrievePropertiesExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreatePropertyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreatePropertyCollectorRequestType *ns1__CreatePropertyCollector, _ns1__CreatePropertyCollectorResponse *ns1__CreatePropertyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyPropertyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyPropertyCollectorRequestType *ns1__DestroyPropertyCollector, _ns1__DestroyPropertyCollectorResponse *ns1__DestroyPropertyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddAuthorizationRoleRequestType *ns1__AddAuthorizationRole, _ns1__AddAuthorizationRoleResponse *ns1__AddAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAuthorizationRoleRequestType *ns1__RemoveAuthorizationRole, _ns1__RemoveAuthorizationRoleResponse *ns1__RemoveAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateAuthorizationRoleRequestType *ns1__UpdateAuthorizationRole, _ns1__UpdateAuthorizationRoleResponse *ns1__UpdateAuthorizationRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MergePermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MergePermissionsRequestType *ns1__MergePermissions, _ns1__MergePermissionsResponse *ns1__MergePermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveRolePermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveRolePermissionsRequestType *ns1__RetrieveRolePermissions, _ns1__RetrieveRolePermissionsResponse *ns1__RetrieveRolePermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveEntityPermissionsRequestType *ns1__RetrieveEntityPermissions, _ns1__RetrieveEntityPermissionsResponse *ns1__RetrieveEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveAllPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveAllPermissionsRequestType *ns1__RetrieveAllPermissions, _ns1__RetrieveAllPermissionsResponse *ns1__RetrieveAllPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetEntityPermissionsRequestType *ns1__SetEntityPermissions, _ns1__SetEntityPermissionsResponse *ns1__SetEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetEntityPermissionsRequestType *ns1__ResetEntityPermissions, _ns1__ResetEntityPermissionsResponse *ns1__ResetEntityPermissionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveEntityPermission(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveEntityPermissionRequestType *ns1__RemoveEntityPermission, _ns1__RemoveEntityPermissionResponse *ns1__RemoveEntityPermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureCluster_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureClusterRequestType *ns1__ReconfigureCluster_USCORETask, _ns1__ReconfigureCluster_USCORETaskResponse *ns1__ReconfigureCluster_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ApplyRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ApplyRecommendationRequestType *ns1__ApplyRecommendation, _ns1__ApplyRecommendationResponse *ns1__ApplyRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelRecommendationRequestType *ns1__CancelRecommendation, _ns1__CancelRecommendationResponse *ns1__CancelRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RecommendHostsForVm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RecommendHostsForVmRequestType *ns1__RecommendHostsForVm, _ns1__RecommendHostsForVmResponse *ns1__RecommendHostsForVmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddHostRequestType *ns1__AddHost_USCORETask, _ns1__AddHost_USCORETaskResponse *ns1__AddHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveInto_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoRequestType *ns1__MoveInto_USCORETask, _ns1__MoveInto_USCORETaskResponse *ns1__MoveInto_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveHostInto_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveHostIntoRequestType *ns1__MoveHostInto_USCORETask, _ns1__MoveHostInto_USCORETaskResponse *ns1__MoveHostInto_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRecommendationRequestType *ns1__RefreshRecommendation, _ns1__RefreshRecommendationResponse *ns1__RefreshRecommendationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveDasAdvancedRuntimeInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveDasAdvancedRuntimeInfoRequestType *ns1__RetrieveDasAdvancedRuntimeInfo, _ns1__RetrieveDasAdvancedRuntimeInfoResponse *ns1__RetrieveDasAdvancedRuntimeInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureComputeResource_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureComputeResourceRequestType *ns1__ReconfigureComputeResource_USCORETask, _ns1__ReconfigureComputeResource_USCORETaskResponse *ns1__ReconfigureComputeResource_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddCustomFieldDefRequestType *ns1__AddCustomFieldDef, _ns1__AddCustomFieldDefResponse *ns1__AddCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveCustomFieldDefRequestType *ns1__RemoveCustomFieldDef, _ns1__RemoveCustomFieldDefResponse *ns1__RemoveCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameCustomFieldDefRequestType *ns1__RenameCustomFieldDef, _ns1__RenameCustomFieldDefResponse *ns1__RenameCustomFieldDefResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetField(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetFieldRequestType *ns1__SetField, _ns1__SetFieldResponse *ns1__SetFieldResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DoesCustomizationSpecExist(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DoesCustomizationSpecExistRequestType *ns1__DoesCustomizationSpecExist, _ns1__DoesCustomizationSpecExistResponse *ns1__DoesCustomizationSpecExistResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetCustomizationSpecRequestType *ns1__GetCustomizationSpec, _ns1__GetCustomizationSpecResponse *ns1__GetCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCustomizationSpecRequestType *ns1__CreateCustomizationSpec, _ns1__CreateCustomizationSpecResponse *ns1__CreateCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OverwriteCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__OverwriteCustomizationSpecRequestType *ns1__OverwriteCustomizationSpec, _ns1__OverwriteCustomizationSpecResponse *ns1__OverwriteCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteCustomizationSpecRequestType *ns1__DeleteCustomizationSpec, _ns1__DeleteCustomizationSpecResponse *ns1__DeleteCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DuplicateCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DuplicateCustomizationSpecRequestType *ns1__DuplicateCustomizationSpec, _ns1__DuplicateCustomizationSpecResponse *ns1__DuplicateCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameCustomizationSpecRequestType *ns1__RenameCustomizationSpec, _ns1__RenameCustomizationSpecResponse *ns1__RenameCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CustomizationSpecItemToXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CustomizationSpecItemToXmlRequestType *ns1__CustomizationSpecItemToXml, _ns1__CustomizationSpecItemToXmlResponse *ns1__CustomizationSpecItemToXmlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__XmlToCustomizationSpecItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__XmlToCustomizationSpecItemRequestType *ns1__XmlToCustomizationSpecItem, _ns1__XmlToCustomizationSpecItemResponse *ns1__XmlToCustomizationSpecItemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCustomizationResources(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCustomizationResourcesRequestType *ns1__CheckCustomizationResources, _ns1__CheckCustomizationResourcesResponse *ns1__CheckCustomizationResourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConnectionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConnectionInfoRequestType *ns1__QueryConnectionInfo, _ns1__QueryConnectionInfoResponse *ns1__QueryConnectionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnMultiVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnMultiVMRequestType *ns1__PowerOnMultiVM_USCORETask, _ns1__PowerOnMultiVM_USCORETaskResponse *ns1__PowerOnMultiVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDatastoreRequestType *ns1__RefreshDatastore, _ns1__RefreshDatastoreResponse *ns1__RefreshDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDatastoreStorageInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDatastoreStorageInfoRequestType *ns1__RefreshDatastoreStorageInfo, _ns1__RefreshDatastoreStorageInfoResponse *ns1__RefreshDatastoreStorageInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualMachineFiles_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualMachineFilesRequestType *ns1__UpdateVirtualMachineFiles_USCORETask, _ns1__UpdateVirtualMachineFiles_USCORETaskResponse *ns1__UpdateVirtualMachineFiles_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameDatastoreRequestType *ns1__RenameDatastore, _ns1__RenameDatastoreResponse *ns1__RenameDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyDatastoreRequestType *ns1__DestroyDatastore, _ns1__DestroyDatastoreResponse *ns1__DestroyDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDescriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDescriptionsRequestType *ns1__QueryDescriptions, _ns1__QueryDescriptionsResponse *ns1__QueryDescriptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BrowseDiagnosticLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BrowseDiagnosticLogRequestType *ns1__BrowseDiagnosticLog, _ns1__BrowseDiagnosticLogResponse *ns1__BrowseDiagnosticLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GenerateLogBundles_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GenerateLogBundlesRequestType *ns1__GenerateLogBundles_USCORETask, _ns1__GenerateLogBundles_USCORETaskResponse *ns1__GenerateLogBundles_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FetchDVPortKeys(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FetchDVPortKeysRequestType *ns1__FetchDVPortKeys, _ns1__FetchDVPortKeysResponse *ns1__FetchDVPortKeysResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FetchDVPorts(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FetchDVPortsRequestType *ns1__FetchDVPorts, _ns1__FetchDVPortsResponse *ns1__FetchDVPortsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUsedVlanIdInDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUsedVlanIdInDvsRequestType *ns1__QueryUsedVlanIdInDvs, _ns1__QueryUsedVlanIdInDvsResponse *ns1__QueryUsedVlanIdInDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDvs_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDvsRequestType *ns1__ReconfigureDvs_USCORETask, _ns1__ReconfigureDvs_USCORETaskResponse *ns1__ReconfigureDvs_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PerformDvsProductSpecOperation_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PerformDvsProductSpecOperationRequestType *ns1__PerformDvsProductSpecOperation_USCORETask, _ns1__PerformDvsProductSpecOperation_USCORETaskResponse *ns1__PerformDvsProductSpecOperation_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MergeDvs_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MergeDvsRequestType *ns1__MergeDvs_USCORETask, _ns1__MergeDvs_USCORETaskResponse *ns1__MergeDvs_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddDVPortgroup_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddDVPortgroupRequestType *ns1__AddDVPortgroup_USCORETask, _ns1__AddDVPortgroup_USCORETaskResponse *ns1__AddDVPortgroup_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveDVPort_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveDVPortRequestType *ns1__MoveDVPort_USCORETask, _ns1__MoveDVPort_USCORETaskResponse *ns1__MoveDVPort_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDvsCapability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDvsCapabilityRequestType *ns1__UpdateDvsCapability, _ns1__UpdateDvsCapabilityResponse *ns1__UpdateDvsCapabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDVPort_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDVPortRequestType *ns1__ReconfigureDVPort_USCORETask, _ns1__ReconfigureDVPort_USCORETaskResponse *ns1__ReconfigureDVPort_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDVPortState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDVPortStateRequestType *ns1__RefreshDVPortState, _ns1__RefreshDVPortStateResponse *ns1__RefreshDVPortStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RectifyDvsHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RectifyDvsHostRequestType *ns1__RectifyDvsHost_USCORETask, _ns1__RectifyDvsHost_USCORETaskResponse *ns1__RectifyDvsHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateNetworkResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateNetworkResourcePoolRequestType *ns1__UpdateNetworkResourcePool, _ns1__UpdateNetworkResourcePoolResponse *ns1__UpdateNetworkResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableNetworkResourceManagement(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableNetworkResourceManagementRequestType *ns1__EnableNetworkResourceManagement, _ns1__EnableNetworkResourceManagementResponse *ns1__EnableNetworkResourceManagementResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigOptionDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigOptionDescriptorRequestType *ns1__QueryConfigOptionDescriptor, _ns1__QueryConfigOptionDescriptorResponse *ns1__QueryConfigOptionDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigOptionRequestType *ns1__QueryConfigOption, _ns1__QueryConfigOptionResponse *ns1__QueryConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigTarget(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigTargetRequestType *ns1__QueryConfigTarget, _ns1__QueryConfigTargetResponse *ns1__QueryConfigTargetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryTargetCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryTargetCapabilitiesRequestType *ns1__QueryTargetCapabilities, _ns1__QueryTargetCapabilitiesResponse *ns1__QueryTargetCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setCustomValue(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__setCustomValueRequestType *ns1__setCustomValue, _ns1__setCustomValueResponse *ns1__setCustomValueResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterExtensionRequestType *ns1__UnregisterExtension, _ns1__UnregisterExtensionResponse *ns1__UnregisterExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindExtensionRequestType *ns1__FindExtension, _ns1__FindExtensionResponse *ns1__FindExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterExtensionRequestType *ns1__RegisterExtension, _ns1__RegisterExtensionResponse *ns1__RegisterExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateExtensionRequestType *ns1__UpdateExtension, _ns1__UpdateExtensionResponse *ns1__UpdateExtensionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPublicKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetPublicKeyRequestType *ns1__GetPublicKey, _ns1__GetPublicKeyResponse *ns1__GetPublicKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetPublicKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetPublicKeyRequestType *ns1__SetPublicKey, _ns1__SetPublicKeyResponse *ns1__SetPublicKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetExtensionCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetExtensionCertificateRequestType *ns1__SetExtensionCertificate, _ns1__SetExtensionCertificateResponse *ns1__SetExtensionCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveDatastoreFileRequestType *ns1__MoveDatastoreFile_USCORETask, _ns1__MoveDatastoreFile_USCORETaskResponse *ns1__MoveDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CopyDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CopyDatastoreFileRequestType *ns1__CopyDatastoreFile_USCORETask, _ns1__CopyDatastoreFile_USCORETaskResponse *ns1__CopyDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteDatastoreFileRequestType *ns1__DeleteDatastoreFile_USCORETask, _ns1__DeleteDatastoreFile_USCORETaskResponse *ns1__DeleteDatastoreFile_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MakeDirectory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MakeDirectoryRequestType *ns1__MakeDirectory, _ns1__MakeDirectoryResponse *ns1__MakeDirectoryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeOwner(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ChangeOwnerRequestType *ns1__ChangeOwner, _ns1__ChangeOwnerResponse *ns1__ChangeOwnerResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateFolderRequestType *ns1__CreateFolder, _ns1__CreateFolderResponse *ns1__CreateFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveIntoFolder_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoFolderRequestType *ns1__MoveIntoFolder_USCORETask, _ns1__MoveIntoFolder_USCORETaskResponse *ns1__MoveIntoFolder_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVMRequestType *ns1__CreateVM_USCORETask, _ns1__CreateVM_USCORETaskResponse *ns1__CreateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterVMRequestType *ns1__RegisterVM_USCORETask, _ns1__RegisterVM_USCORETaskResponse *ns1__RegisterVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCluster(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateClusterRequestType *ns1__CreateCluster, _ns1__CreateClusterResponse *ns1__CreateClusterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateClusterEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateClusterExRequestType *ns1__CreateClusterEx, _ns1__CreateClusterExResponse *ns1__CreateClusterExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddStandaloneHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddStandaloneHostRequestType *ns1__AddStandaloneHost_USCORETask, _ns1__AddStandaloneHost_USCORETaskResponse *ns1__AddStandaloneHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDatacenter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDatacenterRequestType *ns1__CreateDatacenter, _ns1__CreateDatacenterResponse *ns1__CreateDatacenterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterAndDestroy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterAndDestroyRequestType *ns1__UnregisterAndDestroy_USCORETask, _ns1__UnregisterAndDestroy_USCORETaskResponse *ns1__UnregisterAndDestroy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDVS_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDVSRequestType *ns1__CreateDVS_USCORETask, _ns1__CreateDVS_USCORETaskResponse *ns1__CreateDVS_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetCollectorPageSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetCollectorPageSizeRequestType *ns1__SetCollectorPageSize, _ns1__SetCollectorPageSizeResponse *ns1__SetCollectorPageSizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RewindCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RewindCollectorRequestType *ns1__RewindCollector, _ns1__RewindCollectorResponse *ns1__RewindCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetCollectorRequestType *ns1__ResetCollector, _ns1__ResetCollectorResponse *ns1__ResetCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyCollectorRequestType *ns1__DestroyCollector, _ns1__DestroyCollectorResponse *ns1__DestroyCollectorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostConnectionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostConnectionInfoRequestType *ns1__QueryHostConnectionInfo, _ns1__QueryHostConnectionInfoResponse *ns1__QueryHostConnectionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateSystemResources(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateSystemResourcesRequestType *ns1__UpdateSystemResources, _ns1__UpdateSystemResourcesResponse *ns1__UpdateSystemResourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconnectHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconnectHostRequestType *ns1__ReconnectHost_USCORETask, _ns1__ReconnectHost_USCORETaskResponse *ns1__ReconnectHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisconnectHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisconnectHostRequestType *ns1__DisconnectHost_USCORETask, _ns1__DisconnectHost_USCORETaskResponse *ns1__DisconnectHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnterMaintenanceMode_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnterMaintenanceModeRequestType *ns1__EnterMaintenanceMode_USCORETask, _ns1__EnterMaintenanceMode_USCORETaskResponse *ns1__EnterMaintenanceMode_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExitMaintenanceMode_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExitMaintenanceModeRequestType *ns1__ExitMaintenanceMode_USCORETask, _ns1__ExitMaintenanceMode_USCORETaskResponse *ns1__ExitMaintenanceMode_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RebootHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RebootHostRequestType *ns1__RebootHost_USCORETask, _ns1__RebootHost_USCORETaskResponse *ns1__RebootHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShutdownHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShutdownHostRequestType *ns1__ShutdownHost_USCORETask, _ns1__ShutdownHost_USCORETaskResponse *ns1__ShutdownHost_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerDownHostToStandBy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerDownHostToStandByRequestType *ns1__PowerDownHostToStandBy_USCORETask, _ns1__PowerDownHostToStandBy_USCORETaskResponse *ns1__PowerDownHostToStandBy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerUpHostFromStandBy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerUpHostFromStandByRequestType *ns1__PowerUpHostFromStandBy_USCORETask, _ns1__PowerUpHostFromStandBy_USCORETaskResponse *ns1__PowerUpHostFromStandBy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryMemoryOverhead(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryMemoryOverheadRequestType *ns1__QueryMemoryOverhead, _ns1__QueryMemoryOverheadResponse *ns1__QueryMemoryOverheadResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryMemoryOverheadEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryMemoryOverheadExRequestType *ns1__QueryMemoryOverheadEx, _ns1__QueryMemoryOverheadExResponse *ns1__QueryMemoryOverheadExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureHostForDAS_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureHostForDASRequestType *ns1__ReconfigureHostForDAS_USCORETask, _ns1__ReconfigureHostForDAS_USCORETaskResponse *ns1__ReconfigureHostForDAS_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateFlags(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateFlagsRequestType *ns1__UpdateFlags, _ns1__UpdateFlagsResponse *ns1__UpdateFlagsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnterLockdownMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnterLockdownModeRequestType *ns1__EnterLockdownMode, _ns1__EnterLockdownModeResponse *ns1__EnterLockdownModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExitLockdownMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExitLockdownModeRequestType *ns1__ExitLockdownMode, _ns1__ExitLockdownModeResponse *ns1__ExitLockdownModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireCimServicesTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireCimServicesTicketRequestType *ns1__AcquireCimServicesTicket, _ns1__AcquireCimServicesTicketResponse *ns1__AcquireCimServicesTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpmi(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpmiRequestType *ns1__UpdateIpmi, _ns1__UpdateIpmiResponse *ns1__UpdateIpmiResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveHardwareUptime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveHardwareUptimeRequestType *ns1__RetrieveHardwareUptime, _ns1__RetrieveHardwareUptimeResponse *ns1__RetrieveHardwareUptimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseGetManifest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseGetManifestRequestType *ns1__HttpNfcLeaseGetManifest, _ns1__HttpNfcLeaseGetManifestResponse *ns1__HttpNfcLeaseGetManifestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseComplete(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseCompleteRequestType *ns1__HttpNfcLeaseComplete, _ns1__HttpNfcLeaseCompleteResponse *ns1__HttpNfcLeaseCompleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseAbort(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseAbortRequestType *ns1__HttpNfcLeaseAbort, _ns1__HttpNfcLeaseAbortResponse *ns1__HttpNfcLeaseAbortResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseProgress(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseProgressRequestType *ns1__HttpNfcLeaseProgress, _ns1__HttpNfcLeaseProgressResponse *ns1__HttpNfcLeaseProgressResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryIpPools(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryIpPoolsRequestType *ns1__QueryIpPools, _ns1__QueryIpPoolsResponse *ns1__QueryIpPoolsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateIpPoolRequestType *ns1__CreateIpPool, _ns1__CreateIpPoolResponse *ns1__CreateIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpPoolRequestType *ns1__UpdateIpPool, _ns1__UpdateIpPoolResponse *ns1__UpdateIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyIpPoolRequestType *ns1__DestroyIpPool, _ns1__DestroyIpPoolResponse *ns1__DestroyIpPoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAssignedLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateAssignedLicenseRequestType *ns1__UpdateAssignedLicense, _ns1__UpdateAssignedLicenseResponse *ns1__UpdateAssignedLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAssignedLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAssignedLicenseRequestType *ns1__RemoveAssignedLicense, _ns1__RemoveAssignedLicenseResponse *ns1__RemoveAssignedLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAssignedLicenses(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAssignedLicensesRequestType *ns1__QueryAssignedLicenses, _ns1__QueryAssignedLicensesResponse *ns1__QueryAssignedLicensesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QuerySupportedFeatures(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QuerySupportedFeaturesRequestType *ns1__QuerySupportedFeatures, _ns1__QuerySupportedFeaturesResponse *ns1__QuerySupportedFeaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLicenseSourceAvailability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryLicenseSourceAvailabilityRequestType *ns1__QueryLicenseSourceAvailability, _ns1__QueryLicenseSourceAvailabilityResponse *ns1__QueryLicenseSourceAvailabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLicenseUsage(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryLicenseUsageRequestType *ns1__QueryLicenseUsage, _ns1__QueryLicenseUsageResponse *ns1__QueryLicenseUsageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetLicenseEdition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetLicenseEditionRequestType *ns1__SetLicenseEdition, _ns1__SetLicenseEditionResponse *ns1__SetLicenseEditionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckLicenseFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckLicenseFeatureRequestType *ns1__CheckLicenseFeature, _ns1__CheckLicenseFeatureResponse *ns1__CheckLicenseFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableFeatureRequestType *ns1__EnableFeature, _ns1__EnableFeatureResponse *ns1__EnableFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableFeatureRequestType *ns1__DisableFeature, _ns1__DisableFeatureResponse *ns1__DisableFeatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureLicenseSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureLicenseSourceRequestType *ns1__ConfigureLicenseSource, _ns1__ConfigureLicenseSourceResponse *ns1__ConfigureLicenseSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLicenseRequestType *ns1__UpdateLicense, _ns1__UpdateLicenseResponse *ns1__UpdateLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddLicenseRequestType *ns1__AddLicense, _ns1__AddLicenseResponse *ns1__AddLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveLicenseRequestType *ns1__RemoveLicense, _ns1__RemoveLicenseResponse *ns1__RemoveLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DecodeLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DecodeLicenseRequestType *ns1__DecodeLicense, _ns1__DecodeLicenseResponse *ns1__DecodeLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLicenseLabel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLicenseLabelRequestType *ns1__UpdateLicenseLabel, _ns1__UpdateLicenseLabelResponse *ns1__UpdateLicenseLabelResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveLicenseLabel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveLicenseLabelRequestType *ns1__RemoveLicenseLabel, _ns1__RemoveLicenseLabelResponse *ns1__RemoveLicenseLabelResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Reload(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReloadRequestType *ns1__Reload, _ns1__ReloadResponse *ns1__ReloadResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Rename_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameRequestType *ns1__Rename_USCORETask, _ns1__Rename_USCORETaskResponse *ns1__Rename_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Destroy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyRequestType *ns1__Destroy_USCORETask, _ns1__Destroy_USCORETaskResponse *ns1__Destroy_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyNetwork(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyNetworkRequestType *ns1__DestroyNetwork, _ns1__DestroyNetworkResponse *ns1__DestroyNetworkResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValidateHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ValidateHostRequestType *ns1__ValidateHost, _ns1__ValidateHostResponse *ns1__ValidateHostResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ParseDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ParseDescriptorRequestType *ns1__ParseDescriptor, _ns1__ParseDescriptorResponse *ns1__ParseDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateImportSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateImportSpecRequestType *ns1__CreateImportSpec, _ns1__CreateImportSpecResponse *ns1__CreateImportSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDescriptorRequestType *ns1__CreateDescriptor, _ns1__CreateDescriptorResponse *ns1__CreateDescriptorResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfProviderSummary(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfProviderSummaryRequestType *ns1__QueryPerfProviderSummary, _ns1__QueryPerfProviderSummaryResponse *ns1__QueryPerfProviderSummaryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailablePerfMetric(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailablePerfMetricRequestType *ns1__QueryAvailablePerfMetric, _ns1__QueryAvailablePerfMetricResponse *ns1__QueryAvailablePerfMetricResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfCounter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCounterRequestType *ns1__QueryPerfCounter, _ns1__QueryPerfCounterResponse *ns1__QueryPerfCounterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfCounterByLevel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCounterByLevelRequestType *ns1__QueryPerfCounterByLevel, _ns1__QueryPerfCounterByLevelResponse *ns1__QueryPerfCounterByLevelResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfRequestType *ns1__QueryPerf, _ns1__QueryPerfResponse *ns1__QueryPerfResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfComposite(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCompositeRequestType *ns1__QueryPerfComposite, _ns1__QueryPerfCompositeResponse *ns1__QueryPerfCompositeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreatePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreatePerfIntervalRequestType *ns1__CreatePerfInterval, _ns1__CreatePerfIntervalResponse *ns1__CreatePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemovePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemovePerfIntervalRequestType *ns1__RemovePerfInterval, _ns1__RemovePerfIntervalResponse *ns1__RemovePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePerfIntervalRequestType *ns1__UpdatePerfInterval, _ns1__UpdatePerfIntervalResponse *ns1__UpdatePerfIntervalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EstimateDatabaseSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EstimateDatabaseSizeRequestType *ns1__EstimateDatabaseSize, _ns1__EstimateDatabaseSizeResponse *ns1__EstimateDatabaseSizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateConfigRequestType *ns1__UpdateConfig, _ns1__UpdateConfigResponse *ns1__UpdateConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveIntoResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoResourcePoolRequestType *ns1__MoveIntoResourcePool, _ns1__MoveIntoResourcePoolResponse *ns1__MoveIntoResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateChildResourceConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateChildResourceConfigurationRequestType *ns1__UpdateChildResourceConfiguration, _ns1__UpdateChildResourceConfigurationResponse *ns1__UpdateChildResourceConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateResourcePoolRequestType *ns1__CreateResourcePool, _ns1__CreateResourcePoolResponse *ns1__CreateResourcePoolResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyChildren(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyChildrenRequestType *ns1__DestroyChildren, _ns1__DestroyChildrenResponse *ns1__DestroyChildrenResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVAppRequestType *ns1__CreateVApp, _ns1__CreateVAppResponse *ns1__CreateVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateChildVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateChildVMRequestType *ns1__CreateChildVM_USCORETask, _ns1__CreateChildVM_USCORETaskResponse *ns1__CreateChildVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterChildVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterChildVMRequestType *ns1__RegisterChildVM_USCORETask, _ns1__RegisterChildVM_USCORETaskResponse *ns1__RegisterChildVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ImportVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ImportVAppRequestType *ns1__ImportVApp, _ns1__ImportVAppResponse *ns1__ImportVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryResourceConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryResourceConfigOptionRequestType *ns1__QueryResourceConfigOption, _ns1__QueryResourceConfigOptionResponse *ns1__QueryResourceConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshRuntime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRuntimeRequestType *ns1__RefreshRuntime, _ns1__RefreshRuntimeResponse *ns1__RefreshRuntimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByUuidRequestType *ns1__FindByUuid, _ns1__FindByUuidResponse *ns1__FindByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByDatastorePath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByDatastorePathRequestType *ns1__FindByDatastorePath, _ns1__FindByDatastorePathResponse *ns1__FindByDatastorePathResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByDnsName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByDnsNameRequestType *ns1__FindByDnsName, _ns1__FindByDnsNameResponse *ns1__FindByDnsNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByIp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByIpRequestType *ns1__FindByIp, _ns1__FindByIpResponse *ns1__FindByIpResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByInventoryPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByInventoryPathRequestType *ns1__FindByInventoryPath, _ns1__FindByInventoryPathResponse *ns1__FindByInventoryPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindChild(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindChildRequestType *ns1__FindChild, _ns1__FindChildResponse *ns1__FindChildResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByUuidRequestType *ns1__FindAllByUuid, _ns1__FindAllByUuidResponse *ns1__FindAllByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByDnsName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByDnsNameRequestType *ns1__FindAllByDnsName, _ns1__FindAllByDnsNameResponse *ns1__FindAllByDnsNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByIp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByIpRequestType *ns1__FindAllByIp, _ns1__FindAllByIpResponse *ns1__FindAllByIpResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CurrentTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CurrentTimeRequestType *ns1__CurrentTime, _ns1__CurrentTimeResponse *ns1__CurrentTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveServiceContent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveServiceContentRequestType *ns1__RetrieveServiceContent, _ns1__RetrieveServiceContentResponse *ns1__RetrieveServiceContentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValidateMigration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ValidateMigrationRequestType *ns1__ValidateMigration, _ns1__ValidateMigrationResponse *ns1__ValidateMigrationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVMotionCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVMotionCompatibilityRequestType *ns1__QueryVMotionCompatibility, _ns1__QueryVMotionCompatibilityResponse *ns1__QueryVMotionCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveProductComponents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveProductComponentsRequestType *ns1__RetrieveProductComponents, _ns1__RetrieveProductComponentsResponse *ns1__RetrieveProductComponentsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServiceMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServiceMessageRequestType *ns1__UpdateServiceMessage, _ns1__UpdateServiceMessageResponse *ns1__UpdateServiceMessageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Login(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginRequestType *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginBySSPI(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginBySSPIRequestType *ns1__LoginBySSPI, _ns1__LoginBySSPIResponse *ns1__LoginBySSPIResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Logout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LogoutRequestType *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireLocalTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireLocalTicketRequestType *ns1__AcquireLocalTicket, _ns1__AcquireLocalTicketResponse *ns1__AcquireLocalTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TerminateSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TerminateSessionRequestType *ns1__TerminateSession, _ns1__TerminateSessionResponse *ns1__TerminateSessionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetLocale(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetLocaleRequestType *ns1__SetLocale, _ns1__SetLocaleResponse *ns1__SetLocaleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginExtensionBySubjectName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginExtensionBySubjectNameRequestType *ns1__LoginExtensionBySubjectName, _ns1__LoginExtensionBySubjectNameResponse *ns1__LoginExtensionBySubjectNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginExtensionByCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginExtensionByCertificateRequestType *ns1__LoginExtensionByCertificate, _ns1__LoginExtensionByCertificateResponse *ns1__LoginExtensionByCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ImpersonateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ImpersonateUserRequestType *ns1__ImpersonateUser, _ns1__ImpersonateUserResponse *ns1__ImpersonateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SessionIsActive(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SessionIsActiveRequestType *ns1__SessionIsActive, _ns1__SessionIsActiveResponse *ns1__SessionIsActiveResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireCloneTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireCloneTicketRequestType *ns1__AcquireCloneTicket, _ns1__AcquireCloneTicketResponse *ns1__AcquireCloneTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneSessionRequestType *ns1__CloneSession, _ns1__CloneSessionResponse *ns1__CloneSessionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureDatastoreIORM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureDatastoreIORMRequestType *ns1__ConfigureDatastoreIORM_USCORETask, _ns1__ConfigureDatastoreIORM_USCORETaskResponse *ns1__ConfigureDatastoreIORM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryIORMConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryIORMConfigOptionRequestType *ns1__QueryIORMConfigOption, _ns1__QueryIORMConfigOptionResponse *ns1__QueryIORMConfigOptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelTaskRequestType *ns1__CancelTask, _ns1__CancelTaskResponse *ns1__CancelTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateProgress(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateProgressRequestType *ns1__UpdateProgress, _ns1__UpdateProgressResponse *ns1__UpdateProgressResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetTaskState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetTaskStateRequestType *ns1__SetTaskState, _ns1__SetTaskStateResponse *ns1__SetTaskStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetTaskDescription(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetTaskDescriptionRequestType *ns1__SetTaskDescription, _ns1__SetTaskDescriptionResponse *ns1__SetTaskDescriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadNextTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadNextTasksRequestType *ns1__ReadNextTasks, _ns1__ReadNextTasksResponse *ns1__ReadNextTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadPreviousTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadPreviousTasksRequestType *ns1__ReadPreviousTasks, _ns1__ReadPreviousTasksResponse *ns1__ReadPreviousTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCollectorForTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCollectorForTasksRequestType *ns1__CreateCollectorForTasks, _ns1__CreateCollectorForTasksResponse *ns1__CreateCollectorForTasksResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateTaskRequestType *ns1__CreateTask, _ns1__CreateTaskResponse *ns1__CreateTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveUserGroups(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveUserGroupsRequestType *ns1__RetrieveUserGroups, _ns1__RetrieveUserGroupsResponse *ns1__RetrieveUserGroupsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVAppConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVAppConfigRequestType *ns1__UpdateVAppConfig, _ns1__UpdateVAppConfigResponse *ns1__UpdateVAppConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLinkedChildren(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLinkedChildrenRequestType *ns1__UpdateLinkedChildren, _ns1__UpdateLinkedChildrenResponse *ns1__UpdateLinkedChildrenResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneVAppRequestType *ns1__CloneVApp_USCORETask, _ns1__CloneVApp_USCORETaskResponse *ns1__CloneVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportVAppRequestType *ns1__ExportVApp, _ns1__ExportVAppResponse *ns1__ExportVAppResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnVAppRequestType *ns1__PowerOnVApp_USCORETask, _ns1__PowerOnVApp_USCORETaskResponse *ns1__PowerOnVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOffVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOffVAppRequestType *ns1__PowerOffVApp_USCORETask, _ns1__PowerOffVApp_USCORETaskResponse *ns1__PowerOffVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SuspendVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SuspendVAppRequestType *ns1__SuspendVApp_USCORETask, _ns1__SuspendVApp_USCORETaskResponse *ns1__SuspendVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__unregisterVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__unregisterVAppRequestType *ns1__unregisterVApp_USCORETask, _ns1__unregisterVApp_USCORETaskResponse *ns1__unregisterVApp_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVirtualDiskRequestType *ns1__CreateVirtualDisk_USCORETask, _ns1__CreateVirtualDisk_USCORETaskResponse *ns1__CreateVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteVirtualDiskRequestType *ns1__DeleteVirtualDisk_USCORETask, _ns1__DeleteVirtualDisk_USCORETaskResponse *ns1__DeleteVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveVirtualDiskRequestType *ns1__MoveVirtualDisk_USCORETask, _ns1__MoveVirtualDisk_USCORETaskResponse *ns1__MoveVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CopyVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CopyVirtualDiskRequestType *ns1__CopyVirtualDisk_USCORETask, _ns1__CopyVirtualDisk_USCORETaskResponse *ns1__CopyVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtendVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtendVirtualDiskRequestType *ns1__ExtendVirtualDisk_USCORETask, _ns1__ExtendVirtualDisk_USCORETaskResponse *ns1__ExtendVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskFragmentation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskFragmentationRequestType *ns1__QueryVirtualDiskFragmentation, _ns1__QueryVirtualDiskFragmentationResponse *ns1__QueryVirtualDiskFragmentationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DefragmentVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DefragmentVirtualDiskRequestType *ns1__DefragmentVirtualDisk_USCORETask, _ns1__DefragmentVirtualDisk_USCORETaskResponse *ns1__DefragmentVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShrinkVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShrinkVirtualDiskRequestType *ns1__ShrinkVirtualDisk_USCORETask, _ns1__ShrinkVirtualDisk_USCORETaskResponse *ns1__ShrinkVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InflateVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InflateVirtualDiskRequestType *ns1__InflateVirtualDisk_USCORETask, _ns1__InflateVirtualDisk_USCORETaskResponse *ns1__InflateVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EagerZeroVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EagerZeroVirtualDiskRequestType *ns1__EagerZeroVirtualDisk_USCORETask, _ns1__EagerZeroVirtualDisk_USCORETaskResponse *ns1__EagerZeroVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ZeroFillVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ZeroFillVirtualDiskRequestType *ns1__ZeroFillVirtualDisk_USCORETask, _ns1__ZeroFillVirtualDisk_USCORETaskResponse *ns1__ZeroFillVirtualDisk_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetVirtualDiskUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetVirtualDiskUuidRequestType *ns1__SetVirtualDiskUuid, _ns1__SetVirtualDiskUuidResponse *ns1__SetVirtualDiskUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskUuidRequestType *ns1__QueryVirtualDiskUuid, _ns1__QueryVirtualDiskUuidResponse *ns1__QueryVirtualDiskUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskGeometry(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskGeometryRequestType *ns1__QueryVirtualDiskGeometry, _ns1__QueryVirtualDiskGeometryResponse *ns1__QueryVirtualDiskGeometryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshStorageInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshStorageInfoRequestType *ns1__RefreshStorageInfo, _ns1__RefreshStorageInfoResponse *ns1__RefreshStorageInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateSnapshotRequestType *ns1__CreateSnapshot_USCORETask, _ns1__CreateSnapshot_USCORETaskResponse *ns1__CreateSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RevertToCurrentSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RevertToCurrentSnapshotRequestType *ns1__RevertToCurrentSnapshot_USCORETask, _ns1__RevertToCurrentSnapshot_USCORETaskResponse *ns1__RevertToCurrentSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAllSnapshots_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAllSnapshotsRequestType *ns1__RemoveAllSnapshots_USCORETask, _ns1__RemoveAllSnapshots_USCORETaskResponse *ns1__RemoveAllSnapshots_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigVMRequestType *ns1__ReconfigVM_USCORETask, _ns1__ReconfigVM_USCORETaskResponse *ns1__ReconfigVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVMRequestType *ns1__UpgradeVM_USCORETask, _ns1__UpgradeVM_USCORETaskResponse *ns1__UpgradeVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtractOvfEnvironment(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtractOvfEnvironmentRequestType *ns1__ExtractOvfEnvironment, _ns1__ExtractOvfEnvironmentResponse *ns1__ExtractOvfEnvironmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnVMRequestType *ns1__PowerOnVM_USCORETask, _ns1__PowerOnVM_USCORETaskResponse *ns1__PowerOnVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOffVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOffVMRequestType *ns1__PowerOffVM_USCORETask, _ns1__PowerOffVM_USCORETaskResponse *ns1__PowerOffVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SuspendVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SuspendVMRequestType *ns1__SuspendVM_USCORETask, _ns1__SuspendVM_USCORETaskResponse *ns1__SuspendVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetVMRequestType *ns1__ResetVM_USCORETask, _ns1__ResetVM_USCORETaskResponse *ns1__ResetVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShutdownGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShutdownGuestRequestType *ns1__ShutdownGuest, _ns1__ShutdownGuestResponse *ns1__ShutdownGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RebootGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RebootGuestRequestType *ns1__RebootGuest, _ns1__RebootGuestResponse *ns1__RebootGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StandbyGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StandbyGuestRequestType *ns1__StandbyGuest, _ns1__StandbyGuestResponse *ns1__StandbyGuestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AnswerVM(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AnswerVMRequestType *ns1__AnswerVM, _ns1__AnswerVMResponse *ns1__AnswerVMResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CustomizeVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CustomizeVMRequestType *ns1__CustomizeVM_USCORETask, _ns1__CustomizeVM_USCORETaskResponse *ns1__CustomizeVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCustomizationSpecRequestType *ns1__CheckCustomizationSpec, _ns1__CheckCustomizationSpecResponse *ns1__CheckCustomizationSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MigrateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MigrateVMRequestType *ns1__MigrateVM_USCORETask, _ns1__MigrateVM_USCORETaskResponse *ns1__MigrateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RelocateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RelocateVMRequestType *ns1__RelocateVM_USCORETask, _ns1__RelocateVM_USCORETaskResponse *ns1__RelocateVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneVMRequestType *ns1__CloneVM_USCORETask, _ns1__CloneVM_USCORETaskResponse *ns1__CloneVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportVm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportVmRequestType *ns1__ExportVm, _ns1__ExportVmResponse *ns1__ExportVmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MarkAsTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MarkAsTemplateRequestType *ns1__MarkAsTemplate, _ns1__MarkAsTemplateResponse *ns1__MarkAsTemplateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MarkAsVirtualMachine(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MarkAsVirtualMachineRequestType *ns1__MarkAsVirtualMachine, _ns1__MarkAsVirtualMachineResponse *ns1__MarkAsVirtualMachineResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterVM(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterVMRequestType *ns1__UnregisterVM, _ns1__UnregisterVMResponse *ns1__UnregisterVMResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetGuestInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetGuestInformationRequestType *ns1__ResetGuestInformation, _ns1__ResetGuestInformationResponse *ns1__ResetGuestInformationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountToolsInstaller(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MountToolsInstallerRequestType *ns1__MountToolsInstaller, _ns1__MountToolsInstallerResponse *ns1__MountToolsInstallerResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnmountToolsInstaller(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnmountToolsInstallerRequestType *ns1__UnmountToolsInstaller, _ns1__UnmountToolsInstallerResponse *ns1__UnmountToolsInstallerResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeTools_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeToolsRequestType *ns1__UpgradeTools_USCORETask, _ns1__UpgradeTools_USCORETaskResponse *ns1__UpgradeTools_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireMksTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireMksTicketRequestType *ns1__AcquireMksTicket, _ns1__AcquireMksTicketResponse *ns1__AcquireMksTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireTicketRequestType *ns1__AcquireTicket, _ns1__AcquireTicketResponse *ns1__AcquireTicketResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetScreenResolution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetScreenResolutionRequestType *ns1__SetScreenResolution, _ns1__SetScreenResolutionResponse *ns1__SetScreenResolutionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DefragmentAllDisks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DefragmentAllDisksRequestType *ns1__DefragmentAllDisks, _ns1__DefragmentAllDisksResponse *ns1__DefragmentAllDisksResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateSecondaryVMRequestType *ns1__CreateSecondaryVM_USCORETask, _ns1__CreateSecondaryVM_USCORETaskResponse *ns1__CreateSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TurnOffFaultToleranceForVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TurnOffFaultToleranceForVMRequestType *ns1__TurnOffFaultToleranceForVM_USCORETask, _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse *ns1__TurnOffFaultToleranceForVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MakePrimaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MakePrimaryVMRequestType *ns1__MakePrimaryVM_USCORETask, _ns1__MakePrimaryVM_USCORETaskResponse *ns1__MakePrimaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TerminateFaultTolerantVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TerminateFaultTolerantVMRequestType *ns1__TerminateFaultTolerantVM_USCORETask, _ns1__TerminateFaultTolerantVM_USCORETaskResponse *ns1__TerminateFaultTolerantVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableSecondaryVMRequestType *ns1__DisableSecondaryVM_USCORETask, _ns1__DisableSecondaryVM_USCORETaskResponse *ns1__DisableSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableSecondaryVMRequestType *ns1__EnableSecondaryVM_USCORETask, _ns1__EnableSecondaryVM_USCORETaskResponse *ns1__EnableSecondaryVM_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetDisplayTopology(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetDisplayTopologyRequestType *ns1__SetDisplayTopology, _ns1__SetDisplayTopologyResponse *ns1__SetDisplayTopologyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartRecording_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartRecordingRequestType *ns1__StartRecording_USCORETask, _ns1__StartRecording_USCORETaskResponse *ns1__StartRecording_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopRecording_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopRecordingRequestType *ns1__StopRecording_USCORETask, _ns1__StopRecording_USCORETaskResponse *ns1__StopRecording_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartReplaying_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartReplayingRequestType *ns1__StartReplaying_USCORETask, _ns1__StartReplaying_USCORETaskResponse *ns1__StartReplaying_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopReplaying_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopReplayingRequestType *ns1__StopReplaying_USCORETask, _ns1__StopReplaying_USCORETaskResponse *ns1__StopReplaying_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PromoteDisks_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PromoteDisksRequestType *ns1__PromoteDisks_USCORETask, _ns1__PromoteDisks_USCORETaskResponse *ns1__PromoteDisks_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateScreenshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateScreenshotRequestType *ns1__CreateScreenshot_USCORETask, _ns1__CreateScreenshot_USCORETaskResponse *ns1__CreateScreenshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryChangedDiskAreas(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryChangedDiskAreasRequestType *ns1__QueryChangedDiskAreas, _ns1__QueryChangedDiskAreasResponse *ns1__QueryChangedDiskAreasResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnownedFiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnownedFilesRequestType *ns1__QueryUnownedFiles, _ns1__QueryUnownedFilesResponse *ns1__QueryUnownedFilesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__reloadVirtualMachineFromPath_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__reloadVirtualMachineFromPathRequestType *ns1__reloadVirtualMachineFromPath_USCORETask, _ns1__reloadVirtualMachineFromPath_USCORETaskResponse *ns1__reloadVirtualMachineFromPath_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryFaultToleranceCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryFaultToleranceCompatibilityRequestType *ns1__QueryFaultToleranceCompatibility, _ns1__QueryFaultToleranceCompatibilityResponse *ns1__QueryFaultToleranceCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAlarmRequestType *ns1__RemoveAlarm, _ns1__RemoveAlarmResponse *ns1__RemoveAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureAlarmRequestType *ns1__ReconfigureAlarm, _ns1__ReconfigureAlarmResponse *ns1__ReconfigureAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateAlarmRequestType *ns1__CreateAlarm, _ns1__CreateAlarmResponse *ns1__CreateAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetAlarmRequestType *ns1__GetAlarm, _ns1__GetAlarmResponse *ns1__GetAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AreAlarmActionsEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AreAlarmActionsEnabledRequestType *ns1__AreAlarmActionsEnabled, _ns1__AreAlarmActionsEnabledResponse *ns1__AreAlarmActionsEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableAlarmActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableAlarmActionsRequestType *ns1__EnableAlarmActions, _ns1__EnableAlarmActionsResponse *ns1__EnableAlarmActionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarmState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetAlarmStateRequestType *ns1__GetAlarmState, _ns1__GetAlarmStateResponse *ns1__GetAlarmStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcknowledgeAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcknowledgeAlarmRequestType *ns1__AcknowledgeAlarm, _ns1__AcknowledgeAlarmResponse *ns1__AcknowledgeAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDVPortgroup_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDVPortgroupRequestType *ns1__ReconfigureDVPortgroup_USCORETask, _ns1__ReconfigureDVPortgroup_USCORETaskResponse *ns1__ReconfigureDVPortgroup_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableDvsSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableDvsSpecRequestType *ns1__QueryAvailableDvsSpec, _ns1__QueryAvailableDvsSpecResponse *ns1__QueryAvailableDvsSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryCompatibleHostForNewDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryCompatibleHostForNewDvsRequestType *ns1__QueryCompatibleHostForNewDvs, _ns1__QueryCompatibleHostForNewDvsResponse *ns1__QueryCompatibleHostForNewDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryCompatibleHostForExistingDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryCompatibleHostForExistingDvsRequestType *ns1__QueryCompatibleHostForExistingDvs, _ns1__QueryCompatibleHostForExistingDvsResponse *ns1__QueryCompatibleHostForExistingDvsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsCompatibleHostSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsCompatibleHostSpecRequestType *ns1__QueryDvsCompatibleHostSpec, _ns1__QueryDvsCompatibleHostSpecResponse *ns1__QueryDvsCompatibleHostSpecResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsFeatureCapability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsFeatureCapabilityRequestType *ns1__QueryDvsFeatureCapability, _ns1__QueryDvsFeatureCapabilityResponse *ns1__QueryDvsFeatureCapabilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsByUuidRequestType *ns1__QueryDvsByUuid, _ns1__QueryDvsByUuidResponse *ns1__QueryDvsByUuidResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsConfigTarget(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsConfigTargetRequestType *ns1__QueryDvsConfigTarget, _ns1__QueryDvsConfigTargetResponse *ns1__QueryDvsConfigTargetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsCheckCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsCheckCompatibilityRequestType *ns1__QueryDvsCheckCompatibility, _ns1__QueryDvsCheckCompatibilityResponse *ns1__QueryDvsCheckCompatibilityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadNextEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadNextEventsRequestType *ns1__ReadNextEvents, _ns1__ReadNextEventsResponse *ns1__ReadNextEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadPreviousEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadPreviousEventsRequestType *ns1__ReadPreviousEvents, _ns1__ReadPreviousEventsResponse *ns1__ReadPreviousEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveArgumentDescription(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveArgumentDescriptionRequestType *ns1__RetrieveArgumentDescription, _ns1__RetrieveArgumentDescriptionResponse *ns1__RetrieveArgumentDescriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCollectorForEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCollectorForEventsRequestType *ns1__CreateCollectorForEvents, _ns1__CreateCollectorForEventsResponse *ns1__CreateCollectorForEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LogUserEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LogUserEventRequestType *ns1__LogUserEvent, _ns1__LogUserEventResponse *ns1__LogUserEventResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryEventsRequestType *ns1__QueryEvents, _ns1__QueryEventsResponse *ns1__QueryEventsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PostEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PostEventRequestType *ns1__PostEvent, _ns1__PostEventResponse *ns1__PostEventResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__JoinDomain_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__JoinDomainRequestType *ns1__JoinDomain_USCORETask, _ns1__JoinDomain_USCORETaskResponse *ns1__JoinDomain_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LeaveCurrentDomain_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LeaveCurrentDomainRequestType *ns1__LeaveCurrentDomain_USCORETask, _ns1__LeaveCurrentDomain_USCORETaskResponse *ns1__LeaveCurrentDomain_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureAutostart(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureAutostartRequestType *ns1__ReconfigureAutostart, _ns1__ReconfigureAutostartResponse *ns1__ReconfigureAutostartResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AutoStartPowerOn(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AutoStartPowerOnRequestType *ns1__AutoStartPowerOn, _ns1__AutoStartPowerOnResponse *ns1__AutoStartPowerOnResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AutoStartPowerOff(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AutoStartPowerOffRequestType *ns1__AutoStartPowerOff, _ns1__AutoStartPowerOffResponse *ns1__AutoStartPowerOffResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryBootDevices(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryBootDevicesRequestType *ns1__QueryBootDevices, _ns1__QueryBootDevicesResponse *ns1__QueryBootDevicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateBootDevice(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateBootDeviceRequestType *ns1__UpdateBootDevice, _ns1__UpdateBootDeviceResponse *ns1__UpdateBootDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableHyperThreading(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableHyperThreadingRequestType *ns1__EnableHyperThreading, _ns1__EnableHyperThreadingResponse *ns1__EnableHyperThreadingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableHyperThreading(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableHyperThreadingRequestType *ns1__DisableHyperThreading, _ns1__DisableHyperThreadingResponse *ns1__DisableHyperThreadingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SearchDatastore_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SearchDatastoreRequestType *ns1__SearchDatastore_USCORETask, _ns1__SearchDatastore_USCORETaskResponse *ns1__SearchDatastore_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SearchDatastoreSubFolders_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SearchDatastoreSubFoldersRequestType *ns1__SearchDatastoreSubFolders_USCORETask, _ns1__SearchDatastoreSubFolders_USCORETaskResponse *ns1__SearchDatastoreSubFolders_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteFileRequestType *ns1__DeleteFile, _ns1__DeleteFileResponse *ns1__DeleteFileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLocalSwapDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLocalSwapDatastoreRequestType *ns1__UpdateLocalSwapDatastore, _ns1__UpdateLocalSwapDatastoreResponse *ns1__UpdateLocalSwapDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableDisksForVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableDisksForVmfsRequestType *ns1__QueryAvailableDisksForVmfs, _ns1__QueryAvailableDisksForVmfsResponse *ns1__QueryAvailableDisksForVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreCreateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreCreateOptionsRequestType *ns1__QueryVmfsDatastoreCreateOptions, _ns1__QueryVmfsDatastoreCreateOptionsResponse *ns1__QueryVmfsDatastoreCreateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVmfsDatastoreRequestType *ns1__CreateVmfsDatastore, _ns1__CreateVmfsDatastoreResponse *ns1__CreateVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreExtendOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreExtendOptionsRequestType *ns1__QueryVmfsDatastoreExtendOptions, _ns1__QueryVmfsDatastoreExtendOptionsResponse *ns1__QueryVmfsDatastoreExtendOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreExpandOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreExpandOptionsRequestType *ns1__QueryVmfsDatastoreExpandOptions, _ns1__QueryVmfsDatastoreExpandOptionsResponse *ns1__QueryVmfsDatastoreExpandOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtendVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtendVmfsDatastoreRequestType *ns1__ExtendVmfsDatastore, _ns1__ExtendVmfsDatastoreResponse *ns1__ExtendVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExpandVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExpandVmfsDatastoreRequestType *ns1__ExpandVmfsDatastore, _ns1__ExpandVmfsDatastoreResponse *ns1__ExpandVmfsDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateNasDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateNasDatastoreRequestType *ns1__CreateNasDatastore, _ns1__CreateNasDatastoreResponse *ns1__CreateNasDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateLocalDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateLocalDatastoreRequestType *ns1__CreateLocalDatastore, _ns1__CreateLocalDatastoreResponse *ns1__CreateLocalDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveDatastoreRequestType *ns1__RemoveDatastore, _ns1__RemoveDatastoreResponse *ns1__RemoveDatastoreResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureDatastorePrincipal(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureDatastorePrincipalRequestType *ns1__ConfigureDatastorePrincipal, _ns1__ConfigureDatastorePrincipalResponse *ns1__ConfigureDatastorePrincipalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnresolvedVmfsVolumes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnresolvedVmfsVolumesRequestType *ns1__QueryUnresolvedVmfsVolumes, _ns1__QueryUnresolvedVmfsVolumesResponse *ns1__QueryUnresolvedVmfsVolumesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResignatureUnresolvedVmfsVolumeRequestType *ns1__ResignatureUnresolvedVmfsVolume_USCORETask, _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse *ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDateTimeConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDateTimeConfigRequestType *ns1__UpdateDateTimeConfig, _ns1__UpdateDateTimeConfigResponse *ns1__UpdateDateTimeConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableTimeZones(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableTimeZonesRequestType *ns1__QueryAvailableTimeZones, _ns1__QueryAvailableTimeZonesResponse *ns1__QueryAvailableTimeZonesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDateTimeRequestType *ns1__QueryDateTime, _ns1__QueryDateTimeResponse *ns1__QueryDateTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDateTimeRequestType *ns1__UpdateDateTime, _ns1__UpdateDateTimeResponse *ns1__UpdateDateTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDateTimeSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDateTimeSystemRequestType *ns1__RefreshDateTimeSystem, _ns1__RefreshDateTimeSystemResponse *ns1__RefreshDateTimeSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailablePartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailablePartitionRequestType *ns1__QueryAvailablePartition, _ns1__QueryAvailablePartitionResponse *ns1__QueryAvailablePartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectActivePartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectActivePartitionRequestType *ns1__SelectActivePartition, _ns1__SelectActivePartitionResponse *ns1__SelectActivePartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPartitionCreateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPartitionCreateOptionsRequestType *ns1__QueryPartitionCreateOptions, _ns1__QueryPartitionCreateOptionsResponse *ns1__QueryPartitionCreateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPartitionCreateDesc(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPartitionCreateDescRequestType *ns1__QueryPartitionCreateDesc, _ns1__QueryPartitionCreateDescResponse *ns1__QueryPartitionCreateDescResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDiagnosticPartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDiagnosticPartitionRequestType *ns1__CreateDiagnosticPartition, _ns1__CreateDiagnosticPartitionResponse *ns1__CreateDiagnosticPartitionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDefaultPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDefaultPolicyRequestType *ns1__UpdateDefaultPolicy, _ns1__UpdateDefaultPolicyResponse *ns1__UpdateDefaultPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableRuleset(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableRulesetRequestType *ns1__EnableRuleset, _ns1__EnableRulesetResponse *ns1__EnableRulesetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableRuleset(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableRulesetRequestType *ns1__DisableRuleset, _ns1__DisableRulesetResponse *ns1__DisableRulesetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshFirewall(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshFirewallRequestType *ns1__RefreshFirewall, _ns1__RefreshFirewallResponse *ns1__RefreshFirewallResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetFirmwareToFactoryDefaults(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetFirmwareToFactoryDefaultsRequestType *ns1__ResetFirmwareToFactoryDefaults, _ns1__ResetFirmwareToFactoryDefaultsResponse *ns1__ResetFirmwareToFactoryDefaultsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BackupFirmwareConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BackupFirmwareConfigurationRequestType *ns1__BackupFirmwareConfiguration, _ns1__BackupFirmwareConfigurationResponse *ns1__BackupFirmwareConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryFirmwareConfigUploadURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryFirmwareConfigUploadURLRequestType *ns1__QueryFirmwareConfigUploadURL, _ns1__QueryFirmwareConfigUploadURLResponse *ns1__QueryFirmwareConfigUploadURLResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestoreFirmwareConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestoreFirmwareConfigurationRequestType *ns1__RestoreFirmwareConfiguration, _ns1__RestoreFirmwareConfigurationResponse *ns1__RestoreFirmwareConfigurationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshHealthStatusSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshHealthStatusSystemRequestType *ns1__RefreshHealthStatusSystem, _ns1__RefreshHealthStatusSystemResponse *ns1__RefreshHealthStatusSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetSystemHealthInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetSystemHealthInfoRequestType *ns1__ResetSystemHealthInfo, _ns1__ResetSystemHealthInfoResponse *ns1__ResetSystemHealthInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryModules(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryModulesRequestType *ns1__QueryModules, _ns1__QueryModulesResponse *ns1__QueryModulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateModuleOptionString(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateModuleOptionStringRequestType *ns1__UpdateModuleOptionString, _ns1__UpdateModuleOptionStringResponse *ns1__UpdateModuleOptionStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfiguredModuleOptionString(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfiguredModuleOptionStringRequestType *ns1__QueryConfiguredModuleOptionString, _ns1__QueryConfiguredModuleOptionStringResponse *ns1__QueryConfiguredModuleOptionStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateUserRequestType *ns1__CreateUser, _ns1__CreateUserResponse *ns1__CreateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateUserRequestType *ns1__UpdateUser, _ns1__UpdateUserResponse *ns1__UpdateUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateGroupRequestType *ns1__CreateGroup, _ns1__CreateGroupResponse *ns1__CreateGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveUserRequestType *ns1__RemoveUser, _ns1__RemoveUserResponse *ns1__RemoveUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveGroupRequestType *ns1__RemoveGroup, _ns1__RemoveGroupResponse *ns1__RemoveGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AssignUserToGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AssignUserToGroupRequestType *ns1__AssignUserToGroup, _ns1__AssignUserToGroupResponse *ns1__AssignUserToGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnassignUserFromGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnassignUserFromGroupRequestType *ns1__UnassignUserFromGroup, _ns1__UnassignUserFromGroupResponse *ns1__UnassignUserFromGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureServiceConsoleReservation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureServiceConsoleReservationRequestType *ns1__ReconfigureServiceConsoleReservation, _ns1__ReconfigureServiceConsoleReservationResponse *ns1__ReconfigureServiceConsoleReservationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureVirtualMachineReservation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureVirtualMachineReservationRequestType *ns1__ReconfigureVirtualMachineReservation, _ns1__ReconfigureVirtualMachineReservationResponse *ns1__ReconfigureVirtualMachineReservationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateNetworkConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateNetworkConfigRequestType *ns1__UpdateNetworkConfig, _ns1__UpdateNetworkConfigResponse *ns1__UpdateNetworkConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDnsConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDnsConfigRequestType *ns1__UpdateDnsConfig, _ns1__UpdateDnsConfigResponse *ns1__UpdateDnsConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpRouteConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpRouteConfigRequestType *ns1__UpdateIpRouteConfig, _ns1__UpdateIpRouteConfigResponse *ns1__UpdateIpRouteConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateConsoleIpRouteConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateConsoleIpRouteConfigRequestType *ns1__UpdateConsoleIpRouteConfig, _ns1__UpdateConsoleIpRouteConfigResponse *ns1__UpdateConsoleIpRouteConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpRouteTableConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpRouteTableConfigRequestType *ns1__UpdateIpRouteTableConfig, _ns1__UpdateIpRouteTableConfigResponse *ns1__UpdateIpRouteTableConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddVirtualSwitchRequestType *ns1__AddVirtualSwitch, _ns1__AddVirtualSwitchResponse *ns1__AddVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveVirtualSwitchRequestType *ns1__RemoveVirtualSwitch, _ns1__RemoveVirtualSwitchResponse *ns1__RemoveVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualSwitchRequestType *ns1__UpdateVirtualSwitch, _ns1__UpdateVirtualSwitchResponse *ns1__UpdateVirtualSwitchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddPortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddPortGroupRequestType *ns1__AddPortGroup, _ns1__AddPortGroupResponse *ns1__AddPortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemovePortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemovePortGroupRequestType *ns1__RemovePortGroup, _ns1__RemovePortGroupResponse *ns1__RemovePortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePortGroupRequestType *ns1__UpdatePortGroup, _ns1__UpdatePortGroupResponse *ns1__UpdatePortGroupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePhysicalNicLinkSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePhysicalNicLinkSpeedRequestType *ns1__UpdatePhysicalNicLinkSpeed, _ns1__UpdatePhysicalNicLinkSpeedResponse *ns1__UpdatePhysicalNicLinkSpeedResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryNetworkHint(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryNetworkHintRequestType *ns1__QueryNetworkHint, _ns1__QueryNetworkHintResponse *ns1__QueryNetworkHintResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddVirtualNicRequestType *ns1__AddVirtualNic, _ns1__AddVirtualNicResponse *ns1__AddVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveVirtualNicRequestType *ns1__RemoveVirtualNic, _ns1__RemoveVirtualNicResponse *ns1__RemoveVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualNicRequestType *ns1__UpdateVirtualNic, _ns1__UpdateVirtualNicResponse *ns1__UpdateVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddServiceConsoleVirtualNicRequestType *ns1__AddServiceConsoleVirtualNic, _ns1__AddServiceConsoleVirtualNicResponse *ns1__AddServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveServiceConsoleVirtualNicRequestType *ns1__RemoveServiceConsoleVirtualNic, _ns1__RemoveServiceConsoleVirtualNicResponse *ns1__RemoveServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServiceConsoleVirtualNicRequestType *ns1__UpdateServiceConsoleVirtualNic, _ns1__UpdateServiceConsoleVirtualNicResponse *ns1__UpdateServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestartServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestartServiceConsoleVirtualNicRequestType *ns1__RestartServiceConsoleVirtualNic, _ns1__RestartServiceConsoleVirtualNicResponse *ns1__RestartServiceConsoleVirtualNicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshNetworkSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshNetworkSystemRequestType *ns1__RefreshNetworkSystem, _ns1__RefreshNetworkSystemResponse *ns1__RefreshNetworkSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckHostPatchRequestType *ns1__CheckHostPatch_USCORETask, _ns1__CheckHostPatch_USCORETaskResponse *ns1__CheckHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ScanHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ScanHostPatchRequestType *ns1__ScanHostPatch_USCORETask, _ns1__ScanHostPatch_USCORETaskResponse *ns1__ScanHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ScanHostPatchV2_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ScanHostPatchV2RequestType *ns1__ScanHostPatchV2_USCORETask, _ns1__ScanHostPatchV2_USCORETaskResponse *ns1__ScanHostPatchV2_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StageHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StageHostPatchRequestType *ns1__StageHostPatch_USCORETask, _ns1__StageHostPatch_USCORETaskResponse *ns1__StageHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InstallHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InstallHostPatchRequestType *ns1__InstallHostPatch_USCORETask, _ns1__InstallHostPatch_USCORETaskResponse *ns1__InstallHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InstallHostPatchV2_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InstallHostPatchV2RequestType *ns1__InstallHostPatchV2_USCORETask, _ns1__InstallHostPatchV2_USCORETaskResponse *ns1__InstallHostPatchV2_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UninstallHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UninstallHostPatchRequestType *ns1__UninstallHostPatch_USCORETask, _ns1__UninstallHostPatch_USCORETaskResponse *ns1__UninstallHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostPatchRequestType *ns1__QueryHostPatch_USCORETask, _ns1__QueryHostPatch_USCORETaskResponse *ns1__QueryHostPatch_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Refresh(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRequestType *ns1__Refresh, _ns1__RefreshResponse *ns1__RefreshResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePassthruConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePassthruConfigRequestType *ns1__UpdatePassthruConfig, _ns1__UpdatePassthruConfigResponse *ns1__UpdatePassthruConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigurePowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigurePowerPolicyRequestType *ns1__ConfigurePowerPolicy, _ns1__ConfigurePowerPolicyResponse *ns1__ConfigurePowerPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServicePolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServicePolicyRequestType *ns1__UpdateServicePolicy, _ns1__UpdateServicePolicyResponse *ns1__UpdateServicePolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartServiceRequestType *ns1__StartService, _ns1__StartServiceResponse *ns1__StartServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopServiceRequestType *ns1__StopService, _ns1__StopServiceResponse *ns1__StopServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestartService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestartServiceRequestType *ns1__RestartService, _ns1__RestartServiceResponse *ns1__RestartServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UninstallService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UninstallServiceRequestType *ns1__UninstallService, _ns1__UninstallServiceResponse *ns1__UninstallServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshServices(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshServicesRequestType *ns1__RefreshServices, _ns1__RefreshServicesResponse *ns1__RefreshServicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureSnmpAgent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureSnmpAgentRequestType *ns1__ReconfigureSnmpAgent, _ns1__ReconfigureSnmpAgentResponse *ns1__ReconfigureSnmpAgentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SendTestNotification(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SendTestNotificationRequestType *ns1__SendTestNotification, _ns1__SendTestNotificationResponse *ns1__SendTestNotificationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveDiskPartitionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveDiskPartitionInfoRequestType *ns1__RetrieveDiskPartitionInfo, _ns1__RetrieveDiskPartitionInfoResponse *ns1__RetrieveDiskPartitionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ComputeDiskPartitionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ComputeDiskPartitionInfoRequestType *ns1__ComputeDiskPartitionInfo, _ns1__ComputeDiskPartitionInfoResponse *ns1__ComputeDiskPartitionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ComputeDiskPartitionInfoForResize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ComputeDiskPartitionInfoForResizeRequestType *ns1__ComputeDiskPartitionInfoForResize, _ns1__ComputeDiskPartitionInfoForResizeResponse *ns1__ComputeDiskPartitionInfoForResizeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDiskPartitions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDiskPartitionsRequestType *ns1__UpdateDiskPartitions, _ns1__UpdateDiskPartitionsResponse *ns1__UpdateDiskPartitionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FormatVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FormatVmfsRequestType *ns1__FormatVmfs, _ns1__FormatVmfsResponse *ns1__FormatVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanVmfsRequestType *ns1__RescanVmfs, _ns1__RescanVmfsResponse *ns1__RescanVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AttachVmfsExtent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AttachVmfsExtentRequestType *ns1__AttachVmfsExtent, _ns1__AttachVmfsExtentResponse *ns1__AttachVmfsExtentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExpandVmfsExtent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExpandVmfsExtentRequestType *ns1__ExpandVmfsExtent, _ns1__ExpandVmfsExtentResponse *ns1__ExpandVmfsExtentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVmfsRequestType *ns1__UpgradeVmfs, _ns1__UpgradeVmfsResponse *ns1__UpgradeVmfsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVmLayout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVmLayoutRequestType *ns1__UpgradeVmLayout, _ns1__UpgradeVmLayoutResponse *ns1__UpgradeVmLayoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnresolvedVmfsVolume(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnresolvedVmfsVolumeRequestType *ns1__QueryUnresolvedVmfsVolume, _ns1__QueryUnresolvedVmfsVolumeResponse *ns1__QueryUnresolvedVmfsVolumeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResolveMultipleUnresolvedVmfsVolumes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType *ns1__ResolveMultipleUnresolvedVmfsVolumes, _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse *ns1__ResolveMultipleUnresolvedVmfsVolumesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnmountForceMountedVmfsVolume(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnmountForceMountedVmfsVolumeRequestType *ns1__UnmountForceMountedVmfsVolume, _ns1__UnmountForceMountedVmfsVolumeResponse *ns1__UnmountForceMountedVmfsVolumeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanHba(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanHbaRequestType *ns1__RescanHba, _ns1__RescanHbaResponse *ns1__RescanHbaResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanAllHba(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanAllHbaRequestType *ns1__RescanAllHba, _ns1__RescanAllHbaResponse *ns1__RescanAllHbaResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateSoftwareInternetScsiEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateSoftwareInternetScsiEnabledRequestType *ns1__UpdateSoftwareInternetScsiEnabled, _ns1__UpdateSoftwareInternetScsiEnabledResponse *ns1__UpdateSoftwareInternetScsiEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiDiscoveryProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiDiscoveryPropertiesRequestType *ns1__UpdateInternetScsiDiscoveryProperties, _ns1__UpdateInternetScsiDiscoveryPropertiesResponse *ns1__UpdateInternetScsiDiscoveryPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAuthenticationProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAuthenticationPropertiesRequestType *ns1__UpdateInternetScsiAuthenticationProperties, _ns1__UpdateInternetScsiAuthenticationPropertiesResponse *ns1__UpdateInternetScsiAuthenticationPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiDigestProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiDigestPropertiesRequestType *ns1__UpdateInternetScsiDigestProperties, _ns1__UpdateInternetScsiDigestPropertiesResponse *ns1__UpdateInternetScsiDigestPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAdvancedOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAdvancedOptionsRequestType *ns1__UpdateInternetScsiAdvancedOptions, _ns1__UpdateInternetScsiAdvancedOptionsResponse *ns1__UpdateInternetScsiAdvancedOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiIPProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiIPPropertiesRequestType *ns1__UpdateInternetScsiIPProperties, _ns1__UpdateInternetScsiIPPropertiesResponse *ns1__UpdateInternetScsiIPPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiNameRequestType *ns1__UpdateInternetScsiName, _ns1__UpdateInternetScsiNameResponse *ns1__UpdateInternetScsiNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAlias(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAliasRequestType *ns1__UpdateInternetScsiAlias, _ns1__UpdateInternetScsiAliasResponse *ns1__UpdateInternetScsiAliasResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddInternetScsiSendTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddInternetScsiSendTargetsRequestType *ns1__AddInternetScsiSendTargets, _ns1__AddInternetScsiSendTargetsResponse *ns1__AddInternetScsiSendTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveInternetScsiSendTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveInternetScsiSendTargetsRequestType *ns1__RemoveInternetScsiSendTargets, _ns1__RemoveInternetScsiSendTargetsResponse *ns1__RemoveInternetScsiSendTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddInternetScsiStaticTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddInternetScsiStaticTargetsRequestType *ns1__AddInternetScsiStaticTargets, _ns1__AddInternetScsiStaticTargetsResponse *ns1__AddInternetScsiStaticTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveInternetScsiStaticTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveInternetScsiStaticTargetsRequestType *ns1__RemoveInternetScsiStaticTargets, _ns1__RemoveInternetScsiStaticTargetsResponse *ns1__RemoveInternetScsiStaticTargetsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableMultipathPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableMultipathPathRequestType *ns1__EnableMultipathPath, _ns1__EnableMultipathPathResponse *ns1__EnableMultipathPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableMultipathPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableMultipathPathRequestType *ns1__DisableMultipathPath, _ns1__DisableMultipathPathResponse *ns1__DisableMultipathPathResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetMultipathLunPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetMultipathLunPolicyRequestType *ns1__SetMultipathLunPolicy, _ns1__SetMultipathLunPolicyResponse *ns1__SetMultipathLunPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPathSelectionPolicyOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPathSelectionPolicyOptionsRequestType *ns1__QueryPathSelectionPolicyOptions, _ns1__QueryPathSelectionPolicyOptionsResponse *ns1__QueryPathSelectionPolicyOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryStorageArrayTypePolicyOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryStorageArrayTypePolicyOptionsRequestType *ns1__QueryStorageArrayTypePolicyOptions, _ns1__QueryStorageArrayTypePolicyOptionsResponse *ns1__QueryStorageArrayTypePolicyOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateScsiLunDisplayName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateScsiLunDisplayNameRequestType *ns1__UpdateScsiLunDisplayName, _ns1__UpdateScsiLunDisplayNameResponse *ns1__UpdateScsiLunDisplayNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshStorageSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshStorageSystemRequestType *ns1__RefreshStorageSystem, _ns1__RefreshStorageSystemResponse *ns1__RefreshStorageSystemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpConfigRequestType *ns1__UpdateIpConfig, _ns1__UpdateIpConfigResponse *ns1__UpdateIpConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectVnic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectVnicRequestType *ns1__SelectVnic, _ns1__SelectVnicResponse *ns1__SelectVnicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeselectVnic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeselectVnicRequestType *ns1__DeselectVnic, _ns1__DeselectVnicResponse *ns1__DeselectVnicResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryNetConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryNetConfigRequestType *ns1__QueryNetConfig, _ns1__QueryNetConfigResponse *ns1__QueryNetConfigResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectVnicForNicType(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectVnicForNicTypeRequestType *ns1__SelectVnicForNicType, _ns1__SelectVnicForNicTypeResponse *ns1__SelectVnicForNicTypeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeselectVnicForNicType(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeselectVnicForNicTypeRequestType *ns1__DeselectVnicForNicType, _ns1__DeselectVnicForNicTypeResponse *ns1__DeselectVnicForNicTypeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryOptionsRequestType *ns1__QueryOptions, _ns1__QueryOptionsResponse *ns1__QueryOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateOptionsRequestType *ns1__UpdateOptions, _ns1__UpdateOptionsResponse *ns1__UpdateOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCompliance_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckComplianceRequestType *ns1__CheckCompliance_USCORETask, _ns1__CheckCompliance_USCORETaskResponse *ns1__CheckCompliance_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryComplianceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryComplianceStatusRequestType *ns1__QueryComplianceStatus, _ns1__QueryComplianceStatusResponse *ns1__QueryComplianceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ClearComplianceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ClearComplianceStatusRequestType *ns1__ClearComplianceStatus, _ns1__ClearComplianceStatusResponse *ns1__ClearComplianceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryExpressionMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryExpressionMetadataRequestType *ns1__QueryExpressionMetadata, _ns1__QueryExpressionMetadataResponse *ns1__QueryExpressionMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyProfileRequestType *ns1__DestroyProfile, _ns1__DestroyProfileResponse *ns1__DestroyProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AssociateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AssociateProfileRequestType *ns1__AssociateProfile, _ns1__AssociateProfileResponse *ns1__AssociateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DissociateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DissociateProfileRequestType *ns1__DissociateProfile, _ns1__DissociateProfileResponse *ns1__DissociateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckProfileCompliance_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckProfileComplianceRequestType *ns1__CheckProfileCompliance_USCORETask, _ns1__CheckProfileCompliance_USCORETaskResponse *ns1__CheckProfileCompliance_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportProfileRequestType *ns1__ExportProfile, _ns1__ExportProfileResponse *ns1__ExportProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateProfileRequestType *ns1__CreateProfile, _ns1__CreateProfileResponse *ns1__CreateProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPolicyMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPolicyMetadataRequestType *ns1__QueryPolicyMetadata, _ns1__QueryPolicyMetadataResponse *ns1__QueryPolicyMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAssociatedProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAssociatedProfileRequestType *ns1__FindAssociatedProfile, _ns1__FindAssociatedProfileResponse *ns1__FindAssociatedProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateClusterProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateClusterProfileRequestType *ns1__UpdateClusterProfile, _ns1__UpdateClusterProfileResponse *ns1__UpdateClusterProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateReferenceHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateReferenceHostRequestType *ns1__UpdateReferenceHost, _ns1__UpdateReferenceHostResponse *ns1__UpdateReferenceHostResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateHostProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateHostProfileRequestType *ns1__UpdateHostProfile, _ns1__UpdateHostProfileResponse *ns1__UpdateHostProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteHostProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExecuteHostProfileRequestType *ns1__ExecuteHostProfile, _ns1__ExecuteHostProfileResponse *ns1__ExecuteHostProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ApplyHostConfig_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ApplyHostConfigRequestType *ns1__ApplyHostConfig_USCORETask, _ns1__ApplyHostConfig_USCORETaskResponse *ns1__ApplyHostConfig_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GenerateConfigTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GenerateConfigTaskListRequestType *ns1__GenerateConfigTaskList, _ns1__GenerateConfigTaskListResponse *ns1__GenerateConfigTaskListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostProfileMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostProfileMetadataRequestType *ns1__QueryHostProfileMetadata, _ns1__QueryHostProfileMetadataResponse *ns1__QueryHostProfileMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDefaultProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDefaultProfileRequestType *ns1__CreateDefaultProfile, _ns1__CreateDefaultProfileResponse *ns1__CreateDefaultProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveScheduledTaskRequestType *ns1__RemoveScheduledTask, _ns1__RemoveScheduledTaskResponse *ns1__RemoveScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureScheduledTaskRequestType *ns1__ReconfigureScheduledTask, _ns1__ReconfigureScheduledTaskResponse *ns1__ReconfigureScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RunScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RunScheduledTaskRequestType *ns1__RunScheduledTask, _ns1__RunScheduledTaskResponse *ns1__RunScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateScheduledTaskRequestType *ns1__CreateScheduledTask, _ns1__CreateScheduledTaskResponse *ns1__CreateScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveEntityScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveEntityScheduledTaskRequestType *ns1__RetrieveEntityScheduledTask, _ns1__RetrieveEntityScheduledTaskResponse *ns1__RetrieveEntityScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateObjectScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateObjectScheduledTaskRequestType *ns1__CreateObjectScheduledTask, _ns1__CreateObjectScheduledTaskResponse *ns1__CreateObjectScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveObjectScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveObjectScheduledTaskRequestType *ns1__RetrieveObjectScheduledTask, _ns1__RetrieveObjectScheduledTaskResponse *ns1__RetrieveObjectScheduledTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenInventoryViewFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__OpenInventoryViewFolderRequestType *ns1__OpenInventoryViewFolder, _ns1__OpenInventoryViewFolderResponse *ns1__OpenInventoryViewFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloseInventoryViewFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloseInventoryViewFolderRequestType *ns1__CloseInventoryViewFolder, _ns1__CloseInventoryViewFolderResponse *ns1__CloseInventoryViewFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ModifyListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ModifyListViewRequestType *ns1__ModifyListView, _ns1__ModifyListViewResponse *ns1__ModifyListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetListViewRequestType *ns1__ResetListView, _ns1__ResetListViewResponse *ns1__ResetListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetListViewFromView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetListViewFromViewRequestType *ns1__ResetListViewFromView, _ns1__ResetListViewFromViewResponse *ns1__ResetListViewFromViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyViewRequestType *ns1__DestroyView, _ns1__DestroyViewResponse *ns1__DestroyViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateInventoryView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateInventoryViewRequestType *ns1__CreateInventoryView, _ns1__CreateInventoryViewResponse *ns1__CreateInventoryViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateContainerView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateContainerViewRequestType *ns1__CreateContainerView, _ns1__CreateContainerViewResponse *ns1__CreateContainerViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateListViewRequestType *ns1__CreateListView, _ns1__CreateListViewResponse *ns1__CreateListViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateListViewFromView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateListViewFromViewRequestType *ns1__CreateListViewFromView, _ns1__CreateListViewFromViewResponse *ns1__CreateListViewFromViewResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RevertToSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RevertToSnapshotRequestType *ns1__RevertToSnapshot_USCORETask, _ns1__RevertToSnapshot_USCORETaskResponse *ns1__RevertToSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveSnapshotRequestType *ns1__RemoveSnapshot_USCORETask, _ns1__RemoveSnapshot_USCORETaskResponse *ns1__RemoveSnapshot_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameSnapshot(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameSnapshotRequestType *ns1__RenameSnapshot, _ns1__RenameSnapshotResponse *ns1__RenameSnapshotResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCompatibility_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCompatibilityRequestType *ns1__CheckCompatibility_USCORETask, _ns1__CheckCompatibility_USCORETaskResponse *ns1__CheckCompatibility_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVMotionCompatibilityEx_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVMotionCompatibilityExRequestType *ns1__QueryVMotionCompatibilityEx_USCORETask, _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse *ns1__QueryVMotionCompatibilityEx_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckMigrate_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckMigrateRequestType *ns1__CheckMigrate_USCORETask, _ns1__CheckMigrate_USCORETaskResponse *ns1__CheckMigrate_USCORETaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckRelocate_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckRelocateRequestType *ns1__CheckRelocate_USCORETask, _ns1__CheckRelocate_USCORETaskResponse *ns1__CheckRelocate_USCORETaskResponse);

#endif

/* End of soapStub.h */
