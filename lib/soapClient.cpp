/* soapClient.cpp
   Generated by gSOAP 2.8.2 from ../vim25/vim.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.2 2011-06-01 16:26:54 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyPropertyFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyPropertyFilterRequestType *ns1__DestroyPropertyFilter, _ns1__DestroyPropertyFilterResponse *ns1__DestroyPropertyFilterResponse)
{	struct __ns1__DestroyPropertyFilter soap_tmp___ns1__DestroyPropertyFilter;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyPropertyFilter.ns1__DestroyPropertyFilter = ns1__DestroyPropertyFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyPropertyFilter(soap, &soap_tmp___ns1__DestroyPropertyFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyPropertyFilter(soap, &soap_tmp___ns1__DestroyPropertyFilter, "-ns1:DestroyPropertyFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyPropertyFilter(soap, &soap_tmp___ns1__DestroyPropertyFilter, "-ns1:DestroyPropertyFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyPropertyFilterResponse)
		return soap_closesock(soap);
	ns1__DestroyPropertyFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyPropertyFilterResponse->soap_get(soap, "ns1:DestroyPropertyFilterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateFilterRequestType *ns1__CreateFilter, _ns1__CreateFilterResponse *ns1__CreateFilterResponse)
{	struct __ns1__CreateFilter soap_tmp___ns1__CreateFilter;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateFilter.ns1__CreateFilter = ns1__CreateFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateFilter(soap, &soap_tmp___ns1__CreateFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateFilter(soap, &soap_tmp___ns1__CreateFilter, "-ns1:CreateFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateFilter(soap, &soap_tmp___ns1__CreateFilter, "-ns1:CreateFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateFilterResponse)
		return soap_closesock(soap);
	ns1__CreateFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateFilterResponse->soap_get(soap, "ns1:CreateFilterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrievePropertiesRequestType *ns1__RetrieveProperties, _ns1__RetrievePropertiesResponse *ns1__RetrievePropertiesResponse)
{	struct __ns1__RetrieveProperties soap_tmp___ns1__RetrieveProperties;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveProperties.ns1__RetrieveProperties = ns1__RetrieveProperties;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveProperties(soap, &soap_tmp___ns1__RetrieveProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveProperties(soap, &soap_tmp___ns1__RetrieveProperties, "-ns1:RetrieveProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveProperties(soap, &soap_tmp___ns1__RetrieveProperties, "-ns1:RetrieveProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrievePropertiesResponse)
		return soap_closesock(soap);
	ns1__RetrievePropertiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrievePropertiesResponse->soap_get(soap, "ns1:RetrievePropertiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckForUpdatesRequestType *ns1__CheckForUpdates, _ns1__CheckForUpdatesResponse *ns1__CheckForUpdatesResponse)
{	struct __ns1__CheckForUpdates soap_tmp___ns1__CheckForUpdates;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckForUpdates.ns1__CheckForUpdates = ns1__CheckForUpdates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckForUpdates(soap, &soap_tmp___ns1__CheckForUpdates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckForUpdates(soap, &soap_tmp___ns1__CheckForUpdates, "-ns1:CheckForUpdates", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckForUpdates(soap, &soap_tmp___ns1__CheckForUpdates, "-ns1:CheckForUpdates", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckForUpdatesResponse)
		return soap_closesock(soap);
	ns1__CheckForUpdatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckForUpdatesResponse->soap_get(soap, "ns1:CheckForUpdatesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WaitForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WaitForUpdatesRequestType *ns1__WaitForUpdates, _ns1__WaitForUpdatesResponse *ns1__WaitForUpdatesResponse)
{	struct __ns1__WaitForUpdates soap_tmp___ns1__WaitForUpdates;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__WaitForUpdates.ns1__WaitForUpdates = ns1__WaitForUpdates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__WaitForUpdates(soap, &soap_tmp___ns1__WaitForUpdates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WaitForUpdates(soap, &soap_tmp___ns1__WaitForUpdates, "-ns1:WaitForUpdates", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WaitForUpdates(soap, &soap_tmp___ns1__WaitForUpdates, "-ns1:WaitForUpdates", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__WaitForUpdatesResponse)
		return soap_closesock(soap);
	ns1__WaitForUpdatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WaitForUpdatesResponse->soap_get(soap, "ns1:WaitForUpdatesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelWaitForUpdates(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelWaitForUpdatesRequestType *ns1__CancelWaitForUpdates, _ns1__CancelWaitForUpdatesResponse *ns1__CancelWaitForUpdatesResponse)
{	struct __ns1__CancelWaitForUpdates soap_tmp___ns1__CancelWaitForUpdates;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CancelWaitForUpdates.ns1__CancelWaitForUpdates = ns1__CancelWaitForUpdates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CancelWaitForUpdates(soap, &soap_tmp___ns1__CancelWaitForUpdates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CancelWaitForUpdates(soap, &soap_tmp___ns1__CancelWaitForUpdates, "-ns1:CancelWaitForUpdates", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CancelWaitForUpdates(soap, &soap_tmp___ns1__CancelWaitForUpdates, "-ns1:CancelWaitForUpdates", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CancelWaitForUpdatesResponse)
		return soap_closesock(soap);
	ns1__CancelWaitForUpdatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CancelWaitForUpdatesResponse->soap_get(soap, "ns1:CancelWaitForUpdatesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__WaitForUpdatesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__WaitForUpdatesExRequestType *ns1__WaitForUpdatesEx, _ns1__WaitForUpdatesExResponse *ns1__WaitForUpdatesExResponse)
{	struct __ns1__WaitForUpdatesEx soap_tmp___ns1__WaitForUpdatesEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__WaitForUpdatesEx.ns1__WaitForUpdatesEx = ns1__WaitForUpdatesEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__WaitForUpdatesEx(soap, &soap_tmp___ns1__WaitForUpdatesEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__WaitForUpdatesEx(soap, &soap_tmp___ns1__WaitForUpdatesEx, "-ns1:WaitForUpdatesEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__WaitForUpdatesEx(soap, &soap_tmp___ns1__WaitForUpdatesEx, "-ns1:WaitForUpdatesEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__WaitForUpdatesExResponse)
		return soap_closesock(soap);
	ns1__WaitForUpdatesExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__WaitForUpdatesExResponse->soap_get(soap, "ns1:WaitForUpdatesExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrievePropertiesExRequestType *ns1__RetrievePropertiesEx, _ns1__RetrievePropertiesExResponse *ns1__RetrievePropertiesExResponse)
{	struct __ns1__RetrievePropertiesEx soap_tmp___ns1__RetrievePropertiesEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrievePropertiesEx.ns1__RetrievePropertiesEx = ns1__RetrievePropertiesEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrievePropertiesEx(soap, &soap_tmp___ns1__RetrievePropertiesEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrievePropertiesEx(soap, &soap_tmp___ns1__RetrievePropertiesEx, "-ns1:RetrievePropertiesEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrievePropertiesEx(soap, &soap_tmp___ns1__RetrievePropertiesEx, "-ns1:RetrievePropertiesEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrievePropertiesExResponse)
		return soap_closesock(soap);
	ns1__RetrievePropertiesExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrievePropertiesExResponse->soap_get(soap, "ns1:RetrievePropertiesExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ContinueRetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ContinueRetrievePropertiesExRequestType *ns1__ContinueRetrievePropertiesEx, _ns1__ContinueRetrievePropertiesExResponse *ns1__ContinueRetrievePropertiesExResponse)
{	struct __ns1__ContinueRetrievePropertiesEx soap_tmp___ns1__ContinueRetrievePropertiesEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ContinueRetrievePropertiesEx.ns1__ContinueRetrievePropertiesEx = ns1__ContinueRetrievePropertiesEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ContinueRetrievePropertiesEx(soap, &soap_tmp___ns1__ContinueRetrievePropertiesEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ContinueRetrievePropertiesEx(soap, &soap_tmp___ns1__ContinueRetrievePropertiesEx, "-ns1:ContinueRetrievePropertiesEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ContinueRetrievePropertiesEx(soap, &soap_tmp___ns1__ContinueRetrievePropertiesEx, "-ns1:ContinueRetrievePropertiesEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ContinueRetrievePropertiesExResponse)
		return soap_closesock(soap);
	ns1__ContinueRetrievePropertiesExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ContinueRetrievePropertiesExResponse->soap_get(soap, "ns1:ContinueRetrievePropertiesExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelRetrievePropertiesEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelRetrievePropertiesExRequestType *ns1__CancelRetrievePropertiesEx, _ns1__CancelRetrievePropertiesExResponse *ns1__CancelRetrievePropertiesExResponse)
{	struct __ns1__CancelRetrievePropertiesEx soap_tmp___ns1__CancelRetrievePropertiesEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CancelRetrievePropertiesEx.ns1__CancelRetrievePropertiesEx = ns1__CancelRetrievePropertiesEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CancelRetrievePropertiesEx(soap, &soap_tmp___ns1__CancelRetrievePropertiesEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CancelRetrievePropertiesEx(soap, &soap_tmp___ns1__CancelRetrievePropertiesEx, "-ns1:CancelRetrievePropertiesEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CancelRetrievePropertiesEx(soap, &soap_tmp___ns1__CancelRetrievePropertiesEx, "-ns1:CancelRetrievePropertiesEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CancelRetrievePropertiesExResponse)
		return soap_closesock(soap);
	ns1__CancelRetrievePropertiesExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CancelRetrievePropertiesExResponse->soap_get(soap, "ns1:CancelRetrievePropertiesExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreatePropertyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreatePropertyCollectorRequestType *ns1__CreatePropertyCollector, _ns1__CreatePropertyCollectorResponse *ns1__CreatePropertyCollectorResponse)
{	struct __ns1__CreatePropertyCollector soap_tmp___ns1__CreatePropertyCollector;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreatePropertyCollector.ns1__CreatePropertyCollector = ns1__CreatePropertyCollector;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreatePropertyCollector(soap, &soap_tmp___ns1__CreatePropertyCollector);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreatePropertyCollector(soap, &soap_tmp___ns1__CreatePropertyCollector, "-ns1:CreatePropertyCollector", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreatePropertyCollector(soap, &soap_tmp___ns1__CreatePropertyCollector, "-ns1:CreatePropertyCollector", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreatePropertyCollectorResponse)
		return soap_closesock(soap);
	ns1__CreatePropertyCollectorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreatePropertyCollectorResponse->soap_get(soap, "ns1:CreatePropertyCollectorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyPropertyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyPropertyCollectorRequestType *ns1__DestroyPropertyCollector, _ns1__DestroyPropertyCollectorResponse *ns1__DestroyPropertyCollectorResponse)
{	struct __ns1__DestroyPropertyCollector soap_tmp___ns1__DestroyPropertyCollector;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyPropertyCollector.ns1__DestroyPropertyCollector = ns1__DestroyPropertyCollector;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyPropertyCollector(soap, &soap_tmp___ns1__DestroyPropertyCollector);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyPropertyCollector(soap, &soap_tmp___ns1__DestroyPropertyCollector, "-ns1:DestroyPropertyCollector", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyPropertyCollector(soap, &soap_tmp___ns1__DestroyPropertyCollector, "-ns1:DestroyPropertyCollector", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyPropertyCollectorResponse)
		return soap_closesock(soap);
	ns1__DestroyPropertyCollectorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyPropertyCollectorResponse->soap_get(soap, "ns1:DestroyPropertyCollectorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddAuthorizationRoleRequestType *ns1__AddAuthorizationRole, _ns1__AddAuthorizationRoleResponse *ns1__AddAuthorizationRoleResponse)
{	struct __ns1__AddAuthorizationRole soap_tmp___ns1__AddAuthorizationRole;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddAuthorizationRole.ns1__AddAuthorizationRole = ns1__AddAuthorizationRole;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddAuthorizationRole(soap, &soap_tmp___ns1__AddAuthorizationRole);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddAuthorizationRole(soap, &soap_tmp___ns1__AddAuthorizationRole, "-ns1:AddAuthorizationRole", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddAuthorizationRole(soap, &soap_tmp___ns1__AddAuthorizationRole, "-ns1:AddAuthorizationRole", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddAuthorizationRoleResponse)
		return soap_closesock(soap);
	ns1__AddAuthorizationRoleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddAuthorizationRoleResponse->soap_get(soap, "ns1:AddAuthorizationRoleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAuthorizationRoleRequestType *ns1__RemoveAuthorizationRole, _ns1__RemoveAuthorizationRoleResponse *ns1__RemoveAuthorizationRoleResponse)
{	struct __ns1__RemoveAuthorizationRole soap_tmp___ns1__RemoveAuthorizationRole;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveAuthorizationRole.ns1__RemoveAuthorizationRole = ns1__RemoveAuthorizationRole;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveAuthorizationRole(soap, &soap_tmp___ns1__RemoveAuthorizationRole);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveAuthorizationRole(soap, &soap_tmp___ns1__RemoveAuthorizationRole, "-ns1:RemoveAuthorizationRole", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveAuthorizationRole(soap, &soap_tmp___ns1__RemoveAuthorizationRole, "-ns1:RemoveAuthorizationRole", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveAuthorizationRoleResponse)
		return soap_closesock(soap);
	ns1__RemoveAuthorizationRoleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveAuthorizationRoleResponse->soap_get(soap, "ns1:RemoveAuthorizationRoleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAuthorizationRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateAuthorizationRoleRequestType *ns1__UpdateAuthorizationRole, _ns1__UpdateAuthorizationRoleResponse *ns1__UpdateAuthorizationRoleResponse)
{	struct __ns1__UpdateAuthorizationRole soap_tmp___ns1__UpdateAuthorizationRole;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateAuthorizationRole.ns1__UpdateAuthorizationRole = ns1__UpdateAuthorizationRole;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateAuthorizationRole(soap, &soap_tmp___ns1__UpdateAuthorizationRole);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateAuthorizationRole(soap, &soap_tmp___ns1__UpdateAuthorizationRole, "-ns1:UpdateAuthorizationRole", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateAuthorizationRole(soap, &soap_tmp___ns1__UpdateAuthorizationRole, "-ns1:UpdateAuthorizationRole", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateAuthorizationRoleResponse)
		return soap_closesock(soap);
	ns1__UpdateAuthorizationRoleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateAuthorizationRoleResponse->soap_get(soap, "ns1:UpdateAuthorizationRoleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MergePermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MergePermissionsRequestType *ns1__MergePermissions, _ns1__MergePermissionsResponse *ns1__MergePermissionsResponse)
{	struct __ns1__MergePermissions soap_tmp___ns1__MergePermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MergePermissions.ns1__MergePermissions = ns1__MergePermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MergePermissions(soap, &soap_tmp___ns1__MergePermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MergePermissions(soap, &soap_tmp___ns1__MergePermissions, "-ns1:MergePermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MergePermissions(soap, &soap_tmp___ns1__MergePermissions, "-ns1:MergePermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MergePermissionsResponse)
		return soap_closesock(soap);
	ns1__MergePermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MergePermissionsResponse->soap_get(soap, "ns1:MergePermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveRolePermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveRolePermissionsRequestType *ns1__RetrieveRolePermissions, _ns1__RetrieveRolePermissionsResponse *ns1__RetrieveRolePermissionsResponse)
{	struct __ns1__RetrieveRolePermissions soap_tmp___ns1__RetrieveRolePermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveRolePermissions.ns1__RetrieveRolePermissions = ns1__RetrieveRolePermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveRolePermissions(soap, &soap_tmp___ns1__RetrieveRolePermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveRolePermissions(soap, &soap_tmp___ns1__RetrieveRolePermissions, "-ns1:RetrieveRolePermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveRolePermissions(soap, &soap_tmp___ns1__RetrieveRolePermissions, "-ns1:RetrieveRolePermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveRolePermissionsResponse)
		return soap_closesock(soap);
	ns1__RetrieveRolePermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveRolePermissionsResponse->soap_get(soap, "ns1:RetrieveRolePermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveEntityPermissionsRequestType *ns1__RetrieveEntityPermissions, _ns1__RetrieveEntityPermissionsResponse *ns1__RetrieveEntityPermissionsResponse)
{	struct __ns1__RetrieveEntityPermissions soap_tmp___ns1__RetrieveEntityPermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveEntityPermissions.ns1__RetrieveEntityPermissions = ns1__RetrieveEntityPermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveEntityPermissions(soap, &soap_tmp___ns1__RetrieveEntityPermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveEntityPermissions(soap, &soap_tmp___ns1__RetrieveEntityPermissions, "-ns1:RetrieveEntityPermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveEntityPermissions(soap, &soap_tmp___ns1__RetrieveEntityPermissions, "-ns1:RetrieveEntityPermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveEntityPermissionsResponse)
		return soap_closesock(soap);
	ns1__RetrieveEntityPermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveEntityPermissionsResponse->soap_get(soap, "ns1:RetrieveEntityPermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveAllPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveAllPermissionsRequestType *ns1__RetrieveAllPermissions, _ns1__RetrieveAllPermissionsResponse *ns1__RetrieveAllPermissionsResponse)
{	struct __ns1__RetrieveAllPermissions soap_tmp___ns1__RetrieveAllPermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveAllPermissions.ns1__RetrieveAllPermissions = ns1__RetrieveAllPermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveAllPermissions(soap, &soap_tmp___ns1__RetrieveAllPermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveAllPermissions(soap, &soap_tmp___ns1__RetrieveAllPermissions, "-ns1:RetrieveAllPermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveAllPermissions(soap, &soap_tmp___ns1__RetrieveAllPermissions, "-ns1:RetrieveAllPermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveAllPermissionsResponse)
		return soap_closesock(soap);
	ns1__RetrieveAllPermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveAllPermissionsResponse->soap_get(soap, "ns1:RetrieveAllPermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetEntityPermissionsRequestType *ns1__SetEntityPermissions, _ns1__SetEntityPermissionsResponse *ns1__SetEntityPermissionsResponse)
{	struct __ns1__SetEntityPermissions soap_tmp___ns1__SetEntityPermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetEntityPermissions.ns1__SetEntityPermissions = ns1__SetEntityPermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetEntityPermissions(soap, &soap_tmp___ns1__SetEntityPermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetEntityPermissions(soap, &soap_tmp___ns1__SetEntityPermissions, "-ns1:SetEntityPermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetEntityPermissions(soap, &soap_tmp___ns1__SetEntityPermissions, "-ns1:SetEntityPermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetEntityPermissionsResponse)
		return soap_closesock(soap);
	ns1__SetEntityPermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetEntityPermissionsResponse->soap_get(soap, "ns1:SetEntityPermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetEntityPermissions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetEntityPermissionsRequestType *ns1__ResetEntityPermissions, _ns1__ResetEntityPermissionsResponse *ns1__ResetEntityPermissionsResponse)
{	struct __ns1__ResetEntityPermissions soap_tmp___ns1__ResetEntityPermissions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetEntityPermissions.ns1__ResetEntityPermissions = ns1__ResetEntityPermissions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetEntityPermissions(soap, &soap_tmp___ns1__ResetEntityPermissions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetEntityPermissions(soap, &soap_tmp___ns1__ResetEntityPermissions, "-ns1:ResetEntityPermissions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetEntityPermissions(soap, &soap_tmp___ns1__ResetEntityPermissions, "-ns1:ResetEntityPermissions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetEntityPermissionsResponse)
		return soap_closesock(soap);
	ns1__ResetEntityPermissionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetEntityPermissionsResponse->soap_get(soap, "ns1:ResetEntityPermissionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveEntityPermission(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveEntityPermissionRequestType *ns1__RemoveEntityPermission, _ns1__RemoveEntityPermissionResponse *ns1__RemoveEntityPermissionResponse)
{	struct __ns1__RemoveEntityPermission soap_tmp___ns1__RemoveEntityPermission;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveEntityPermission.ns1__RemoveEntityPermission = ns1__RemoveEntityPermission;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveEntityPermission(soap, &soap_tmp___ns1__RemoveEntityPermission);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveEntityPermission(soap, &soap_tmp___ns1__RemoveEntityPermission, "-ns1:RemoveEntityPermission", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveEntityPermission(soap, &soap_tmp___ns1__RemoveEntityPermission, "-ns1:RemoveEntityPermission", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveEntityPermissionResponse)
		return soap_closesock(soap);
	ns1__RemoveEntityPermissionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveEntityPermissionResponse->soap_get(soap, "ns1:RemoveEntityPermissionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureCluster_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureClusterRequestType *ns1__ReconfigureCluster_USCORETask, _ns1__ReconfigureCluster_USCORETaskResponse *ns1__ReconfigureCluster_USCORETaskResponse)
{	struct __ns1__ReconfigureCluster_USCORETask soap_tmp___ns1__ReconfigureCluster_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureCluster_USCORETask.ns1__ReconfigureCluster_USCORETask = ns1__ReconfigureCluster_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureCluster_USCORETask(soap, &soap_tmp___ns1__ReconfigureCluster_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureCluster_USCORETask(soap, &soap_tmp___ns1__ReconfigureCluster_USCORETask, "-ns1:ReconfigureCluster_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureCluster_USCORETask(soap, &soap_tmp___ns1__ReconfigureCluster_USCORETask, "-ns1:ReconfigureCluster_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureCluster_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureCluster_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureCluster_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureCluster_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ApplyRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ApplyRecommendationRequestType *ns1__ApplyRecommendation, _ns1__ApplyRecommendationResponse *ns1__ApplyRecommendationResponse)
{	struct __ns1__ApplyRecommendation soap_tmp___ns1__ApplyRecommendation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ApplyRecommendation.ns1__ApplyRecommendation = ns1__ApplyRecommendation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ApplyRecommendation(soap, &soap_tmp___ns1__ApplyRecommendation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ApplyRecommendation(soap, &soap_tmp___ns1__ApplyRecommendation, "-ns1:ApplyRecommendation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ApplyRecommendation(soap, &soap_tmp___ns1__ApplyRecommendation, "-ns1:ApplyRecommendation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ApplyRecommendationResponse)
		return soap_closesock(soap);
	ns1__ApplyRecommendationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ApplyRecommendationResponse->soap_get(soap, "ns1:ApplyRecommendationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelRecommendationRequestType *ns1__CancelRecommendation, _ns1__CancelRecommendationResponse *ns1__CancelRecommendationResponse)
{	struct __ns1__CancelRecommendation soap_tmp___ns1__CancelRecommendation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CancelRecommendation.ns1__CancelRecommendation = ns1__CancelRecommendation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CancelRecommendation(soap, &soap_tmp___ns1__CancelRecommendation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CancelRecommendation(soap, &soap_tmp___ns1__CancelRecommendation, "-ns1:CancelRecommendation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CancelRecommendation(soap, &soap_tmp___ns1__CancelRecommendation, "-ns1:CancelRecommendation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CancelRecommendationResponse)
		return soap_closesock(soap);
	ns1__CancelRecommendationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CancelRecommendationResponse->soap_get(soap, "ns1:CancelRecommendationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RecommendHostsForVm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RecommendHostsForVmRequestType *ns1__RecommendHostsForVm, _ns1__RecommendHostsForVmResponse *ns1__RecommendHostsForVmResponse)
{	struct __ns1__RecommendHostsForVm soap_tmp___ns1__RecommendHostsForVm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RecommendHostsForVm.ns1__RecommendHostsForVm = ns1__RecommendHostsForVm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RecommendHostsForVm(soap, &soap_tmp___ns1__RecommendHostsForVm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RecommendHostsForVm(soap, &soap_tmp___ns1__RecommendHostsForVm, "-ns1:RecommendHostsForVm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RecommendHostsForVm(soap, &soap_tmp___ns1__RecommendHostsForVm, "-ns1:RecommendHostsForVm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RecommendHostsForVmResponse)
		return soap_closesock(soap);
	ns1__RecommendHostsForVmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RecommendHostsForVmResponse->soap_get(soap, "ns1:RecommendHostsForVmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddHostRequestType *ns1__AddHost_USCORETask, _ns1__AddHost_USCORETaskResponse *ns1__AddHost_USCORETaskResponse)
{	struct __ns1__AddHost_USCORETask soap_tmp___ns1__AddHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddHost_USCORETask.ns1__AddHost_USCORETask = ns1__AddHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddHost_USCORETask(soap, &soap_tmp___ns1__AddHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddHost_USCORETask(soap, &soap_tmp___ns1__AddHost_USCORETask, "-ns1:AddHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddHost_USCORETask(soap, &soap_tmp___ns1__AddHost_USCORETask, "-ns1:AddHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__AddHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddHost_USCORETaskResponse->soap_get(soap, "ns1:AddHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveInto_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoRequestType *ns1__MoveInto_USCORETask, _ns1__MoveInto_USCORETaskResponse *ns1__MoveInto_USCORETaskResponse)
{	struct __ns1__MoveInto_USCORETask soap_tmp___ns1__MoveInto_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveInto_USCORETask.ns1__MoveInto_USCORETask = ns1__MoveInto_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveInto_USCORETask(soap, &soap_tmp___ns1__MoveInto_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveInto_USCORETask(soap, &soap_tmp___ns1__MoveInto_USCORETask, "-ns1:MoveInto_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveInto_USCORETask(soap, &soap_tmp___ns1__MoveInto_USCORETask, "-ns1:MoveInto_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveInto_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveInto_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveInto_USCORETaskResponse->soap_get(soap, "ns1:MoveInto_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveHostInto_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveHostIntoRequestType *ns1__MoveHostInto_USCORETask, _ns1__MoveHostInto_USCORETaskResponse *ns1__MoveHostInto_USCORETaskResponse)
{	struct __ns1__MoveHostInto_USCORETask soap_tmp___ns1__MoveHostInto_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveHostInto_USCORETask.ns1__MoveHostInto_USCORETask = ns1__MoveHostInto_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveHostInto_USCORETask(soap, &soap_tmp___ns1__MoveHostInto_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveHostInto_USCORETask(soap, &soap_tmp___ns1__MoveHostInto_USCORETask, "-ns1:MoveHostInto_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveHostInto_USCORETask(soap, &soap_tmp___ns1__MoveHostInto_USCORETask, "-ns1:MoveHostInto_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveHostInto_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveHostInto_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveHostInto_USCORETaskResponse->soap_get(soap, "ns1:MoveHostInto_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshRecommendation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRecommendationRequestType *ns1__RefreshRecommendation, _ns1__RefreshRecommendationResponse *ns1__RefreshRecommendationResponse)
{	struct __ns1__RefreshRecommendation soap_tmp___ns1__RefreshRecommendation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshRecommendation.ns1__RefreshRecommendation = ns1__RefreshRecommendation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshRecommendation(soap, &soap_tmp___ns1__RefreshRecommendation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshRecommendation(soap, &soap_tmp___ns1__RefreshRecommendation, "-ns1:RefreshRecommendation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshRecommendation(soap, &soap_tmp___ns1__RefreshRecommendation, "-ns1:RefreshRecommendation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshRecommendationResponse)
		return soap_closesock(soap);
	ns1__RefreshRecommendationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshRecommendationResponse->soap_get(soap, "ns1:RefreshRecommendationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveDasAdvancedRuntimeInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveDasAdvancedRuntimeInfoRequestType *ns1__RetrieveDasAdvancedRuntimeInfo, _ns1__RetrieveDasAdvancedRuntimeInfoResponse *ns1__RetrieveDasAdvancedRuntimeInfoResponse)
{	struct __ns1__RetrieveDasAdvancedRuntimeInfo soap_tmp___ns1__RetrieveDasAdvancedRuntimeInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveDasAdvancedRuntimeInfo.ns1__RetrieveDasAdvancedRuntimeInfo = ns1__RetrieveDasAdvancedRuntimeInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveDasAdvancedRuntimeInfo(soap, &soap_tmp___ns1__RetrieveDasAdvancedRuntimeInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveDasAdvancedRuntimeInfo(soap, &soap_tmp___ns1__RetrieveDasAdvancedRuntimeInfo, "-ns1:RetrieveDasAdvancedRuntimeInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveDasAdvancedRuntimeInfo(soap, &soap_tmp___ns1__RetrieveDasAdvancedRuntimeInfo, "-ns1:RetrieveDasAdvancedRuntimeInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveDasAdvancedRuntimeInfoResponse)
		return soap_closesock(soap);
	ns1__RetrieveDasAdvancedRuntimeInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveDasAdvancedRuntimeInfoResponse->soap_get(soap, "ns1:RetrieveDasAdvancedRuntimeInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureComputeResource_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureComputeResourceRequestType *ns1__ReconfigureComputeResource_USCORETask, _ns1__ReconfigureComputeResource_USCORETaskResponse *ns1__ReconfigureComputeResource_USCORETaskResponse)
{	struct __ns1__ReconfigureComputeResource_USCORETask soap_tmp___ns1__ReconfigureComputeResource_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureComputeResource_USCORETask.ns1__ReconfigureComputeResource_USCORETask = ns1__ReconfigureComputeResource_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureComputeResource_USCORETask(soap, &soap_tmp___ns1__ReconfigureComputeResource_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureComputeResource_USCORETask(soap, &soap_tmp___ns1__ReconfigureComputeResource_USCORETask, "-ns1:ReconfigureComputeResource_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureComputeResource_USCORETask(soap, &soap_tmp___ns1__ReconfigureComputeResource_USCORETask, "-ns1:ReconfigureComputeResource_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureComputeResource_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureComputeResource_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureComputeResource_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureComputeResource_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddCustomFieldDefRequestType *ns1__AddCustomFieldDef, _ns1__AddCustomFieldDefResponse *ns1__AddCustomFieldDefResponse)
{	struct __ns1__AddCustomFieldDef soap_tmp___ns1__AddCustomFieldDef;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddCustomFieldDef.ns1__AddCustomFieldDef = ns1__AddCustomFieldDef;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddCustomFieldDef(soap, &soap_tmp___ns1__AddCustomFieldDef);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddCustomFieldDef(soap, &soap_tmp___ns1__AddCustomFieldDef, "-ns1:AddCustomFieldDef", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddCustomFieldDef(soap, &soap_tmp___ns1__AddCustomFieldDef, "-ns1:AddCustomFieldDef", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddCustomFieldDefResponse)
		return soap_closesock(soap);
	ns1__AddCustomFieldDefResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddCustomFieldDefResponse->soap_get(soap, "ns1:AddCustomFieldDefResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveCustomFieldDefRequestType *ns1__RemoveCustomFieldDef, _ns1__RemoveCustomFieldDefResponse *ns1__RemoveCustomFieldDefResponse)
{	struct __ns1__RemoveCustomFieldDef soap_tmp___ns1__RemoveCustomFieldDef;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveCustomFieldDef.ns1__RemoveCustomFieldDef = ns1__RemoveCustomFieldDef;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveCustomFieldDef(soap, &soap_tmp___ns1__RemoveCustomFieldDef);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveCustomFieldDef(soap, &soap_tmp___ns1__RemoveCustomFieldDef, "-ns1:RemoveCustomFieldDef", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveCustomFieldDef(soap, &soap_tmp___ns1__RemoveCustomFieldDef, "-ns1:RemoveCustomFieldDef", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveCustomFieldDefResponse)
		return soap_closesock(soap);
	ns1__RemoveCustomFieldDefResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveCustomFieldDefResponse->soap_get(soap, "ns1:RemoveCustomFieldDefResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameCustomFieldDef(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameCustomFieldDefRequestType *ns1__RenameCustomFieldDef, _ns1__RenameCustomFieldDefResponse *ns1__RenameCustomFieldDefResponse)
{	struct __ns1__RenameCustomFieldDef soap_tmp___ns1__RenameCustomFieldDef;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RenameCustomFieldDef.ns1__RenameCustomFieldDef = ns1__RenameCustomFieldDef;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameCustomFieldDef(soap, &soap_tmp___ns1__RenameCustomFieldDef);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameCustomFieldDef(soap, &soap_tmp___ns1__RenameCustomFieldDef, "-ns1:RenameCustomFieldDef", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameCustomFieldDef(soap, &soap_tmp___ns1__RenameCustomFieldDef, "-ns1:RenameCustomFieldDef", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RenameCustomFieldDefResponse)
		return soap_closesock(soap);
	ns1__RenameCustomFieldDefResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameCustomFieldDefResponse->soap_get(soap, "ns1:RenameCustomFieldDefResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetField(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetFieldRequestType *ns1__SetField, _ns1__SetFieldResponse *ns1__SetFieldResponse)
{	struct __ns1__SetField soap_tmp___ns1__SetField;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetField.ns1__SetField = ns1__SetField;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetField(soap, &soap_tmp___ns1__SetField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetField(soap, &soap_tmp___ns1__SetField, "-ns1:SetField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetField(soap, &soap_tmp___ns1__SetField, "-ns1:SetField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetFieldResponse)
		return soap_closesock(soap);
	ns1__SetFieldResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetFieldResponse->soap_get(soap, "ns1:SetFieldResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DoesCustomizationSpecExist(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DoesCustomizationSpecExistRequestType *ns1__DoesCustomizationSpecExist, _ns1__DoesCustomizationSpecExistResponse *ns1__DoesCustomizationSpecExistResponse)
{	struct __ns1__DoesCustomizationSpecExist soap_tmp___ns1__DoesCustomizationSpecExist;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DoesCustomizationSpecExist.ns1__DoesCustomizationSpecExist = ns1__DoesCustomizationSpecExist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DoesCustomizationSpecExist(soap, &soap_tmp___ns1__DoesCustomizationSpecExist);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DoesCustomizationSpecExist(soap, &soap_tmp___ns1__DoesCustomizationSpecExist, "-ns1:DoesCustomizationSpecExist", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DoesCustomizationSpecExist(soap, &soap_tmp___ns1__DoesCustomizationSpecExist, "-ns1:DoesCustomizationSpecExist", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DoesCustomizationSpecExistResponse)
		return soap_closesock(soap);
	ns1__DoesCustomizationSpecExistResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DoesCustomizationSpecExistResponse->soap_get(soap, "ns1:DoesCustomizationSpecExistResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetCustomizationSpecRequestType *ns1__GetCustomizationSpec, _ns1__GetCustomizationSpecResponse *ns1__GetCustomizationSpecResponse)
{	struct __ns1__GetCustomizationSpec soap_tmp___ns1__GetCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetCustomizationSpec.ns1__GetCustomizationSpec = ns1__GetCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetCustomizationSpec(soap, &soap_tmp___ns1__GetCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetCustomizationSpec(soap, &soap_tmp___ns1__GetCustomizationSpec, "-ns1:GetCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetCustomizationSpec(soap, &soap_tmp___ns1__GetCustomizationSpec, "-ns1:GetCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__GetCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetCustomizationSpecResponse->soap_get(soap, "ns1:GetCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCustomizationSpecRequestType *ns1__CreateCustomizationSpec, _ns1__CreateCustomizationSpecResponse *ns1__CreateCustomizationSpecResponse)
{	struct __ns1__CreateCustomizationSpec soap_tmp___ns1__CreateCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateCustomizationSpec.ns1__CreateCustomizationSpec = ns1__CreateCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateCustomizationSpec(soap, &soap_tmp___ns1__CreateCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateCustomizationSpec(soap, &soap_tmp___ns1__CreateCustomizationSpec, "-ns1:CreateCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateCustomizationSpec(soap, &soap_tmp___ns1__CreateCustomizationSpec, "-ns1:CreateCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__CreateCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateCustomizationSpecResponse->soap_get(soap, "ns1:CreateCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OverwriteCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__OverwriteCustomizationSpecRequestType *ns1__OverwriteCustomizationSpec, _ns1__OverwriteCustomizationSpecResponse *ns1__OverwriteCustomizationSpecResponse)
{	struct __ns1__OverwriteCustomizationSpec soap_tmp___ns1__OverwriteCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__OverwriteCustomizationSpec.ns1__OverwriteCustomizationSpec = ns1__OverwriteCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__OverwriteCustomizationSpec(soap, &soap_tmp___ns1__OverwriteCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OverwriteCustomizationSpec(soap, &soap_tmp___ns1__OverwriteCustomizationSpec, "-ns1:OverwriteCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OverwriteCustomizationSpec(soap, &soap_tmp___ns1__OverwriteCustomizationSpec, "-ns1:OverwriteCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__OverwriteCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__OverwriteCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OverwriteCustomizationSpecResponse->soap_get(soap, "ns1:OverwriteCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteCustomizationSpecRequestType *ns1__DeleteCustomizationSpec, _ns1__DeleteCustomizationSpecResponse *ns1__DeleteCustomizationSpecResponse)
{	struct __ns1__DeleteCustomizationSpec soap_tmp___ns1__DeleteCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteCustomizationSpec.ns1__DeleteCustomizationSpec = ns1__DeleteCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteCustomizationSpec(soap, &soap_tmp___ns1__DeleteCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteCustomizationSpec(soap, &soap_tmp___ns1__DeleteCustomizationSpec, "-ns1:DeleteCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteCustomizationSpec(soap, &soap_tmp___ns1__DeleteCustomizationSpec, "-ns1:DeleteCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__DeleteCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteCustomizationSpecResponse->soap_get(soap, "ns1:DeleteCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DuplicateCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DuplicateCustomizationSpecRequestType *ns1__DuplicateCustomizationSpec, _ns1__DuplicateCustomizationSpecResponse *ns1__DuplicateCustomizationSpecResponse)
{	struct __ns1__DuplicateCustomizationSpec soap_tmp___ns1__DuplicateCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DuplicateCustomizationSpec.ns1__DuplicateCustomizationSpec = ns1__DuplicateCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DuplicateCustomizationSpec(soap, &soap_tmp___ns1__DuplicateCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DuplicateCustomizationSpec(soap, &soap_tmp___ns1__DuplicateCustomizationSpec, "-ns1:DuplicateCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DuplicateCustomizationSpec(soap, &soap_tmp___ns1__DuplicateCustomizationSpec, "-ns1:DuplicateCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DuplicateCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__DuplicateCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DuplicateCustomizationSpecResponse->soap_get(soap, "ns1:DuplicateCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameCustomizationSpecRequestType *ns1__RenameCustomizationSpec, _ns1__RenameCustomizationSpecResponse *ns1__RenameCustomizationSpecResponse)
{	struct __ns1__RenameCustomizationSpec soap_tmp___ns1__RenameCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RenameCustomizationSpec.ns1__RenameCustomizationSpec = ns1__RenameCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameCustomizationSpec(soap, &soap_tmp___ns1__RenameCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameCustomizationSpec(soap, &soap_tmp___ns1__RenameCustomizationSpec, "-ns1:RenameCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameCustomizationSpec(soap, &soap_tmp___ns1__RenameCustomizationSpec, "-ns1:RenameCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RenameCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__RenameCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameCustomizationSpecResponse->soap_get(soap, "ns1:RenameCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CustomizationSpecItemToXml(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CustomizationSpecItemToXmlRequestType *ns1__CustomizationSpecItemToXml, _ns1__CustomizationSpecItemToXmlResponse *ns1__CustomizationSpecItemToXmlResponse)
{	struct __ns1__CustomizationSpecItemToXml soap_tmp___ns1__CustomizationSpecItemToXml;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CustomizationSpecItemToXml.ns1__CustomizationSpecItemToXml = ns1__CustomizationSpecItemToXml;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CustomizationSpecItemToXml(soap, &soap_tmp___ns1__CustomizationSpecItemToXml);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CustomizationSpecItemToXml(soap, &soap_tmp___ns1__CustomizationSpecItemToXml, "-ns1:CustomizationSpecItemToXml", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CustomizationSpecItemToXml(soap, &soap_tmp___ns1__CustomizationSpecItemToXml, "-ns1:CustomizationSpecItemToXml", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CustomizationSpecItemToXmlResponse)
		return soap_closesock(soap);
	ns1__CustomizationSpecItemToXmlResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CustomizationSpecItemToXmlResponse->soap_get(soap, "ns1:CustomizationSpecItemToXmlResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__XmlToCustomizationSpecItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__XmlToCustomizationSpecItemRequestType *ns1__XmlToCustomizationSpecItem, _ns1__XmlToCustomizationSpecItemResponse *ns1__XmlToCustomizationSpecItemResponse)
{	struct __ns1__XmlToCustomizationSpecItem soap_tmp___ns1__XmlToCustomizationSpecItem;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__XmlToCustomizationSpecItem.ns1__XmlToCustomizationSpecItem = ns1__XmlToCustomizationSpecItem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__XmlToCustomizationSpecItem(soap, &soap_tmp___ns1__XmlToCustomizationSpecItem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__XmlToCustomizationSpecItem(soap, &soap_tmp___ns1__XmlToCustomizationSpecItem, "-ns1:XmlToCustomizationSpecItem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__XmlToCustomizationSpecItem(soap, &soap_tmp___ns1__XmlToCustomizationSpecItem, "-ns1:XmlToCustomizationSpecItem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__XmlToCustomizationSpecItemResponse)
		return soap_closesock(soap);
	ns1__XmlToCustomizationSpecItemResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__XmlToCustomizationSpecItemResponse->soap_get(soap, "ns1:XmlToCustomizationSpecItemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCustomizationResources(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCustomizationResourcesRequestType *ns1__CheckCustomizationResources, _ns1__CheckCustomizationResourcesResponse *ns1__CheckCustomizationResourcesResponse)
{	struct __ns1__CheckCustomizationResources soap_tmp___ns1__CheckCustomizationResources;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckCustomizationResources.ns1__CheckCustomizationResources = ns1__CheckCustomizationResources;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckCustomizationResources(soap, &soap_tmp___ns1__CheckCustomizationResources);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckCustomizationResources(soap, &soap_tmp___ns1__CheckCustomizationResources, "-ns1:CheckCustomizationResources", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckCustomizationResources(soap, &soap_tmp___ns1__CheckCustomizationResources, "-ns1:CheckCustomizationResources", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckCustomizationResourcesResponse)
		return soap_closesock(soap);
	ns1__CheckCustomizationResourcesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckCustomizationResourcesResponse->soap_get(soap, "ns1:CheckCustomizationResourcesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConnectionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConnectionInfoRequestType *ns1__QueryConnectionInfo, _ns1__QueryConnectionInfoResponse *ns1__QueryConnectionInfoResponse)
{	struct __ns1__QueryConnectionInfo soap_tmp___ns1__QueryConnectionInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryConnectionInfo.ns1__QueryConnectionInfo = ns1__QueryConnectionInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryConnectionInfo(soap, &soap_tmp___ns1__QueryConnectionInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryConnectionInfo(soap, &soap_tmp___ns1__QueryConnectionInfo, "-ns1:QueryConnectionInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryConnectionInfo(soap, &soap_tmp___ns1__QueryConnectionInfo, "-ns1:QueryConnectionInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryConnectionInfoResponse)
		return soap_closesock(soap);
	ns1__QueryConnectionInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryConnectionInfoResponse->soap_get(soap, "ns1:QueryConnectionInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnMultiVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnMultiVMRequestType *ns1__PowerOnMultiVM_USCORETask, _ns1__PowerOnMultiVM_USCORETaskResponse *ns1__PowerOnMultiVM_USCORETaskResponse)
{	struct __ns1__PowerOnMultiVM_USCORETask soap_tmp___ns1__PowerOnMultiVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerOnMultiVM_USCORETask.ns1__PowerOnMultiVM_USCORETask = ns1__PowerOnMultiVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerOnMultiVM_USCORETask(soap, &soap_tmp___ns1__PowerOnMultiVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerOnMultiVM_USCORETask(soap, &soap_tmp___ns1__PowerOnMultiVM_USCORETask, "-ns1:PowerOnMultiVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerOnMultiVM_USCORETask(soap, &soap_tmp___ns1__PowerOnMultiVM_USCORETask, "-ns1:PowerOnMultiVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerOnMultiVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerOnMultiVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerOnMultiVM_USCORETaskResponse->soap_get(soap, "ns1:PowerOnMultiVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDatastoreRequestType *ns1__RefreshDatastore, _ns1__RefreshDatastoreResponse *ns1__RefreshDatastoreResponse)
{	struct __ns1__RefreshDatastore soap_tmp___ns1__RefreshDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshDatastore.ns1__RefreshDatastore = ns1__RefreshDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshDatastore(soap, &soap_tmp___ns1__RefreshDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshDatastore(soap, &soap_tmp___ns1__RefreshDatastore, "-ns1:RefreshDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshDatastore(soap, &soap_tmp___ns1__RefreshDatastore, "-ns1:RefreshDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshDatastoreResponse)
		return soap_closesock(soap);
	ns1__RefreshDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshDatastoreResponse->soap_get(soap, "ns1:RefreshDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDatastoreStorageInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDatastoreStorageInfoRequestType *ns1__RefreshDatastoreStorageInfo, _ns1__RefreshDatastoreStorageInfoResponse *ns1__RefreshDatastoreStorageInfoResponse)
{	struct __ns1__RefreshDatastoreStorageInfo soap_tmp___ns1__RefreshDatastoreStorageInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshDatastoreStorageInfo.ns1__RefreshDatastoreStorageInfo = ns1__RefreshDatastoreStorageInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshDatastoreStorageInfo(soap, &soap_tmp___ns1__RefreshDatastoreStorageInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshDatastoreStorageInfo(soap, &soap_tmp___ns1__RefreshDatastoreStorageInfo, "-ns1:RefreshDatastoreStorageInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshDatastoreStorageInfo(soap, &soap_tmp___ns1__RefreshDatastoreStorageInfo, "-ns1:RefreshDatastoreStorageInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshDatastoreStorageInfoResponse)
		return soap_closesock(soap);
	ns1__RefreshDatastoreStorageInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshDatastoreStorageInfoResponse->soap_get(soap, "ns1:RefreshDatastoreStorageInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualMachineFiles_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualMachineFilesRequestType *ns1__UpdateVirtualMachineFiles_USCORETask, _ns1__UpdateVirtualMachineFiles_USCORETaskResponse *ns1__UpdateVirtualMachineFiles_USCORETaskResponse)
{	struct __ns1__UpdateVirtualMachineFiles_USCORETask soap_tmp___ns1__UpdateVirtualMachineFiles_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateVirtualMachineFiles_USCORETask.ns1__UpdateVirtualMachineFiles_USCORETask = ns1__UpdateVirtualMachineFiles_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateVirtualMachineFiles_USCORETask(soap, &soap_tmp___ns1__UpdateVirtualMachineFiles_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateVirtualMachineFiles_USCORETask(soap, &soap_tmp___ns1__UpdateVirtualMachineFiles_USCORETask, "-ns1:UpdateVirtualMachineFiles_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateVirtualMachineFiles_USCORETask(soap, &soap_tmp___ns1__UpdateVirtualMachineFiles_USCORETask, "-ns1:UpdateVirtualMachineFiles_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateVirtualMachineFiles_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__UpdateVirtualMachineFiles_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateVirtualMachineFiles_USCORETaskResponse->soap_get(soap, "ns1:UpdateVirtualMachineFiles_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameDatastoreRequestType *ns1__RenameDatastore, _ns1__RenameDatastoreResponse *ns1__RenameDatastoreResponse)
{	struct __ns1__RenameDatastore soap_tmp___ns1__RenameDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RenameDatastore.ns1__RenameDatastore = ns1__RenameDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameDatastore(soap, &soap_tmp___ns1__RenameDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameDatastore(soap, &soap_tmp___ns1__RenameDatastore, "-ns1:RenameDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameDatastore(soap, &soap_tmp___ns1__RenameDatastore, "-ns1:RenameDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RenameDatastoreResponse)
		return soap_closesock(soap);
	ns1__RenameDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameDatastoreResponse->soap_get(soap, "ns1:RenameDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyDatastoreRequestType *ns1__DestroyDatastore, _ns1__DestroyDatastoreResponse *ns1__DestroyDatastoreResponse)
{	struct __ns1__DestroyDatastore soap_tmp___ns1__DestroyDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyDatastore.ns1__DestroyDatastore = ns1__DestroyDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyDatastore(soap, &soap_tmp___ns1__DestroyDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyDatastore(soap, &soap_tmp___ns1__DestroyDatastore, "-ns1:DestroyDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyDatastore(soap, &soap_tmp___ns1__DestroyDatastore, "-ns1:DestroyDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyDatastoreResponse)
		return soap_closesock(soap);
	ns1__DestroyDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyDatastoreResponse->soap_get(soap, "ns1:DestroyDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDescriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDescriptionsRequestType *ns1__QueryDescriptions, _ns1__QueryDescriptionsResponse *ns1__QueryDescriptionsResponse)
{	struct __ns1__QueryDescriptions soap_tmp___ns1__QueryDescriptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDescriptions.ns1__QueryDescriptions = ns1__QueryDescriptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDescriptions(soap, &soap_tmp___ns1__QueryDescriptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDescriptions(soap, &soap_tmp___ns1__QueryDescriptions, "-ns1:QueryDescriptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDescriptions(soap, &soap_tmp___ns1__QueryDescriptions, "-ns1:QueryDescriptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDescriptionsResponse)
		return soap_closesock(soap);
	ns1__QueryDescriptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDescriptionsResponse->soap_get(soap, "ns1:QueryDescriptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BrowseDiagnosticLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BrowseDiagnosticLogRequestType *ns1__BrowseDiagnosticLog, _ns1__BrowseDiagnosticLogResponse *ns1__BrowseDiagnosticLogResponse)
{	struct __ns1__BrowseDiagnosticLog soap_tmp___ns1__BrowseDiagnosticLog;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__BrowseDiagnosticLog.ns1__BrowseDiagnosticLog = ns1__BrowseDiagnosticLog;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__BrowseDiagnosticLog(soap, &soap_tmp___ns1__BrowseDiagnosticLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BrowseDiagnosticLog(soap, &soap_tmp___ns1__BrowseDiagnosticLog, "-ns1:BrowseDiagnosticLog", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BrowseDiagnosticLog(soap, &soap_tmp___ns1__BrowseDiagnosticLog, "-ns1:BrowseDiagnosticLog", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__BrowseDiagnosticLogResponse)
		return soap_closesock(soap);
	ns1__BrowseDiagnosticLogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BrowseDiagnosticLogResponse->soap_get(soap, "ns1:BrowseDiagnosticLogResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GenerateLogBundles_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GenerateLogBundlesRequestType *ns1__GenerateLogBundles_USCORETask, _ns1__GenerateLogBundles_USCORETaskResponse *ns1__GenerateLogBundles_USCORETaskResponse)
{	struct __ns1__GenerateLogBundles_USCORETask soap_tmp___ns1__GenerateLogBundles_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GenerateLogBundles_USCORETask.ns1__GenerateLogBundles_USCORETask = ns1__GenerateLogBundles_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GenerateLogBundles_USCORETask(soap, &soap_tmp___ns1__GenerateLogBundles_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GenerateLogBundles_USCORETask(soap, &soap_tmp___ns1__GenerateLogBundles_USCORETask, "-ns1:GenerateLogBundles_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GenerateLogBundles_USCORETask(soap, &soap_tmp___ns1__GenerateLogBundles_USCORETask, "-ns1:GenerateLogBundles_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GenerateLogBundles_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__GenerateLogBundles_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GenerateLogBundles_USCORETaskResponse->soap_get(soap, "ns1:GenerateLogBundles_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FetchDVPortKeys(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FetchDVPortKeysRequestType *ns1__FetchDVPortKeys, _ns1__FetchDVPortKeysResponse *ns1__FetchDVPortKeysResponse)
{	struct __ns1__FetchDVPortKeys soap_tmp___ns1__FetchDVPortKeys;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FetchDVPortKeys.ns1__FetchDVPortKeys = ns1__FetchDVPortKeys;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FetchDVPortKeys(soap, &soap_tmp___ns1__FetchDVPortKeys);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FetchDVPortKeys(soap, &soap_tmp___ns1__FetchDVPortKeys, "-ns1:FetchDVPortKeys", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FetchDVPortKeys(soap, &soap_tmp___ns1__FetchDVPortKeys, "-ns1:FetchDVPortKeys", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FetchDVPortKeysResponse)
		return soap_closesock(soap);
	ns1__FetchDVPortKeysResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FetchDVPortKeysResponse->soap_get(soap, "ns1:FetchDVPortKeysResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FetchDVPorts(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FetchDVPortsRequestType *ns1__FetchDVPorts, _ns1__FetchDVPortsResponse *ns1__FetchDVPortsResponse)
{	struct __ns1__FetchDVPorts soap_tmp___ns1__FetchDVPorts;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FetchDVPorts.ns1__FetchDVPorts = ns1__FetchDVPorts;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FetchDVPorts(soap, &soap_tmp___ns1__FetchDVPorts);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FetchDVPorts(soap, &soap_tmp___ns1__FetchDVPorts, "-ns1:FetchDVPorts", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FetchDVPorts(soap, &soap_tmp___ns1__FetchDVPorts, "-ns1:FetchDVPorts", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FetchDVPortsResponse)
		return soap_closesock(soap);
	ns1__FetchDVPortsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FetchDVPortsResponse->soap_get(soap, "ns1:FetchDVPortsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUsedVlanIdInDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUsedVlanIdInDvsRequestType *ns1__QueryUsedVlanIdInDvs, _ns1__QueryUsedVlanIdInDvsResponse *ns1__QueryUsedVlanIdInDvsResponse)
{	struct __ns1__QueryUsedVlanIdInDvs soap_tmp___ns1__QueryUsedVlanIdInDvs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryUsedVlanIdInDvs.ns1__QueryUsedVlanIdInDvs = ns1__QueryUsedVlanIdInDvs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryUsedVlanIdInDvs(soap, &soap_tmp___ns1__QueryUsedVlanIdInDvs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryUsedVlanIdInDvs(soap, &soap_tmp___ns1__QueryUsedVlanIdInDvs, "-ns1:QueryUsedVlanIdInDvs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryUsedVlanIdInDvs(soap, &soap_tmp___ns1__QueryUsedVlanIdInDvs, "-ns1:QueryUsedVlanIdInDvs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryUsedVlanIdInDvsResponse)
		return soap_closesock(soap);
	ns1__QueryUsedVlanIdInDvsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryUsedVlanIdInDvsResponse->soap_get(soap, "ns1:QueryUsedVlanIdInDvsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDvs_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDvsRequestType *ns1__ReconfigureDvs_USCORETask, _ns1__ReconfigureDvs_USCORETaskResponse *ns1__ReconfigureDvs_USCORETaskResponse)
{	struct __ns1__ReconfigureDvs_USCORETask soap_tmp___ns1__ReconfigureDvs_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureDvs_USCORETask.ns1__ReconfigureDvs_USCORETask = ns1__ReconfigureDvs_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureDvs_USCORETask(soap, &soap_tmp___ns1__ReconfigureDvs_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureDvs_USCORETask(soap, &soap_tmp___ns1__ReconfigureDvs_USCORETask, "-ns1:ReconfigureDvs_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureDvs_USCORETask(soap, &soap_tmp___ns1__ReconfigureDvs_USCORETask, "-ns1:ReconfigureDvs_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureDvs_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureDvs_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureDvs_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureDvs_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PerformDvsProductSpecOperation_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PerformDvsProductSpecOperationRequestType *ns1__PerformDvsProductSpecOperation_USCORETask, _ns1__PerformDvsProductSpecOperation_USCORETaskResponse *ns1__PerformDvsProductSpecOperation_USCORETaskResponse)
{	struct __ns1__PerformDvsProductSpecOperation_USCORETask soap_tmp___ns1__PerformDvsProductSpecOperation_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PerformDvsProductSpecOperation_USCORETask.ns1__PerformDvsProductSpecOperation_USCORETask = ns1__PerformDvsProductSpecOperation_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PerformDvsProductSpecOperation_USCORETask(soap, &soap_tmp___ns1__PerformDvsProductSpecOperation_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PerformDvsProductSpecOperation_USCORETask(soap, &soap_tmp___ns1__PerformDvsProductSpecOperation_USCORETask, "-ns1:PerformDvsProductSpecOperation_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PerformDvsProductSpecOperation_USCORETask(soap, &soap_tmp___ns1__PerformDvsProductSpecOperation_USCORETask, "-ns1:PerformDvsProductSpecOperation_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PerformDvsProductSpecOperation_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PerformDvsProductSpecOperation_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PerformDvsProductSpecOperation_USCORETaskResponse->soap_get(soap, "ns1:PerformDvsProductSpecOperation_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MergeDvs_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MergeDvsRequestType *ns1__MergeDvs_USCORETask, _ns1__MergeDvs_USCORETaskResponse *ns1__MergeDvs_USCORETaskResponse)
{	struct __ns1__MergeDvs_USCORETask soap_tmp___ns1__MergeDvs_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MergeDvs_USCORETask.ns1__MergeDvs_USCORETask = ns1__MergeDvs_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MergeDvs_USCORETask(soap, &soap_tmp___ns1__MergeDvs_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MergeDvs_USCORETask(soap, &soap_tmp___ns1__MergeDvs_USCORETask, "-ns1:MergeDvs_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MergeDvs_USCORETask(soap, &soap_tmp___ns1__MergeDvs_USCORETask, "-ns1:MergeDvs_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MergeDvs_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MergeDvs_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MergeDvs_USCORETaskResponse->soap_get(soap, "ns1:MergeDvs_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddDVPortgroup_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddDVPortgroupRequestType *ns1__AddDVPortgroup_USCORETask, _ns1__AddDVPortgroup_USCORETaskResponse *ns1__AddDVPortgroup_USCORETaskResponse)
{	struct __ns1__AddDVPortgroup_USCORETask soap_tmp___ns1__AddDVPortgroup_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddDVPortgroup_USCORETask.ns1__AddDVPortgroup_USCORETask = ns1__AddDVPortgroup_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddDVPortgroup_USCORETask(soap, &soap_tmp___ns1__AddDVPortgroup_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddDVPortgroup_USCORETask(soap, &soap_tmp___ns1__AddDVPortgroup_USCORETask, "-ns1:AddDVPortgroup_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddDVPortgroup_USCORETask(soap, &soap_tmp___ns1__AddDVPortgroup_USCORETask, "-ns1:AddDVPortgroup_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddDVPortgroup_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__AddDVPortgroup_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddDVPortgroup_USCORETaskResponse->soap_get(soap, "ns1:AddDVPortgroup_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveDVPort_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveDVPortRequestType *ns1__MoveDVPort_USCORETask, _ns1__MoveDVPort_USCORETaskResponse *ns1__MoveDVPort_USCORETaskResponse)
{	struct __ns1__MoveDVPort_USCORETask soap_tmp___ns1__MoveDVPort_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveDVPort_USCORETask.ns1__MoveDVPort_USCORETask = ns1__MoveDVPort_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveDVPort_USCORETask(soap, &soap_tmp___ns1__MoveDVPort_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveDVPort_USCORETask(soap, &soap_tmp___ns1__MoveDVPort_USCORETask, "-ns1:MoveDVPort_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveDVPort_USCORETask(soap, &soap_tmp___ns1__MoveDVPort_USCORETask, "-ns1:MoveDVPort_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveDVPort_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveDVPort_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveDVPort_USCORETaskResponse->soap_get(soap, "ns1:MoveDVPort_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDvsCapability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDvsCapabilityRequestType *ns1__UpdateDvsCapability, _ns1__UpdateDvsCapabilityResponse *ns1__UpdateDvsCapabilityResponse)
{	struct __ns1__UpdateDvsCapability soap_tmp___ns1__UpdateDvsCapability;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDvsCapability.ns1__UpdateDvsCapability = ns1__UpdateDvsCapability;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDvsCapability(soap, &soap_tmp___ns1__UpdateDvsCapability);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDvsCapability(soap, &soap_tmp___ns1__UpdateDvsCapability, "-ns1:UpdateDvsCapability", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDvsCapability(soap, &soap_tmp___ns1__UpdateDvsCapability, "-ns1:UpdateDvsCapability", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDvsCapabilityResponse)
		return soap_closesock(soap);
	ns1__UpdateDvsCapabilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDvsCapabilityResponse->soap_get(soap, "ns1:UpdateDvsCapabilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDVPort_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDVPortRequestType *ns1__ReconfigureDVPort_USCORETask, _ns1__ReconfigureDVPort_USCORETaskResponse *ns1__ReconfigureDVPort_USCORETaskResponse)
{	struct __ns1__ReconfigureDVPort_USCORETask soap_tmp___ns1__ReconfigureDVPort_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureDVPort_USCORETask.ns1__ReconfigureDVPort_USCORETask = ns1__ReconfigureDVPort_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureDVPort_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPort_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureDVPort_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPort_USCORETask, "-ns1:ReconfigureDVPort_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureDVPort_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPort_USCORETask, "-ns1:ReconfigureDVPort_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureDVPort_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureDVPort_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureDVPort_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureDVPort_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDVPortState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDVPortStateRequestType *ns1__RefreshDVPortState, _ns1__RefreshDVPortStateResponse *ns1__RefreshDVPortStateResponse)
{	struct __ns1__RefreshDVPortState soap_tmp___ns1__RefreshDVPortState;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshDVPortState.ns1__RefreshDVPortState = ns1__RefreshDVPortState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshDVPortState(soap, &soap_tmp___ns1__RefreshDVPortState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshDVPortState(soap, &soap_tmp___ns1__RefreshDVPortState, "-ns1:RefreshDVPortState", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshDVPortState(soap, &soap_tmp___ns1__RefreshDVPortState, "-ns1:RefreshDVPortState", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshDVPortStateResponse)
		return soap_closesock(soap);
	ns1__RefreshDVPortStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshDVPortStateResponse->soap_get(soap, "ns1:RefreshDVPortStateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RectifyDvsHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RectifyDvsHostRequestType *ns1__RectifyDvsHost_USCORETask, _ns1__RectifyDvsHost_USCORETaskResponse *ns1__RectifyDvsHost_USCORETaskResponse)
{	struct __ns1__RectifyDvsHost_USCORETask soap_tmp___ns1__RectifyDvsHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RectifyDvsHost_USCORETask.ns1__RectifyDvsHost_USCORETask = ns1__RectifyDvsHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RectifyDvsHost_USCORETask(soap, &soap_tmp___ns1__RectifyDvsHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RectifyDvsHost_USCORETask(soap, &soap_tmp___ns1__RectifyDvsHost_USCORETask, "-ns1:RectifyDvsHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RectifyDvsHost_USCORETask(soap, &soap_tmp___ns1__RectifyDvsHost_USCORETask, "-ns1:RectifyDvsHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RectifyDvsHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RectifyDvsHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RectifyDvsHost_USCORETaskResponse->soap_get(soap, "ns1:RectifyDvsHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateNetworkResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateNetworkResourcePoolRequestType *ns1__UpdateNetworkResourcePool, _ns1__UpdateNetworkResourcePoolResponse *ns1__UpdateNetworkResourcePoolResponse)
{	struct __ns1__UpdateNetworkResourcePool soap_tmp___ns1__UpdateNetworkResourcePool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateNetworkResourcePool.ns1__UpdateNetworkResourcePool = ns1__UpdateNetworkResourcePool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateNetworkResourcePool(soap, &soap_tmp___ns1__UpdateNetworkResourcePool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateNetworkResourcePool(soap, &soap_tmp___ns1__UpdateNetworkResourcePool, "-ns1:UpdateNetworkResourcePool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateNetworkResourcePool(soap, &soap_tmp___ns1__UpdateNetworkResourcePool, "-ns1:UpdateNetworkResourcePool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateNetworkResourcePoolResponse)
		return soap_closesock(soap);
	ns1__UpdateNetworkResourcePoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateNetworkResourcePoolResponse->soap_get(soap, "ns1:UpdateNetworkResourcePoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableNetworkResourceManagement(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableNetworkResourceManagementRequestType *ns1__EnableNetworkResourceManagement, _ns1__EnableNetworkResourceManagementResponse *ns1__EnableNetworkResourceManagementResponse)
{	struct __ns1__EnableNetworkResourceManagement soap_tmp___ns1__EnableNetworkResourceManagement;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableNetworkResourceManagement.ns1__EnableNetworkResourceManagement = ns1__EnableNetworkResourceManagement;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableNetworkResourceManagement(soap, &soap_tmp___ns1__EnableNetworkResourceManagement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableNetworkResourceManagement(soap, &soap_tmp___ns1__EnableNetworkResourceManagement, "-ns1:EnableNetworkResourceManagement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableNetworkResourceManagement(soap, &soap_tmp___ns1__EnableNetworkResourceManagement, "-ns1:EnableNetworkResourceManagement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableNetworkResourceManagementResponse)
		return soap_closesock(soap);
	ns1__EnableNetworkResourceManagementResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableNetworkResourceManagementResponse->soap_get(soap, "ns1:EnableNetworkResourceManagementResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigOptionDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigOptionDescriptorRequestType *ns1__QueryConfigOptionDescriptor, _ns1__QueryConfigOptionDescriptorResponse *ns1__QueryConfigOptionDescriptorResponse)
{	struct __ns1__QueryConfigOptionDescriptor soap_tmp___ns1__QueryConfigOptionDescriptor;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryConfigOptionDescriptor.ns1__QueryConfigOptionDescriptor = ns1__QueryConfigOptionDescriptor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryConfigOptionDescriptor(soap, &soap_tmp___ns1__QueryConfigOptionDescriptor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryConfigOptionDescriptor(soap, &soap_tmp___ns1__QueryConfigOptionDescriptor, "-ns1:QueryConfigOptionDescriptor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryConfigOptionDescriptor(soap, &soap_tmp___ns1__QueryConfigOptionDescriptor, "-ns1:QueryConfigOptionDescriptor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryConfigOptionDescriptorResponse)
		return soap_closesock(soap);
	ns1__QueryConfigOptionDescriptorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryConfigOptionDescriptorResponse->soap_get(soap, "ns1:QueryConfigOptionDescriptorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigOptionRequestType *ns1__QueryConfigOption, _ns1__QueryConfigOptionResponse *ns1__QueryConfigOptionResponse)
{	struct __ns1__QueryConfigOption soap_tmp___ns1__QueryConfigOption;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryConfigOption.ns1__QueryConfigOption = ns1__QueryConfigOption;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryConfigOption(soap, &soap_tmp___ns1__QueryConfigOption);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryConfigOption(soap, &soap_tmp___ns1__QueryConfigOption, "-ns1:QueryConfigOption", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryConfigOption(soap, &soap_tmp___ns1__QueryConfigOption, "-ns1:QueryConfigOption", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryConfigOptionResponse)
		return soap_closesock(soap);
	ns1__QueryConfigOptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryConfigOptionResponse->soap_get(soap, "ns1:QueryConfigOptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfigTarget(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfigTargetRequestType *ns1__QueryConfigTarget, _ns1__QueryConfigTargetResponse *ns1__QueryConfigTargetResponse)
{	struct __ns1__QueryConfigTarget soap_tmp___ns1__QueryConfigTarget;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryConfigTarget.ns1__QueryConfigTarget = ns1__QueryConfigTarget;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryConfigTarget(soap, &soap_tmp___ns1__QueryConfigTarget);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryConfigTarget(soap, &soap_tmp___ns1__QueryConfigTarget, "-ns1:QueryConfigTarget", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryConfigTarget(soap, &soap_tmp___ns1__QueryConfigTarget, "-ns1:QueryConfigTarget", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryConfigTargetResponse)
		return soap_closesock(soap);
	ns1__QueryConfigTargetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryConfigTargetResponse->soap_get(soap, "ns1:QueryConfigTargetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryTargetCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryTargetCapabilitiesRequestType *ns1__QueryTargetCapabilities, _ns1__QueryTargetCapabilitiesResponse *ns1__QueryTargetCapabilitiesResponse)
{	struct __ns1__QueryTargetCapabilities soap_tmp___ns1__QueryTargetCapabilities;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryTargetCapabilities.ns1__QueryTargetCapabilities = ns1__QueryTargetCapabilities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryTargetCapabilities(soap, &soap_tmp___ns1__QueryTargetCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryTargetCapabilities(soap, &soap_tmp___ns1__QueryTargetCapabilities, "-ns1:QueryTargetCapabilities", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryTargetCapabilities(soap, &soap_tmp___ns1__QueryTargetCapabilities, "-ns1:QueryTargetCapabilities", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryTargetCapabilitiesResponse)
		return soap_closesock(soap);
	ns1__QueryTargetCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryTargetCapabilitiesResponse->soap_get(soap, "ns1:QueryTargetCapabilitiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setCustomValue(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__setCustomValueRequestType *ns1__setCustomValue, _ns1__setCustomValueResponse *ns1__setCustomValueResponse)
{	struct __ns1__setCustomValue soap_tmp___ns1__setCustomValue;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setCustomValue.ns1__setCustomValue = ns1__setCustomValue;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__setCustomValue(soap, &soap_tmp___ns1__setCustomValue);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setCustomValue(soap, &soap_tmp___ns1__setCustomValue, "-ns1:setCustomValue", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setCustomValue(soap, &soap_tmp___ns1__setCustomValue, "-ns1:setCustomValue", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__setCustomValueResponse)
		return soap_closesock(soap);
	ns1__setCustomValueResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__setCustomValueResponse->soap_get(soap, "ns1:setCustomValueResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterExtensionRequestType *ns1__UnregisterExtension, _ns1__UnregisterExtensionResponse *ns1__UnregisterExtensionResponse)
{	struct __ns1__UnregisterExtension soap_tmp___ns1__UnregisterExtension;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnregisterExtension.ns1__UnregisterExtension = ns1__UnregisterExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnregisterExtension(soap, &soap_tmp___ns1__UnregisterExtension);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnregisterExtension(soap, &soap_tmp___ns1__UnregisterExtension, "-ns1:UnregisterExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnregisterExtension(soap, &soap_tmp___ns1__UnregisterExtension, "-ns1:UnregisterExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnregisterExtensionResponse)
		return soap_closesock(soap);
	ns1__UnregisterExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnregisterExtensionResponse->soap_get(soap, "ns1:UnregisterExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindExtensionRequestType *ns1__FindExtension, _ns1__FindExtensionResponse *ns1__FindExtensionResponse)
{	struct __ns1__FindExtension soap_tmp___ns1__FindExtension;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindExtension.ns1__FindExtension = ns1__FindExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindExtension(soap, &soap_tmp___ns1__FindExtension);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindExtension(soap, &soap_tmp___ns1__FindExtension, "-ns1:FindExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindExtension(soap, &soap_tmp___ns1__FindExtension, "-ns1:FindExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindExtensionResponse)
		return soap_closesock(soap);
	ns1__FindExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindExtensionResponse->soap_get(soap, "ns1:FindExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterExtensionRequestType *ns1__RegisterExtension, _ns1__RegisterExtensionResponse *ns1__RegisterExtensionResponse)
{	struct __ns1__RegisterExtension soap_tmp___ns1__RegisterExtension;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RegisterExtension.ns1__RegisterExtension = ns1__RegisterExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RegisterExtension(soap, &soap_tmp___ns1__RegisterExtension);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RegisterExtension(soap, &soap_tmp___ns1__RegisterExtension, "-ns1:RegisterExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RegisterExtension(soap, &soap_tmp___ns1__RegisterExtension, "-ns1:RegisterExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterExtensionResponse)
		return soap_closesock(soap);
	ns1__RegisterExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterExtensionResponse->soap_get(soap, "ns1:RegisterExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateExtension(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateExtensionRequestType *ns1__UpdateExtension, _ns1__UpdateExtensionResponse *ns1__UpdateExtensionResponse)
{	struct __ns1__UpdateExtension soap_tmp___ns1__UpdateExtension;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateExtension.ns1__UpdateExtension = ns1__UpdateExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateExtension(soap, &soap_tmp___ns1__UpdateExtension);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateExtension(soap, &soap_tmp___ns1__UpdateExtension, "-ns1:UpdateExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateExtension(soap, &soap_tmp___ns1__UpdateExtension, "-ns1:UpdateExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateExtensionResponse)
		return soap_closesock(soap);
	ns1__UpdateExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateExtensionResponse->soap_get(soap, "ns1:UpdateExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetPublicKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetPublicKeyRequestType *ns1__GetPublicKey, _ns1__GetPublicKeyResponse *ns1__GetPublicKeyResponse)
{	struct __ns1__GetPublicKey soap_tmp___ns1__GetPublicKey;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetPublicKey.ns1__GetPublicKey = ns1__GetPublicKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetPublicKey(soap, &soap_tmp___ns1__GetPublicKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetPublicKey(soap, &soap_tmp___ns1__GetPublicKey, "-ns1:GetPublicKey", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetPublicKey(soap, &soap_tmp___ns1__GetPublicKey, "-ns1:GetPublicKey", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetPublicKeyResponse)
		return soap_closesock(soap);
	ns1__GetPublicKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetPublicKeyResponse->soap_get(soap, "ns1:GetPublicKeyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetPublicKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetPublicKeyRequestType *ns1__SetPublicKey, _ns1__SetPublicKeyResponse *ns1__SetPublicKeyResponse)
{	struct __ns1__SetPublicKey soap_tmp___ns1__SetPublicKey;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetPublicKey.ns1__SetPublicKey = ns1__SetPublicKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetPublicKey(soap, &soap_tmp___ns1__SetPublicKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetPublicKey(soap, &soap_tmp___ns1__SetPublicKey, "-ns1:SetPublicKey", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetPublicKey(soap, &soap_tmp___ns1__SetPublicKey, "-ns1:SetPublicKey", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetPublicKeyResponse)
		return soap_closesock(soap);
	ns1__SetPublicKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetPublicKeyResponse->soap_get(soap, "ns1:SetPublicKeyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetExtensionCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetExtensionCertificateRequestType *ns1__SetExtensionCertificate, _ns1__SetExtensionCertificateResponse *ns1__SetExtensionCertificateResponse)
{	struct __ns1__SetExtensionCertificate soap_tmp___ns1__SetExtensionCertificate;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetExtensionCertificate.ns1__SetExtensionCertificate = ns1__SetExtensionCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetExtensionCertificate(soap, &soap_tmp___ns1__SetExtensionCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetExtensionCertificate(soap, &soap_tmp___ns1__SetExtensionCertificate, "-ns1:SetExtensionCertificate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetExtensionCertificate(soap, &soap_tmp___ns1__SetExtensionCertificate, "-ns1:SetExtensionCertificate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetExtensionCertificateResponse)
		return soap_closesock(soap);
	ns1__SetExtensionCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetExtensionCertificateResponse->soap_get(soap, "ns1:SetExtensionCertificateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveDatastoreFileRequestType *ns1__MoveDatastoreFile_USCORETask, _ns1__MoveDatastoreFile_USCORETaskResponse *ns1__MoveDatastoreFile_USCORETaskResponse)
{	struct __ns1__MoveDatastoreFile_USCORETask soap_tmp___ns1__MoveDatastoreFile_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveDatastoreFile_USCORETask.ns1__MoveDatastoreFile_USCORETask = ns1__MoveDatastoreFile_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveDatastoreFile_USCORETask(soap, &soap_tmp___ns1__MoveDatastoreFile_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveDatastoreFile_USCORETask(soap, &soap_tmp___ns1__MoveDatastoreFile_USCORETask, "-ns1:MoveDatastoreFile_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveDatastoreFile_USCORETask(soap, &soap_tmp___ns1__MoveDatastoreFile_USCORETask, "-ns1:MoveDatastoreFile_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveDatastoreFile_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveDatastoreFile_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveDatastoreFile_USCORETaskResponse->soap_get(soap, "ns1:MoveDatastoreFile_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CopyDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CopyDatastoreFileRequestType *ns1__CopyDatastoreFile_USCORETask, _ns1__CopyDatastoreFile_USCORETaskResponse *ns1__CopyDatastoreFile_USCORETaskResponse)
{	struct __ns1__CopyDatastoreFile_USCORETask soap_tmp___ns1__CopyDatastoreFile_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CopyDatastoreFile_USCORETask.ns1__CopyDatastoreFile_USCORETask = ns1__CopyDatastoreFile_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CopyDatastoreFile_USCORETask(soap, &soap_tmp___ns1__CopyDatastoreFile_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CopyDatastoreFile_USCORETask(soap, &soap_tmp___ns1__CopyDatastoreFile_USCORETask, "-ns1:CopyDatastoreFile_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CopyDatastoreFile_USCORETask(soap, &soap_tmp___ns1__CopyDatastoreFile_USCORETask, "-ns1:CopyDatastoreFile_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CopyDatastoreFile_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CopyDatastoreFile_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CopyDatastoreFile_USCORETaskResponse->soap_get(soap, "ns1:CopyDatastoreFile_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteDatastoreFile_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteDatastoreFileRequestType *ns1__DeleteDatastoreFile_USCORETask, _ns1__DeleteDatastoreFile_USCORETaskResponse *ns1__DeleteDatastoreFile_USCORETaskResponse)
{	struct __ns1__DeleteDatastoreFile_USCORETask soap_tmp___ns1__DeleteDatastoreFile_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteDatastoreFile_USCORETask.ns1__DeleteDatastoreFile_USCORETask = ns1__DeleteDatastoreFile_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteDatastoreFile_USCORETask(soap, &soap_tmp___ns1__DeleteDatastoreFile_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteDatastoreFile_USCORETask(soap, &soap_tmp___ns1__DeleteDatastoreFile_USCORETask, "-ns1:DeleteDatastoreFile_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteDatastoreFile_USCORETask(soap, &soap_tmp___ns1__DeleteDatastoreFile_USCORETask, "-ns1:DeleteDatastoreFile_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteDatastoreFile_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__DeleteDatastoreFile_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteDatastoreFile_USCORETaskResponse->soap_get(soap, "ns1:DeleteDatastoreFile_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MakeDirectory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MakeDirectoryRequestType *ns1__MakeDirectory, _ns1__MakeDirectoryResponse *ns1__MakeDirectoryResponse)
{	struct __ns1__MakeDirectory soap_tmp___ns1__MakeDirectory;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MakeDirectory.ns1__MakeDirectory = ns1__MakeDirectory;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MakeDirectory(soap, &soap_tmp___ns1__MakeDirectory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MakeDirectory(soap, &soap_tmp___ns1__MakeDirectory, "-ns1:MakeDirectory", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MakeDirectory(soap, &soap_tmp___ns1__MakeDirectory, "-ns1:MakeDirectory", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MakeDirectoryResponse)
		return soap_closesock(soap);
	ns1__MakeDirectoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MakeDirectoryResponse->soap_get(soap, "ns1:MakeDirectoryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeOwner(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ChangeOwnerRequestType *ns1__ChangeOwner, _ns1__ChangeOwnerResponse *ns1__ChangeOwnerResponse)
{	struct __ns1__ChangeOwner soap_tmp___ns1__ChangeOwner;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ChangeOwner.ns1__ChangeOwner = ns1__ChangeOwner;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ChangeOwner(soap, &soap_tmp___ns1__ChangeOwner);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ChangeOwner(soap, &soap_tmp___ns1__ChangeOwner, "-ns1:ChangeOwner", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ChangeOwner(soap, &soap_tmp___ns1__ChangeOwner, "-ns1:ChangeOwner", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ChangeOwnerResponse)
		return soap_closesock(soap);
	ns1__ChangeOwnerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ChangeOwnerResponse->soap_get(soap, "ns1:ChangeOwnerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateFolderRequestType *ns1__CreateFolder, _ns1__CreateFolderResponse *ns1__CreateFolderResponse)
{	struct __ns1__CreateFolder soap_tmp___ns1__CreateFolder;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateFolder.ns1__CreateFolder = ns1__CreateFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateFolder(soap, &soap_tmp___ns1__CreateFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateFolder(soap, &soap_tmp___ns1__CreateFolder, "-ns1:CreateFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateFolder(soap, &soap_tmp___ns1__CreateFolder, "-ns1:CreateFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateFolderResponse)
		return soap_closesock(soap);
	ns1__CreateFolderResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateFolderResponse->soap_get(soap, "ns1:CreateFolderResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveIntoFolder_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoFolderRequestType *ns1__MoveIntoFolder_USCORETask, _ns1__MoveIntoFolder_USCORETaskResponse *ns1__MoveIntoFolder_USCORETaskResponse)
{	struct __ns1__MoveIntoFolder_USCORETask soap_tmp___ns1__MoveIntoFolder_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveIntoFolder_USCORETask.ns1__MoveIntoFolder_USCORETask = ns1__MoveIntoFolder_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveIntoFolder_USCORETask(soap, &soap_tmp___ns1__MoveIntoFolder_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveIntoFolder_USCORETask(soap, &soap_tmp___ns1__MoveIntoFolder_USCORETask, "-ns1:MoveIntoFolder_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveIntoFolder_USCORETask(soap, &soap_tmp___ns1__MoveIntoFolder_USCORETask, "-ns1:MoveIntoFolder_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveIntoFolder_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveIntoFolder_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveIntoFolder_USCORETaskResponse->soap_get(soap, "ns1:MoveIntoFolder_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVMRequestType *ns1__CreateVM_USCORETask, _ns1__CreateVM_USCORETaskResponse *ns1__CreateVM_USCORETaskResponse)
{	struct __ns1__CreateVM_USCORETask soap_tmp___ns1__CreateVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateVM_USCORETask.ns1__CreateVM_USCORETask = ns1__CreateVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateVM_USCORETask(soap, &soap_tmp___ns1__CreateVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateVM_USCORETask(soap, &soap_tmp___ns1__CreateVM_USCORETask, "-ns1:CreateVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateVM_USCORETask(soap, &soap_tmp___ns1__CreateVM_USCORETask, "-ns1:CreateVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateVM_USCORETaskResponse->soap_get(soap, "ns1:CreateVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterVMRequestType *ns1__RegisterVM_USCORETask, _ns1__RegisterVM_USCORETaskResponse *ns1__RegisterVM_USCORETaskResponse)
{	struct __ns1__RegisterVM_USCORETask soap_tmp___ns1__RegisterVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RegisterVM_USCORETask.ns1__RegisterVM_USCORETask = ns1__RegisterVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RegisterVM_USCORETask(soap, &soap_tmp___ns1__RegisterVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RegisterVM_USCORETask(soap, &soap_tmp___ns1__RegisterVM_USCORETask, "-ns1:RegisterVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RegisterVM_USCORETask(soap, &soap_tmp___ns1__RegisterVM_USCORETask, "-ns1:RegisterVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RegisterVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterVM_USCORETaskResponse->soap_get(soap, "ns1:RegisterVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCluster(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateClusterRequestType *ns1__CreateCluster, _ns1__CreateClusterResponse *ns1__CreateClusterResponse)
{	struct __ns1__CreateCluster soap_tmp___ns1__CreateCluster;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateCluster.ns1__CreateCluster = ns1__CreateCluster;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateCluster(soap, &soap_tmp___ns1__CreateCluster);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateCluster(soap, &soap_tmp___ns1__CreateCluster, "-ns1:CreateCluster", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateCluster(soap, &soap_tmp___ns1__CreateCluster, "-ns1:CreateCluster", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateClusterResponse)
		return soap_closesock(soap);
	ns1__CreateClusterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateClusterResponse->soap_get(soap, "ns1:CreateClusterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateClusterEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateClusterExRequestType *ns1__CreateClusterEx, _ns1__CreateClusterExResponse *ns1__CreateClusterExResponse)
{	struct __ns1__CreateClusterEx soap_tmp___ns1__CreateClusterEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateClusterEx.ns1__CreateClusterEx = ns1__CreateClusterEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateClusterEx(soap, &soap_tmp___ns1__CreateClusterEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateClusterEx(soap, &soap_tmp___ns1__CreateClusterEx, "-ns1:CreateClusterEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateClusterEx(soap, &soap_tmp___ns1__CreateClusterEx, "-ns1:CreateClusterEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateClusterExResponse)
		return soap_closesock(soap);
	ns1__CreateClusterExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateClusterExResponse->soap_get(soap, "ns1:CreateClusterExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddStandaloneHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddStandaloneHostRequestType *ns1__AddStandaloneHost_USCORETask, _ns1__AddStandaloneHost_USCORETaskResponse *ns1__AddStandaloneHost_USCORETaskResponse)
{	struct __ns1__AddStandaloneHost_USCORETask soap_tmp___ns1__AddStandaloneHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddStandaloneHost_USCORETask.ns1__AddStandaloneHost_USCORETask = ns1__AddStandaloneHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddStandaloneHost_USCORETask(soap, &soap_tmp___ns1__AddStandaloneHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddStandaloneHost_USCORETask(soap, &soap_tmp___ns1__AddStandaloneHost_USCORETask, "-ns1:AddStandaloneHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddStandaloneHost_USCORETask(soap, &soap_tmp___ns1__AddStandaloneHost_USCORETask, "-ns1:AddStandaloneHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddStandaloneHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__AddStandaloneHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddStandaloneHost_USCORETaskResponse->soap_get(soap, "ns1:AddStandaloneHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDatacenter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDatacenterRequestType *ns1__CreateDatacenter, _ns1__CreateDatacenterResponse *ns1__CreateDatacenterResponse)
{	struct __ns1__CreateDatacenter soap_tmp___ns1__CreateDatacenter;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDatacenter.ns1__CreateDatacenter = ns1__CreateDatacenter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDatacenter(soap, &soap_tmp___ns1__CreateDatacenter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDatacenter(soap, &soap_tmp___ns1__CreateDatacenter, "-ns1:CreateDatacenter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDatacenter(soap, &soap_tmp___ns1__CreateDatacenter, "-ns1:CreateDatacenter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDatacenterResponse)
		return soap_closesock(soap);
	ns1__CreateDatacenterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDatacenterResponse->soap_get(soap, "ns1:CreateDatacenterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterAndDestroy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterAndDestroyRequestType *ns1__UnregisterAndDestroy_USCORETask, _ns1__UnregisterAndDestroy_USCORETaskResponse *ns1__UnregisterAndDestroy_USCORETaskResponse)
{	struct __ns1__UnregisterAndDestroy_USCORETask soap_tmp___ns1__UnregisterAndDestroy_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnregisterAndDestroy_USCORETask.ns1__UnregisterAndDestroy_USCORETask = ns1__UnregisterAndDestroy_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnregisterAndDestroy_USCORETask(soap, &soap_tmp___ns1__UnregisterAndDestroy_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnregisterAndDestroy_USCORETask(soap, &soap_tmp___ns1__UnregisterAndDestroy_USCORETask, "-ns1:UnregisterAndDestroy_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnregisterAndDestroy_USCORETask(soap, &soap_tmp___ns1__UnregisterAndDestroy_USCORETask, "-ns1:UnregisterAndDestroy_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnregisterAndDestroy_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__UnregisterAndDestroy_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnregisterAndDestroy_USCORETaskResponse->soap_get(soap, "ns1:UnregisterAndDestroy_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDVS_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDVSRequestType *ns1__CreateDVS_USCORETask, _ns1__CreateDVS_USCORETaskResponse *ns1__CreateDVS_USCORETaskResponse)
{	struct __ns1__CreateDVS_USCORETask soap_tmp___ns1__CreateDVS_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDVS_USCORETask.ns1__CreateDVS_USCORETask = ns1__CreateDVS_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDVS_USCORETask(soap, &soap_tmp___ns1__CreateDVS_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDVS_USCORETask(soap, &soap_tmp___ns1__CreateDVS_USCORETask, "-ns1:CreateDVS_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDVS_USCORETask(soap, &soap_tmp___ns1__CreateDVS_USCORETask, "-ns1:CreateDVS_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDVS_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateDVS_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDVS_USCORETaskResponse->soap_get(soap, "ns1:CreateDVS_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetCollectorPageSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetCollectorPageSizeRequestType *ns1__SetCollectorPageSize, _ns1__SetCollectorPageSizeResponse *ns1__SetCollectorPageSizeResponse)
{	struct __ns1__SetCollectorPageSize soap_tmp___ns1__SetCollectorPageSize;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetCollectorPageSize.ns1__SetCollectorPageSize = ns1__SetCollectorPageSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetCollectorPageSize(soap, &soap_tmp___ns1__SetCollectorPageSize);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetCollectorPageSize(soap, &soap_tmp___ns1__SetCollectorPageSize, "-ns1:SetCollectorPageSize", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetCollectorPageSize(soap, &soap_tmp___ns1__SetCollectorPageSize, "-ns1:SetCollectorPageSize", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetCollectorPageSizeResponse)
		return soap_closesock(soap);
	ns1__SetCollectorPageSizeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetCollectorPageSizeResponse->soap_get(soap, "ns1:SetCollectorPageSizeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RewindCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RewindCollectorRequestType *ns1__RewindCollector, _ns1__RewindCollectorResponse *ns1__RewindCollectorResponse)
{	struct __ns1__RewindCollector soap_tmp___ns1__RewindCollector;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RewindCollector.ns1__RewindCollector = ns1__RewindCollector;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RewindCollector(soap, &soap_tmp___ns1__RewindCollector);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RewindCollector(soap, &soap_tmp___ns1__RewindCollector, "-ns1:RewindCollector", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RewindCollector(soap, &soap_tmp___ns1__RewindCollector, "-ns1:RewindCollector", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RewindCollectorResponse)
		return soap_closesock(soap);
	ns1__RewindCollectorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RewindCollectorResponse->soap_get(soap, "ns1:RewindCollectorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetCollectorRequestType *ns1__ResetCollector, _ns1__ResetCollectorResponse *ns1__ResetCollectorResponse)
{	struct __ns1__ResetCollector soap_tmp___ns1__ResetCollector;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetCollector.ns1__ResetCollector = ns1__ResetCollector;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetCollector(soap, &soap_tmp___ns1__ResetCollector);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetCollector(soap, &soap_tmp___ns1__ResetCollector, "-ns1:ResetCollector", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetCollector(soap, &soap_tmp___ns1__ResetCollector, "-ns1:ResetCollector", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetCollectorResponse)
		return soap_closesock(soap);
	ns1__ResetCollectorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetCollectorResponse->soap_get(soap, "ns1:ResetCollectorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyCollector(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyCollectorRequestType *ns1__DestroyCollector, _ns1__DestroyCollectorResponse *ns1__DestroyCollectorResponse)
{	struct __ns1__DestroyCollector soap_tmp___ns1__DestroyCollector;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyCollector.ns1__DestroyCollector = ns1__DestroyCollector;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyCollector(soap, &soap_tmp___ns1__DestroyCollector);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyCollector(soap, &soap_tmp___ns1__DestroyCollector, "-ns1:DestroyCollector", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyCollector(soap, &soap_tmp___ns1__DestroyCollector, "-ns1:DestroyCollector", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyCollectorResponse)
		return soap_closesock(soap);
	ns1__DestroyCollectorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyCollectorResponse->soap_get(soap, "ns1:DestroyCollectorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostConnectionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostConnectionInfoRequestType *ns1__QueryHostConnectionInfo, _ns1__QueryHostConnectionInfoResponse *ns1__QueryHostConnectionInfoResponse)
{	struct __ns1__QueryHostConnectionInfo soap_tmp___ns1__QueryHostConnectionInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryHostConnectionInfo.ns1__QueryHostConnectionInfo = ns1__QueryHostConnectionInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryHostConnectionInfo(soap, &soap_tmp___ns1__QueryHostConnectionInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryHostConnectionInfo(soap, &soap_tmp___ns1__QueryHostConnectionInfo, "-ns1:QueryHostConnectionInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryHostConnectionInfo(soap, &soap_tmp___ns1__QueryHostConnectionInfo, "-ns1:QueryHostConnectionInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryHostConnectionInfoResponse)
		return soap_closesock(soap);
	ns1__QueryHostConnectionInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryHostConnectionInfoResponse->soap_get(soap, "ns1:QueryHostConnectionInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateSystemResources(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateSystemResourcesRequestType *ns1__UpdateSystemResources, _ns1__UpdateSystemResourcesResponse *ns1__UpdateSystemResourcesResponse)
{	struct __ns1__UpdateSystemResources soap_tmp___ns1__UpdateSystemResources;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateSystemResources.ns1__UpdateSystemResources = ns1__UpdateSystemResources;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateSystemResources(soap, &soap_tmp___ns1__UpdateSystemResources);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateSystemResources(soap, &soap_tmp___ns1__UpdateSystemResources, "-ns1:UpdateSystemResources", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateSystemResources(soap, &soap_tmp___ns1__UpdateSystemResources, "-ns1:UpdateSystemResources", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateSystemResourcesResponse)
		return soap_closesock(soap);
	ns1__UpdateSystemResourcesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateSystemResourcesResponse->soap_get(soap, "ns1:UpdateSystemResourcesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconnectHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconnectHostRequestType *ns1__ReconnectHost_USCORETask, _ns1__ReconnectHost_USCORETaskResponse *ns1__ReconnectHost_USCORETaskResponse)
{	struct __ns1__ReconnectHost_USCORETask soap_tmp___ns1__ReconnectHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconnectHost_USCORETask.ns1__ReconnectHost_USCORETask = ns1__ReconnectHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconnectHost_USCORETask(soap, &soap_tmp___ns1__ReconnectHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconnectHost_USCORETask(soap, &soap_tmp___ns1__ReconnectHost_USCORETask, "-ns1:ReconnectHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconnectHost_USCORETask(soap, &soap_tmp___ns1__ReconnectHost_USCORETask, "-ns1:ReconnectHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconnectHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconnectHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconnectHost_USCORETaskResponse->soap_get(soap, "ns1:ReconnectHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisconnectHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisconnectHostRequestType *ns1__DisconnectHost_USCORETask, _ns1__DisconnectHost_USCORETaskResponse *ns1__DisconnectHost_USCORETaskResponse)
{	struct __ns1__DisconnectHost_USCORETask soap_tmp___ns1__DisconnectHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisconnectHost_USCORETask.ns1__DisconnectHost_USCORETask = ns1__DisconnectHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisconnectHost_USCORETask(soap, &soap_tmp___ns1__DisconnectHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisconnectHost_USCORETask(soap, &soap_tmp___ns1__DisconnectHost_USCORETask, "-ns1:DisconnectHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisconnectHost_USCORETask(soap, &soap_tmp___ns1__DisconnectHost_USCORETask, "-ns1:DisconnectHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisconnectHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__DisconnectHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisconnectHost_USCORETaskResponse->soap_get(soap, "ns1:DisconnectHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnterMaintenanceMode_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnterMaintenanceModeRequestType *ns1__EnterMaintenanceMode_USCORETask, _ns1__EnterMaintenanceMode_USCORETaskResponse *ns1__EnterMaintenanceMode_USCORETaskResponse)
{	struct __ns1__EnterMaintenanceMode_USCORETask soap_tmp___ns1__EnterMaintenanceMode_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnterMaintenanceMode_USCORETask.ns1__EnterMaintenanceMode_USCORETask = ns1__EnterMaintenanceMode_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnterMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__EnterMaintenanceMode_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnterMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__EnterMaintenanceMode_USCORETask, "-ns1:EnterMaintenanceMode_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnterMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__EnterMaintenanceMode_USCORETask, "-ns1:EnterMaintenanceMode_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnterMaintenanceMode_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__EnterMaintenanceMode_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnterMaintenanceMode_USCORETaskResponse->soap_get(soap, "ns1:EnterMaintenanceMode_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExitMaintenanceMode_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExitMaintenanceModeRequestType *ns1__ExitMaintenanceMode_USCORETask, _ns1__ExitMaintenanceMode_USCORETaskResponse *ns1__ExitMaintenanceMode_USCORETaskResponse)
{	struct __ns1__ExitMaintenanceMode_USCORETask soap_tmp___ns1__ExitMaintenanceMode_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExitMaintenanceMode_USCORETask.ns1__ExitMaintenanceMode_USCORETask = ns1__ExitMaintenanceMode_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExitMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__ExitMaintenanceMode_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExitMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__ExitMaintenanceMode_USCORETask, "-ns1:ExitMaintenanceMode_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExitMaintenanceMode_USCORETask(soap, &soap_tmp___ns1__ExitMaintenanceMode_USCORETask, "-ns1:ExitMaintenanceMode_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExitMaintenanceMode_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ExitMaintenanceMode_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExitMaintenanceMode_USCORETaskResponse->soap_get(soap, "ns1:ExitMaintenanceMode_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RebootHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RebootHostRequestType *ns1__RebootHost_USCORETask, _ns1__RebootHost_USCORETaskResponse *ns1__RebootHost_USCORETaskResponse)
{	struct __ns1__RebootHost_USCORETask soap_tmp___ns1__RebootHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RebootHost_USCORETask.ns1__RebootHost_USCORETask = ns1__RebootHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RebootHost_USCORETask(soap, &soap_tmp___ns1__RebootHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RebootHost_USCORETask(soap, &soap_tmp___ns1__RebootHost_USCORETask, "-ns1:RebootHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RebootHost_USCORETask(soap, &soap_tmp___ns1__RebootHost_USCORETask, "-ns1:RebootHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RebootHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RebootHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RebootHost_USCORETaskResponse->soap_get(soap, "ns1:RebootHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShutdownHost_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShutdownHostRequestType *ns1__ShutdownHost_USCORETask, _ns1__ShutdownHost_USCORETaskResponse *ns1__ShutdownHost_USCORETaskResponse)
{	struct __ns1__ShutdownHost_USCORETask soap_tmp___ns1__ShutdownHost_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ShutdownHost_USCORETask.ns1__ShutdownHost_USCORETask = ns1__ShutdownHost_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ShutdownHost_USCORETask(soap, &soap_tmp___ns1__ShutdownHost_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ShutdownHost_USCORETask(soap, &soap_tmp___ns1__ShutdownHost_USCORETask, "-ns1:ShutdownHost_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ShutdownHost_USCORETask(soap, &soap_tmp___ns1__ShutdownHost_USCORETask, "-ns1:ShutdownHost_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ShutdownHost_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ShutdownHost_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ShutdownHost_USCORETaskResponse->soap_get(soap, "ns1:ShutdownHost_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerDownHostToStandBy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerDownHostToStandByRequestType *ns1__PowerDownHostToStandBy_USCORETask, _ns1__PowerDownHostToStandBy_USCORETaskResponse *ns1__PowerDownHostToStandBy_USCORETaskResponse)
{	struct __ns1__PowerDownHostToStandBy_USCORETask soap_tmp___ns1__PowerDownHostToStandBy_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerDownHostToStandBy_USCORETask.ns1__PowerDownHostToStandBy_USCORETask = ns1__PowerDownHostToStandBy_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerDownHostToStandBy_USCORETask(soap, &soap_tmp___ns1__PowerDownHostToStandBy_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerDownHostToStandBy_USCORETask(soap, &soap_tmp___ns1__PowerDownHostToStandBy_USCORETask, "-ns1:PowerDownHostToStandBy_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerDownHostToStandBy_USCORETask(soap, &soap_tmp___ns1__PowerDownHostToStandBy_USCORETask, "-ns1:PowerDownHostToStandBy_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerDownHostToStandBy_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerDownHostToStandBy_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerDownHostToStandBy_USCORETaskResponse->soap_get(soap, "ns1:PowerDownHostToStandBy_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerUpHostFromStandBy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerUpHostFromStandByRequestType *ns1__PowerUpHostFromStandBy_USCORETask, _ns1__PowerUpHostFromStandBy_USCORETaskResponse *ns1__PowerUpHostFromStandBy_USCORETaskResponse)
{	struct __ns1__PowerUpHostFromStandBy_USCORETask soap_tmp___ns1__PowerUpHostFromStandBy_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerUpHostFromStandBy_USCORETask.ns1__PowerUpHostFromStandBy_USCORETask = ns1__PowerUpHostFromStandBy_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerUpHostFromStandBy_USCORETask(soap, &soap_tmp___ns1__PowerUpHostFromStandBy_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerUpHostFromStandBy_USCORETask(soap, &soap_tmp___ns1__PowerUpHostFromStandBy_USCORETask, "-ns1:PowerUpHostFromStandBy_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerUpHostFromStandBy_USCORETask(soap, &soap_tmp___ns1__PowerUpHostFromStandBy_USCORETask, "-ns1:PowerUpHostFromStandBy_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerUpHostFromStandBy_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerUpHostFromStandBy_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerUpHostFromStandBy_USCORETaskResponse->soap_get(soap, "ns1:PowerUpHostFromStandBy_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryMemoryOverhead(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryMemoryOverheadRequestType *ns1__QueryMemoryOverhead, _ns1__QueryMemoryOverheadResponse *ns1__QueryMemoryOverheadResponse)
{	struct __ns1__QueryMemoryOverhead soap_tmp___ns1__QueryMemoryOverhead;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryMemoryOverhead.ns1__QueryMemoryOverhead = ns1__QueryMemoryOverhead;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryMemoryOverhead(soap, &soap_tmp___ns1__QueryMemoryOverhead);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryMemoryOverhead(soap, &soap_tmp___ns1__QueryMemoryOverhead, "-ns1:QueryMemoryOverhead", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryMemoryOverhead(soap, &soap_tmp___ns1__QueryMemoryOverhead, "-ns1:QueryMemoryOverhead", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryMemoryOverheadResponse)
		return soap_closesock(soap);
	ns1__QueryMemoryOverheadResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryMemoryOverheadResponse->soap_get(soap, "ns1:QueryMemoryOverheadResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryMemoryOverheadEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryMemoryOverheadExRequestType *ns1__QueryMemoryOverheadEx, _ns1__QueryMemoryOverheadExResponse *ns1__QueryMemoryOverheadExResponse)
{	struct __ns1__QueryMemoryOverheadEx soap_tmp___ns1__QueryMemoryOverheadEx;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryMemoryOverheadEx.ns1__QueryMemoryOverheadEx = ns1__QueryMemoryOverheadEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryMemoryOverheadEx(soap, &soap_tmp___ns1__QueryMemoryOverheadEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryMemoryOverheadEx(soap, &soap_tmp___ns1__QueryMemoryOverheadEx, "-ns1:QueryMemoryOverheadEx", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryMemoryOverheadEx(soap, &soap_tmp___ns1__QueryMemoryOverheadEx, "-ns1:QueryMemoryOverheadEx", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryMemoryOverheadExResponse)
		return soap_closesock(soap);
	ns1__QueryMemoryOverheadExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryMemoryOverheadExResponse->soap_get(soap, "ns1:QueryMemoryOverheadExResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureHostForDAS_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureHostForDASRequestType *ns1__ReconfigureHostForDAS_USCORETask, _ns1__ReconfigureHostForDAS_USCORETaskResponse *ns1__ReconfigureHostForDAS_USCORETaskResponse)
{	struct __ns1__ReconfigureHostForDAS_USCORETask soap_tmp___ns1__ReconfigureHostForDAS_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureHostForDAS_USCORETask.ns1__ReconfigureHostForDAS_USCORETask = ns1__ReconfigureHostForDAS_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureHostForDAS_USCORETask(soap, &soap_tmp___ns1__ReconfigureHostForDAS_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureHostForDAS_USCORETask(soap, &soap_tmp___ns1__ReconfigureHostForDAS_USCORETask, "-ns1:ReconfigureHostForDAS_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureHostForDAS_USCORETask(soap, &soap_tmp___ns1__ReconfigureHostForDAS_USCORETask, "-ns1:ReconfigureHostForDAS_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureHostForDAS_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureHostForDAS_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureHostForDAS_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureHostForDAS_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateFlags(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateFlagsRequestType *ns1__UpdateFlags, _ns1__UpdateFlagsResponse *ns1__UpdateFlagsResponse)
{	struct __ns1__UpdateFlags soap_tmp___ns1__UpdateFlags;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateFlags.ns1__UpdateFlags = ns1__UpdateFlags;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateFlags(soap, &soap_tmp___ns1__UpdateFlags);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateFlags(soap, &soap_tmp___ns1__UpdateFlags, "-ns1:UpdateFlags", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateFlags(soap, &soap_tmp___ns1__UpdateFlags, "-ns1:UpdateFlags", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateFlagsResponse)
		return soap_closesock(soap);
	ns1__UpdateFlagsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateFlagsResponse->soap_get(soap, "ns1:UpdateFlagsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnterLockdownMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnterLockdownModeRequestType *ns1__EnterLockdownMode, _ns1__EnterLockdownModeResponse *ns1__EnterLockdownModeResponse)
{	struct __ns1__EnterLockdownMode soap_tmp___ns1__EnterLockdownMode;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnterLockdownMode.ns1__EnterLockdownMode = ns1__EnterLockdownMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnterLockdownMode(soap, &soap_tmp___ns1__EnterLockdownMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnterLockdownMode(soap, &soap_tmp___ns1__EnterLockdownMode, "-ns1:EnterLockdownMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnterLockdownMode(soap, &soap_tmp___ns1__EnterLockdownMode, "-ns1:EnterLockdownMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnterLockdownModeResponse)
		return soap_closesock(soap);
	ns1__EnterLockdownModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnterLockdownModeResponse->soap_get(soap, "ns1:EnterLockdownModeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExitLockdownMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExitLockdownModeRequestType *ns1__ExitLockdownMode, _ns1__ExitLockdownModeResponse *ns1__ExitLockdownModeResponse)
{	struct __ns1__ExitLockdownMode soap_tmp___ns1__ExitLockdownMode;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExitLockdownMode.ns1__ExitLockdownMode = ns1__ExitLockdownMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExitLockdownMode(soap, &soap_tmp___ns1__ExitLockdownMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExitLockdownMode(soap, &soap_tmp___ns1__ExitLockdownMode, "-ns1:ExitLockdownMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExitLockdownMode(soap, &soap_tmp___ns1__ExitLockdownMode, "-ns1:ExitLockdownMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExitLockdownModeResponse)
		return soap_closesock(soap);
	ns1__ExitLockdownModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExitLockdownModeResponse->soap_get(soap, "ns1:ExitLockdownModeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireCimServicesTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireCimServicesTicketRequestType *ns1__AcquireCimServicesTicket, _ns1__AcquireCimServicesTicketResponse *ns1__AcquireCimServicesTicketResponse)
{	struct __ns1__AcquireCimServicesTicket soap_tmp___ns1__AcquireCimServicesTicket;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcquireCimServicesTicket.ns1__AcquireCimServicesTicket = ns1__AcquireCimServicesTicket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcquireCimServicesTicket(soap, &soap_tmp___ns1__AcquireCimServicesTicket);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcquireCimServicesTicket(soap, &soap_tmp___ns1__AcquireCimServicesTicket, "-ns1:AcquireCimServicesTicket", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcquireCimServicesTicket(soap, &soap_tmp___ns1__AcquireCimServicesTicket, "-ns1:AcquireCimServicesTicket", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcquireCimServicesTicketResponse)
		return soap_closesock(soap);
	ns1__AcquireCimServicesTicketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcquireCimServicesTicketResponse->soap_get(soap, "ns1:AcquireCimServicesTicketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpmi(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpmiRequestType *ns1__UpdateIpmi, _ns1__UpdateIpmiResponse *ns1__UpdateIpmiResponse)
{	struct __ns1__UpdateIpmi soap_tmp___ns1__UpdateIpmi;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateIpmi.ns1__UpdateIpmi = ns1__UpdateIpmi;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateIpmi(soap, &soap_tmp___ns1__UpdateIpmi);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateIpmi(soap, &soap_tmp___ns1__UpdateIpmi, "-ns1:UpdateIpmi", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateIpmi(soap, &soap_tmp___ns1__UpdateIpmi, "-ns1:UpdateIpmi", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateIpmiResponse)
		return soap_closesock(soap);
	ns1__UpdateIpmiResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateIpmiResponse->soap_get(soap, "ns1:UpdateIpmiResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveHardwareUptime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveHardwareUptimeRequestType *ns1__RetrieveHardwareUptime, _ns1__RetrieveHardwareUptimeResponse *ns1__RetrieveHardwareUptimeResponse)
{	struct __ns1__RetrieveHardwareUptime soap_tmp___ns1__RetrieveHardwareUptime;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveHardwareUptime.ns1__RetrieveHardwareUptime = ns1__RetrieveHardwareUptime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveHardwareUptime(soap, &soap_tmp___ns1__RetrieveHardwareUptime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveHardwareUptime(soap, &soap_tmp___ns1__RetrieveHardwareUptime, "-ns1:RetrieveHardwareUptime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveHardwareUptime(soap, &soap_tmp___ns1__RetrieveHardwareUptime, "-ns1:RetrieveHardwareUptime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveHardwareUptimeResponse)
		return soap_closesock(soap);
	ns1__RetrieveHardwareUptimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveHardwareUptimeResponse->soap_get(soap, "ns1:RetrieveHardwareUptimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseGetManifest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseGetManifestRequestType *ns1__HttpNfcLeaseGetManifest, _ns1__HttpNfcLeaseGetManifestResponse *ns1__HttpNfcLeaseGetManifestResponse)
{	struct __ns1__HttpNfcLeaseGetManifest soap_tmp___ns1__HttpNfcLeaseGetManifest;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HttpNfcLeaseGetManifest.ns1__HttpNfcLeaseGetManifest = ns1__HttpNfcLeaseGetManifest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HttpNfcLeaseGetManifest(soap, &soap_tmp___ns1__HttpNfcLeaseGetManifest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HttpNfcLeaseGetManifest(soap, &soap_tmp___ns1__HttpNfcLeaseGetManifest, "-ns1:HttpNfcLeaseGetManifest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HttpNfcLeaseGetManifest(soap, &soap_tmp___ns1__HttpNfcLeaseGetManifest, "-ns1:HttpNfcLeaseGetManifest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HttpNfcLeaseGetManifestResponse)
		return soap_closesock(soap);
	ns1__HttpNfcLeaseGetManifestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HttpNfcLeaseGetManifestResponse->soap_get(soap, "ns1:HttpNfcLeaseGetManifestResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseComplete(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseCompleteRequestType *ns1__HttpNfcLeaseComplete, _ns1__HttpNfcLeaseCompleteResponse *ns1__HttpNfcLeaseCompleteResponse)
{	struct __ns1__HttpNfcLeaseComplete soap_tmp___ns1__HttpNfcLeaseComplete;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HttpNfcLeaseComplete.ns1__HttpNfcLeaseComplete = ns1__HttpNfcLeaseComplete;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HttpNfcLeaseComplete(soap, &soap_tmp___ns1__HttpNfcLeaseComplete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HttpNfcLeaseComplete(soap, &soap_tmp___ns1__HttpNfcLeaseComplete, "-ns1:HttpNfcLeaseComplete", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HttpNfcLeaseComplete(soap, &soap_tmp___ns1__HttpNfcLeaseComplete, "-ns1:HttpNfcLeaseComplete", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HttpNfcLeaseCompleteResponse)
		return soap_closesock(soap);
	ns1__HttpNfcLeaseCompleteResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HttpNfcLeaseCompleteResponse->soap_get(soap, "ns1:HttpNfcLeaseCompleteResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseAbort(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseAbortRequestType *ns1__HttpNfcLeaseAbort, _ns1__HttpNfcLeaseAbortResponse *ns1__HttpNfcLeaseAbortResponse)
{	struct __ns1__HttpNfcLeaseAbort soap_tmp___ns1__HttpNfcLeaseAbort;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HttpNfcLeaseAbort.ns1__HttpNfcLeaseAbort = ns1__HttpNfcLeaseAbort;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HttpNfcLeaseAbort(soap, &soap_tmp___ns1__HttpNfcLeaseAbort);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HttpNfcLeaseAbort(soap, &soap_tmp___ns1__HttpNfcLeaseAbort, "-ns1:HttpNfcLeaseAbort", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HttpNfcLeaseAbort(soap, &soap_tmp___ns1__HttpNfcLeaseAbort, "-ns1:HttpNfcLeaseAbort", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HttpNfcLeaseAbortResponse)
		return soap_closesock(soap);
	ns1__HttpNfcLeaseAbortResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HttpNfcLeaseAbortResponse->soap_get(soap, "ns1:HttpNfcLeaseAbortResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HttpNfcLeaseProgress(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HttpNfcLeaseProgressRequestType *ns1__HttpNfcLeaseProgress, _ns1__HttpNfcLeaseProgressResponse *ns1__HttpNfcLeaseProgressResponse)
{	struct __ns1__HttpNfcLeaseProgress soap_tmp___ns1__HttpNfcLeaseProgress;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HttpNfcLeaseProgress.ns1__HttpNfcLeaseProgress = ns1__HttpNfcLeaseProgress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HttpNfcLeaseProgress(soap, &soap_tmp___ns1__HttpNfcLeaseProgress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HttpNfcLeaseProgress(soap, &soap_tmp___ns1__HttpNfcLeaseProgress, "-ns1:HttpNfcLeaseProgress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HttpNfcLeaseProgress(soap, &soap_tmp___ns1__HttpNfcLeaseProgress, "-ns1:HttpNfcLeaseProgress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HttpNfcLeaseProgressResponse)
		return soap_closesock(soap);
	ns1__HttpNfcLeaseProgressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HttpNfcLeaseProgressResponse->soap_get(soap, "ns1:HttpNfcLeaseProgressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryIpPools(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryIpPoolsRequestType *ns1__QueryIpPools, _ns1__QueryIpPoolsResponse *ns1__QueryIpPoolsResponse)
{	struct __ns1__QueryIpPools soap_tmp___ns1__QueryIpPools;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryIpPools.ns1__QueryIpPools = ns1__QueryIpPools;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryIpPools(soap, &soap_tmp___ns1__QueryIpPools);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryIpPools(soap, &soap_tmp___ns1__QueryIpPools, "-ns1:QueryIpPools", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryIpPools(soap, &soap_tmp___ns1__QueryIpPools, "-ns1:QueryIpPools", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryIpPoolsResponse)
		return soap_closesock(soap);
	ns1__QueryIpPoolsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryIpPoolsResponse->soap_get(soap, "ns1:QueryIpPoolsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateIpPoolRequestType *ns1__CreateIpPool, _ns1__CreateIpPoolResponse *ns1__CreateIpPoolResponse)
{	struct __ns1__CreateIpPool soap_tmp___ns1__CreateIpPool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateIpPool.ns1__CreateIpPool = ns1__CreateIpPool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateIpPool(soap, &soap_tmp___ns1__CreateIpPool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateIpPool(soap, &soap_tmp___ns1__CreateIpPool, "-ns1:CreateIpPool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateIpPool(soap, &soap_tmp___ns1__CreateIpPool, "-ns1:CreateIpPool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateIpPoolResponse)
		return soap_closesock(soap);
	ns1__CreateIpPoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateIpPoolResponse->soap_get(soap, "ns1:CreateIpPoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpPoolRequestType *ns1__UpdateIpPool, _ns1__UpdateIpPoolResponse *ns1__UpdateIpPoolResponse)
{	struct __ns1__UpdateIpPool soap_tmp___ns1__UpdateIpPool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateIpPool.ns1__UpdateIpPool = ns1__UpdateIpPool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateIpPool(soap, &soap_tmp___ns1__UpdateIpPool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateIpPool(soap, &soap_tmp___ns1__UpdateIpPool, "-ns1:UpdateIpPool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateIpPool(soap, &soap_tmp___ns1__UpdateIpPool, "-ns1:UpdateIpPool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateIpPoolResponse)
		return soap_closesock(soap);
	ns1__UpdateIpPoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateIpPoolResponse->soap_get(soap, "ns1:UpdateIpPoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyIpPool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyIpPoolRequestType *ns1__DestroyIpPool, _ns1__DestroyIpPoolResponse *ns1__DestroyIpPoolResponse)
{	struct __ns1__DestroyIpPool soap_tmp___ns1__DestroyIpPool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyIpPool.ns1__DestroyIpPool = ns1__DestroyIpPool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyIpPool(soap, &soap_tmp___ns1__DestroyIpPool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyIpPool(soap, &soap_tmp___ns1__DestroyIpPool, "-ns1:DestroyIpPool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyIpPool(soap, &soap_tmp___ns1__DestroyIpPool, "-ns1:DestroyIpPool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyIpPoolResponse)
		return soap_closesock(soap);
	ns1__DestroyIpPoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyIpPoolResponse->soap_get(soap, "ns1:DestroyIpPoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAssignedLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateAssignedLicenseRequestType *ns1__UpdateAssignedLicense, _ns1__UpdateAssignedLicenseResponse *ns1__UpdateAssignedLicenseResponse)
{	struct __ns1__UpdateAssignedLicense soap_tmp___ns1__UpdateAssignedLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateAssignedLicense.ns1__UpdateAssignedLicense = ns1__UpdateAssignedLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateAssignedLicense(soap, &soap_tmp___ns1__UpdateAssignedLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateAssignedLicense(soap, &soap_tmp___ns1__UpdateAssignedLicense, "-ns1:UpdateAssignedLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateAssignedLicense(soap, &soap_tmp___ns1__UpdateAssignedLicense, "-ns1:UpdateAssignedLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateAssignedLicenseResponse)
		return soap_closesock(soap);
	ns1__UpdateAssignedLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateAssignedLicenseResponse->soap_get(soap, "ns1:UpdateAssignedLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAssignedLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAssignedLicenseRequestType *ns1__RemoveAssignedLicense, _ns1__RemoveAssignedLicenseResponse *ns1__RemoveAssignedLicenseResponse)
{	struct __ns1__RemoveAssignedLicense soap_tmp___ns1__RemoveAssignedLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveAssignedLicense.ns1__RemoveAssignedLicense = ns1__RemoveAssignedLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveAssignedLicense(soap, &soap_tmp___ns1__RemoveAssignedLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveAssignedLicense(soap, &soap_tmp___ns1__RemoveAssignedLicense, "-ns1:RemoveAssignedLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveAssignedLicense(soap, &soap_tmp___ns1__RemoveAssignedLicense, "-ns1:RemoveAssignedLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveAssignedLicenseResponse)
		return soap_closesock(soap);
	ns1__RemoveAssignedLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveAssignedLicenseResponse->soap_get(soap, "ns1:RemoveAssignedLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAssignedLicenses(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAssignedLicensesRequestType *ns1__QueryAssignedLicenses, _ns1__QueryAssignedLicensesResponse *ns1__QueryAssignedLicensesResponse)
{	struct __ns1__QueryAssignedLicenses soap_tmp___ns1__QueryAssignedLicenses;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAssignedLicenses.ns1__QueryAssignedLicenses = ns1__QueryAssignedLicenses;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAssignedLicenses(soap, &soap_tmp___ns1__QueryAssignedLicenses);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAssignedLicenses(soap, &soap_tmp___ns1__QueryAssignedLicenses, "-ns1:QueryAssignedLicenses", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAssignedLicenses(soap, &soap_tmp___ns1__QueryAssignedLicenses, "-ns1:QueryAssignedLicenses", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAssignedLicensesResponse)
		return soap_closesock(soap);
	ns1__QueryAssignedLicensesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAssignedLicensesResponse->soap_get(soap, "ns1:QueryAssignedLicensesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QuerySupportedFeatures(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QuerySupportedFeaturesRequestType *ns1__QuerySupportedFeatures, _ns1__QuerySupportedFeaturesResponse *ns1__QuerySupportedFeaturesResponse)
{	struct __ns1__QuerySupportedFeatures soap_tmp___ns1__QuerySupportedFeatures;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QuerySupportedFeatures.ns1__QuerySupportedFeatures = ns1__QuerySupportedFeatures;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QuerySupportedFeatures(soap, &soap_tmp___ns1__QuerySupportedFeatures);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QuerySupportedFeatures(soap, &soap_tmp___ns1__QuerySupportedFeatures, "-ns1:QuerySupportedFeatures", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QuerySupportedFeatures(soap, &soap_tmp___ns1__QuerySupportedFeatures, "-ns1:QuerySupportedFeatures", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QuerySupportedFeaturesResponse)
		return soap_closesock(soap);
	ns1__QuerySupportedFeaturesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QuerySupportedFeaturesResponse->soap_get(soap, "ns1:QuerySupportedFeaturesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLicenseSourceAvailability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryLicenseSourceAvailabilityRequestType *ns1__QueryLicenseSourceAvailability, _ns1__QueryLicenseSourceAvailabilityResponse *ns1__QueryLicenseSourceAvailabilityResponse)
{	struct __ns1__QueryLicenseSourceAvailability soap_tmp___ns1__QueryLicenseSourceAvailability;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryLicenseSourceAvailability.ns1__QueryLicenseSourceAvailability = ns1__QueryLicenseSourceAvailability;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryLicenseSourceAvailability(soap, &soap_tmp___ns1__QueryLicenseSourceAvailability);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryLicenseSourceAvailability(soap, &soap_tmp___ns1__QueryLicenseSourceAvailability, "-ns1:QueryLicenseSourceAvailability", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryLicenseSourceAvailability(soap, &soap_tmp___ns1__QueryLicenseSourceAvailability, "-ns1:QueryLicenseSourceAvailability", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryLicenseSourceAvailabilityResponse)
		return soap_closesock(soap);
	ns1__QueryLicenseSourceAvailabilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryLicenseSourceAvailabilityResponse->soap_get(soap, "ns1:QueryLicenseSourceAvailabilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryLicenseUsage(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryLicenseUsageRequestType *ns1__QueryLicenseUsage, _ns1__QueryLicenseUsageResponse *ns1__QueryLicenseUsageResponse)
{	struct __ns1__QueryLicenseUsage soap_tmp___ns1__QueryLicenseUsage;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryLicenseUsage.ns1__QueryLicenseUsage = ns1__QueryLicenseUsage;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryLicenseUsage(soap, &soap_tmp___ns1__QueryLicenseUsage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryLicenseUsage(soap, &soap_tmp___ns1__QueryLicenseUsage, "-ns1:QueryLicenseUsage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryLicenseUsage(soap, &soap_tmp___ns1__QueryLicenseUsage, "-ns1:QueryLicenseUsage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryLicenseUsageResponse)
		return soap_closesock(soap);
	ns1__QueryLicenseUsageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryLicenseUsageResponse->soap_get(soap, "ns1:QueryLicenseUsageResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetLicenseEdition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetLicenseEditionRequestType *ns1__SetLicenseEdition, _ns1__SetLicenseEditionResponse *ns1__SetLicenseEditionResponse)
{	struct __ns1__SetLicenseEdition soap_tmp___ns1__SetLicenseEdition;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetLicenseEdition.ns1__SetLicenseEdition = ns1__SetLicenseEdition;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetLicenseEdition(soap, &soap_tmp___ns1__SetLicenseEdition);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetLicenseEdition(soap, &soap_tmp___ns1__SetLicenseEdition, "-ns1:SetLicenseEdition", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetLicenseEdition(soap, &soap_tmp___ns1__SetLicenseEdition, "-ns1:SetLicenseEdition", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetLicenseEditionResponse)
		return soap_closesock(soap);
	ns1__SetLicenseEditionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetLicenseEditionResponse->soap_get(soap, "ns1:SetLicenseEditionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckLicenseFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckLicenseFeatureRequestType *ns1__CheckLicenseFeature, _ns1__CheckLicenseFeatureResponse *ns1__CheckLicenseFeatureResponse)
{	struct __ns1__CheckLicenseFeature soap_tmp___ns1__CheckLicenseFeature;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckLicenseFeature.ns1__CheckLicenseFeature = ns1__CheckLicenseFeature;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckLicenseFeature(soap, &soap_tmp___ns1__CheckLicenseFeature);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckLicenseFeature(soap, &soap_tmp___ns1__CheckLicenseFeature, "-ns1:CheckLicenseFeature", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckLicenseFeature(soap, &soap_tmp___ns1__CheckLicenseFeature, "-ns1:CheckLicenseFeature", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckLicenseFeatureResponse)
		return soap_closesock(soap);
	ns1__CheckLicenseFeatureResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckLicenseFeatureResponse->soap_get(soap, "ns1:CheckLicenseFeatureResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableFeatureRequestType *ns1__EnableFeature, _ns1__EnableFeatureResponse *ns1__EnableFeatureResponse)
{	struct __ns1__EnableFeature soap_tmp___ns1__EnableFeature;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableFeature.ns1__EnableFeature = ns1__EnableFeature;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableFeature(soap, &soap_tmp___ns1__EnableFeature);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableFeature(soap, &soap_tmp___ns1__EnableFeature, "-ns1:EnableFeature", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableFeature(soap, &soap_tmp___ns1__EnableFeature, "-ns1:EnableFeature", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableFeatureResponse)
		return soap_closesock(soap);
	ns1__EnableFeatureResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableFeatureResponse->soap_get(soap, "ns1:EnableFeatureResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableFeature(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableFeatureRequestType *ns1__DisableFeature, _ns1__DisableFeatureResponse *ns1__DisableFeatureResponse)
{	struct __ns1__DisableFeature soap_tmp___ns1__DisableFeature;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisableFeature.ns1__DisableFeature = ns1__DisableFeature;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisableFeature(soap, &soap_tmp___ns1__DisableFeature);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisableFeature(soap, &soap_tmp___ns1__DisableFeature, "-ns1:DisableFeature", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisableFeature(soap, &soap_tmp___ns1__DisableFeature, "-ns1:DisableFeature", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisableFeatureResponse)
		return soap_closesock(soap);
	ns1__DisableFeatureResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisableFeatureResponse->soap_get(soap, "ns1:DisableFeatureResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureLicenseSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureLicenseSourceRequestType *ns1__ConfigureLicenseSource, _ns1__ConfigureLicenseSourceResponse *ns1__ConfigureLicenseSourceResponse)
{	struct __ns1__ConfigureLicenseSource soap_tmp___ns1__ConfigureLicenseSource;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ConfigureLicenseSource.ns1__ConfigureLicenseSource = ns1__ConfigureLicenseSource;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ConfigureLicenseSource(soap, &soap_tmp___ns1__ConfigureLicenseSource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ConfigureLicenseSource(soap, &soap_tmp___ns1__ConfigureLicenseSource, "-ns1:ConfigureLicenseSource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ConfigureLicenseSource(soap, &soap_tmp___ns1__ConfigureLicenseSource, "-ns1:ConfigureLicenseSource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ConfigureLicenseSourceResponse)
		return soap_closesock(soap);
	ns1__ConfigureLicenseSourceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConfigureLicenseSourceResponse->soap_get(soap, "ns1:ConfigureLicenseSourceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLicenseRequestType *ns1__UpdateLicense, _ns1__UpdateLicenseResponse *ns1__UpdateLicenseResponse)
{	struct __ns1__UpdateLicense soap_tmp___ns1__UpdateLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateLicense.ns1__UpdateLicense = ns1__UpdateLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateLicense(soap, &soap_tmp___ns1__UpdateLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateLicense(soap, &soap_tmp___ns1__UpdateLicense, "-ns1:UpdateLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateLicense(soap, &soap_tmp___ns1__UpdateLicense, "-ns1:UpdateLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateLicenseResponse)
		return soap_closesock(soap);
	ns1__UpdateLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateLicenseResponse->soap_get(soap, "ns1:UpdateLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddLicenseRequestType *ns1__AddLicense, _ns1__AddLicenseResponse *ns1__AddLicenseResponse)
{	struct __ns1__AddLicense soap_tmp___ns1__AddLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddLicense.ns1__AddLicense = ns1__AddLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddLicense(soap, &soap_tmp___ns1__AddLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddLicense(soap, &soap_tmp___ns1__AddLicense, "-ns1:AddLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddLicense(soap, &soap_tmp___ns1__AddLicense, "-ns1:AddLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddLicenseResponse)
		return soap_closesock(soap);
	ns1__AddLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddLicenseResponse->soap_get(soap, "ns1:AddLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveLicenseRequestType *ns1__RemoveLicense, _ns1__RemoveLicenseResponse *ns1__RemoveLicenseResponse)
{	struct __ns1__RemoveLicense soap_tmp___ns1__RemoveLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveLicense.ns1__RemoveLicense = ns1__RemoveLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveLicense(soap, &soap_tmp___ns1__RemoveLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveLicense(soap, &soap_tmp___ns1__RemoveLicense, "-ns1:RemoveLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveLicense(soap, &soap_tmp___ns1__RemoveLicense, "-ns1:RemoveLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveLicenseResponse)
		return soap_closesock(soap);
	ns1__RemoveLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveLicenseResponse->soap_get(soap, "ns1:RemoveLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DecodeLicense(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DecodeLicenseRequestType *ns1__DecodeLicense, _ns1__DecodeLicenseResponse *ns1__DecodeLicenseResponse)
{	struct __ns1__DecodeLicense soap_tmp___ns1__DecodeLicense;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DecodeLicense.ns1__DecodeLicense = ns1__DecodeLicense;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DecodeLicense(soap, &soap_tmp___ns1__DecodeLicense);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DecodeLicense(soap, &soap_tmp___ns1__DecodeLicense, "-ns1:DecodeLicense", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DecodeLicense(soap, &soap_tmp___ns1__DecodeLicense, "-ns1:DecodeLicense", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DecodeLicenseResponse)
		return soap_closesock(soap);
	ns1__DecodeLicenseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DecodeLicenseResponse->soap_get(soap, "ns1:DecodeLicenseResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLicenseLabel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLicenseLabelRequestType *ns1__UpdateLicenseLabel, _ns1__UpdateLicenseLabelResponse *ns1__UpdateLicenseLabelResponse)
{	struct __ns1__UpdateLicenseLabel soap_tmp___ns1__UpdateLicenseLabel;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateLicenseLabel.ns1__UpdateLicenseLabel = ns1__UpdateLicenseLabel;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateLicenseLabel(soap, &soap_tmp___ns1__UpdateLicenseLabel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateLicenseLabel(soap, &soap_tmp___ns1__UpdateLicenseLabel, "-ns1:UpdateLicenseLabel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateLicenseLabel(soap, &soap_tmp___ns1__UpdateLicenseLabel, "-ns1:UpdateLicenseLabel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateLicenseLabelResponse)
		return soap_closesock(soap);
	ns1__UpdateLicenseLabelResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateLicenseLabelResponse->soap_get(soap, "ns1:UpdateLicenseLabelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveLicenseLabel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveLicenseLabelRequestType *ns1__RemoveLicenseLabel, _ns1__RemoveLicenseLabelResponse *ns1__RemoveLicenseLabelResponse)
{	struct __ns1__RemoveLicenseLabel soap_tmp___ns1__RemoveLicenseLabel;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveLicenseLabel.ns1__RemoveLicenseLabel = ns1__RemoveLicenseLabel;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveLicenseLabel(soap, &soap_tmp___ns1__RemoveLicenseLabel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveLicenseLabel(soap, &soap_tmp___ns1__RemoveLicenseLabel, "-ns1:RemoveLicenseLabel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveLicenseLabel(soap, &soap_tmp___ns1__RemoveLicenseLabel, "-ns1:RemoveLicenseLabel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveLicenseLabelResponse)
		return soap_closesock(soap);
	ns1__RemoveLicenseLabelResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveLicenseLabelResponse->soap_get(soap, "ns1:RemoveLicenseLabelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Reload(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReloadRequestType *ns1__Reload, _ns1__ReloadResponse *ns1__ReloadResponse)
{	struct __ns1__Reload soap_tmp___ns1__Reload;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Reload.ns1__Reload = ns1__Reload;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Reload(soap, &soap_tmp___ns1__Reload);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Reload(soap, &soap_tmp___ns1__Reload, "-ns1:Reload", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Reload(soap, &soap_tmp___ns1__Reload, "-ns1:Reload", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReloadResponse)
		return soap_closesock(soap);
	ns1__ReloadResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReloadResponse->soap_get(soap, "ns1:ReloadResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Rename_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameRequestType *ns1__Rename_USCORETask, _ns1__Rename_USCORETaskResponse *ns1__Rename_USCORETaskResponse)
{	struct __ns1__Rename_USCORETask soap_tmp___ns1__Rename_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Rename_USCORETask.ns1__Rename_USCORETask = ns1__Rename_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Rename_USCORETask(soap, &soap_tmp___ns1__Rename_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Rename_USCORETask(soap, &soap_tmp___ns1__Rename_USCORETask, "-ns1:Rename_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Rename_USCORETask(soap, &soap_tmp___ns1__Rename_USCORETask, "-ns1:Rename_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Rename_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__Rename_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Rename_USCORETaskResponse->soap_get(soap, "ns1:Rename_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Destroy_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyRequestType *ns1__Destroy_USCORETask, _ns1__Destroy_USCORETaskResponse *ns1__Destroy_USCORETaskResponse)
{	struct __ns1__Destroy_USCORETask soap_tmp___ns1__Destroy_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Destroy_USCORETask.ns1__Destroy_USCORETask = ns1__Destroy_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Destroy_USCORETask(soap, &soap_tmp___ns1__Destroy_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Destroy_USCORETask(soap, &soap_tmp___ns1__Destroy_USCORETask, "-ns1:Destroy_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Destroy_USCORETask(soap, &soap_tmp___ns1__Destroy_USCORETask, "-ns1:Destroy_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Destroy_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__Destroy_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Destroy_USCORETaskResponse->soap_get(soap, "ns1:Destroy_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyNetwork(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyNetworkRequestType *ns1__DestroyNetwork, _ns1__DestroyNetworkResponse *ns1__DestroyNetworkResponse)
{	struct __ns1__DestroyNetwork soap_tmp___ns1__DestroyNetwork;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyNetwork.ns1__DestroyNetwork = ns1__DestroyNetwork;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyNetwork(soap, &soap_tmp___ns1__DestroyNetwork);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyNetwork(soap, &soap_tmp___ns1__DestroyNetwork, "-ns1:DestroyNetwork", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyNetwork(soap, &soap_tmp___ns1__DestroyNetwork, "-ns1:DestroyNetwork", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyNetworkResponse)
		return soap_closesock(soap);
	ns1__DestroyNetworkResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyNetworkResponse->soap_get(soap, "ns1:DestroyNetworkResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValidateHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ValidateHostRequestType *ns1__ValidateHost, _ns1__ValidateHostResponse *ns1__ValidateHostResponse)
{	struct __ns1__ValidateHost soap_tmp___ns1__ValidateHost;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ValidateHost.ns1__ValidateHost = ns1__ValidateHost;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ValidateHost(soap, &soap_tmp___ns1__ValidateHost);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ValidateHost(soap, &soap_tmp___ns1__ValidateHost, "-ns1:ValidateHost", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ValidateHost(soap, &soap_tmp___ns1__ValidateHost, "-ns1:ValidateHost", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ValidateHostResponse)
		return soap_closesock(soap);
	ns1__ValidateHostResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ValidateHostResponse->soap_get(soap, "ns1:ValidateHostResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ParseDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ParseDescriptorRequestType *ns1__ParseDescriptor, _ns1__ParseDescriptorResponse *ns1__ParseDescriptorResponse)
{	struct __ns1__ParseDescriptor soap_tmp___ns1__ParseDescriptor;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ParseDescriptor.ns1__ParseDescriptor = ns1__ParseDescriptor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ParseDescriptor(soap, &soap_tmp___ns1__ParseDescriptor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ParseDescriptor(soap, &soap_tmp___ns1__ParseDescriptor, "-ns1:ParseDescriptor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ParseDescriptor(soap, &soap_tmp___ns1__ParseDescriptor, "-ns1:ParseDescriptor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ParseDescriptorResponse)
		return soap_closesock(soap);
	ns1__ParseDescriptorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ParseDescriptorResponse->soap_get(soap, "ns1:ParseDescriptorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateImportSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateImportSpecRequestType *ns1__CreateImportSpec, _ns1__CreateImportSpecResponse *ns1__CreateImportSpecResponse)
{	struct __ns1__CreateImportSpec soap_tmp___ns1__CreateImportSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateImportSpec.ns1__CreateImportSpec = ns1__CreateImportSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateImportSpec(soap, &soap_tmp___ns1__CreateImportSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateImportSpec(soap, &soap_tmp___ns1__CreateImportSpec, "-ns1:CreateImportSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateImportSpec(soap, &soap_tmp___ns1__CreateImportSpec, "-ns1:CreateImportSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateImportSpecResponse)
		return soap_closesock(soap);
	ns1__CreateImportSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateImportSpecResponse->soap_get(soap, "ns1:CreateImportSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDescriptor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDescriptorRequestType *ns1__CreateDescriptor, _ns1__CreateDescriptorResponse *ns1__CreateDescriptorResponse)
{	struct __ns1__CreateDescriptor soap_tmp___ns1__CreateDescriptor;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDescriptor.ns1__CreateDescriptor = ns1__CreateDescriptor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDescriptor(soap, &soap_tmp___ns1__CreateDescriptor);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDescriptor(soap, &soap_tmp___ns1__CreateDescriptor, "-ns1:CreateDescriptor", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDescriptor(soap, &soap_tmp___ns1__CreateDescriptor, "-ns1:CreateDescriptor", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDescriptorResponse)
		return soap_closesock(soap);
	ns1__CreateDescriptorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDescriptorResponse->soap_get(soap, "ns1:CreateDescriptorResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfProviderSummary(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfProviderSummaryRequestType *ns1__QueryPerfProviderSummary, _ns1__QueryPerfProviderSummaryResponse *ns1__QueryPerfProviderSummaryResponse)
{	struct __ns1__QueryPerfProviderSummary soap_tmp___ns1__QueryPerfProviderSummary;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPerfProviderSummary.ns1__QueryPerfProviderSummary = ns1__QueryPerfProviderSummary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPerfProviderSummary(soap, &soap_tmp___ns1__QueryPerfProviderSummary);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPerfProviderSummary(soap, &soap_tmp___ns1__QueryPerfProviderSummary, "-ns1:QueryPerfProviderSummary", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPerfProviderSummary(soap, &soap_tmp___ns1__QueryPerfProviderSummary, "-ns1:QueryPerfProviderSummary", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPerfProviderSummaryResponse)
		return soap_closesock(soap);
	ns1__QueryPerfProviderSummaryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPerfProviderSummaryResponse->soap_get(soap, "ns1:QueryPerfProviderSummaryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailablePerfMetric(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailablePerfMetricRequestType *ns1__QueryAvailablePerfMetric, _ns1__QueryAvailablePerfMetricResponse *ns1__QueryAvailablePerfMetricResponse)
{	struct __ns1__QueryAvailablePerfMetric soap_tmp___ns1__QueryAvailablePerfMetric;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAvailablePerfMetric.ns1__QueryAvailablePerfMetric = ns1__QueryAvailablePerfMetric;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAvailablePerfMetric(soap, &soap_tmp___ns1__QueryAvailablePerfMetric);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAvailablePerfMetric(soap, &soap_tmp___ns1__QueryAvailablePerfMetric, "-ns1:QueryAvailablePerfMetric", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAvailablePerfMetric(soap, &soap_tmp___ns1__QueryAvailablePerfMetric, "-ns1:QueryAvailablePerfMetric", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAvailablePerfMetricResponse)
		return soap_closesock(soap);
	ns1__QueryAvailablePerfMetricResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAvailablePerfMetricResponse->soap_get(soap, "ns1:QueryAvailablePerfMetricResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfCounter(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCounterRequestType *ns1__QueryPerfCounter, _ns1__QueryPerfCounterResponse *ns1__QueryPerfCounterResponse)
{	struct __ns1__QueryPerfCounter soap_tmp___ns1__QueryPerfCounter;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPerfCounter.ns1__QueryPerfCounter = ns1__QueryPerfCounter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPerfCounter(soap, &soap_tmp___ns1__QueryPerfCounter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPerfCounter(soap, &soap_tmp___ns1__QueryPerfCounter, "-ns1:QueryPerfCounter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPerfCounter(soap, &soap_tmp___ns1__QueryPerfCounter, "-ns1:QueryPerfCounter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPerfCounterResponse)
		return soap_closesock(soap);
	ns1__QueryPerfCounterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPerfCounterResponse->soap_get(soap, "ns1:QueryPerfCounterResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfCounterByLevel(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCounterByLevelRequestType *ns1__QueryPerfCounterByLevel, _ns1__QueryPerfCounterByLevelResponse *ns1__QueryPerfCounterByLevelResponse)
{	struct __ns1__QueryPerfCounterByLevel soap_tmp___ns1__QueryPerfCounterByLevel;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPerfCounterByLevel.ns1__QueryPerfCounterByLevel = ns1__QueryPerfCounterByLevel;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPerfCounterByLevel(soap, &soap_tmp___ns1__QueryPerfCounterByLevel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPerfCounterByLevel(soap, &soap_tmp___ns1__QueryPerfCounterByLevel, "-ns1:QueryPerfCounterByLevel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPerfCounterByLevel(soap, &soap_tmp___ns1__QueryPerfCounterByLevel, "-ns1:QueryPerfCounterByLevel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPerfCounterByLevelResponse)
		return soap_closesock(soap);
	ns1__QueryPerfCounterByLevelResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPerfCounterByLevelResponse->soap_get(soap, "ns1:QueryPerfCounterByLevelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerf(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfRequestType *ns1__QueryPerf, _ns1__QueryPerfResponse *ns1__QueryPerfResponse)
{	struct __ns1__QueryPerf soap_tmp___ns1__QueryPerf;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPerf.ns1__QueryPerf = ns1__QueryPerf;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPerf(soap, &soap_tmp___ns1__QueryPerf);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPerf(soap, &soap_tmp___ns1__QueryPerf, "-ns1:QueryPerf", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPerf(soap, &soap_tmp___ns1__QueryPerf, "-ns1:QueryPerf", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPerfResponse)
		return soap_closesock(soap);
	ns1__QueryPerfResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPerfResponse->soap_get(soap, "ns1:QueryPerfResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPerfComposite(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPerfCompositeRequestType *ns1__QueryPerfComposite, _ns1__QueryPerfCompositeResponse *ns1__QueryPerfCompositeResponse)
{	struct __ns1__QueryPerfComposite soap_tmp___ns1__QueryPerfComposite;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPerfComposite.ns1__QueryPerfComposite = ns1__QueryPerfComposite;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPerfComposite(soap, &soap_tmp___ns1__QueryPerfComposite);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPerfComposite(soap, &soap_tmp___ns1__QueryPerfComposite, "-ns1:QueryPerfComposite", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPerfComposite(soap, &soap_tmp___ns1__QueryPerfComposite, "-ns1:QueryPerfComposite", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPerfCompositeResponse)
		return soap_closesock(soap);
	ns1__QueryPerfCompositeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPerfCompositeResponse->soap_get(soap, "ns1:QueryPerfCompositeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreatePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreatePerfIntervalRequestType *ns1__CreatePerfInterval, _ns1__CreatePerfIntervalResponse *ns1__CreatePerfIntervalResponse)
{	struct __ns1__CreatePerfInterval soap_tmp___ns1__CreatePerfInterval;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreatePerfInterval.ns1__CreatePerfInterval = ns1__CreatePerfInterval;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreatePerfInterval(soap, &soap_tmp___ns1__CreatePerfInterval);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreatePerfInterval(soap, &soap_tmp___ns1__CreatePerfInterval, "-ns1:CreatePerfInterval", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreatePerfInterval(soap, &soap_tmp___ns1__CreatePerfInterval, "-ns1:CreatePerfInterval", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreatePerfIntervalResponse)
		return soap_closesock(soap);
	ns1__CreatePerfIntervalResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreatePerfIntervalResponse->soap_get(soap, "ns1:CreatePerfIntervalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemovePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemovePerfIntervalRequestType *ns1__RemovePerfInterval, _ns1__RemovePerfIntervalResponse *ns1__RemovePerfIntervalResponse)
{	struct __ns1__RemovePerfInterval soap_tmp___ns1__RemovePerfInterval;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemovePerfInterval.ns1__RemovePerfInterval = ns1__RemovePerfInterval;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemovePerfInterval(soap, &soap_tmp___ns1__RemovePerfInterval);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemovePerfInterval(soap, &soap_tmp___ns1__RemovePerfInterval, "-ns1:RemovePerfInterval", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemovePerfInterval(soap, &soap_tmp___ns1__RemovePerfInterval, "-ns1:RemovePerfInterval", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemovePerfIntervalResponse)
		return soap_closesock(soap);
	ns1__RemovePerfIntervalResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemovePerfIntervalResponse->soap_get(soap, "ns1:RemovePerfIntervalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePerfInterval(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePerfIntervalRequestType *ns1__UpdatePerfInterval, _ns1__UpdatePerfIntervalResponse *ns1__UpdatePerfIntervalResponse)
{	struct __ns1__UpdatePerfInterval soap_tmp___ns1__UpdatePerfInterval;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdatePerfInterval.ns1__UpdatePerfInterval = ns1__UpdatePerfInterval;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdatePerfInterval(soap, &soap_tmp___ns1__UpdatePerfInterval);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdatePerfInterval(soap, &soap_tmp___ns1__UpdatePerfInterval, "-ns1:UpdatePerfInterval", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdatePerfInterval(soap, &soap_tmp___ns1__UpdatePerfInterval, "-ns1:UpdatePerfInterval", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdatePerfIntervalResponse)
		return soap_closesock(soap);
	ns1__UpdatePerfIntervalResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdatePerfIntervalResponse->soap_get(soap, "ns1:UpdatePerfIntervalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EstimateDatabaseSize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EstimateDatabaseSizeRequestType *ns1__EstimateDatabaseSize, _ns1__EstimateDatabaseSizeResponse *ns1__EstimateDatabaseSizeResponse)
{	struct __ns1__EstimateDatabaseSize soap_tmp___ns1__EstimateDatabaseSize;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EstimateDatabaseSize.ns1__EstimateDatabaseSize = ns1__EstimateDatabaseSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EstimateDatabaseSize(soap, &soap_tmp___ns1__EstimateDatabaseSize);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EstimateDatabaseSize(soap, &soap_tmp___ns1__EstimateDatabaseSize, "-ns1:EstimateDatabaseSize", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EstimateDatabaseSize(soap, &soap_tmp___ns1__EstimateDatabaseSize, "-ns1:EstimateDatabaseSize", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EstimateDatabaseSizeResponse)
		return soap_closesock(soap);
	ns1__EstimateDatabaseSizeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EstimateDatabaseSizeResponse->soap_get(soap, "ns1:EstimateDatabaseSizeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateConfigRequestType *ns1__UpdateConfig, _ns1__UpdateConfigResponse *ns1__UpdateConfigResponse)
{	struct __ns1__UpdateConfig soap_tmp___ns1__UpdateConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateConfig.ns1__UpdateConfig = ns1__UpdateConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateConfig(soap, &soap_tmp___ns1__UpdateConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateConfig(soap, &soap_tmp___ns1__UpdateConfig, "-ns1:UpdateConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateConfig(soap, &soap_tmp___ns1__UpdateConfig, "-ns1:UpdateConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateConfigResponse->soap_get(soap, "ns1:UpdateConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveIntoResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveIntoResourcePoolRequestType *ns1__MoveIntoResourcePool, _ns1__MoveIntoResourcePoolResponse *ns1__MoveIntoResourcePoolResponse)
{	struct __ns1__MoveIntoResourcePool soap_tmp___ns1__MoveIntoResourcePool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveIntoResourcePool.ns1__MoveIntoResourcePool = ns1__MoveIntoResourcePool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveIntoResourcePool(soap, &soap_tmp___ns1__MoveIntoResourcePool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveIntoResourcePool(soap, &soap_tmp___ns1__MoveIntoResourcePool, "-ns1:MoveIntoResourcePool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveIntoResourcePool(soap, &soap_tmp___ns1__MoveIntoResourcePool, "-ns1:MoveIntoResourcePool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveIntoResourcePoolResponse)
		return soap_closesock(soap);
	ns1__MoveIntoResourcePoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveIntoResourcePoolResponse->soap_get(soap, "ns1:MoveIntoResourcePoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateChildResourceConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateChildResourceConfigurationRequestType *ns1__UpdateChildResourceConfiguration, _ns1__UpdateChildResourceConfigurationResponse *ns1__UpdateChildResourceConfigurationResponse)
{	struct __ns1__UpdateChildResourceConfiguration soap_tmp___ns1__UpdateChildResourceConfiguration;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateChildResourceConfiguration.ns1__UpdateChildResourceConfiguration = ns1__UpdateChildResourceConfiguration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateChildResourceConfiguration(soap, &soap_tmp___ns1__UpdateChildResourceConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateChildResourceConfiguration(soap, &soap_tmp___ns1__UpdateChildResourceConfiguration, "-ns1:UpdateChildResourceConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateChildResourceConfiguration(soap, &soap_tmp___ns1__UpdateChildResourceConfiguration, "-ns1:UpdateChildResourceConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateChildResourceConfigurationResponse)
		return soap_closesock(soap);
	ns1__UpdateChildResourceConfigurationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateChildResourceConfigurationResponse->soap_get(soap, "ns1:UpdateChildResourceConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateResourcePool(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateResourcePoolRequestType *ns1__CreateResourcePool, _ns1__CreateResourcePoolResponse *ns1__CreateResourcePoolResponse)
{	struct __ns1__CreateResourcePool soap_tmp___ns1__CreateResourcePool;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateResourcePool.ns1__CreateResourcePool = ns1__CreateResourcePool;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateResourcePool(soap, &soap_tmp___ns1__CreateResourcePool);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateResourcePool(soap, &soap_tmp___ns1__CreateResourcePool, "-ns1:CreateResourcePool", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateResourcePool(soap, &soap_tmp___ns1__CreateResourcePool, "-ns1:CreateResourcePool", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateResourcePoolResponse)
		return soap_closesock(soap);
	ns1__CreateResourcePoolResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateResourcePoolResponse->soap_get(soap, "ns1:CreateResourcePoolResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyChildren(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyChildrenRequestType *ns1__DestroyChildren, _ns1__DestroyChildrenResponse *ns1__DestroyChildrenResponse)
{	struct __ns1__DestroyChildren soap_tmp___ns1__DestroyChildren;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyChildren.ns1__DestroyChildren = ns1__DestroyChildren;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyChildren(soap, &soap_tmp___ns1__DestroyChildren);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyChildren(soap, &soap_tmp___ns1__DestroyChildren, "-ns1:DestroyChildren", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyChildren(soap, &soap_tmp___ns1__DestroyChildren, "-ns1:DestroyChildren", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyChildrenResponse)
		return soap_closesock(soap);
	ns1__DestroyChildrenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyChildrenResponse->soap_get(soap, "ns1:DestroyChildrenResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVAppRequestType *ns1__CreateVApp, _ns1__CreateVAppResponse *ns1__CreateVAppResponse)
{	struct __ns1__CreateVApp soap_tmp___ns1__CreateVApp;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateVApp.ns1__CreateVApp = ns1__CreateVApp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateVApp(soap, &soap_tmp___ns1__CreateVApp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateVApp(soap, &soap_tmp___ns1__CreateVApp, "-ns1:CreateVApp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateVApp(soap, &soap_tmp___ns1__CreateVApp, "-ns1:CreateVApp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateVAppResponse)
		return soap_closesock(soap);
	ns1__CreateVAppResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateVAppResponse->soap_get(soap, "ns1:CreateVAppResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateChildVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateChildVMRequestType *ns1__CreateChildVM_USCORETask, _ns1__CreateChildVM_USCORETaskResponse *ns1__CreateChildVM_USCORETaskResponse)
{	struct __ns1__CreateChildVM_USCORETask soap_tmp___ns1__CreateChildVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateChildVM_USCORETask.ns1__CreateChildVM_USCORETask = ns1__CreateChildVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateChildVM_USCORETask(soap, &soap_tmp___ns1__CreateChildVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateChildVM_USCORETask(soap, &soap_tmp___ns1__CreateChildVM_USCORETask, "-ns1:CreateChildVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateChildVM_USCORETask(soap, &soap_tmp___ns1__CreateChildVM_USCORETask, "-ns1:CreateChildVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateChildVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateChildVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateChildVM_USCORETaskResponse->soap_get(soap, "ns1:CreateChildVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RegisterChildVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RegisterChildVMRequestType *ns1__RegisterChildVM_USCORETask, _ns1__RegisterChildVM_USCORETaskResponse *ns1__RegisterChildVM_USCORETaskResponse)
{	struct __ns1__RegisterChildVM_USCORETask soap_tmp___ns1__RegisterChildVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RegisterChildVM_USCORETask.ns1__RegisterChildVM_USCORETask = ns1__RegisterChildVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RegisterChildVM_USCORETask(soap, &soap_tmp___ns1__RegisterChildVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RegisterChildVM_USCORETask(soap, &soap_tmp___ns1__RegisterChildVM_USCORETask, "-ns1:RegisterChildVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RegisterChildVM_USCORETask(soap, &soap_tmp___ns1__RegisterChildVM_USCORETask, "-ns1:RegisterChildVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterChildVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RegisterChildVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterChildVM_USCORETaskResponse->soap_get(soap, "ns1:RegisterChildVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ImportVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ImportVAppRequestType *ns1__ImportVApp, _ns1__ImportVAppResponse *ns1__ImportVAppResponse)
{	struct __ns1__ImportVApp soap_tmp___ns1__ImportVApp;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ImportVApp.ns1__ImportVApp = ns1__ImportVApp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ImportVApp(soap, &soap_tmp___ns1__ImportVApp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ImportVApp(soap, &soap_tmp___ns1__ImportVApp, "-ns1:ImportVApp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ImportVApp(soap, &soap_tmp___ns1__ImportVApp, "-ns1:ImportVApp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ImportVAppResponse)
		return soap_closesock(soap);
	ns1__ImportVAppResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ImportVAppResponse->soap_get(soap, "ns1:ImportVAppResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryResourceConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryResourceConfigOptionRequestType *ns1__QueryResourceConfigOption, _ns1__QueryResourceConfigOptionResponse *ns1__QueryResourceConfigOptionResponse)
{	struct __ns1__QueryResourceConfigOption soap_tmp___ns1__QueryResourceConfigOption;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryResourceConfigOption.ns1__QueryResourceConfigOption = ns1__QueryResourceConfigOption;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryResourceConfigOption(soap, &soap_tmp___ns1__QueryResourceConfigOption);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryResourceConfigOption(soap, &soap_tmp___ns1__QueryResourceConfigOption, "-ns1:QueryResourceConfigOption", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryResourceConfigOption(soap, &soap_tmp___ns1__QueryResourceConfigOption, "-ns1:QueryResourceConfigOption", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryResourceConfigOptionResponse)
		return soap_closesock(soap);
	ns1__QueryResourceConfigOptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryResourceConfigOptionResponse->soap_get(soap, "ns1:QueryResourceConfigOptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshRuntime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRuntimeRequestType *ns1__RefreshRuntime, _ns1__RefreshRuntimeResponse *ns1__RefreshRuntimeResponse)
{	struct __ns1__RefreshRuntime soap_tmp___ns1__RefreshRuntime;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshRuntime.ns1__RefreshRuntime = ns1__RefreshRuntime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshRuntime(soap, &soap_tmp___ns1__RefreshRuntime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshRuntime(soap, &soap_tmp___ns1__RefreshRuntime, "-ns1:RefreshRuntime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshRuntime(soap, &soap_tmp___ns1__RefreshRuntime, "-ns1:RefreshRuntime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshRuntimeResponse)
		return soap_closesock(soap);
	ns1__RefreshRuntimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshRuntimeResponse->soap_get(soap, "ns1:RefreshRuntimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByUuidRequestType *ns1__FindByUuid, _ns1__FindByUuidResponse *ns1__FindByUuidResponse)
{	struct __ns1__FindByUuid soap_tmp___ns1__FindByUuid;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindByUuid.ns1__FindByUuid = ns1__FindByUuid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindByUuid(soap, &soap_tmp___ns1__FindByUuid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindByUuid(soap, &soap_tmp___ns1__FindByUuid, "-ns1:FindByUuid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindByUuid(soap, &soap_tmp___ns1__FindByUuid, "-ns1:FindByUuid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindByUuidResponse)
		return soap_closesock(soap);
	ns1__FindByUuidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindByUuidResponse->soap_get(soap, "ns1:FindByUuidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByDatastorePath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByDatastorePathRequestType *ns1__FindByDatastorePath, _ns1__FindByDatastorePathResponse *ns1__FindByDatastorePathResponse)
{	struct __ns1__FindByDatastorePath soap_tmp___ns1__FindByDatastorePath;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindByDatastorePath.ns1__FindByDatastorePath = ns1__FindByDatastorePath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindByDatastorePath(soap, &soap_tmp___ns1__FindByDatastorePath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindByDatastorePath(soap, &soap_tmp___ns1__FindByDatastorePath, "-ns1:FindByDatastorePath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindByDatastorePath(soap, &soap_tmp___ns1__FindByDatastorePath, "-ns1:FindByDatastorePath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindByDatastorePathResponse)
		return soap_closesock(soap);
	ns1__FindByDatastorePathResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindByDatastorePathResponse->soap_get(soap, "ns1:FindByDatastorePathResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByDnsName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByDnsNameRequestType *ns1__FindByDnsName, _ns1__FindByDnsNameResponse *ns1__FindByDnsNameResponse)
{	struct __ns1__FindByDnsName soap_tmp___ns1__FindByDnsName;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindByDnsName.ns1__FindByDnsName = ns1__FindByDnsName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindByDnsName(soap, &soap_tmp___ns1__FindByDnsName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindByDnsName(soap, &soap_tmp___ns1__FindByDnsName, "-ns1:FindByDnsName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindByDnsName(soap, &soap_tmp___ns1__FindByDnsName, "-ns1:FindByDnsName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindByDnsNameResponse)
		return soap_closesock(soap);
	ns1__FindByDnsNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindByDnsNameResponse->soap_get(soap, "ns1:FindByDnsNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByIp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByIpRequestType *ns1__FindByIp, _ns1__FindByIpResponse *ns1__FindByIpResponse)
{	struct __ns1__FindByIp soap_tmp___ns1__FindByIp;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindByIp.ns1__FindByIp = ns1__FindByIp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindByIp(soap, &soap_tmp___ns1__FindByIp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindByIp(soap, &soap_tmp___ns1__FindByIp, "-ns1:FindByIp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindByIp(soap, &soap_tmp___ns1__FindByIp, "-ns1:FindByIp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindByIpResponse)
		return soap_closesock(soap);
	ns1__FindByIpResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindByIpResponse->soap_get(soap, "ns1:FindByIpResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindByInventoryPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindByInventoryPathRequestType *ns1__FindByInventoryPath, _ns1__FindByInventoryPathResponse *ns1__FindByInventoryPathResponse)
{	struct __ns1__FindByInventoryPath soap_tmp___ns1__FindByInventoryPath;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindByInventoryPath.ns1__FindByInventoryPath = ns1__FindByInventoryPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindByInventoryPath(soap, &soap_tmp___ns1__FindByInventoryPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindByInventoryPath(soap, &soap_tmp___ns1__FindByInventoryPath, "-ns1:FindByInventoryPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindByInventoryPath(soap, &soap_tmp___ns1__FindByInventoryPath, "-ns1:FindByInventoryPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindByInventoryPathResponse)
		return soap_closesock(soap);
	ns1__FindByInventoryPathResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindByInventoryPathResponse->soap_get(soap, "ns1:FindByInventoryPathResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindChild(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindChildRequestType *ns1__FindChild, _ns1__FindChildResponse *ns1__FindChildResponse)
{	struct __ns1__FindChild soap_tmp___ns1__FindChild;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindChild.ns1__FindChild = ns1__FindChild;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindChild(soap, &soap_tmp___ns1__FindChild);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindChild(soap, &soap_tmp___ns1__FindChild, "-ns1:FindChild", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindChild(soap, &soap_tmp___ns1__FindChild, "-ns1:FindChild", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindChildResponse)
		return soap_closesock(soap);
	ns1__FindChildResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindChildResponse->soap_get(soap, "ns1:FindChildResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByUuidRequestType *ns1__FindAllByUuid, _ns1__FindAllByUuidResponse *ns1__FindAllByUuidResponse)
{	struct __ns1__FindAllByUuid soap_tmp___ns1__FindAllByUuid;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindAllByUuid.ns1__FindAllByUuid = ns1__FindAllByUuid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindAllByUuid(soap, &soap_tmp___ns1__FindAllByUuid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindAllByUuid(soap, &soap_tmp___ns1__FindAllByUuid, "-ns1:FindAllByUuid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindAllByUuid(soap, &soap_tmp___ns1__FindAllByUuid, "-ns1:FindAllByUuid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindAllByUuidResponse)
		return soap_closesock(soap);
	ns1__FindAllByUuidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindAllByUuidResponse->soap_get(soap, "ns1:FindAllByUuidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByDnsName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByDnsNameRequestType *ns1__FindAllByDnsName, _ns1__FindAllByDnsNameResponse *ns1__FindAllByDnsNameResponse)
{	struct __ns1__FindAllByDnsName soap_tmp___ns1__FindAllByDnsName;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindAllByDnsName.ns1__FindAllByDnsName = ns1__FindAllByDnsName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindAllByDnsName(soap, &soap_tmp___ns1__FindAllByDnsName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindAllByDnsName(soap, &soap_tmp___ns1__FindAllByDnsName, "-ns1:FindAllByDnsName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindAllByDnsName(soap, &soap_tmp___ns1__FindAllByDnsName, "-ns1:FindAllByDnsName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindAllByDnsNameResponse)
		return soap_closesock(soap);
	ns1__FindAllByDnsNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindAllByDnsNameResponse->soap_get(soap, "ns1:FindAllByDnsNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAllByIp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAllByIpRequestType *ns1__FindAllByIp, _ns1__FindAllByIpResponse *ns1__FindAllByIpResponse)
{	struct __ns1__FindAllByIp soap_tmp___ns1__FindAllByIp;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindAllByIp.ns1__FindAllByIp = ns1__FindAllByIp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindAllByIp(soap, &soap_tmp___ns1__FindAllByIp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindAllByIp(soap, &soap_tmp___ns1__FindAllByIp, "-ns1:FindAllByIp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindAllByIp(soap, &soap_tmp___ns1__FindAllByIp, "-ns1:FindAllByIp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindAllByIpResponse)
		return soap_closesock(soap);
	ns1__FindAllByIpResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindAllByIpResponse->soap_get(soap, "ns1:FindAllByIpResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CurrentTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CurrentTimeRequestType *ns1__CurrentTime, _ns1__CurrentTimeResponse *ns1__CurrentTimeResponse)
{	struct __ns1__CurrentTime soap_tmp___ns1__CurrentTime;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CurrentTime.ns1__CurrentTime = ns1__CurrentTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CurrentTime(soap, &soap_tmp___ns1__CurrentTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CurrentTime(soap, &soap_tmp___ns1__CurrentTime, "-ns1:CurrentTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CurrentTime(soap, &soap_tmp___ns1__CurrentTime, "-ns1:CurrentTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CurrentTimeResponse)
		return soap_closesock(soap);
	ns1__CurrentTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CurrentTimeResponse->soap_get(soap, "ns1:CurrentTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveServiceContent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveServiceContentRequestType *ns1__RetrieveServiceContent, _ns1__RetrieveServiceContentResponse *ns1__RetrieveServiceContentResponse)
{	struct __ns1__RetrieveServiceContent soap_tmp___ns1__RetrieveServiceContent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveServiceContent.ns1__RetrieveServiceContent = ns1__RetrieveServiceContent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveServiceContent(soap, &soap_tmp___ns1__RetrieveServiceContent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveServiceContent(soap, &soap_tmp___ns1__RetrieveServiceContent, "-ns1:RetrieveServiceContent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveServiceContent(soap, &soap_tmp___ns1__RetrieveServiceContent, "-ns1:RetrieveServiceContent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveServiceContentResponse)
		return soap_closesock(soap);
	ns1__RetrieveServiceContentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveServiceContentResponse->soap_get(soap, "ns1:RetrieveServiceContentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ValidateMigration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ValidateMigrationRequestType *ns1__ValidateMigration, _ns1__ValidateMigrationResponse *ns1__ValidateMigrationResponse)
{	struct __ns1__ValidateMigration soap_tmp___ns1__ValidateMigration;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ValidateMigration.ns1__ValidateMigration = ns1__ValidateMigration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ValidateMigration(soap, &soap_tmp___ns1__ValidateMigration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ValidateMigration(soap, &soap_tmp___ns1__ValidateMigration, "-ns1:ValidateMigration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ValidateMigration(soap, &soap_tmp___ns1__ValidateMigration, "-ns1:ValidateMigration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ValidateMigrationResponse)
		return soap_closesock(soap);
	ns1__ValidateMigrationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ValidateMigrationResponse->soap_get(soap, "ns1:ValidateMigrationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVMotionCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVMotionCompatibilityRequestType *ns1__QueryVMotionCompatibility, _ns1__QueryVMotionCompatibilityResponse *ns1__QueryVMotionCompatibilityResponse)
{	struct __ns1__QueryVMotionCompatibility soap_tmp___ns1__QueryVMotionCompatibility;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVMotionCompatibility.ns1__QueryVMotionCompatibility = ns1__QueryVMotionCompatibility;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVMotionCompatibility(soap, &soap_tmp___ns1__QueryVMotionCompatibility);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVMotionCompatibility(soap, &soap_tmp___ns1__QueryVMotionCompatibility, "-ns1:QueryVMotionCompatibility", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVMotionCompatibility(soap, &soap_tmp___ns1__QueryVMotionCompatibility, "-ns1:QueryVMotionCompatibility", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVMotionCompatibilityResponse)
		return soap_closesock(soap);
	ns1__QueryVMotionCompatibilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVMotionCompatibilityResponse->soap_get(soap, "ns1:QueryVMotionCompatibilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveProductComponents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveProductComponentsRequestType *ns1__RetrieveProductComponents, _ns1__RetrieveProductComponentsResponse *ns1__RetrieveProductComponentsResponse)
{	struct __ns1__RetrieveProductComponents soap_tmp___ns1__RetrieveProductComponents;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveProductComponents.ns1__RetrieveProductComponents = ns1__RetrieveProductComponents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveProductComponents(soap, &soap_tmp___ns1__RetrieveProductComponents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveProductComponents(soap, &soap_tmp___ns1__RetrieveProductComponents, "-ns1:RetrieveProductComponents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveProductComponents(soap, &soap_tmp___ns1__RetrieveProductComponents, "-ns1:RetrieveProductComponents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveProductComponentsResponse)
		return soap_closesock(soap);
	ns1__RetrieveProductComponentsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveProductComponentsResponse->soap_get(soap, "ns1:RetrieveProductComponentsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServiceMessage(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServiceMessageRequestType *ns1__UpdateServiceMessage, _ns1__UpdateServiceMessageResponse *ns1__UpdateServiceMessageResponse)
{	struct __ns1__UpdateServiceMessage soap_tmp___ns1__UpdateServiceMessage;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateServiceMessage.ns1__UpdateServiceMessage = ns1__UpdateServiceMessage;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateServiceMessage(soap, &soap_tmp___ns1__UpdateServiceMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateServiceMessage(soap, &soap_tmp___ns1__UpdateServiceMessage, "-ns1:UpdateServiceMessage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateServiceMessage(soap, &soap_tmp___ns1__UpdateServiceMessage, "-ns1:UpdateServiceMessage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateServiceMessageResponse)
		return soap_closesock(soap);
	ns1__UpdateServiceMessageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateServiceMessageResponse->soap_get(soap, "ns1:UpdateServiceMessageResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Login(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginRequestType *ns1__Login, _ns1__LoginResponse *ns1__LoginResponse)
{	struct __ns1__Login soap_tmp___ns1__Login;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Login.ns1__Login = ns1__Login;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Login(soap, &soap_tmp___ns1__Login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginResponse)
		return soap_closesock(soap);
	ns1__LoginResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginResponse->soap_get(soap, "ns1:LoginResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginBySSPI(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginBySSPIRequestType *ns1__LoginBySSPI, _ns1__LoginBySSPIResponse *ns1__LoginBySSPIResponse)
{	struct __ns1__LoginBySSPI soap_tmp___ns1__LoginBySSPI;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__LoginBySSPI.ns1__LoginBySSPI = ns1__LoginBySSPI;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__LoginBySSPI(soap, &soap_tmp___ns1__LoginBySSPI);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__LoginBySSPI(soap, &soap_tmp___ns1__LoginBySSPI, "-ns1:LoginBySSPI", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__LoginBySSPI(soap, &soap_tmp___ns1__LoginBySSPI, "-ns1:LoginBySSPI", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginBySSPIResponse)
		return soap_closesock(soap);
	ns1__LoginBySSPIResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginBySSPIResponse->soap_get(soap, "ns1:LoginBySSPIResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Logout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LogoutRequestType *ns1__Logout, _ns1__LogoutResponse *ns1__LogoutResponse)
{	struct __ns1__Logout soap_tmp___ns1__Logout;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Logout.ns1__Logout = ns1__Logout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Logout(soap, &soap_tmp___ns1__Logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LogoutResponse)
		return soap_closesock(soap);
	ns1__LogoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogoutResponse->soap_get(soap, "ns1:LogoutResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireLocalTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireLocalTicketRequestType *ns1__AcquireLocalTicket, _ns1__AcquireLocalTicketResponse *ns1__AcquireLocalTicketResponse)
{	struct __ns1__AcquireLocalTicket soap_tmp___ns1__AcquireLocalTicket;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcquireLocalTicket.ns1__AcquireLocalTicket = ns1__AcquireLocalTicket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcquireLocalTicket(soap, &soap_tmp___ns1__AcquireLocalTicket);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcquireLocalTicket(soap, &soap_tmp___ns1__AcquireLocalTicket, "-ns1:AcquireLocalTicket", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcquireLocalTicket(soap, &soap_tmp___ns1__AcquireLocalTicket, "-ns1:AcquireLocalTicket", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcquireLocalTicketResponse)
		return soap_closesock(soap);
	ns1__AcquireLocalTicketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcquireLocalTicketResponse->soap_get(soap, "ns1:AcquireLocalTicketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TerminateSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TerminateSessionRequestType *ns1__TerminateSession, _ns1__TerminateSessionResponse *ns1__TerminateSessionResponse)
{	struct __ns1__TerminateSession soap_tmp___ns1__TerminateSession;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TerminateSession.ns1__TerminateSession = ns1__TerminateSession;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TerminateSession(soap, &soap_tmp___ns1__TerminateSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TerminateSession(soap, &soap_tmp___ns1__TerminateSession, "-ns1:TerminateSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TerminateSession(soap, &soap_tmp___ns1__TerminateSession, "-ns1:TerminateSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TerminateSessionResponse)
		return soap_closesock(soap);
	ns1__TerminateSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TerminateSessionResponse->soap_get(soap, "ns1:TerminateSessionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetLocale(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetLocaleRequestType *ns1__SetLocale, _ns1__SetLocaleResponse *ns1__SetLocaleResponse)
{	struct __ns1__SetLocale soap_tmp___ns1__SetLocale;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetLocale.ns1__SetLocale = ns1__SetLocale;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetLocale(soap, &soap_tmp___ns1__SetLocale);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetLocale(soap, &soap_tmp___ns1__SetLocale, "-ns1:SetLocale", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetLocale(soap, &soap_tmp___ns1__SetLocale, "-ns1:SetLocale", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetLocaleResponse)
		return soap_closesock(soap);
	ns1__SetLocaleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetLocaleResponse->soap_get(soap, "ns1:SetLocaleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginExtensionBySubjectName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginExtensionBySubjectNameRequestType *ns1__LoginExtensionBySubjectName, _ns1__LoginExtensionBySubjectNameResponse *ns1__LoginExtensionBySubjectNameResponse)
{	struct __ns1__LoginExtensionBySubjectName soap_tmp___ns1__LoginExtensionBySubjectName;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__LoginExtensionBySubjectName.ns1__LoginExtensionBySubjectName = ns1__LoginExtensionBySubjectName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__LoginExtensionBySubjectName(soap, &soap_tmp___ns1__LoginExtensionBySubjectName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__LoginExtensionBySubjectName(soap, &soap_tmp___ns1__LoginExtensionBySubjectName, "-ns1:LoginExtensionBySubjectName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__LoginExtensionBySubjectName(soap, &soap_tmp___ns1__LoginExtensionBySubjectName, "-ns1:LoginExtensionBySubjectName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginExtensionBySubjectNameResponse)
		return soap_closesock(soap);
	ns1__LoginExtensionBySubjectNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginExtensionBySubjectNameResponse->soap_get(soap, "ns1:LoginExtensionBySubjectNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LoginExtensionByCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LoginExtensionByCertificateRequestType *ns1__LoginExtensionByCertificate, _ns1__LoginExtensionByCertificateResponse *ns1__LoginExtensionByCertificateResponse)
{	struct __ns1__LoginExtensionByCertificate soap_tmp___ns1__LoginExtensionByCertificate;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__LoginExtensionByCertificate.ns1__LoginExtensionByCertificate = ns1__LoginExtensionByCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__LoginExtensionByCertificate(soap, &soap_tmp___ns1__LoginExtensionByCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__LoginExtensionByCertificate(soap, &soap_tmp___ns1__LoginExtensionByCertificate, "-ns1:LoginExtensionByCertificate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__LoginExtensionByCertificate(soap, &soap_tmp___ns1__LoginExtensionByCertificate, "-ns1:LoginExtensionByCertificate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginExtensionByCertificateResponse)
		return soap_closesock(soap);
	ns1__LoginExtensionByCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginExtensionByCertificateResponse->soap_get(soap, "ns1:LoginExtensionByCertificateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ImpersonateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ImpersonateUserRequestType *ns1__ImpersonateUser, _ns1__ImpersonateUserResponse *ns1__ImpersonateUserResponse)
{	struct __ns1__ImpersonateUser soap_tmp___ns1__ImpersonateUser;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ImpersonateUser.ns1__ImpersonateUser = ns1__ImpersonateUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ImpersonateUser(soap, &soap_tmp___ns1__ImpersonateUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ImpersonateUser(soap, &soap_tmp___ns1__ImpersonateUser, "-ns1:ImpersonateUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ImpersonateUser(soap, &soap_tmp___ns1__ImpersonateUser, "-ns1:ImpersonateUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ImpersonateUserResponse)
		return soap_closesock(soap);
	ns1__ImpersonateUserResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ImpersonateUserResponse->soap_get(soap, "ns1:ImpersonateUserResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SessionIsActive(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SessionIsActiveRequestType *ns1__SessionIsActive, _ns1__SessionIsActiveResponse *ns1__SessionIsActiveResponse)
{	struct __ns1__SessionIsActive soap_tmp___ns1__SessionIsActive;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SessionIsActive.ns1__SessionIsActive = ns1__SessionIsActive;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SessionIsActive(soap, &soap_tmp___ns1__SessionIsActive);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SessionIsActive(soap, &soap_tmp___ns1__SessionIsActive, "-ns1:SessionIsActive", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SessionIsActive(soap, &soap_tmp___ns1__SessionIsActive, "-ns1:SessionIsActive", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SessionIsActiveResponse)
		return soap_closesock(soap);
	ns1__SessionIsActiveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SessionIsActiveResponse->soap_get(soap, "ns1:SessionIsActiveResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireCloneTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireCloneTicketRequestType *ns1__AcquireCloneTicket, _ns1__AcquireCloneTicketResponse *ns1__AcquireCloneTicketResponse)
{	struct __ns1__AcquireCloneTicket soap_tmp___ns1__AcquireCloneTicket;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcquireCloneTicket.ns1__AcquireCloneTicket = ns1__AcquireCloneTicket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcquireCloneTicket(soap, &soap_tmp___ns1__AcquireCloneTicket);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcquireCloneTicket(soap, &soap_tmp___ns1__AcquireCloneTicket, "-ns1:AcquireCloneTicket", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcquireCloneTicket(soap, &soap_tmp___ns1__AcquireCloneTicket, "-ns1:AcquireCloneTicket", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcquireCloneTicketResponse)
		return soap_closesock(soap);
	ns1__AcquireCloneTicketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcquireCloneTicketResponse->soap_get(soap, "ns1:AcquireCloneTicketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneSessionRequestType *ns1__CloneSession, _ns1__CloneSessionResponse *ns1__CloneSessionResponse)
{	struct __ns1__CloneSession soap_tmp___ns1__CloneSession;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CloneSession.ns1__CloneSession = ns1__CloneSession;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CloneSession(soap, &soap_tmp___ns1__CloneSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CloneSession(soap, &soap_tmp___ns1__CloneSession, "-ns1:CloneSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CloneSession(soap, &soap_tmp___ns1__CloneSession, "-ns1:CloneSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CloneSessionResponse)
		return soap_closesock(soap);
	ns1__CloneSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CloneSessionResponse->soap_get(soap, "ns1:CloneSessionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureDatastoreIORM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureDatastoreIORMRequestType *ns1__ConfigureDatastoreIORM_USCORETask, _ns1__ConfigureDatastoreIORM_USCORETaskResponse *ns1__ConfigureDatastoreIORM_USCORETaskResponse)
{	struct __ns1__ConfigureDatastoreIORM_USCORETask soap_tmp___ns1__ConfigureDatastoreIORM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ConfigureDatastoreIORM_USCORETask.ns1__ConfigureDatastoreIORM_USCORETask = ns1__ConfigureDatastoreIORM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ConfigureDatastoreIORM_USCORETask(soap, &soap_tmp___ns1__ConfigureDatastoreIORM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ConfigureDatastoreIORM_USCORETask(soap, &soap_tmp___ns1__ConfigureDatastoreIORM_USCORETask, "-ns1:ConfigureDatastoreIORM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ConfigureDatastoreIORM_USCORETask(soap, &soap_tmp___ns1__ConfigureDatastoreIORM_USCORETask, "-ns1:ConfigureDatastoreIORM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ConfigureDatastoreIORM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ConfigureDatastoreIORM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConfigureDatastoreIORM_USCORETaskResponse->soap_get(soap, "ns1:ConfigureDatastoreIORM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryIORMConfigOption(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryIORMConfigOptionRequestType *ns1__QueryIORMConfigOption, _ns1__QueryIORMConfigOptionResponse *ns1__QueryIORMConfigOptionResponse)
{	struct __ns1__QueryIORMConfigOption soap_tmp___ns1__QueryIORMConfigOption;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryIORMConfigOption.ns1__QueryIORMConfigOption = ns1__QueryIORMConfigOption;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryIORMConfigOption(soap, &soap_tmp___ns1__QueryIORMConfigOption);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryIORMConfigOption(soap, &soap_tmp___ns1__QueryIORMConfigOption, "-ns1:QueryIORMConfigOption", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryIORMConfigOption(soap, &soap_tmp___ns1__QueryIORMConfigOption, "-ns1:QueryIORMConfigOption", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryIORMConfigOptionResponse)
		return soap_closesock(soap);
	ns1__QueryIORMConfigOptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryIORMConfigOptionResponse->soap_get(soap, "ns1:QueryIORMConfigOptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CancelTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CancelTaskRequestType *ns1__CancelTask, _ns1__CancelTaskResponse *ns1__CancelTaskResponse)
{	struct __ns1__CancelTask soap_tmp___ns1__CancelTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CancelTask.ns1__CancelTask = ns1__CancelTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CancelTask(soap, &soap_tmp___ns1__CancelTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CancelTask(soap, &soap_tmp___ns1__CancelTask, "-ns1:CancelTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CancelTask(soap, &soap_tmp___ns1__CancelTask, "-ns1:CancelTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CancelTaskResponse)
		return soap_closesock(soap);
	ns1__CancelTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CancelTaskResponse->soap_get(soap, "ns1:CancelTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateProgress(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateProgressRequestType *ns1__UpdateProgress, _ns1__UpdateProgressResponse *ns1__UpdateProgressResponse)
{	struct __ns1__UpdateProgress soap_tmp___ns1__UpdateProgress;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateProgress.ns1__UpdateProgress = ns1__UpdateProgress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateProgress(soap, &soap_tmp___ns1__UpdateProgress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateProgress(soap, &soap_tmp___ns1__UpdateProgress, "-ns1:UpdateProgress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateProgress(soap, &soap_tmp___ns1__UpdateProgress, "-ns1:UpdateProgress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateProgressResponse)
		return soap_closesock(soap);
	ns1__UpdateProgressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateProgressResponse->soap_get(soap, "ns1:UpdateProgressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetTaskState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetTaskStateRequestType *ns1__SetTaskState, _ns1__SetTaskStateResponse *ns1__SetTaskStateResponse)
{	struct __ns1__SetTaskState soap_tmp___ns1__SetTaskState;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTaskState.ns1__SetTaskState = ns1__SetTaskState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTaskState(soap, &soap_tmp___ns1__SetTaskState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTaskState(soap, &soap_tmp___ns1__SetTaskState, "-ns1:SetTaskState", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTaskState(soap, &soap_tmp___ns1__SetTaskState, "-ns1:SetTaskState", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTaskStateResponse)
		return soap_closesock(soap);
	ns1__SetTaskStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTaskStateResponse->soap_get(soap, "ns1:SetTaskStateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetTaskDescription(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetTaskDescriptionRequestType *ns1__SetTaskDescription, _ns1__SetTaskDescriptionResponse *ns1__SetTaskDescriptionResponse)
{	struct __ns1__SetTaskDescription soap_tmp___ns1__SetTaskDescription;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTaskDescription.ns1__SetTaskDescription = ns1__SetTaskDescription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTaskDescription(soap, &soap_tmp___ns1__SetTaskDescription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTaskDescription(soap, &soap_tmp___ns1__SetTaskDescription, "-ns1:SetTaskDescription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTaskDescription(soap, &soap_tmp___ns1__SetTaskDescription, "-ns1:SetTaskDescription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTaskDescriptionResponse)
		return soap_closesock(soap);
	ns1__SetTaskDescriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTaskDescriptionResponse->soap_get(soap, "ns1:SetTaskDescriptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadNextTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadNextTasksRequestType *ns1__ReadNextTasks, _ns1__ReadNextTasksResponse *ns1__ReadNextTasksResponse)
{	struct __ns1__ReadNextTasks soap_tmp___ns1__ReadNextTasks;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReadNextTasks.ns1__ReadNextTasks = ns1__ReadNextTasks;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReadNextTasks(soap, &soap_tmp___ns1__ReadNextTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReadNextTasks(soap, &soap_tmp___ns1__ReadNextTasks, "-ns1:ReadNextTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReadNextTasks(soap, &soap_tmp___ns1__ReadNextTasks, "-ns1:ReadNextTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReadNextTasksResponse)
		return soap_closesock(soap);
	ns1__ReadNextTasksResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReadNextTasksResponse->soap_get(soap, "ns1:ReadNextTasksResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadPreviousTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadPreviousTasksRequestType *ns1__ReadPreviousTasks, _ns1__ReadPreviousTasksResponse *ns1__ReadPreviousTasksResponse)
{	struct __ns1__ReadPreviousTasks soap_tmp___ns1__ReadPreviousTasks;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReadPreviousTasks.ns1__ReadPreviousTasks = ns1__ReadPreviousTasks;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReadPreviousTasks(soap, &soap_tmp___ns1__ReadPreviousTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReadPreviousTasks(soap, &soap_tmp___ns1__ReadPreviousTasks, "-ns1:ReadPreviousTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReadPreviousTasks(soap, &soap_tmp___ns1__ReadPreviousTasks, "-ns1:ReadPreviousTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReadPreviousTasksResponse)
		return soap_closesock(soap);
	ns1__ReadPreviousTasksResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReadPreviousTasksResponse->soap_get(soap, "ns1:ReadPreviousTasksResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCollectorForTasks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCollectorForTasksRequestType *ns1__CreateCollectorForTasks, _ns1__CreateCollectorForTasksResponse *ns1__CreateCollectorForTasksResponse)
{	struct __ns1__CreateCollectorForTasks soap_tmp___ns1__CreateCollectorForTasks;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateCollectorForTasks.ns1__CreateCollectorForTasks = ns1__CreateCollectorForTasks;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateCollectorForTasks(soap, &soap_tmp___ns1__CreateCollectorForTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateCollectorForTasks(soap, &soap_tmp___ns1__CreateCollectorForTasks, "-ns1:CreateCollectorForTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateCollectorForTasks(soap, &soap_tmp___ns1__CreateCollectorForTasks, "-ns1:CreateCollectorForTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateCollectorForTasksResponse)
		return soap_closesock(soap);
	ns1__CreateCollectorForTasksResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateCollectorForTasksResponse->soap_get(soap, "ns1:CreateCollectorForTasksResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateTaskRequestType *ns1__CreateTask, _ns1__CreateTaskResponse *ns1__CreateTaskResponse)
{	struct __ns1__CreateTask soap_tmp___ns1__CreateTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateTask.ns1__CreateTask = ns1__CreateTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateTask(soap, &soap_tmp___ns1__CreateTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateTask(soap, &soap_tmp___ns1__CreateTask, "-ns1:CreateTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateTask(soap, &soap_tmp___ns1__CreateTask, "-ns1:CreateTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateTaskResponse)
		return soap_closesock(soap);
	ns1__CreateTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateTaskResponse->soap_get(soap, "ns1:CreateTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveUserGroups(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveUserGroupsRequestType *ns1__RetrieveUserGroups, _ns1__RetrieveUserGroupsResponse *ns1__RetrieveUserGroupsResponse)
{	struct __ns1__RetrieveUserGroups soap_tmp___ns1__RetrieveUserGroups;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveUserGroups.ns1__RetrieveUserGroups = ns1__RetrieveUserGroups;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveUserGroups(soap, &soap_tmp___ns1__RetrieveUserGroups);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveUserGroups(soap, &soap_tmp___ns1__RetrieveUserGroups, "-ns1:RetrieveUserGroups", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveUserGroups(soap, &soap_tmp___ns1__RetrieveUserGroups, "-ns1:RetrieveUserGroups", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveUserGroupsResponse)
		return soap_closesock(soap);
	ns1__RetrieveUserGroupsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveUserGroupsResponse->soap_get(soap, "ns1:RetrieveUserGroupsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVAppConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVAppConfigRequestType *ns1__UpdateVAppConfig, _ns1__UpdateVAppConfigResponse *ns1__UpdateVAppConfigResponse)
{	struct __ns1__UpdateVAppConfig soap_tmp___ns1__UpdateVAppConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateVAppConfig.ns1__UpdateVAppConfig = ns1__UpdateVAppConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateVAppConfig(soap, &soap_tmp___ns1__UpdateVAppConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateVAppConfig(soap, &soap_tmp___ns1__UpdateVAppConfig, "-ns1:UpdateVAppConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateVAppConfig(soap, &soap_tmp___ns1__UpdateVAppConfig, "-ns1:UpdateVAppConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateVAppConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateVAppConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateVAppConfigResponse->soap_get(soap, "ns1:UpdateVAppConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLinkedChildren(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLinkedChildrenRequestType *ns1__UpdateLinkedChildren, _ns1__UpdateLinkedChildrenResponse *ns1__UpdateLinkedChildrenResponse)
{	struct __ns1__UpdateLinkedChildren soap_tmp___ns1__UpdateLinkedChildren;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateLinkedChildren.ns1__UpdateLinkedChildren = ns1__UpdateLinkedChildren;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateLinkedChildren(soap, &soap_tmp___ns1__UpdateLinkedChildren);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateLinkedChildren(soap, &soap_tmp___ns1__UpdateLinkedChildren, "-ns1:UpdateLinkedChildren", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateLinkedChildren(soap, &soap_tmp___ns1__UpdateLinkedChildren, "-ns1:UpdateLinkedChildren", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateLinkedChildrenResponse)
		return soap_closesock(soap);
	ns1__UpdateLinkedChildrenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateLinkedChildrenResponse->soap_get(soap, "ns1:UpdateLinkedChildrenResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneVAppRequestType *ns1__CloneVApp_USCORETask, _ns1__CloneVApp_USCORETaskResponse *ns1__CloneVApp_USCORETaskResponse)
{	struct __ns1__CloneVApp_USCORETask soap_tmp___ns1__CloneVApp_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CloneVApp_USCORETask.ns1__CloneVApp_USCORETask = ns1__CloneVApp_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CloneVApp_USCORETask(soap, &soap_tmp___ns1__CloneVApp_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CloneVApp_USCORETask(soap, &soap_tmp___ns1__CloneVApp_USCORETask, "-ns1:CloneVApp_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CloneVApp_USCORETask(soap, &soap_tmp___ns1__CloneVApp_USCORETask, "-ns1:CloneVApp_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CloneVApp_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CloneVApp_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CloneVApp_USCORETaskResponse->soap_get(soap, "ns1:CloneVApp_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportVApp(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportVAppRequestType *ns1__ExportVApp, _ns1__ExportVAppResponse *ns1__ExportVAppResponse)
{	struct __ns1__ExportVApp soap_tmp___ns1__ExportVApp;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExportVApp.ns1__ExportVApp = ns1__ExportVApp;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExportVApp(soap, &soap_tmp___ns1__ExportVApp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExportVApp(soap, &soap_tmp___ns1__ExportVApp, "-ns1:ExportVApp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExportVApp(soap, &soap_tmp___ns1__ExportVApp, "-ns1:ExportVApp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExportVAppResponse)
		return soap_closesock(soap);
	ns1__ExportVAppResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExportVAppResponse->soap_get(soap, "ns1:ExportVAppResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnVAppRequestType *ns1__PowerOnVApp_USCORETask, _ns1__PowerOnVApp_USCORETaskResponse *ns1__PowerOnVApp_USCORETaskResponse)
{	struct __ns1__PowerOnVApp_USCORETask soap_tmp___ns1__PowerOnVApp_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerOnVApp_USCORETask.ns1__PowerOnVApp_USCORETask = ns1__PowerOnVApp_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerOnVApp_USCORETask(soap, &soap_tmp___ns1__PowerOnVApp_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerOnVApp_USCORETask(soap, &soap_tmp___ns1__PowerOnVApp_USCORETask, "-ns1:PowerOnVApp_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerOnVApp_USCORETask(soap, &soap_tmp___ns1__PowerOnVApp_USCORETask, "-ns1:PowerOnVApp_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerOnVApp_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerOnVApp_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerOnVApp_USCORETaskResponse->soap_get(soap, "ns1:PowerOnVApp_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOffVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOffVAppRequestType *ns1__PowerOffVApp_USCORETask, _ns1__PowerOffVApp_USCORETaskResponse *ns1__PowerOffVApp_USCORETaskResponse)
{	struct __ns1__PowerOffVApp_USCORETask soap_tmp___ns1__PowerOffVApp_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerOffVApp_USCORETask.ns1__PowerOffVApp_USCORETask = ns1__PowerOffVApp_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerOffVApp_USCORETask(soap, &soap_tmp___ns1__PowerOffVApp_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerOffVApp_USCORETask(soap, &soap_tmp___ns1__PowerOffVApp_USCORETask, "-ns1:PowerOffVApp_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerOffVApp_USCORETask(soap, &soap_tmp___ns1__PowerOffVApp_USCORETask, "-ns1:PowerOffVApp_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerOffVApp_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerOffVApp_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerOffVApp_USCORETaskResponse->soap_get(soap, "ns1:PowerOffVApp_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SuspendVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SuspendVAppRequestType *ns1__SuspendVApp_USCORETask, _ns1__SuspendVApp_USCORETaskResponse *ns1__SuspendVApp_USCORETaskResponse)
{	struct __ns1__SuspendVApp_USCORETask soap_tmp___ns1__SuspendVApp_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SuspendVApp_USCORETask.ns1__SuspendVApp_USCORETask = ns1__SuspendVApp_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SuspendVApp_USCORETask(soap, &soap_tmp___ns1__SuspendVApp_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SuspendVApp_USCORETask(soap, &soap_tmp___ns1__SuspendVApp_USCORETask, "-ns1:SuspendVApp_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SuspendVApp_USCORETask(soap, &soap_tmp___ns1__SuspendVApp_USCORETask, "-ns1:SuspendVApp_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SuspendVApp_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__SuspendVApp_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SuspendVApp_USCORETaskResponse->soap_get(soap, "ns1:SuspendVApp_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__unregisterVApp_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__unregisterVAppRequestType *ns1__unregisterVApp_USCORETask, _ns1__unregisterVApp_USCORETaskResponse *ns1__unregisterVApp_USCORETaskResponse)
{	struct __ns1__unregisterVApp_USCORETask soap_tmp___ns1__unregisterVApp_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__unregisterVApp_USCORETask.ns1__unregisterVApp_USCORETask = ns1__unregisterVApp_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__unregisterVApp_USCORETask(soap, &soap_tmp___ns1__unregisterVApp_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__unregisterVApp_USCORETask(soap, &soap_tmp___ns1__unregisterVApp_USCORETask, "-ns1:unregisterVApp_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__unregisterVApp_USCORETask(soap, &soap_tmp___ns1__unregisterVApp_USCORETask, "-ns1:unregisterVApp_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__unregisterVApp_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__unregisterVApp_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__unregisterVApp_USCORETaskResponse->soap_get(soap, "ns1:unregisterVApp_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVirtualDiskRequestType *ns1__CreateVirtualDisk_USCORETask, _ns1__CreateVirtualDisk_USCORETaskResponse *ns1__CreateVirtualDisk_USCORETaskResponse)
{	struct __ns1__CreateVirtualDisk_USCORETask soap_tmp___ns1__CreateVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateVirtualDisk_USCORETask.ns1__CreateVirtualDisk_USCORETask = ns1__CreateVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CreateVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CreateVirtualDisk_USCORETask, "-ns1:CreateVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CreateVirtualDisk_USCORETask, "-ns1:CreateVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:CreateVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteVirtualDiskRequestType *ns1__DeleteVirtualDisk_USCORETask, _ns1__DeleteVirtualDisk_USCORETaskResponse *ns1__DeleteVirtualDisk_USCORETaskResponse)
{	struct __ns1__DeleteVirtualDisk_USCORETask soap_tmp___ns1__DeleteVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteVirtualDisk_USCORETask.ns1__DeleteVirtualDisk_USCORETask = ns1__DeleteVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DeleteVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DeleteVirtualDisk_USCORETask, "-ns1:DeleteVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DeleteVirtualDisk_USCORETask, "-ns1:DeleteVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__DeleteVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:DeleteVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MoveVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MoveVirtualDiskRequestType *ns1__MoveVirtualDisk_USCORETask, _ns1__MoveVirtualDisk_USCORETaskResponse *ns1__MoveVirtualDisk_USCORETaskResponse)
{	struct __ns1__MoveVirtualDisk_USCORETask soap_tmp___ns1__MoveVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveVirtualDisk_USCORETask.ns1__MoveVirtualDisk_USCORETask = ns1__MoveVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveVirtualDisk_USCORETask(soap, &soap_tmp___ns1__MoveVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveVirtualDisk_USCORETask(soap, &soap_tmp___ns1__MoveVirtualDisk_USCORETask, "-ns1:MoveVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveVirtualDisk_USCORETask(soap, &soap_tmp___ns1__MoveVirtualDisk_USCORETask, "-ns1:MoveVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MoveVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:MoveVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CopyVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CopyVirtualDiskRequestType *ns1__CopyVirtualDisk_USCORETask, _ns1__CopyVirtualDisk_USCORETaskResponse *ns1__CopyVirtualDisk_USCORETaskResponse)
{	struct __ns1__CopyVirtualDisk_USCORETask soap_tmp___ns1__CopyVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CopyVirtualDisk_USCORETask.ns1__CopyVirtualDisk_USCORETask = ns1__CopyVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CopyVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CopyVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CopyVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CopyVirtualDisk_USCORETask, "-ns1:CopyVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CopyVirtualDisk_USCORETask(soap, &soap_tmp___ns1__CopyVirtualDisk_USCORETask, "-ns1:CopyVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CopyVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CopyVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CopyVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:CopyVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtendVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtendVirtualDiskRequestType *ns1__ExtendVirtualDisk_USCORETask, _ns1__ExtendVirtualDisk_USCORETaskResponse *ns1__ExtendVirtualDisk_USCORETaskResponse)
{	struct __ns1__ExtendVirtualDisk_USCORETask soap_tmp___ns1__ExtendVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExtendVirtualDisk_USCORETask.ns1__ExtendVirtualDisk_USCORETask = ns1__ExtendVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExtendVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ExtendVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExtendVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ExtendVirtualDisk_USCORETask, "-ns1:ExtendVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExtendVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ExtendVirtualDisk_USCORETask, "-ns1:ExtendVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExtendVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ExtendVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExtendVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:ExtendVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskFragmentation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskFragmentationRequestType *ns1__QueryVirtualDiskFragmentation, _ns1__QueryVirtualDiskFragmentationResponse *ns1__QueryVirtualDiskFragmentationResponse)
{	struct __ns1__QueryVirtualDiskFragmentation soap_tmp___ns1__QueryVirtualDiskFragmentation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVirtualDiskFragmentation.ns1__QueryVirtualDiskFragmentation = ns1__QueryVirtualDiskFragmentation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVirtualDiskFragmentation(soap, &soap_tmp___ns1__QueryVirtualDiskFragmentation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVirtualDiskFragmentation(soap, &soap_tmp___ns1__QueryVirtualDiskFragmentation, "-ns1:QueryVirtualDiskFragmentation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVirtualDiskFragmentation(soap, &soap_tmp___ns1__QueryVirtualDiskFragmentation, "-ns1:QueryVirtualDiskFragmentation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVirtualDiskFragmentationResponse)
		return soap_closesock(soap);
	ns1__QueryVirtualDiskFragmentationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVirtualDiskFragmentationResponse->soap_get(soap, "ns1:QueryVirtualDiskFragmentationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DefragmentVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DefragmentVirtualDiskRequestType *ns1__DefragmentVirtualDisk_USCORETask, _ns1__DefragmentVirtualDisk_USCORETaskResponse *ns1__DefragmentVirtualDisk_USCORETaskResponse)
{	struct __ns1__DefragmentVirtualDisk_USCORETask soap_tmp___ns1__DefragmentVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DefragmentVirtualDisk_USCORETask.ns1__DefragmentVirtualDisk_USCORETask = ns1__DefragmentVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DefragmentVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DefragmentVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DefragmentVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DefragmentVirtualDisk_USCORETask, "-ns1:DefragmentVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DefragmentVirtualDisk_USCORETask(soap, &soap_tmp___ns1__DefragmentVirtualDisk_USCORETask, "-ns1:DefragmentVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DefragmentVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__DefragmentVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DefragmentVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:DefragmentVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShrinkVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShrinkVirtualDiskRequestType *ns1__ShrinkVirtualDisk_USCORETask, _ns1__ShrinkVirtualDisk_USCORETaskResponse *ns1__ShrinkVirtualDisk_USCORETaskResponse)
{	struct __ns1__ShrinkVirtualDisk_USCORETask soap_tmp___ns1__ShrinkVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ShrinkVirtualDisk_USCORETask.ns1__ShrinkVirtualDisk_USCORETask = ns1__ShrinkVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ShrinkVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ShrinkVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ShrinkVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ShrinkVirtualDisk_USCORETask, "-ns1:ShrinkVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ShrinkVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ShrinkVirtualDisk_USCORETask, "-ns1:ShrinkVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ShrinkVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ShrinkVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ShrinkVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:ShrinkVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InflateVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InflateVirtualDiskRequestType *ns1__InflateVirtualDisk_USCORETask, _ns1__InflateVirtualDisk_USCORETaskResponse *ns1__InflateVirtualDisk_USCORETaskResponse)
{	struct __ns1__InflateVirtualDisk_USCORETask soap_tmp___ns1__InflateVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InflateVirtualDisk_USCORETask.ns1__InflateVirtualDisk_USCORETask = ns1__InflateVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__InflateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__InflateVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InflateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__InflateVirtualDisk_USCORETask, "-ns1:InflateVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InflateVirtualDisk_USCORETask(soap, &soap_tmp___ns1__InflateVirtualDisk_USCORETask, "-ns1:InflateVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InflateVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__InflateVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InflateVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:InflateVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EagerZeroVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EagerZeroVirtualDiskRequestType *ns1__EagerZeroVirtualDisk_USCORETask, _ns1__EagerZeroVirtualDisk_USCORETaskResponse *ns1__EagerZeroVirtualDisk_USCORETaskResponse)
{	struct __ns1__EagerZeroVirtualDisk_USCORETask soap_tmp___ns1__EagerZeroVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EagerZeroVirtualDisk_USCORETask.ns1__EagerZeroVirtualDisk_USCORETask = ns1__EagerZeroVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EagerZeroVirtualDisk_USCORETask(soap, &soap_tmp___ns1__EagerZeroVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EagerZeroVirtualDisk_USCORETask(soap, &soap_tmp___ns1__EagerZeroVirtualDisk_USCORETask, "-ns1:EagerZeroVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EagerZeroVirtualDisk_USCORETask(soap, &soap_tmp___ns1__EagerZeroVirtualDisk_USCORETask, "-ns1:EagerZeroVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EagerZeroVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__EagerZeroVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EagerZeroVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:EagerZeroVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ZeroFillVirtualDisk_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ZeroFillVirtualDiskRequestType *ns1__ZeroFillVirtualDisk_USCORETask, _ns1__ZeroFillVirtualDisk_USCORETaskResponse *ns1__ZeroFillVirtualDisk_USCORETaskResponse)
{	struct __ns1__ZeroFillVirtualDisk_USCORETask soap_tmp___ns1__ZeroFillVirtualDisk_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ZeroFillVirtualDisk_USCORETask.ns1__ZeroFillVirtualDisk_USCORETask = ns1__ZeroFillVirtualDisk_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ZeroFillVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ZeroFillVirtualDisk_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ZeroFillVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ZeroFillVirtualDisk_USCORETask, "-ns1:ZeroFillVirtualDisk_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ZeroFillVirtualDisk_USCORETask(soap, &soap_tmp___ns1__ZeroFillVirtualDisk_USCORETask, "-ns1:ZeroFillVirtualDisk_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ZeroFillVirtualDisk_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ZeroFillVirtualDisk_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ZeroFillVirtualDisk_USCORETaskResponse->soap_get(soap, "ns1:ZeroFillVirtualDisk_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetVirtualDiskUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetVirtualDiskUuidRequestType *ns1__SetVirtualDiskUuid, _ns1__SetVirtualDiskUuidResponse *ns1__SetVirtualDiskUuidResponse)
{	struct __ns1__SetVirtualDiskUuid soap_tmp___ns1__SetVirtualDiskUuid;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetVirtualDiskUuid.ns1__SetVirtualDiskUuid = ns1__SetVirtualDiskUuid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetVirtualDiskUuid(soap, &soap_tmp___ns1__SetVirtualDiskUuid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetVirtualDiskUuid(soap, &soap_tmp___ns1__SetVirtualDiskUuid, "-ns1:SetVirtualDiskUuid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetVirtualDiskUuid(soap, &soap_tmp___ns1__SetVirtualDiskUuid, "-ns1:SetVirtualDiskUuid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetVirtualDiskUuidResponse)
		return soap_closesock(soap);
	ns1__SetVirtualDiskUuidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetVirtualDiskUuidResponse->soap_get(soap, "ns1:SetVirtualDiskUuidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskUuidRequestType *ns1__QueryVirtualDiskUuid, _ns1__QueryVirtualDiskUuidResponse *ns1__QueryVirtualDiskUuidResponse)
{	struct __ns1__QueryVirtualDiskUuid soap_tmp___ns1__QueryVirtualDiskUuid;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVirtualDiskUuid.ns1__QueryVirtualDiskUuid = ns1__QueryVirtualDiskUuid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVirtualDiskUuid(soap, &soap_tmp___ns1__QueryVirtualDiskUuid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVirtualDiskUuid(soap, &soap_tmp___ns1__QueryVirtualDiskUuid, "-ns1:QueryVirtualDiskUuid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVirtualDiskUuid(soap, &soap_tmp___ns1__QueryVirtualDiskUuid, "-ns1:QueryVirtualDiskUuid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVirtualDiskUuidResponse)
		return soap_closesock(soap);
	ns1__QueryVirtualDiskUuidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVirtualDiskUuidResponse->soap_get(soap, "ns1:QueryVirtualDiskUuidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVirtualDiskGeometry(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVirtualDiskGeometryRequestType *ns1__QueryVirtualDiskGeometry, _ns1__QueryVirtualDiskGeometryResponse *ns1__QueryVirtualDiskGeometryResponse)
{	struct __ns1__QueryVirtualDiskGeometry soap_tmp___ns1__QueryVirtualDiskGeometry;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVirtualDiskGeometry.ns1__QueryVirtualDiskGeometry = ns1__QueryVirtualDiskGeometry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVirtualDiskGeometry(soap, &soap_tmp___ns1__QueryVirtualDiskGeometry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVirtualDiskGeometry(soap, &soap_tmp___ns1__QueryVirtualDiskGeometry, "-ns1:QueryVirtualDiskGeometry", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVirtualDiskGeometry(soap, &soap_tmp___ns1__QueryVirtualDiskGeometry, "-ns1:QueryVirtualDiskGeometry", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVirtualDiskGeometryResponse)
		return soap_closesock(soap);
	ns1__QueryVirtualDiskGeometryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVirtualDiskGeometryResponse->soap_get(soap, "ns1:QueryVirtualDiskGeometryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshStorageInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshStorageInfoRequestType *ns1__RefreshStorageInfo, _ns1__RefreshStorageInfoResponse *ns1__RefreshStorageInfoResponse)
{	struct __ns1__RefreshStorageInfo soap_tmp___ns1__RefreshStorageInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshStorageInfo.ns1__RefreshStorageInfo = ns1__RefreshStorageInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshStorageInfo(soap, &soap_tmp___ns1__RefreshStorageInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshStorageInfo(soap, &soap_tmp___ns1__RefreshStorageInfo, "-ns1:RefreshStorageInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshStorageInfo(soap, &soap_tmp___ns1__RefreshStorageInfo, "-ns1:RefreshStorageInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshStorageInfoResponse)
		return soap_closesock(soap);
	ns1__RefreshStorageInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshStorageInfoResponse->soap_get(soap, "ns1:RefreshStorageInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateSnapshotRequestType *ns1__CreateSnapshot_USCORETask, _ns1__CreateSnapshot_USCORETaskResponse *ns1__CreateSnapshot_USCORETaskResponse)
{	struct __ns1__CreateSnapshot_USCORETask soap_tmp___ns1__CreateSnapshot_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateSnapshot_USCORETask.ns1__CreateSnapshot_USCORETask = ns1__CreateSnapshot_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateSnapshot_USCORETask(soap, &soap_tmp___ns1__CreateSnapshot_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateSnapshot_USCORETask(soap, &soap_tmp___ns1__CreateSnapshot_USCORETask, "-ns1:CreateSnapshot_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateSnapshot_USCORETask(soap, &soap_tmp___ns1__CreateSnapshot_USCORETask, "-ns1:CreateSnapshot_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateSnapshot_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateSnapshot_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateSnapshot_USCORETaskResponse->soap_get(soap, "ns1:CreateSnapshot_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RevertToCurrentSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RevertToCurrentSnapshotRequestType *ns1__RevertToCurrentSnapshot_USCORETask, _ns1__RevertToCurrentSnapshot_USCORETaskResponse *ns1__RevertToCurrentSnapshot_USCORETaskResponse)
{	struct __ns1__RevertToCurrentSnapshot_USCORETask soap_tmp___ns1__RevertToCurrentSnapshot_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RevertToCurrentSnapshot_USCORETask.ns1__RevertToCurrentSnapshot_USCORETask = ns1__RevertToCurrentSnapshot_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RevertToCurrentSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToCurrentSnapshot_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RevertToCurrentSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToCurrentSnapshot_USCORETask, "-ns1:RevertToCurrentSnapshot_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RevertToCurrentSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToCurrentSnapshot_USCORETask, "-ns1:RevertToCurrentSnapshot_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RevertToCurrentSnapshot_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RevertToCurrentSnapshot_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RevertToCurrentSnapshot_USCORETaskResponse->soap_get(soap, "ns1:RevertToCurrentSnapshot_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAllSnapshots_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAllSnapshotsRequestType *ns1__RemoveAllSnapshots_USCORETask, _ns1__RemoveAllSnapshots_USCORETaskResponse *ns1__RemoveAllSnapshots_USCORETaskResponse)
{	struct __ns1__RemoveAllSnapshots_USCORETask soap_tmp___ns1__RemoveAllSnapshots_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveAllSnapshots_USCORETask.ns1__RemoveAllSnapshots_USCORETask = ns1__RemoveAllSnapshots_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveAllSnapshots_USCORETask(soap, &soap_tmp___ns1__RemoveAllSnapshots_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveAllSnapshots_USCORETask(soap, &soap_tmp___ns1__RemoveAllSnapshots_USCORETask, "-ns1:RemoveAllSnapshots_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveAllSnapshots_USCORETask(soap, &soap_tmp___ns1__RemoveAllSnapshots_USCORETask, "-ns1:RemoveAllSnapshots_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveAllSnapshots_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RemoveAllSnapshots_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveAllSnapshots_USCORETaskResponse->soap_get(soap, "ns1:RemoveAllSnapshots_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigVMRequestType *ns1__ReconfigVM_USCORETask, _ns1__ReconfigVM_USCORETaskResponse *ns1__ReconfigVM_USCORETaskResponse)
{	struct __ns1__ReconfigVM_USCORETask soap_tmp___ns1__ReconfigVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigVM_USCORETask.ns1__ReconfigVM_USCORETask = ns1__ReconfigVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigVM_USCORETask(soap, &soap_tmp___ns1__ReconfigVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigVM_USCORETask(soap, &soap_tmp___ns1__ReconfigVM_USCORETask, "-ns1:ReconfigVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigVM_USCORETask(soap, &soap_tmp___ns1__ReconfigVM_USCORETask, "-ns1:ReconfigVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigVM_USCORETaskResponse->soap_get(soap, "ns1:ReconfigVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVMRequestType *ns1__UpgradeVM_USCORETask, _ns1__UpgradeVM_USCORETaskResponse *ns1__UpgradeVM_USCORETaskResponse)
{	struct __ns1__UpgradeVM_USCORETask soap_tmp___ns1__UpgradeVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpgradeVM_USCORETask.ns1__UpgradeVM_USCORETask = ns1__UpgradeVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpgradeVM_USCORETask(soap, &soap_tmp___ns1__UpgradeVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpgradeVM_USCORETask(soap, &soap_tmp___ns1__UpgradeVM_USCORETask, "-ns1:UpgradeVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpgradeVM_USCORETask(soap, &soap_tmp___ns1__UpgradeVM_USCORETask, "-ns1:UpgradeVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpgradeVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__UpgradeVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpgradeVM_USCORETaskResponse->soap_get(soap, "ns1:UpgradeVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtractOvfEnvironment(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtractOvfEnvironmentRequestType *ns1__ExtractOvfEnvironment, _ns1__ExtractOvfEnvironmentResponse *ns1__ExtractOvfEnvironmentResponse)
{	struct __ns1__ExtractOvfEnvironment soap_tmp___ns1__ExtractOvfEnvironment;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExtractOvfEnvironment.ns1__ExtractOvfEnvironment = ns1__ExtractOvfEnvironment;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExtractOvfEnvironment(soap, &soap_tmp___ns1__ExtractOvfEnvironment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExtractOvfEnvironment(soap, &soap_tmp___ns1__ExtractOvfEnvironment, "-ns1:ExtractOvfEnvironment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExtractOvfEnvironment(soap, &soap_tmp___ns1__ExtractOvfEnvironment, "-ns1:ExtractOvfEnvironment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExtractOvfEnvironmentResponse)
		return soap_closesock(soap);
	ns1__ExtractOvfEnvironmentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExtractOvfEnvironmentResponse->soap_get(soap, "ns1:ExtractOvfEnvironmentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOnVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOnVMRequestType *ns1__PowerOnVM_USCORETask, _ns1__PowerOnVM_USCORETaskResponse *ns1__PowerOnVM_USCORETaskResponse)
{	struct __ns1__PowerOnVM_USCORETask soap_tmp___ns1__PowerOnVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerOnVM_USCORETask.ns1__PowerOnVM_USCORETask = ns1__PowerOnVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerOnVM_USCORETask(soap, &soap_tmp___ns1__PowerOnVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerOnVM_USCORETask(soap, &soap_tmp___ns1__PowerOnVM_USCORETask, "-ns1:PowerOnVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerOnVM_USCORETask(soap, &soap_tmp___ns1__PowerOnVM_USCORETask, "-ns1:PowerOnVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerOnVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerOnVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerOnVM_USCORETaskResponse->soap_get(soap, "ns1:PowerOnVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PowerOffVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PowerOffVMRequestType *ns1__PowerOffVM_USCORETask, _ns1__PowerOffVM_USCORETaskResponse *ns1__PowerOffVM_USCORETaskResponse)
{	struct __ns1__PowerOffVM_USCORETask soap_tmp___ns1__PowerOffVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PowerOffVM_USCORETask.ns1__PowerOffVM_USCORETask = ns1__PowerOffVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PowerOffVM_USCORETask(soap, &soap_tmp___ns1__PowerOffVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PowerOffVM_USCORETask(soap, &soap_tmp___ns1__PowerOffVM_USCORETask, "-ns1:PowerOffVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PowerOffVM_USCORETask(soap, &soap_tmp___ns1__PowerOffVM_USCORETask, "-ns1:PowerOffVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PowerOffVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PowerOffVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PowerOffVM_USCORETaskResponse->soap_get(soap, "ns1:PowerOffVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SuspendVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SuspendVMRequestType *ns1__SuspendVM_USCORETask, _ns1__SuspendVM_USCORETaskResponse *ns1__SuspendVM_USCORETaskResponse)
{	struct __ns1__SuspendVM_USCORETask soap_tmp___ns1__SuspendVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SuspendVM_USCORETask.ns1__SuspendVM_USCORETask = ns1__SuspendVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SuspendVM_USCORETask(soap, &soap_tmp___ns1__SuspendVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SuspendVM_USCORETask(soap, &soap_tmp___ns1__SuspendVM_USCORETask, "-ns1:SuspendVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SuspendVM_USCORETask(soap, &soap_tmp___ns1__SuspendVM_USCORETask, "-ns1:SuspendVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SuspendVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__SuspendVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SuspendVM_USCORETaskResponse->soap_get(soap, "ns1:SuspendVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetVMRequestType *ns1__ResetVM_USCORETask, _ns1__ResetVM_USCORETaskResponse *ns1__ResetVM_USCORETaskResponse)
{	struct __ns1__ResetVM_USCORETask soap_tmp___ns1__ResetVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetVM_USCORETask.ns1__ResetVM_USCORETask = ns1__ResetVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetVM_USCORETask(soap, &soap_tmp___ns1__ResetVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetVM_USCORETask(soap, &soap_tmp___ns1__ResetVM_USCORETask, "-ns1:ResetVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetVM_USCORETask(soap, &soap_tmp___ns1__ResetVM_USCORETask, "-ns1:ResetVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ResetVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetVM_USCORETaskResponse->soap_get(soap, "ns1:ResetVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ShutdownGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ShutdownGuestRequestType *ns1__ShutdownGuest, _ns1__ShutdownGuestResponse *ns1__ShutdownGuestResponse)
{	struct __ns1__ShutdownGuest soap_tmp___ns1__ShutdownGuest;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ShutdownGuest.ns1__ShutdownGuest = ns1__ShutdownGuest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ShutdownGuest(soap, &soap_tmp___ns1__ShutdownGuest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ShutdownGuest(soap, &soap_tmp___ns1__ShutdownGuest, "-ns1:ShutdownGuest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ShutdownGuest(soap, &soap_tmp___ns1__ShutdownGuest, "-ns1:ShutdownGuest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ShutdownGuestResponse)
		return soap_closesock(soap);
	ns1__ShutdownGuestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ShutdownGuestResponse->soap_get(soap, "ns1:ShutdownGuestResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RebootGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RebootGuestRequestType *ns1__RebootGuest, _ns1__RebootGuestResponse *ns1__RebootGuestResponse)
{	struct __ns1__RebootGuest soap_tmp___ns1__RebootGuest;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RebootGuest.ns1__RebootGuest = ns1__RebootGuest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RebootGuest(soap, &soap_tmp___ns1__RebootGuest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RebootGuest(soap, &soap_tmp___ns1__RebootGuest, "-ns1:RebootGuest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RebootGuest(soap, &soap_tmp___ns1__RebootGuest, "-ns1:RebootGuest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RebootGuestResponse)
		return soap_closesock(soap);
	ns1__RebootGuestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RebootGuestResponse->soap_get(soap, "ns1:RebootGuestResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StandbyGuest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StandbyGuestRequestType *ns1__StandbyGuest, _ns1__StandbyGuestResponse *ns1__StandbyGuestResponse)
{	struct __ns1__StandbyGuest soap_tmp___ns1__StandbyGuest;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StandbyGuest.ns1__StandbyGuest = ns1__StandbyGuest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StandbyGuest(soap, &soap_tmp___ns1__StandbyGuest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StandbyGuest(soap, &soap_tmp___ns1__StandbyGuest, "-ns1:StandbyGuest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StandbyGuest(soap, &soap_tmp___ns1__StandbyGuest, "-ns1:StandbyGuest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StandbyGuestResponse)
		return soap_closesock(soap);
	ns1__StandbyGuestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StandbyGuestResponse->soap_get(soap, "ns1:StandbyGuestResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AnswerVM(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AnswerVMRequestType *ns1__AnswerVM, _ns1__AnswerVMResponse *ns1__AnswerVMResponse)
{	struct __ns1__AnswerVM soap_tmp___ns1__AnswerVM;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AnswerVM.ns1__AnswerVM = ns1__AnswerVM;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AnswerVM(soap, &soap_tmp___ns1__AnswerVM);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AnswerVM(soap, &soap_tmp___ns1__AnswerVM, "-ns1:AnswerVM", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AnswerVM(soap, &soap_tmp___ns1__AnswerVM, "-ns1:AnswerVM", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AnswerVMResponse)
		return soap_closesock(soap);
	ns1__AnswerVMResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AnswerVMResponse->soap_get(soap, "ns1:AnswerVMResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CustomizeVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CustomizeVMRequestType *ns1__CustomizeVM_USCORETask, _ns1__CustomizeVM_USCORETaskResponse *ns1__CustomizeVM_USCORETaskResponse)
{	struct __ns1__CustomizeVM_USCORETask soap_tmp___ns1__CustomizeVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CustomizeVM_USCORETask.ns1__CustomizeVM_USCORETask = ns1__CustomizeVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CustomizeVM_USCORETask(soap, &soap_tmp___ns1__CustomizeVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CustomizeVM_USCORETask(soap, &soap_tmp___ns1__CustomizeVM_USCORETask, "-ns1:CustomizeVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CustomizeVM_USCORETask(soap, &soap_tmp___ns1__CustomizeVM_USCORETask, "-ns1:CustomizeVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CustomizeVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CustomizeVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CustomizeVM_USCORETaskResponse->soap_get(soap, "ns1:CustomizeVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCustomizationSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCustomizationSpecRequestType *ns1__CheckCustomizationSpec, _ns1__CheckCustomizationSpecResponse *ns1__CheckCustomizationSpecResponse)
{	struct __ns1__CheckCustomizationSpec soap_tmp___ns1__CheckCustomizationSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckCustomizationSpec.ns1__CheckCustomizationSpec = ns1__CheckCustomizationSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckCustomizationSpec(soap, &soap_tmp___ns1__CheckCustomizationSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckCustomizationSpec(soap, &soap_tmp___ns1__CheckCustomizationSpec, "-ns1:CheckCustomizationSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckCustomizationSpec(soap, &soap_tmp___ns1__CheckCustomizationSpec, "-ns1:CheckCustomizationSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckCustomizationSpecResponse)
		return soap_closesock(soap);
	ns1__CheckCustomizationSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckCustomizationSpecResponse->soap_get(soap, "ns1:CheckCustomizationSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MigrateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MigrateVMRequestType *ns1__MigrateVM_USCORETask, _ns1__MigrateVM_USCORETaskResponse *ns1__MigrateVM_USCORETaskResponse)
{	struct __ns1__MigrateVM_USCORETask soap_tmp___ns1__MigrateVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MigrateVM_USCORETask.ns1__MigrateVM_USCORETask = ns1__MigrateVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MigrateVM_USCORETask(soap, &soap_tmp___ns1__MigrateVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MigrateVM_USCORETask(soap, &soap_tmp___ns1__MigrateVM_USCORETask, "-ns1:MigrateVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MigrateVM_USCORETask(soap, &soap_tmp___ns1__MigrateVM_USCORETask, "-ns1:MigrateVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MigrateVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MigrateVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MigrateVM_USCORETaskResponse->soap_get(soap, "ns1:MigrateVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RelocateVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RelocateVMRequestType *ns1__RelocateVM_USCORETask, _ns1__RelocateVM_USCORETaskResponse *ns1__RelocateVM_USCORETaskResponse)
{	struct __ns1__RelocateVM_USCORETask soap_tmp___ns1__RelocateVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RelocateVM_USCORETask.ns1__RelocateVM_USCORETask = ns1__RelocateVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RelocateVM_USCORETask(soap, &soap_tmp___ns1__RelocateVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RelocateVM_USCORETask(soap, &soap_tmp___ns1__RelocateVM_USCORETask, "-ns1:RelocateVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RelocateVM_USCORETask(soap, &soap_tmp___ns1__RelocateVM_USCORETask, "-ns1:RelocateVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RelocateVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RelocateVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RelocateVM_USCORETaskResponse->soap_get(soap, "ns1:RelocateVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloneVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloneVMRequestType *ns1__CloneVM_USCORETask, _ns1__CloneVM_USCORETaskResponse *ns1__CloneVM_USCORETaskResponse)
{	struct __ns1__CloneVM_USCORETask soap_tmp___ns1__CloneVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CloneVM_USCORETask.ns1__CloneVM_USCORETask = ns1__CloneVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CloneVM_USCORETask(soap, &soap_tmp___ns1__CloneVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CloneVM_USCORETask(soap, &soap_tmp___ns1__CloneVM_USCORETask, "-ns1:CloneVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CloneVM_USCORETask(soap, &soap_tmp___ns1__CloneVM_USCORETask, "-ns1:CloneVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CloneVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CloneVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CloneVM_USCORETaskResponse->soap_get(soap, "ns1:CloneVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportVm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportVmRequestType *ns1__ExportVm, _ns1__ExportVmResponse *ns1__ExportVmResponse)
{	struct __ns1__ExportVm soap_tmp___ns1__ExportVm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExportVm.ns1__ExportVm = ns1__ExportVm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExportVm(soap, &soap_tmp___ns1__ExportVm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExportVm(soap, &soap_tmp___ns1__ExportVm, "-ns1:ExportVm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExportVm(soap, &soap_tmp___ns1__ExportVm, "-ns1:ExportVm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExportVmResponse)
		return soap_closesock(soap);
	ns1__ExportVmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExportVmResponse->soap_get(soap, "ns1:ExportVmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MarkAsTemplate(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MarkAsTemplateRequestType *ns1__MarkAsTemplate, _ns1__MarkAsTemplateResponse *ns1__MarkAsTemplateResponse)
{	struct __ns1__MarkAsTemplate soap_tmp___ns1__MarkAsTemplate;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MarkAsTemplate.ns1__MarkAsTemplate = ns1__MarkAsTemplate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MarkAsTemplate(soap, &soap_tmp___ns1__MarkAsTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MarkAsTemplate(soap, &soap_tmp___ns1__MarkAsTemplate, "-ns1:MarkAsTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MarkAsTemplate(soap, &soap_tmp___ns1__MarkAsTemplate, "-ns1:MarkAsTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MarkAsTemplateResponse)
		return soap_closesock(soap);
	ns1__MarkAsTemplateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MarkAsTemplateResponse->soap_get(soap, "ns1:MarkAsTemplateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MarkAsVirtualMachine(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MarkAsVirtualMachineRequestType *ns1__MarkAsVirtualMachine, _ns1__MarkAsVirtualMachineResponse *ns1__MarkAsVirtualMachineResponse)
{	struct __ns1__MarkAsVirtualMachine soap_tmp___ns1__MarkAsVirtualMachine;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MarkAsVirtualMachine.ns1__MarkAsVirtualMachine = ns1__MarkAsVirtualMachine;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MarkAsVirtualMachine(soap, &soap_tmp___ns1__MarkAsVirtualMachine);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MarkAsVirtualMachine(soap, &soap_tmp___ns1__MarkAsVirtualMachine, "-ns1:MarkAsVirtualMachine", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MarkAsVirtualMachine(soap, &soap_tmp___ns1__MarkAsVirtualMachine, "-ns1:MarkAsVirtualMachine", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MarkAsVirtualMachineResponse)
		return soap_closesock(soap);
	ns1__MarkAsVirtualMachineResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MarkAsVirtualMachineResponse->soap_get(soap, "ns1:MarkAsVirtualMachineResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnregisterVM(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnregisterVMRequestType *ns1__UnregisterVM, _ns1__UnregisterVMResponse *ns1__UnregisterVMResponse)
{	struct __ns1__UnregisterVM soap_tmp___ns1__UnregisterVM;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnregisterVM.ns1__UnregisterVM = ns1__UnregisterVM;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnregisterVM(soap, &soap_tmp___ns1__UnregisterVM);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnregisterVM(soap, &soap_tmp___ns1__UnregisterVM, "-ns1:UnregisterVM", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnregisterVM(soap, &soap_tmp___ns1__UnregisterVM, "-ns1:UnregisterVM", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnregisterVMResponse)
		return soap_closesock(soap);
	ns1__UnregisterVMResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnregisterVMResponse->soap_get(soap, "ns1:UnregisterVMResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetGuestInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetGuestInformationRequestType *ns1__ResetGuestInformation, _ns1__ResetGuestInformationResponse *ns1__ResetGuestInformationResponse)
{	struct __ns1__ResetGuestInformation soap_tmp___ns1__ResetGuestInformation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetGuestInformation.ns1__ResetGuestInformation = ns1__ResetGuestInformation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetGuestInformation(soap, &soap_tmp___ns1__ResetGuestInformation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetGuestInformation(soap, &soap_tmp___ns1__ResetGuestInformation, "-ns1:ResetGuestInformation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetGuestInformation(soap, &soap_tmp___ns1__ResetGuestInformation, "-ns1:ResetGuestInformation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetGuestInformationResponse)
		return soap_closesock(soap);
	ns1__ResetGuestInformationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetGuestInformationResponse->soap_get(soap, "ns1:ResetGuestInformationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountToolsInstaller(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MountToolsInstallerRequestType *ns1__MountToolsInstaller, _ns1__MountToolsInstallerResponse *ns1__MountToolsInstallerResponse)
{	struct __ns1__MountToolsInstaller soap_tmp___ns1__MountToolsInstaller;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MountToolsInstaller.ns1__MountToolsInstaller = ns1__MountToolsInstaller;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MountToolsInstaller(soap, &soap_tmp___ns1__MountToolsInstaller);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MountToolsInstaller(soap, &soap_tmp___ns1__MountToolsInstaller, "-ns1:MountToolsInstaller", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MountToolsInstaller(soap, &soap_tmp___ns1__MountToolsInstaller, "-ns1:MountToolsInstaller", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MountToolsInstallerResponse)
		return soap_closesock(soap);
	ns1__MountToolsInstallerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MountToolsInstallerResponse->soap_get(soap, "ns1:MountToolsInstallerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnmountToolsInstaller(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnmountToolsInstallerRequestType *ns1__UnmountToolsInstaller, _ns1__UnmountToolsInstallerResponse *ns1__UnmountToolsInstallerResponse)
{	struct __ns1__UnmountToolsInstaller soap_tmp___ns1__UnmountToolsInstaller;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnmountToolsInstaller.ns1__UnmountToolsInstaller = ns1__UnmountToolsInstaller;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnmountToolsInstaller(soap, &soap_tmp___ns1__UnmountToolsInstaller);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnmountToolsInstaller(soap, &soap_tmp___ns1__UnmountToolsInstaller, "-ns1:UnmountToolsInstaller", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnmountToolsInstaller(soap, &soap_tmp___ns1__UnmountToolsInstaller, "-ns1:UnmountToolsInstaller", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnmountToolsInstallerResponse)
		return soap_closesock(soap);
	ns1__UnmountToolsInstallerResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnmountToolsInstallerResponse->soap_get(soap, "ns1:UnmountToolsInstallerResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeTools_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeToolsRequestType *ns1__UpgradeTools_USCORETask, _ns1__UpgradeTools_USCORETaskResponse *ns1__UpgradeTools_USCORETaskResponse)
{	struct __ns1__UpgradeTools_USCORETask soap_tmp___ns1__UpgradeTools_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpgradeTools_USCORETask.ns1__UpgradeTools_USCORETask = ns1__UpgradeTools_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpgradeTools_USCORETask(soap, &soap_tmp___ns1__UpgradeTools_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpgradeTools_USCORETask(soap, &soap_tmp___ns1__UpgradeTools_USCORETask, "-ns1:UpgradeTools_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpgradeTools_USCORETask(soap, &soap_tmp___ns1__UpgradeTools_USCORETask, "-ns1:UpgradeTools_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpgradeTools_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__UpgradeTools_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpgradeTools_USCORETaskResponse->soap_get(soap, "ns1:UpgradeTools_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireMksTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireMksTicketRequestType *ns1__AcquireMksTicket, _ns1__AcquireMksTicketResponse *ns1__AcquireMksTicketResponse)
{	struct __ns1__AcquireMksTicket soap_tmp___ns1__AcquireMksTicket;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcquireMksTicket.ns1__AcquireMksTicket = ns1__AcquireMksTicket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcquireMksTicket(soap, &soap_tmp___ns1__AcquireMksTicket);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcquireMksTicket(soap, &soap_tmp___ns1__AcquireMksTicket, "-ns1:AcquireMksTicket", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcquireMksTicket(soap, &soap_tmp___ns1__AcquireMksTicket, "-ns1:AcquireMksTicket", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcquireMksTicketResponse)
		return soap_closesock(soap);
	ns1__AcquireMksTicketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcquireMksTicketResponse->soap_get(soap, "ns1:AcquireMksTicketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcquireTicket(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcquireTicketRequestType *ns1__AcquireTicket, _ns1__AcquireTicketResponse *ns1__AcquireTicketResponse)
{	struct __ns1__AcquireTicket soap_tmp___ns1__AcquireTicket;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcquireTicket.ns1__AcquireTicket = ns1__AcquireTicket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcquireTicket(soap, &soap_tmp___ns1__AcquireTicket);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcquireTicket(soap, &soap_tmp___ns1__AcquireTicket, "-ns1:AcquireTicket", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcquireTicket(soap, &soap_tmp___ns1__AcquireTicket, "-ns1:AcquireTicket", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcquireTicketResponse)
		return soap_closesock(soap);
	ns1__AcquireTicketResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcquireTicketResponse->soap_get(soap, "ns1:AcquireTicketResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetScreenResolution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetScreenResolutionRequestType *ns1__SetScreenResolution, _ns1__SetScreenResolutionResponse *ns1__SetScreenResolutionResponse)
{	struct __ns1__SetScreenResolution soap_tmp___ns1__SetScreenResolution;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetScreenResolution.ns1__SetScreenResolution = ns1__SetScreenResolution;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetScreenResolution(soap, &soap_tmp___ns1__SetScreenResolution);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetScreenResolution(soap, &soap_tmp___ns1__SetScreenResolution, "-ns1:SetScreenResolution", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetScreenResolution(soap, &soap_tmp___ns1__SetScreenResolution, "-ns1:SetScreenResolution", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetScreenResolutionResponse)
		return soap_closesock(soap);
	ns1__SetScreenResolutionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetScreenResolutionResponse->soap_get(soap, "ns1:SetScreenResolutionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DefragmentAllDisks(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DefragmentAllDisksRequestType *ns1__DefragmentAllDisks, _ns1__DefragmentAllDisksResponse *ns1__DefragmentAllDisksResponse)
{	struct __ns1__DefragmentAllDisks soap_tmp___ns1__DefragmentAllDisks;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DefragmentAllDisks.ns1__DefragmentAllDisks = ns1__DefragmentAllDisks;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DefragmentAllDisks(soap, &soap_tmp___ns1__DefragmentAllDisks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DefragmentAllDisks(soap, &soap_tmp___ns1__DefragmentAllDisks, "-ns1:DefragmentAllDisks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DefragmentAllDisks(soap, &soap_tmp___ns1__DefragmentAllDisks, "-ns1:DefragmentAllDisks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DefragmentAllDisksResponse)
		return soap_closesock(soap);
	ns1__DefragmentAllDisksResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DefragmentAllDisksResponse->soap_get(soap, "ns1:DefragmentAllDisksResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateSecondaryVMRequestType *ns1__CreateSecondaryVM_USCORETask, _ns1__CreateSecondaryVM_USCORETaskResponse *ns1__CreateSecondaryVM_USCORETaskResponse)
{	struct __ns1__CreateSecondaryVM_USCORETask soap_tmp___ns1__CreateSecondaryVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateSecondaryVM_USCORETask.ns1__CreateSecondaryVM_USCORETask = ns1__CreateSecondaryVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateSecondaryVM_USCORETask(soap, &soap_tmp___ns1__CreateSecondaryVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateSecondaryVM_USCORETask(soap, &soap_tmp___ns1__CreateSecondaryVM_USCORETask, "-ns1:CreateSecondaryVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateSecondaryVM_USCORETask(soap, &soap_tmp___ns1__CreateSecondaryVM_USCORETask, "-ns1:CreateSecondaryVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateSecondaryVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateSecondaryVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateSecondaryVM_USCORETaskResponse->soap_get(soap, "ns1:CreateSecondaryVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TurnOffFaultToleranceForVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TurnOffFaultToleranceForVMRequestType *ns1__TurnOffFaultToleranceForVM_USCORETask, _ns1__TurnOffFaultToleranceForVM_USCORETaskResponse *ns1__TurnOffFaultToleranceForVM_USCORETaskResponse)
{	struct __ns1__TurnOffFaultToleranceForVM_USCORETask soap_tmp___ns1__TurnOffFaultToleranceForVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TurnOffFaultToleranceForVM_USCORETask.ns1__TurnOffFaultToleranceForVM_USCORETask = ns1__TurnOffFaultToleranceForVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TurnOffFaultToleranceForVM_USCORETask(soap, &soap_tmp___ns1__TurnOffFaultToleranceForVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TurnOffFaultToleranceForVM_USCORETask(soap, &soap_tmp___ns1__TurnOffFaultToleranceForVM_USCORETask, "-ns1:TurnOffFaultToleranceForVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TurnOffFaultToleranceForVM_USCORETask(soap, &soap_tmp___ns1__TurnOffFaultToleranceForVM_USCORETask, "-ns1:TurnOffFaultToleranceForVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TurnOffFaultToleranceForVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__TurnOffFaultToleranceForVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TurnOffFaultToleranceForVM_USCORETaskResponse->soap_get(soap, "ns1:TurnOffFaultToleranceForVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MakePrimaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__MakePrimaryVMRequestType *ns1__MakePrimaryVM_USCORETask, _ns1__MakePrimaryVM_USCORETaskResponse *ns1__MakePrimaryVM_USCORETaskResponse)
{	struct __ns1__MakePrimaryVM_USCORETask soap_tmp___ns1__MakePrimaryVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MakePrimaryVM_USCORETask.ns1__MakePrimaryVM_USCORETask = ns1__MakePrimaryVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__MakePrimaryVM_USCORETask(soap, &soap_tmp___ns1__MakePrimaryVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MakePrimaryVM_USCORETask(soap, &soap_tmp___ns1__MakePrimaryVM_USCORETask, "-ns1:MakePrimaryVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MakePrimaryVM_USCORETask(soap, &soap_tmp___ns1__MakePrimaryVM_USCORETask, "-ns1:MakePrimaryVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MakePrimaryVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__MakePrimaryVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MakePrimaryVM_USCORETaskResponse->soap_get(soap, "ns1:MakePrimaryVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TerminateFaultTolerantVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__TerminateFaultTolerantVMRequestType *ns1__TerminateFaultTolerantVM_USCORETask, _ns1__TerminateFaultTolerantVM_USCORETaskResponse *ns1__TerminateFaultTolerantVM_USCORETaskResponse)
{	struct __ns1__TerminateFaultTolerantVM_USCORETask soap_tmp___ns1__TerminateFaultTolerantVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TerminateFaultTolerantVM_USCORETask.ns1__TerminateFaultTolerantVM_USCORETask = ns1__TerminateFaultTolerantVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TerminateFaultTolerantVM_USCORETask(soap, &soap_tmp___ns1__TerminateFaultTolerantVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TerminateFaultTolerantVM_USCORETask(soap, &soap_tmp___ns1__TerminateFaultTolerantVM_USCORETask, "-ns1:TerminateFaultTolerantVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TerminateFaultTolerantVM_USCORETask(soap, &soap_tmp___ns1__TerminateFaultTolerantVM_USCORETask, "-ns1:TerminateFaultTolerantVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TerminateFaultTolerantVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__TerminateFaultTolerantVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TerminateFaultTolerantVM_USCORETaskResponse->soap_get(soap, "ns1:TerminateFaultTolerantVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableSecondaryVMRequestType *ns1__DisableSecondaryVM_USCORETask, _ns1__DisableSecondaryVM_USCORETaskResponse *ns1__DisableSecondaryVM_USCORETaskResponse)
{	struct __ns1__DisableSecondaryVM_USCORETask soap_tmp___ns1__DisableSecondaryVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisableSecondaryVM_USCORETask.ns1__DisableSecondaryVM_USCORETask = ns1__DisableSecondaryVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__DisableSecondaryVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__DisableSecondaryVM_USCORETask, "-ns1:DisableSecondaryVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__DisableSecondaryVM_USCORETask, "-ns1:DisableSecondaryVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisableSecondaryVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__DisableSecondaryVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisableSecondaryVM_USCORETaskResponse->soap_get(soap, "ns1:DisableSecondaryVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableSecondaryVM_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableSecondaryVMRequestType *ns1__EnableSecondaryVM_USCORETask, _ns1__EnableSecondaryVM_USCORETaskResponse *ns1__EnableSecondaryVM_USCORETaskResponse)
{	struct __ns1__EnableSecondaryVM_USCORETask soap_tmp___ns1__EnableSecondaryVM_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableSecondaryVM_USCORETask.ns1__EnableSecondaryVM_USCORETask = ns1__EnableSecondaryVM_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__EnableSecondaryVM_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__EnableSecondaryVM_USCORETask, "-ns1:EnableSecondaryVM_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableSecondaryVM_USCORETask(soap, &soap_tmp___ns1__EnableSecondaryVM_USCORETask, "-ns1:EnableSecondaryVM_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableSecondaryVM_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__EnableSecondaryVM_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableSecondaryVM_USCORETaskResponse->soap_get(soap, "ns1:EnableSecondaryVM_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetDisplayTopology(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetDisplayTopologyRequestType *ns1__SetDisplayTopology, _ns1__SetDisplayTopologyResponse *ns1__SetDisplayTopologyResponse)
{	struct __ns1__SetDisplayTopology soap_tmp___ns1__SetDisplayTopology;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetDisplayTopology.ns1__SetDisplayTopology = ns1__SetDisplayTopology;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetDisplayTopology(soap, &soap_tmp___ns1__SetDisplayTopology);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetDisplayTopology(soap, &soap_tmp___ns1__SetDisplayTopology, "-ns1:SetDisplayTopology", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetDisplayTopology(soap, &soap_tmp___ns1__SetDisplayTopology, "-ns1:SetDisplayTopology", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetDisplayTopologyResponse)
		return soap_closesock(soap);
	ns1__SetDisplayTopologyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetDisplayTopologyResponse->soap_get(soap, "ns1:SetDisplayTopologyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartRecording_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartRecordingRequestType *ns1__StartRecording_USCORETask, _ns1__StartRecording_USCORETaskResponse *ns1__StartRecording_USCORETaskResponse)
{	struct __ns1__StartRecording_USCORETask soap_tmp___ns1__StartRecording_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StartRecording_USCORETask.ns1__StartRecording_USCORETask = ns1__StartRecording_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StartRecording_USCORETask(soap, &soap_tmp___ns1__StartRecording_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StartRecording_USCORETask(soap, &soap_tmp___ns1__StartRecording_USCORETask, "-ns1:StartRecording_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StartRecording_USCORETask(soap, &soap_tmp___ns1__StartRecording_USCORETask, "-ns1:StartRecording_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StartRecording_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__StartRecording_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartRecording_USCORETaskResponse->soap_get(soap, "ns1:StartRecording_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopRecording_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopRecordingRequestType *ns1__StopRecording_USCORETask, _ns1__StopRecording_USCORETaskResponse *ns1__StopRecording_USCORETaskResponse)
{	struct __ns1__StopRecording_USCORETask soap_tmp___ns1__StopRecording_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StopRecording_USCORETask.ns1__StopRecording_USCORETask = ns1__StopRecording_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StopRecording_USCORETask(soap, &soap_tmp___ns1__StopRecording_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StopRecording_USCORETask(soap, &soap_tmp___ns1__StopRecording_USCORETask, "-ns1:StopRecording_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StopRecording_USCORETask(soap, &soap_tmp___ns1__StopRecording_USCORETask, "-ns1:StopRecording_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StopRecording_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__StopRecording_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopRecording_USCORETaskResponse->soap_get(soap, "ns1:StopRecording_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartReplaying_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartReplayingRequestType *ns1__StartReplaying_USCORETask, _ns1__StartReplaying_USCORETaskResponse *ns1__StartReplaying_USCORETaskResponse)
{	struct __ns1__StartReplaying_USCORETask soap_tmp___ns1__StartReplaying_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StartReplaying_USCORETask.ns1__StartReplaying_USCORETask = ns1__StartReplaying_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StartReplaying_USCORETask(soap, &soap_tmp___ns1__StartReplaying_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StartReplaying_USCORETask(soap, &soap_tmp___ns1__StartReplaying_USCORETask, "-ns1:StartReplaying_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StartReplaying_USCORETask(soap, &soap_tmp___ns1__StartReplaying_USCORETask, "-ns1:StartReplaying_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StartReplaying_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__StartReplaying_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartReplaying_USCORETaskResponse->soap_get(soap, "ns1:StartReplaying_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopReplaying_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopReplayingRequestType *ns1__StopReplaying_USCORETask, _ns1__StopReplaying_USCORETaskResponse *ns1__StopReplaying_USCORETaskResponse)
{	struct __ns1__StopReplaying_USCORETask soap_tmp___ns1__StopReplaying_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StopReplaying_USCORETask.ns1__StopReplaying_USCORETask = ns1__StopReplaying_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StopReplaying_USCORETask(soap, &soap_tmp___ns1__StopReplaying_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StopReplaying_USCORETask(soap, &soap_tmp___ns1__StopReplaying_USCORETask, "-ns1:StopReplaying_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StopReplaying_USCORETask(soap, &soap_tmp___ns1__StopReplaying_USCORETask, "-ns1:StopReplaying_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StopReplaying_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__StopReplaying_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopReplaying_USCORETaskResponse->soap_get(soap, "ns1:StopReplaying_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PromoteDisks_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PromoteDisksRequestType *ns1__PromoteDisks_USCORETask, _ns1__PromoteDisks_USCORETaskResponse *ns1__PromoteDisks_USCORETaskResponse)
{	struct __ns1__PromoteDisks_USCORETask soap_tmp___ns1__PromoteDisks_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PromoteDisks_USCORETask.ns1__PromoteDisks_USCORETask = ns1__PromoteDisks_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PromoteDisks_USCORETask(soap, &soap_tmp___ns1__PromoteDisks_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PromoteDisks_USCORETask(soap, &soap_tmp___ns1__PromoteDisks_USCORETask, "-ns1:PromoteDisks_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PromoteDisks_USCORETask(soap, &soap_tmp___ns1__PromoteDisks_USCORETask, "-ns1:PromoteDisks_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PromoteDisks_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__PromoteDisks_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PromoteDisks_USCORETaskResponse->soap_get(soap, "ns1:PromoteDisks_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateScreenshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateScreenshotRequestType *ns1__CreateScreenshot_USCORETask, _ns1__CreateScreenshot_USCORETaskResponse *ns1__CreateScreenshot_USCORETaskResponse)
{	struct __ns1__CreateScreenshot_USCORETask soap_tmp___ns1__CreateScreenshot_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateScreenshot_USCORETask.ns1__CreateScreenshot_USCORETask = ns1__CreateScreenshot_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateScreenshot_USCORETask(soap, &soap_tmp___ns1__CreateScreenshot_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateScreenshot_USCORETask(soap, &soap_tmp___ns1__CreateScreenshot_USCORETask, "-ns1:CreateScreenshot_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateScreenshot_USCORETask(soap, &soap_tmp___ns1__CreateScreenshot_USCORETask, "-ns1:CreateScreenshot_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateScreenshot_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CreateScreenshot_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateScreenshot_USCORETaskResponse->soap_get(soap, "ns1:CreateScreenshot_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryChangedDiskAreas(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryChangedDiskAreasRequestType *ns1__QueryChangedDiskAreas, _ns1__QueryChangedDiskAreasResponse *ns1__QueryChangedDiskAreasResponse)
{	struct __ns1__QueryChangedDiskAreas soap_tmp___ns1__QueryChangedDiskAreas;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryChangedDiskAreas.ns1__QueryChangedDiskAreas = ns1__QueryChangedDiskAreas;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryChangedDiskAreas(soap, &soap_tmp___ns1__QueryChangedDiskAreas);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryChangedDiskAreas(soap, &soap_tmp___ns1__QueryChangedDiskAreas, "-ns1:QueryChangedDiskAreas", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryChangedDiskAreas(soap, &soap_tmp___ns1__QueryChangedDiskAreas, "-ns1:QueryChangedDiskAreas", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryChangedDiskAreasResponse)
		return soap_closesock(soap);
	ns1__QueryChangedDiskAreasResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryChangedDiskAreasResponse->soap_get(soap, "ns1:QueryChangedDiskAreasResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnownedFiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnownedFilesRequestType *ns1__QueryUnownedFiles, _ns1__QueryUnownedFilesResponse *ns1__QueryUnownedFilesResponse)
{	struct __ns1__QueryUnownedFiles soap_tmp___ns1__QueryUnownedFiles;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryUnownedFiles.ns1__QueryUnownedFiles = ns1__QueryUnownedFiles;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryUnownedFiles(soap, &soap_tmp___ns1__QueryUnownedFiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryUnownedFiles(soap, &soap_tmp___ns1__QueryUnownedFiles, "-ns1:QueryUnownedFiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryUnownedFiles(soap, &soap_tmp___ns1__QueryUnownedFiles, "-ns1:QueryUnownedFiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryUnownedFilesResponse)
		return soap_closesock(soap);
	ns1__QueryUnownedFilesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryUnownedFilesResponse->soap_get(soap, "ns1:QueryUnownedFilesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__reloadVirtualMachineFromPath_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__reloadVirtualMachineFromPathRequestType *ns1__reloadVirtualMachineFromPath_USCORETask, _ns1__reloadVirtualMachineFromPath_USCORETaskResponse *ns1__reloadVirtualMachineFromPath_USCORETaskResponse)
{	struct __ns1__reloadVirtualMachineFromPath_USCORETask soap_tmp___ns1__reloadVirtualMachineFromPath_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__reloadVirtualMachineFromPath_USCORETask.ns1__reloadVirtualMachineFromPath_USCORETask = ns1__reloadVirtualMachineFromPath_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__reloadVirtualMachineFromPath_USCORETask(soap, &soap_tmp___ns1__reloadVirtualMachineFromPath_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__reloadVirtualMachineFromPath_USCORETask(soap, &soap_tmp___ns1__reloadVirtualMachineFromPath_USCORETask, "-ns1:reloadVirtualMachineFromPath_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__reloadVirtualMachineFromPath_USCORETask(soap, &soap_tmp___ns1__reloadVirtualMachineFromPath_USCORETask, "-ns1:reloadVirtualMachineFromPath_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__reloadVirtualMachineFromPath_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__reloadVirtualMachineFromPath_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__reloadVirtualMachineFromPath_USCORETaskResponse->soap_get(soap, "ns1:reloadVirtualMachineFromPath_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryFaultToleranceCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryFaultToleranceCompatibilityRequestType *ns1__QueryFaultToleranceCompatibility, _ns1__QueryFaultToleranceCompatibilityResponse *ns1__QueryFaultToleranceCompatibilityResponse)
{	struct __ns1__QueryFaultToleranceCompatibility soap_tmp___ns1__QueryFaultToleranceCompatibility;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryFaultToleranceCompatibility.ns1__QueryFaultToleranceCompatibility = ns1__QueryFaultToleranceCompatibility;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryFaultToleranceCompatibility(soap, &soap_tmp___ns1__QueryFaultToleranceCompatibility);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryFaultToleranceCompatibility(soap, &soap_tmp___ns1__QueryFaultToleranceCompatibility, "-ns1:QueryFaultToleranceCompatibility", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryFaultToleranceCompatibility(soap, &soap_tmp___ns1__QueryFaultToleranceCompatibility, "-ns1:QueryFaultToleranceCompatibility", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryFaultToleranceCompatibilityResponse)
		return soap_closesock(soap);
	ns1__QueryFaultToleranceCompatibilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryFaultToleranceCompatibilityResponse->soap_get(soap, "ns1:QueryFaultToleranceCompatibilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveAlarmRequestType *ns1__RemoveAlarm, _ns1__RemoveAlarmResponse *ns1__RemoveAlarmResponse)
{	struct __ns1__RemoveAlarm soap_tmp___ns1__RemoveAlarm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveAlarm.ns1__RemoveAlarm = ns1__RemoveAlarm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveAlarm(soap, &soap_tmp___ns1__RemoveAlarm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveAlarm(soap, &soap_tmp___ns1__RemoveAlarm, "-ns1:RemoveAlarm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveAlarm(soap, &soap_tmp___ns1__RemoveAlarm, "-ns1:RemoveAlarm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveAlarmResponse)
		return soap_closesock(soap);
	ns1__RemoveAlarmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveAlarmResponse->soap_get(soap, "ns1:RemoveAlarmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureAlarmRequestType *ns1__ReconfigureAlarm, _ns1__ReconfigureAlarmResponse *ns1__ReconfigureAlarmResponse)
{	struct __ns1__ReconfigureAlarm soap_tmp___ns1__ReconfigureAlarm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureAlarm.ns1__ReconfigureAlarm = ns1__ReconfigureAlarm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureAlarm(soap, &soap_tmp___ns1__ReconfigureAlarm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureAlarm(soap, &soap_tmp___ns1__ReconfigureAlarm, "-ns1:ReconfigureAlarm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureAlarm(soap, &soap_tmp___ns1__ReconfigureAlarm, "-ns1:ReconfigureAlarm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureAlarmResponse)
		return soap_closesock(soap);
	ns1__ReconfigureAlarmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureAlarmResponse->soap_get(soap, "ns1:ReconfigureAlarmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateAlarmRequestType *ns1__CreateAlarm, _ns1__CreateAlarmResponse *ns1__CreateAlarmResponse)
{	struct __ns1__CreateAlarm soap_tmp___ns1__CreateAlarm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateAlarm.ns1__CreateAlarm = ns1__CreateAlarm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateAlarm(soap, &soap_tmp___ns1__CreateAlarm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateAlarm(soap, &soap_tmp___ns1__CreateAlarm, "-ns1:CreateAlarm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateAlarm(soap, &soap_tmp___ns1__CreateAlarm, "-ns1:CreateAlarm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateAlarmResponse)
		return soap_closesock(soap);
	ns1__CreateAlarmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateAlarmResponse->soap_get(soap, "ns1:CreateAlarmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetAlarmRequestType *ns1__GetAlarm, _ns1__GetAlarmResponse *ns1__GetAlarmResponse)
{	struct __ns1__GetAlarm soap_tmp___ns1__GetAlarm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAlarm.ns1__GetAlarm = ns1__GetAlarm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAlarm(soap, &soap_tmp___ns1__GetAlarm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAlarm(soap, &soap_tmp___ns1__GetAlarm, "-ns1:GetAlarm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAlarm(soap, &soap_tmp___ns1__GetAlarm, "-ns1:GetAlarm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAlarmResponse)
		return soap_closesock(soap);
	ns1__GetAlarmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAlarmResponse->soap_get(soap, "ns1:GetAlarmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AreAlarmActionsEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AreAlarmActionsEnabledRequestType *ns1__AreAlarmActionsEnabled, _ns1__AreAlarmActionsEnabledResponse *ns1__AreAlarmActionsEnabledResponse)
{	struct __ns1__AreAlarmActionsEnabled soap_tmp___ns1__AreAlarmActionsEnabled;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AreAlarmActionsEnabled.ns1__AreAlarmActionsEnabled = ns1__AreAlarmActionsEnabled;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AreAlarmActionsEnabled(soap, &soap_tmp___ns1__AreAlarmActionsEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AreAlarmActionsEnabled(soap, &soap_tmp___ns1__AreAlarmActionsEnabled, "-ns1:AreAlarmActionsEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AreAlarmActionsEnabled(soap, &soap_tmp___ns1__AreAlarmActionsEnabled, "-ns1:AreAlarmActionsEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AreAlarmActionsEnabledResponse)
		return soap_closesock(soap);
	ns1__AreAlarmActionsEnabledResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AreAlarmActionsEnabledResponse->soap_get(soap, "ns1:AreAlarmActionsEnabledResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableAlarmActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableAlarmActionsRequestType *ns1__EnableAlarmActions, _ns1__EnableAlarmActionsResponse *ns1__EnableAlarmActionsResponse)
{	struct __ns1__EnableAlarmActions soap_tmp___ns1__EnableAlarmActions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableAlarmActions.ns1__EnableAlarmActions = ns1__EnableAlarmActions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableAlarmActions(soap, &soap_tmp___ns1__EnableAlarmActions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableAlarmActions(soap, &soap_tmp___ns1__EnableAlarmActions, "-ns1:EnableAlarmActions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableAlarmActions(soap, &soap_tmp___ns1__EnableAlarmActions, "-ns1:EnableAlarmActions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableAlarmActionsResponse)
		return soap_closesock(soap);
	ns1__EnableAlarmActionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableAlarmActionsResponse->soap_get(soap, "ns1:EnableAlarmActionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarmState(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GetAlarmStateRequestType *ns1__GetAlarmState, _ns1__GetAlarmStateResponse *ns1__GetAlarmStateResponse)
{	struct __ns1__GetAlarmState soap_tmp___ns1__GetAlarmState;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAlarmState.ns1__GetAlarmState = ns1__GetAlarmState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAlarmState(soap, &soap_tmp___ns1__GetAlarmState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAlarmState(soap, &soap_tmp___ns1__GetAlarmState, "-ns1:GetAlarmState", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAlarmState(soap, &soap_tmp___ns1__GetAlarmState, "-ns1:GetAlarmState", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAlarmStateResponse)
		return soap_closesock(soap);
	ns1__GetAlarmStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAlarmStateResponse->soap_get(soap, "ns1:GetAlarmStateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AcknowledgeAlarm(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AcknowledgeAlarmRequestType *ns1__AcknowledgeAlarm, _ns1__AcknowledgeAlarmResponse *ns1__AcknowledgeAlarmResponse)
{	struct __ns1__AcknowledgeAlarm soap_tmp___ns1__AcknowledgeAlarm;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AcknowledgeAlarm.ns1__AcknowledgeAlarm = ns1__AcknowledgeAlarm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AcknowledgeAlarm(soap, &soap_tmp___ns1__AcknowledgeAlarm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AcknowledgeAlarm(soap, &soap_tmp___ns1__AcknowledgeAlarm, "-ns1:AcknowledgeAlarm", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AcknowledgeAlarm(soap, &soap_tmp___ns1__AcknowledgeAlarm, "-ns1:AcknowledgeAlarm", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AcknowledgeAlarmResponse)
		return soap_closesock(soap);
	ns1__AcknowledgeAlarmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AcknowledgeAlarmResponse->soap_get(soap, "ns1:AcknowledgeAlarmResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureDVPortgroup_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureDVPortgroupRequestType *ns1__ReconfigureDVPortgroup_USCORETask, _ns1__ReconfigureDVPortgroup_USCORETaskResponse *ns1__ReconfigureDVPortgroup_USCORETaskResponse)
{	struct __ns1__ReconfigureDVPortgroup_USCORETask soap_tmp___ns1__ReconfigureDVPortgroup_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureDVPortgroup_USCORETask.ns1__ReconfigureDVPortgroup_USCORETask = ns1__ReconfigureDVPortgroup_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureDVPortgroup_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPortgroup_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureDVPortgroup_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPortgroup_USCORETask, "-ns1:ReconfigureDVPortgroup_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureDVPortgroup_USCORETask(soap, &soap_tmp___ns1__ReconfigureDVPortgroup_USCORETask, "-ns1:ReconfigureDVPortgroup_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureDVPortgroup_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureDVPortgroup_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureDVPortgroup_USCORETaskResponse->soap_get(soap, "ns1:ReconfigureDVPortgroup_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableDvsSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableDvsSpecRequestType *ns1__QueryAvailableDvsSpec, _ns1__QueryAvailableDvsSpecResponse *ns1__QueryAvailableDvsSpecResponse)
{	struct __ns1__QueryAvailableDvsSpec soap_tmp___ns1__QueryAvailableDvsSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAvailableDvsSpec.ns1__QueryAvailableDvsSpec = ns1__QueryAvailableDvsSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAvailableDvsSpec(soap, &soap_tmp___ns1__QueryAvailableDvsSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAvailableDvsSpec(soap, &soap_tmp___ns1__QueryAvailableDvsSpec, "-ns1:QueryAvailableDvsSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAvailableDvsSpec(soap, &soap_tmp___ns1__QueryAvailableDvsSpec, "-ns1:QueryAvailableDvsSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAvailableDvsSpecResponse)
		return soap_closesock(soap);
	ns1__QueryAvailableDvsSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAvailableDvsSpecResponse->soap_get(soap, "ns1:QueryAvailableDvsSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryCompatibleHostForNewDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryCompatibleHostForNewDvsRequestType *ns1__QueryCompatibleHostForNewDvs, _ns1__QueryCompatibleHostForNewDvsResponse *ns1__QueryCompatibleHostForNewDvsResponse)
{	struct __ns1__QueryCompatibleHostForNewDvs soap_tmp___ns1__QueryCompatibleHostForNewDvs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryCompatibleHostForNewDvs.ns1__QueryCompatibleHostForNewDvs = ns1__QueryCompatibleHostForNewDvs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryCompatibleHostForNewDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForNewDvs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryCompatibleHostForNewDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForNewDvs, "-ns1:QueryCompatibleHostForNewDvs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryCompatibleHostForNewDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForNewDvs, "-ns1:QueryCompatibleHostForNewDvs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryCompatibleHostForNewDvsResponse)
		return soap_closesock(soap);
	ns1__QueryCompatibleHostForNewDvsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryCompatibleHostForNewDvsResponse->soap_get(soap, "ns1:QueryCompatibleHostForNewDvsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryCompatibleHostForExistingDvs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryCompatibleHostForExistingDvsRequestType *ns1__QueryCompatibleHostForExistingDvs, _ns1__QueryCompatibleHostForExistingDvsResponse *ns1__QueryCompatibleHostForExistingDvsResponse)
{	struct __ns1__QueryCompatibleHostForExistingDvs soap_tmp___ns1__QueryCompatibleHostForExistingDvs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryCompatibleHostForExistingDvs.ns1__QueryCompatibleHostForExistingDvs = ns1__QueryCompatibleHostForExistingDvs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryCompatibleHostForExistingDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForExistingDvs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryCompatibleHostForExistingDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForExistingDvs, "-ns1:QueryCompatibleHostForExistingDvs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryCompatibleHostForExistingDvs(soap, &soap_tmp___ns1__QueryCompatibleHostForExistingDvs, "-ns1:QueryCompatibleHostForExistingDvs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryCompatibleHostForExistingDvsResponse)
		return soap_closesock(soap);
	ns1__QueryCompatibleHostForExistingDvsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryCompatibleHostForExistingDvsResponse->soap_get(soap, "ns1:QueryCompatibleHostForExistingDvsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsCompatibleHostSpec(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsCompatibleHostSpecRequestType *ns1__QueryDvsCompatibleHostSpec, _ns1__QueryDvsCompatibleHostSpecResponse *ns1__QueryDvsCompatibleHostSpecResponse)
{	struct __ns1__QueryDvsCompatibleHostSpec soap_tmp___ns1__QueryDvsCompatibleHostSpec;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDvsCompatibleHostSpec.ns1__QueryDvsCompatibleHostSpec = ns1__QueryDvsCompatibleHostSpec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDvsCompatibleHostSpec(soap, &soap_tmp___ns1__QueryDvsCompatibleHostSpec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDvsCompatibleHostSpec(soap, &soap_tmp___ns1__QueryDvsCompatibleHostSpec, "-ns1:QueryDvsCompatibleHostSpec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDvsCompatibleHostSpec(soap, &soap_tmp___ns1__QueryDvsCompatibleHostSpec, "-ns1:QueryDvsCompatibleHostSpec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDvsCompatibleHostSpecResponse)
		return soap_closesock(soap);
	ns1__QueryDvsCompatibleHostSpecResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDvsCompatibleHostSpecResponse->soap_get(soap, "ns1:QueryDvsCompatibleHostSpecResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsFeatureCapability(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsFeatureCapabilityRequestType *ns1__QueryDvsFeatureCapability, _ns1__QueryDvsFeatureCapabilityResponse *ns1__QueryDvsFeatureCapabilityResponse)
{	struct __ns1__QueryDvsFeatureCapability soap_tmp___ns1__QueryDvsFeatureCapability;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDvsFeatureCapability.ns1__QueryDvsFeatureCapability = ns1__QueryDvsFeatureCapability;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDvsFeatureCapability(soap, &soap_tmp___ns1__QueryDvsFeatureCapability);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDvsFeatureCapability(soap, &soap_tmp___ns1__QueryDvsFeatureCapability, "-ns1:QueryDvsFeatureCapability", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDvsFeatureCapability(soap, &soap_tmp___ns1__QueryDvsFeatureCapability, "-ns1:QueryDvsFeatureCapability", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDvsFeatureCapabilityResponse)
		return soap_closesock(soap);
	ns1__QueryDvsFeatureCapabilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDvsFeatureCapabilityResponse->soap_get(soap, "ns1:QueryDvsFeatureCapabilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsByUuid(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsByUuidRequestType *ns1__QueryDvsByUuid, _ns1__QueryDvsByUuidResponse *ns1__QueryDvsByUuidResponse)
{	struct __ns1__QueryDvsByUuid soap_tmp___ns1__QueryDvsByUuid;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDvsByUuid.ns1__QueryDvsByUuid = ns1__QueryDvsByUuid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDvsByUuid(soap, &soap_tmp___ns1__QueryDvsByUuid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDvsByUuid(soap, &soap_tmp___ns1__QueryDvsByUuid, "-ns1:QueryDvsByUuid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDvsByUuid(soap, &soap_tmp___ns1__QueryDvsByUuid, "-ns1:QueryDvsByUuid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDvsByUuidResponse)
		return soap_closesock(soap);
	ns1__QueryDvsByUuidResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDvsByUuidResponse->soap_get(soap, "ns1:QueryDvsByUuidResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsConfigTarget(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsConfigTargetRequestType *ns1__QueryDvsConfigTarget, _ns1__QueryDvsConfigTargetResponse *ns1__QueryDvsConfigTargetResponse)
{	struct __ns1__QueryDvsConfigTarget soap_tmp___ns1__QueryDvsConfigTarget;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDvsConfigTarget.ns1__QueryDvsConfigTarget = ns1__QueryDvsConfigTarget;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDvsConfigTarget(soap, &soap_tmp___ns1__QueryDvsConfigTarget);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDvsConfigTarget(soap, &soap_tmp___ns1__QueryDvsConfigTarget, "-ns1:QueryDvsConfigTarget", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDvsConfigTarget(soap, &soap_tmp___ns1__QueryDvsConfigTarget, "-ns1:QueryDvsConfigTarget", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDvsConfigTargetResponse)
		return soap_closesock(soap);
	ns1__QueryDvsConfigTargetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDvsConfigTargetResponse->soap_get(soap, "ns1:QueryDvsConfigTargetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDvsCheckCompatibility(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDvsCheckCompatibilityRequestType *ns1__QueryDvsCheckCompatibility, _ns1__QueryDvsCheckCompatibilityResponse *ns1__QueryDvsCheckCompatibilityResponse)
{	struct __ns1__QueryDvsCheckCompatibility soap_tmp___ns1__QueryDvsCheckCompatibility;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDvsCheckCompatibility.ns1__QueryDvsCheckCompatibility = ns1__QueryDvsCheckCompatibility;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDvsCheckCompatibility(soap, &soap_tmp___ns1__QueryDvsCheckCompatibility);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDvsCheckCompatibility(soap, &soap_tmp___ns1__QueryDvsCheckCompatibility, "-ns1:QueryDvsCheckCompatibility", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDvsCheckCompatibility(soap, &soap_tmp___ns1__QueryDvsCheckCompatibility, "-ns1:QueryDvsCheckCompatibility", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDvsCheckCompatibilityResponse)
		return soap_closesock(soap);
	ns1__QueryDvsCheckCompatibilityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDvsCheckCompatibilityResponse->soap_get(soap, "ns1:QueryDvsCheckCompatibilityResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadNextEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadNextEventsRequestType *ns1__ReadNextEvents, _ns1__ReadNextEventsResponse *ns1__ReadNextEventsResponse)
{	struct __ns1__ReadNextEvents soap_tmp___ns1__ReadNextEvents;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReadNextEvents.ns1__ReadNextEvents = ns1__ReadNextEvents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReadNextEvents(soap, &soap_tmp___ns1__ReadNextEvents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReadNextEvents(soap, &soap_tmp___ns1__ReadNextEvents, "-ns1:ReadNextEvents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReadNextEvents(soap, &soap_tmp___ns1__ReadNextEvents, "-ns1:ReadNextEvents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReadNextEventsResponse)
		return soap_closesock(soap);
	ns1__ReadNextEventsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReadNextEventsResponse->soap_get(soap, "ns1:ReadNextEventsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadPreviousEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReadPreviousEventsRequestType *ns1__ReadPreviousEvents, _ns1__ReadPreviousEventsResponse *ns1__ReadPreviousEventsResponse)
{	struct __ns1__ReadPreviousEvents soap_tmp___ns1__ReadPreviousEvents;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReadPreviousEvents.ns1__ReadPreviousEvents = ns1__ReadPreviousEvents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReadPreviousEvents(soap, &soap_tmp___ns1__ReadPreviousEvents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReadPreviousEvents(soap, &soap_tmp___ns1__ReadPreviousEvents, "-ns1:ReadPreviousEvents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReadPreviousEvents(soap, &soap_tmp___ns1__ReadPreviousEvents, "-ns1:ReadPreviousEvents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReadPreviousEventsResponse)
		return soap_closesock(soap);
	ns1__ReadPreviousEventsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReadPreviousEventsResponse->soap_get(soap, "ns1:ReadPreviousEventsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveArgumentDescription(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveArgumentDescriptionRequestType *ns1__RetrieveArgumentDescription, _ns1__RetrieveArgumentDescriptionResponse *ns1__RetrieveArgumentDescriptionResponse)
{	struct __ns1__RetrieveArgumentDescription soap_tmp___ns1__RetrieveArgumentDescription;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveArgumentDescription.ns1__RetrieveArgumentDescription = ns1__RetrieveArgumentDescription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveArgumentDescription(soap, &soap_tmp___ns1__RetrieveArgumentDescription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveArgumentDescription(soap, &soap_tmp___ns1__RetrieveArgumentDescription, "-ns1:RetrieveArgumentDescription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveArgumentDescription(soap, &soap_tmp___ns1__RetrieveArgumentDescription, "-ns1:RetrieveArgumentDescription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveArgumentDescriptionResponse)
		return soap_closesock(soap);
	ns1__RetrieveArgumentDescriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveArgumentDescriptionResponse->soap_get(soap, "ns1:RetrieveArgumentDescriptionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateCollectorForEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateCollectorForEventsRequestType *ns1__CreateCollectorForEvents, _ns1__CreateCollectorForEventsResponse *ns1__CreateCollectorForEventsResponse)
{	struct __ns1__CreateCollectorForEvents soap_tmp___ns1__CreateCollectorForEvents;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateCollectorForEvents.ns1__CreateCollectorForEvents = ns1__CreateCollectorForEvents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateCollectorForEvents(soap, &soap_tmp___ns1__CreateCollectorForEvents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateCollectorForEvents(soap, &soap_tmp___ns1__CreateCollectorForEvents, "-ns1:CreateCollectorForEvents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateCollectorForEvents(soap, &soap_tmp___ns1__CreateCollectorForEvents, "-ns1:CreateCollectorForEvents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateCollectorForEventsResponse)
		return soap_closesock(soap);
	ns1__CreateCollectorForEventsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateCollectorForEventsResponse->soap_get(soap, "ns1:CreateCollectorForEventsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LogUserEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LogUserEventRequestType *ns1__LogUserEvent, _ns1__LogUserEventResponse *ns1__LogUserEventResponse)
{	struct __ns1__LogUserEvent soap_tmp___ns1__LogUserEvent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__LogUserEvent.ns1__LogUserEvent = ns1__LogUserEvent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__LogUserEvent(soap, &soap_tmp___ns1__LogUserEvent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__LogUserEvent(soap, &soap_tmp___ns1__LogUserEvent, "-ns1:LogUserEvent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__LogUserEvent(soap, &soap_tmp___ns1__LogUserEvent, "-ns1:LogUserEvent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LogUserEventResponse)
		return soap_closesock(soap);
	ns1__LogUserEventResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogUserEventResponse->soap_get(soap, "ns1:LogUserEventResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryEvents(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryEventsRequestType *ns1__QueryEvents, _ns1__QueryEventsResponse *ns1__QueryEventsResponse)
{	struct __ns1__QueryEvents soap_tmp___ns1__QueryEvents;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryEvents.ns1__QueryEvents = ns1__QueryEvents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryEvents(soap, &soap_tmp___ns1__QueryEvents);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryEvents(soap, &soap_tmp___ns1__QueryEvents, "-ns1:QueryEvents", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryEvents(soap, &soap_tmp___ns1__QueryEvents, "-ns1:QueryEvents", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryEventsResponse)
		return soap_closesock(soap);
	ns1__QueryEventsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryEventsResponse->soap_get(soap, "ns1:QueryEventsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PostEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__PostEventRequestType *ns1__PostEvent, _ns1__PostEventResponse *ns1__PostEventResponse)
{	struct __ns1__PostEvent soap_tmp___ns1__PostEvent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PostEvent.ns1__PostEvent = ns1__PostEvent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PostEvent(soap, &soap_tmp___ns1__PostEvent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PostEvent(soap, &soap_tmp___ns1__PostEvent, "-ns1:PostEvent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PostEvent(soap, &soap_tmp___ns1__PostEvent, "-ns1:PostEvent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PostEventResponse)
		return soap_closesock(soap);
	ns1__PostEventResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PostEventResponse->soap_get(soap, "ns1:PostEventResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__JoinDomain_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__JoinDomainRequestType *ns1__JoinDomain_USCORETask, _ns1__JoinDomain_USCORETaskResponse *ns1__JoinDomain_USCORETaskResponse)
{	struct __ns1__JoinDomain_USCORETask soap_tmp___ns1__JoinDomain_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__JoinDomain_USCORETask.ns1__JoinDomain_USCORETask = ns1__JoinDomain_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__JoinDomain_USCORETask(soap, &soap_tmp___ns1__JoinDomain_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__JoinDomain_USCORETask(soap, &soap_tmp___ns1__JoinDomain_USCORETask, "-ns1:JoinDomain_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__JoinDomain_USCORETask(soap, &soap_tmp___ns1__JoinDomain_USCORETask, "-ns1:JoinDomain_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__JoinDomain_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__JoinDomain_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__JoinDomain_USCORETaskResponse->soap_get(soap, "ns1:JoinDomain_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LeaveCurrentDomain_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__LeaveCurrentDomainRequestType *ns1__LeaveCurrentDomain_USCORETask, _ns1__LeaveCurrentDomain_USCORETaskResponse *ns1__LeaveCurrentDomain_USCORETaskResponse)
{	struct __ns1__LeaveCurrentDomain_USCORETask soap_tmp___ns1__LeaveCurrentDomain_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__LeaveCurrentDomain_USCORETask.ns1__LeaveCurrentDomain_USCORETask = ns1__LeaveCurrentDomain_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__LeaveCurrentDomain_USCORETask(soap, &soap_tmp___ns1__LeaveCurrentDomain_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__LeaveCurrentDomain_USCORETask(soap, &soap_tmp___ns1__LeaveCurrentDomain_USCORETask, "-ns1:LeaveCurrentDomain_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__LeaveCurrentDomain_USCORETask(soap, &soap_tmp___ns1__LeaveCurrentDomain_USCORETask, "-ns1:LeaveCurrentDomain_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LeaveCurrentDomain_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__LeaveCurrentDomain_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LeaveCurrentDomain_USCORETaskResponse->soap_get(soap, "ns1:LeaveCurrentDomain_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureAutostart(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureAutostartRequestType *ns1__ReconfigureAutostart, _ns1__ReconfigureAutostartResponse *ns1__ReconfigureAutostartResponse)
{	struct __ns1__ReconfigureAutostart soap_tmp___ns1__ReconfigureAutostart;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureAutostart.ns1__ReconfigureAutostart = ns1__ReconfigureAutostart;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureAutostart(soap, &soap_tmp___ns1__ReconfigureAutostart);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureAutostart(soap, &soap_tmp___ns1__ReconfigureAutostart, "-ns1:ReconfigureAutostart", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureAutostart(soap, &soap_tmp___ns1__ReconfigureAutostart, "-ns1:ReconfigureAutostart", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureAutostartResponse)
		return soap_closesock(soap);
	ns1__ReconfigureAutostartResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureAutostartResponse->soap_get(soap, "ns1:ReconfigureAutostartResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AutoStartPowerOn(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AutoStartPowerOnRequestType *ns1__AutoStartPowerOn, _ns1__AutoStartPowerOnResponse *ns1__AutoStartPowerOnResponse)
{	struct __ns1__AutoStartPowerOn soap_tmp___ns1__AutoStartPowerOn;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AutoStartPowerOn.ns1__AutoStartPowerOn = ns1__AutoStartPowerOn;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AutoStartPowerOn(soap, &soap_tmp___ns1__AutoStartPowerOn);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AutoStartPowerOn(soap, &soap_tmp___ns1__AutoStartPowerOn, "-ns1:AutoStartPowerOn", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AutoStartPowerOn(soap, &soap_tmp___ns1__AutoStartPowerOn, "-ns1:AutoStartPowerOn", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AutoStartPowerOnResponse)
		return soap_closesock(soap);
	ns1__AutoStartPowerOnResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AutoStartPowerOnResponse->soap_get(soap, "ns1:AutoStartPowerOnResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AutoStartPowerOff(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AutoStartPowerOffRequestType *ns1__AutoStartPowerOff, _ns1__AutoStartPowerOffResponse *ns1__AutoStartPowerOffResponse)
{	struct __ns1__AutoStartPowerOff soap_tmp___ns1__AutoStartPowerOff;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AutoStartPowerOff.ns1__AutoStartPowerOff = ns1__AutoStartPowerOff;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AutoStartPowerOff(soap, &soap_tmp___ns1__AutoStartPowerOff);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AutoStartPowerOff(soap, &soap_tmp___ns1__AutoStartPowerOff, "-ns1:AutoStartPowerOff", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AutoStartPowerOff(soap, &soap_tmp___ns1__AutoStartPowerOff, "-ns1:AutoStartPowerOff", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AutoStartPowerOffResponse)
		return soap_closesock(soap);
	ns1__AutoStartPowerOffResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AutoStartPowerOffResponse->soap_get(soap, "ns1:AutoStartPowerOffResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryBootDevices(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryBootDevicesRequestType *ns1__QueryBootDevices, _ns1__QueryBootDevicesResponse *ns1__QueryBootDevicesResponse)
{	struct __ns1__QueryBootDevices soap_tmp___ns1__QueryBootDevices;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryBootDevices.ns1__QueryBootDevices = ns1__QueryBootDevices;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryBootDevices(soap, &soap_tmp___ns1__QueryBootDevices);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryBootDevices(soap, &soap_tmp___ns1__QueryBootDevices, "-ns1:QueryBootDevices", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryBootDevices(soap, &soap_tmp___ns1__QueryBootDevices, "-ns1:QueryBootDevices", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryBootDevicesResponse)
		return soap_closesock(soap);
	ns1__QueryBootDevicesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryBootDevicesResponse->soap_get(soap, "ns1:QueryBootDevicesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateBootDevice(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateBootDeviceRequestType *ns1__UpdateBootDevice, _ns1__UpdateBootDeviceResponse *ns1__UpdateBootDeviceResponse)
{	struct __ns1__UpdateBootDevice soap_tmp___ns1__UpdateBootDevice;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateBootDevice.ns1__UpdateBootDevice = ns1__UpdateBootDevice;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateBootDevice(soap, &soap_tmp___ns1__UpdateBootDevice);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateBootDevice(soap, &soap_tmp___ns1__UpdateBootDevice, "-ns1:UpdateBootDevice", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateBootDevice(soap, &soap_tmp___ns1__UpdateBootDevice, "-ns1:UpdateBootDevice", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateBootDeviceResponse)
		return soap_closesock(soap);
	ns1__UpdateBootDeviceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateBootDeviceResponse->soap_get(soap, "ns1:UpdateBootDeviceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableHyperThreading(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableHyperThreadingRequestType *ns1__EnableHyperThreading, _ns1__EnableHyperThreadingResponse *ns1__EnableHyperThreadingResponse)
{	struct __ns1__EnableHyperThreading soap_tmp___ns1__EnableHyperThreading;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableHyperThreading.ns1__EnableHyperThreading = ns1__EnableHyperThreading;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableHyperThreading(soap, &soap_tmp___ns1__EnableHyperThreading);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableHyperThreading(soap, &soap_tmp___ns1__EnableHyperThreading, "-ns1:EnableHyperThreading", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableHyperThreading(soap, &soap_tmp___ns1__EnableHyperThreading, "-ns1:EnableHyperThreading", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableHyperThreadingResponse)
		return soap_closesock(soap);
	ns1__EnableHyperThreadingResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableHyperThreadingResponse->soap_get(soap, "ns1:EnableHyperThreadingResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableHyperThreading(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableHyperThreadingRequestType *ns1__DisableHyperThreading, _ns1__DisableHyperThreadingResponse *ns1__DisableHyperThreadingResponse)
{	struct __ns1__DisableHyperThreading soap_tmp___ns1__DisableHyperThreading;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisableHyperThreading.ns1__DisableHyperThreading = ns1__DisableHyperThreading;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisableHyperThreading(soap, &soap_tmp___ns1__DisableHyperThreading);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisableHyperThreading(soap, &soap_tmp___ns1__DisableHyperThreading, "-ns1:DisableHyperThreading", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisableHyperThreading(soap, &soap_tmp___ns1__DisableHyperThreading, "-ns1:DisableHyperThreading", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisableHyperThreadingResponse)
		return soap_closesock(soap);
	ns1__DisableHyperThreadingResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisableHyperThreadingResponse->soap_get(soap, "ns1:DisableHyperThreadingResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SearchDatastore_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SearchDatastoreRequestType *ns1__SearchDatastore_USCORETask, _ns1__SearchDatastore_USCORETaskResponse *ns1__SearchDatastore_USCORETaskResponse)
{	struct __ns1__SearchDatastore_USCORETask soap_tmp___ns1__SearchDatastore_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SearchDatastore_USCORETask.ns1__SearchDatastore_USCORETask = ns1__SearchDatastore_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SearchDatastore_USCORETask(soap, &soap_tmp___ns1__SearchDatastore_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SearchDatastore_USCORETask(soap, &soap_tmp___ns1__SearchDatastore_USCORETask, "-ns1:SearchDatastore_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SearchDatastore_USCORETask(soap, &soap_tmp___ns1__SearchDatastore_USCORETask, "-ns1:SearchDatastore_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SearchDatastore_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__SearchDatastore_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchDatastore_USCORETaskResponse->soap_get(soap, "ns1:SearchDatastore_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SearchDatastoreSubFolders_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SearchDatastoreSubFoldersRequestType *ns1__SearchDatastoreSubFolders_USCORETask, _ns1__SearchDatastoreSubFolders_USCORETaskResponse *ns1__SearchDatastoreSubFolders_USCORETaskResponse)
{	struct __ns1__SearchDatastoreSubFolders_USCORETask soap_tmp___ns1__SearchDatastoreSubFolders_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SearchDatastoreSubFolders_USCORETask.ns1__SearchDatastoreSubFolders_USCORETask = ns1__SearchDatastoreSubFolders_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SearchDatastoreSubFolders_USCORETask(soap, &soap_tmp___ns1__SearchDatastoreSubFolders_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SearchDatastoreSubFolders_USCORETask(soap, &soap_tmp___ns1__SearchDatastoreSubFolders_USCORETask, "-ns1:SearchDatastoreSubFolders_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SearchDatastoreSubFolders_USCORETask(soap, &soap_tmp___ns1__SearchDatastoreSubFolders_USCORETask, "-ns1:SearchDatastoreSubFolders_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SearchDatastoreSubFolders_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__SearchDatastoreSubFolders_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SearchDatastoreSubFolders_USCORETaskResponse->soap_get(soap, "ns1:SearchDatastoreSubFolders_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeleteFileRequestType *ns1__DeleteFile, _ns1__DeleteFileResponse *ns1__DeleteFileResponse)
{	struct __ns1__DeleteFile soap_tmp___ns1__DeleteFile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFile.ns1__DeleteFile = ns1__DeleteFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile, "-ns1:DeleteFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile, "-ns1:DeleteFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileResponse)
		return soap_closesock(soap);
	ns1__DeleteFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileResponse->soap_get(soap, "ns1:DeleteFileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateLocalSwapDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateLocalSwapDatastoreRequestType *ns1__UpdateLocalSwapDatastore, _ns1__UpdateLocalSwapDatastoreResponse *ns1__UpdateLocalSwapDatastoreResponse)
{	struct __ns1__UpdateLocalSwapDatastore soap_tmp___ns1__UpdateLocalSwapDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateLocalSwapDatastore.ns1__UpdateLocalSwapDatastore = ns1__UpdateLocalSwapDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateLocalSwapDatastore(soap, &soap_tmp___ns1__UpdateLocalSwapDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateLocalSwapDatastore(soap, &soap_tmp___ns1__UpdateLocalSwapDatastore, "-ns1:UpdateLocalSwapDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateLocalSwapDatastore(soap, &soap_tmp___ns1__UpdateLocalSwapDatastore, "-ns1:UpdateLocalSwapDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateLocalSwapDatastoreResponse)
		return soap_closesock(soap);
	ns1__UpdateLocalSwapDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateLocalSwapDatastoreResponse->soap_get(soap, "ns1:UpdateLocalSwapDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableDisksForVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableDisksForVmfsRequestType *ns1__QueryAvailableDisksForVmfs, _ns1__QueryAvailableDisksForVmfsResponse *ns1__QueryAvailableDisksForVmfsResponse)
{	struct __ns1__QueryAvailableDisksForVmfs soap_tmp___ns1__QueryAvailableDisksForVmfs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAvailableDisksForVmfs.ns1__QueryAvailableDisksForVmfs = ns1__QueryAvailableDisksForVmfs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAvailableDisksForVmfs(soap, &soap_tmp___ns1__QueryAvailableDisksForVmfs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAvailableDisksForVmfs(soap, &soap_tmp___ns1__QueryAvailableDisksForVmfs, "-ns1:QueryAvailableDisksForVmfs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAvailableDisksForVmfs(soap, &soap_tmp___ns1__QueryAvailableDisksForVmfs, "-ns1:QueryAvailableDisksForVmfs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAvailableDisksForVmfsResponse)
		return soap_closesock(soap);
	ns1__QueryAvailableDisksForVmfsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAvailableDisksForVmfsResponse->soap_get(soap, "ns1:QueryAvailableDisksForVmfsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreCreateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreCreateOptionsRequestType *ns1__QueryVmfsDatastoreCreateOptions, _ns1__QueryVmfsDatastoreCreateOptionsResponse *ns1__QueryVmfsDatastoreCreateOptionsResponse)
{	struct __ns1__QueryVmfsDatastoreCreateOptions soap_tmp___ns1__QueryVmfsDatastoreCreateOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVmfsDatastoreCreateOptions.ns1__QueryVmfsDatastoreCreateOptions = ns1__QueryVmfsDatastoreCreateOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVmfsDatastoreCreateOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreCreateOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVmfsDatastoreCreateOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreCreateOptions, "-ns1:QueryVmfsDatastoreCreateOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVmfsDatastoreCreateOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreCreateOptions, "-ns1:QueryVmfsDatastoreCreateOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVmfsDatastoreCreateOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreCreateOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreCreateOptionsResponse->soap_get(soap, "ns1:QueryVmfsDatastoreCreateOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateVmfsDatastoreRequestType *ns1__CreateVmfsDatastore, _ns1__CreateVmfsDatastoreResponse *ns1__CreateVmfsDatastoreResponse)
{	struct __ns1__CreateVmfsDatastore soap_tmp___ns1__CreateVmfsDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateVmfsDatastore.ns1__CreateVmfsDatastore = ns1__CreateVmfsDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateVmfsDatastore(soap, &soap_tmp___ns1__CreateVmfsDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateVmfsDatastore(soap, &soap_tmp___ns1__CreateVmfsDatastore, "-ns1:CreateVmfsDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateVmfsDatastore(soap, &soap_tmp___ns1__CreateVmfsDatastore, "-ns1:CreateVmfsDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateVmfsDatastoreResponse)
		return soap_closesock(soap);
	ns1__CreateVmfsDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateVmfsDatastoreResponse->soap_get(soap, "ns1:CreateVmfsDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreExtendOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreExtendOptionsRequestType *ns1__QueryVmfsDatastoreExtendOptions, _ns1__QueryVmfsDatastoreExtendOptionsResponse *ns1__QueryVmfsDatastoreExtendOptionsResponse)
{	struct __ns1__QueryVmfsDatastoreExtendOptions soap_tmp___ns1__QueryVmfsDatastoreExtendOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVmfsDatastoreExtendOptions.ns1__QueryVmfsDatastoreExtendOptions = ns1__QueryVmfsDatastoreExtendOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVmfsDatastoreExtendOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExtendOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVmfsDatastoreExtendOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExtendOptions, "-ns1:QueryVmfsDatastoreExtendOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVmfsDatastoreExtendOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExtendOptions, "-ns1:QueryVmfsDatastoreExtendOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVmfsDatastoreExtendOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreExtendOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreExtendOptionsResponse->soap_get(soap, "ns1:QueryVmfsDatastoreExtendOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVmfsDatastoreExpandOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVmfsDatastoreExpandOptionsRequestType *ns1__QueryVmfsDatastoreExpandOptions, _ns1__QueryVmfsDatastoreExpandOptionsResponse *ns1__QueryVmfsDatastoreExpandOptionsResponse)
{	struct __ns1__QueryVmfsDatastoreExpandOptions soap_tmp___ns1__QueryVmfsDatastoreExpandOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVmfsDatastoreExpandOptions.ns1__QueryVmfsDatastoreExpandOptions = ns1__QueryVmfsDatastoreExpandOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVmfsDatastoreExpandOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExpandOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVmfsDatastoreExpandOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExpandOptions, "-ns1:QueryVmfsDatastoreExpandOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVmfsDatastoreExpandOptions(soap, &soap_tmp___ns1__QueryVmfsDatastoreExpandOptions, "-ns1:QueryVmfsDatastoreExpandOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVmfsDatastoreExpandOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreExpandOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVmfsDatastoreExpandOptionsResponse->soap_get(soap, "ns1:QueryVmfsDatastoreExpandOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExtendVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExtendVmfsDatastoreRequestType *ns1__ExtendVmfsDatastore, _ns1__ExtendVmfsDatastoreResponse *ns1__ExtendVmfsDatastoreResponse)
{	struct __ns1__ExtendVmfsDatastore soap_tmp___ns1__ExtendVmfsDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExtendVmfsDatastore.ns1__ExtendVmfsDatastore = ns1__ExtendVmfsDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExtendVmfsDatastore(soap, &soap_tmp___ns1__ExtendVmfsDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExtendVmfsDatastore(soap, &soap_tmp___ns1__ExtendVmfsDatastore, "-ns1:ExtendVmfsDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExtendVmfsDatastore(soap, &soap_tmp___ns1__ExtendVmfsDatastore, "-ns1:ExtendVmfsDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExtendVmfsDatastoreResponse)
		return soap_closesock(soap);
	ns1__ExtendVmfsDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExtendVmfsDatastoreResponse->soap_get(soap, "ns1:ExtendVmfsDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExpandVmfsDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExpandVmfsDatastoreRequestType *ns1__ExpandVmfsDatastore, _ns1__ExpandVmfsDatastoreResponse *ns1__ExpandVmfsDatastoreResponse)
{	struct __ns1__ExpandVmfsDatastore soap_tmp___ns1__ExpandVmfsDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExpandVmfsDatastore.ns1__ExpandVmfsDatastore = ns1__ExpandVmfsDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExpandVmfsDatastore(soap, &soap_tmp___ns1__ExpandVmfsDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExpandVmfsDatastore(soap, &soap_tmp___ns1__ExpandVmfsDatastore, "-ns1:ExpandVmfsDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExpandVmfsDatastore(soap, &soap_tmp___ns1__ExpandVmfsDatastore, "-ns1:ExpandVmfsDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExpandVmfsDatastoreResponse)
		return soap_closesock(soap);
	ns1__ExpandVmfsDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExpandVmfsDatastoreResponse->soap_get(soap, "ns1:ExpandVmfsDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateNasDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateNasDatastoreRequestType *ns1__CreateNasDatastore, _ns1__CreateNasDatastoreResponse *ns1__CreateNasDatastoreResponse)
{	struct __ns1__CreateNasDatastore soap_tmp___ns1__CreateNasDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateNasDatastore.ns1__CreateNasDatastore = ns1__CreateNasDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateNasDatastore(soap, &soap_tmp___ns1__CreateNasDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateNasDatastore(soap, &soap_tmp___ns1__CreateNasDatastore, "-ns1:CreateNasDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateNasDatastore(soap, &soap_tmp___ns1__CreateNasDatastore, "-ns1:CreateNasDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateNasDatastoreResponse)
		return soap_closesock(soap);
	ns1__CreateNasDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateNasDatastoreResponse->soap_get(soap, "ns1:CreateNasDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateLocalDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateLocalDatastoreRequestType *ns1__CreateLocalDatastore, _ns1__CreateLocalDatastoreResponse *ns1__CreateLocalDatastoreResponse)
{	struct __ns1__CreateLocalDatastore soap_tmp___ns1__CreateLocalDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateLocalDatastore.ns1__CreateLocalDatastore = ns1__CreateLocalDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateLocalDatastore(soap, &soap_tmp___ns1__CreateLocalDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateLocalDatastore(soap, &soap_tmp___ns1__CreateLocalDatastore, "-ns1:CreateLocalDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateLocalDatastore(soap, &soap_tmp___ns1__CreateLocalDatastore, "-ns1:CreateLocalDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateLocalDatastoreResponse)
		return soap_closesock(soap);
	ns1__CreateLocalDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateLocalDatastoreResponse->soap_get(soap, "ns1:CreateLocalDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveDatastore(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveDatastoreRequestType *ns1__RemoveDatastore, _ns1__RemoveDatastoreResponse *ns1__RemoveDatastoreResponse)
{	struct __ns1__RemoveDatastore soap_tmp___ns1__RemoveDatastore;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveDatastore.ns1__RemoveDatastore = ns1__RemoveDatastore;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveDatastore(soap, &soap_tmp___ns1__RemoveDatastore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveDatastore(soap, &soap_tmp___ns1__RemoveDatastore, "-ns1:RemoveDatastore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveDatastore(soap, &soap_tmp___ns1__RemoveDatastore, "-ns1:RemoveDatastore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveDatastoreResponse)
		return soap_closesock(soap);
	ns1__RemoveDatastoreResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveDatastoreResponse->soap_get(soap, "ns1:RemoveDatastoreResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigureDatastorePrincipal(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigureDatastorePrincipalRequestType *ns1__ConfigureDatastorePrincipal, _ns1__ConfigureDatastorePrincipalResponse *ns1__ConfigureDatastorePrincipalResponse)
{	struct __ns1__ConfigureDatastorePrincipal soap_tmp___ns1__ConfigureDatastorePrincipal;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ConfigureDatastorePrincipal.ns1__ConfigureDatastorePrincipal = ns1__ConfigureDatastorePrincipal;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ConfigureDatastorePrincipal(soap, &soap_tmp___ns1__ConfigureDatastorePrincipal);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ConfigureDatastorePrincipal(soap, &soap_tmp___ns1__ConfigureDatastorePrincipal, "-ns1:ConfigureDatastorePrincipal", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ConfigureDatastorePrincipal(soap, &soap_tmp___ns1__ConfigureDatastorePrincipal, "-ns1:ConfigureDatastorePrincipal", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ConfigureDatastorePrincipalResponse)
		return soap_closesock(soap);
	ns1__ConfigureDatastorePrincipalResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConfigureDatastorePrincipalResponse->soap_get(soap, "ns1:ConfigureDatastorePrincipalResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnresolvedVmfsVolumes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnresolvedVmfsVolumesRequestType *ns1__QueryUnresolvedVmfsVolumes, _ns1__QueryUnresolvedVmfsVolumesResponse *ns1__QueryUnresolvedVmfsVolumesResponse)
{	struct __ns1__QueryUnresolvedVmfsVolumes soap_tmp___ns1__QueryUnresolvedVmfsVolumes;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryUnresolvedVmfsVolumes.ns1__QueryUnresolvedVmfsVolumes = ns1__QueryUnresolvedVmfsVolumes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolumes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolumes, "-ns1:QueryUnresolvedVmfsVolumes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolumes, "-ns1:QueryUnresolvedVmfsVolumes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryUnresolvedVmfsVolumesResponse)
		return soap_closesock(soap);
	ns1__QueryUnresolvedVmfsVolumesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryUnresolvedVmfsVolumesResponse->soap_get(soap, "ns1:QueryUnresolvedVmfsVolumesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResignatureUnresolvedVmfsVolumeRequestType *ns1__ResignatureUnresolvedVmfsVolume_USCORETask, _ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse *ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse)
{	struct __ns1__ResignatureUnresolvedVmfsVolume_USCORETask soap_tmp___ns1__ResignatureUnresolvedVmfsVolume_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResignatureUnresolvedVmfsVolume_USCORETask.ns1__ResignatureUnresolvedVmfsVolume_USCORETask = ns1__ResignatureUnresolvedVmfsVolume_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(soap, &soap_tmp___ns1__ResignatureUnresolvedVmfsVolume_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(soap, &soap_tmp___ns1__ResignatureUnresolvedVmfsVolume_USCORETask, "-ns1:ResignatureUnresolvedVmfsVolume_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResignatureUnresolvedVmfsVolume_USCORETask(soap, &soap_tmp___ns1__ResignatureUnresolvedVmfsVolume_USCORETask, "-ns1:ResignatureUnresolvedVmfsVolume_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResignatureUnresolvedVmfsVolume_USCORETaskResponse->soap_get(soap, "ns1:ResignatureUnresolvedVmfsVolume_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDateTimeConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDateTimeConfigRequestType *ns1__UpdateDateTimeConfig, _ns1__UpdateDateTimeConfigResponse *ns1__UpdateDateTimeConfigResponse)
{	struct __ns1__UpdateDateTimeConfig soap_tmp___ns1__UpdateDateTimeConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDateTimeConfig.ns1__UpdateDateTimeConfig = ns1__UpdateDateTimeConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDateTimeConfig(soap, &soap_tmp___ns1__UpdateDateTimeConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDateTimeConfig(soap, &soap_tmp___ns1__UpdateDateTimeConfig, "-ns1:UpdateDateTimeConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDateTimeConfig(soap, &soap_tmp___ns1__UpdateDateTimeConfig, "-ns1:UpdateDateTimeConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDateTimeConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateDateTimeConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDateTimeConfigResponse->soap_get(soap, "ns1:UpdateDateTimeConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailableTimeZones(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailableTimeZonesRequestType *ns1__QueryAvailableTimeZones, _ns1__QueryAvailableTimeZonesResponse *ns1__QueryAvailableTimeZonesResponse)
{	struct __ns1__QueryAvailableTimeZones soap_tmp___ns1__QueryAvailableTimeZones;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAvailableTimeZones.ns1__QueryAvailableTimeZones = ns1__QueryAvailableTimeZones;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAvailableTimeZones(soap, &soap_tmp___ns1__QueryAvailableTimeZones);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAvailableTimeZones(soap, &soap_tmp___ns1__QueryAvailableTimeZones, "-ns1:QueryAvailableTimeZones", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAvailableTimeZones(soap, &soap_tmp___ns1__QueryAvailableTimeZones, "-ns1:QueryAvailableTimeZones", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAvailableTimeZonesResponse)
		return soap_closesock(soap);
	ns1__QueryAvailableTimeZonesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAvailableTimeZonesResponse->soap_get(soap, "ns1:QueryAvailableTimeZonesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryDateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryDateTimeRequestType *ns1__QueryDateTime, _ns1__QueryDateTimeResponse *ns1__QueryDateTimeResponse)
{	struct __ns1__QueryDateTime soap_tmp___ns1__QueryDateTime;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryDateTime.ns1__QueryDateTime = ns1__QueryDateTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryDateTime(soap, &soap_tmp___ns1__QueryDateTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryDateTime(soap, &soap_tmp___ns1__QueryDateTime, "-ns1:QueryDateTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryDateTime(soap, &soap_tmp___ns1__QueryDateTime, "-ns1:QueryDateTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryDateTimeResponse)
		return soap_closesock(soap);
	ns1__QueryDateTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryDateTimeResponse->soap_get(soap, "ns1:QueryDateTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDateTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDateTimeRequestType *ns1__UpdateDateTime, _ns1__UpdateDateTimeResponse *ns1__UpdateDateTimeResponse)
{	struct __ns1__UpdateDateTime soap_tmp___ns1__UpdateDateTime;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDateTime.ns1__UpdateDateTime = ns1__UpdateDateTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDateTime(soap, &soap_tmp___ns1__UpdateDateTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDateTime(soap, &soap_tmp___ns1__UpdateDateTime, "-ns1:UpdateDateTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDateTime(soap, &soap_tmp___ns1__UpdateDateTime, "-ns1:UpdateDateTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDateTimeResponse)
		return soap_closesock(soap);
	ns1__UpdateDateTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDateTimeResponse->soap_get(soap, "ns1:UpdateDateTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshDateTimeSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshDateTimeSystemRequestType *ns1__RefreshDateTimeSystem, _ns1__RefreshDateTimeSystemResponse *ns1__RefreshDateTimeSystemResponse)
{	struct __ns1__RefreshDateTimeSystem soap_tmp___ns1__RefreshDateTimeSystem;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshDateTimeSystem.ns1__RefreshDateTimeSystem = ns1__RefreshDateTimeSystem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshDateTimeSystem(soap, &soap_tmp___ns1__RefreshDateTimeSystem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshDateTimeSystem(soap, &soap_tmp___ns1__RefreshDateTimeSystem, "-ns1:RefreshDateTimeSystem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshDateTimeSystem(soap, &soap_tmp___ns1__RefreshDateTimeSystem, "-ns1:RefreshDateTimeSystem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshDateTimeSystemResponse)
		return soap_closesock(soap);
	ns1__RefreshDateTimeSystemResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshDateTimeSystemResponse->soap_get(soap, "ns1:RefreshDateTimeSystemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryAvailablePartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryAvailablePartitionRequestType *ns1__QueryAvailablePartition, _ns1__QueryAvailablePartitionResponse *ns1__QueryAvailablePartitionResponse)
{	struct __ns1__QueryAvailablePartition soap_tmp___ns1__QueryAvailablePartition;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryAvailablePartition.ns1__QueryAvailablePartition = ns1__QueryAvailablePartition;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryAvailablePartition(soap, &soap_tmp___ns1__QueryAvailablePartition);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryAvailablePartition(soap, &soap_tmp___ns1__QueryAvailablePartition, "-ns1:QueryAvailablePartition", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryAvailablePartition(soap, &soap_tmp___ns1__QueryAvailablePartition, "-ns1:QueryAvailablePartition", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryAvailablePartitionResponse)
		return soap_closesock(soap);
	ns1__QueryAvailablePartitionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryAvailablePartitionResponse->soap_get(soap, "ns1:QueryAvailablePartitionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectActivePartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectActivePartitionRequestType *ns1__SelectActivePartition, _ns1__SelectActivePartitionResponse *ns1__SelectActivePartitionResponse)
{	struct __ns1__SelectActivePartition soap_tmp___ns1__SelectActivePartition;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SelectActivePartition.ns1__SelectActivePartition = ns1__SelectActivePartition;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SelectActivePartition(soap, &soap_tmp___ns1__SelectActivePartition);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SelectActivePartition(soap, &soap_tmp___ns1__SelectActivePartition, "-ns1:SelectActivePartition", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SelectActivePartition(soap, &soap_tmp___ns1__SelectActivePartition, "-ns1:SelectActivePartition", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SelectActivePartitionResponse)
		return soap_closesock(soap);
	ns1__SelectActivePartitionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SelectActivePartitionResponse->soap_get(soap, "ns1:SelectActivePartitionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPartitionCreateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPartitionCreateOptionsRequestType *ns1__QueryPartitionCreateOptions, _ns1__QueryPartitionCreateOptionsResponse *ns1__QueryPartitionCreateOptionsResponse)
{	struct __ns1__QueryPartitionCreateOptions soap_tmp___ns1__QueryPartitionCreateOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPartitionCreateOptions.ns1__QueryPartitionCreateOptions = ns1__QueryPartitionCreateOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPartitionCreateOptions(soap, &soap_tmp___ns1__QueryPartitionCreateOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPartitionCreateOptions(soap, &soap_tmp___ns1__QueryPartitionCreateOptions, "-ns1:QueryPartitionCreateOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPartitionCreateOptions(soap, &soap_tmp___ns1__QueryPartitionCreateOptions, "-ns1:QueryPartitionCreateOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPartitionCreateOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryPartitionCreateOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPartitionCreateOptionsResponse->soap_get(soap, "ns1:QueryPartitionCreateOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPartitionCreateDesc(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPartitionCreateDescRequestType *ns1__QueryPartitionCreateDesc, _ns1__QueryPartitionCreateDescResponse *ns1__QueryPartitionCreateDescResponse)
{	struct __ns1__QueryPartitionCreateDesc soap_tmp___ns1__QueryPartitionCreateDesc;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPartitionCreateDesc.ns1__QueryPartitionCreateDesc = ns1__QueryPartitionCreateDesc;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPartitionCreateDesc(soap, &soap_tmp___ns1__QueryPartitionCreateDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPartitionCreateDesc(soap, &soap_tmp___ns1__QueryPartitionCreateDesc, "-ns1:QueryPartitionCreateDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPartitionCreateDesc(soap, &soap_tmp___ns1__QueryPartitionCreateDesc, "-ns1:QueryPartitionCreateDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPartitionCreateDescResponse)
		return soap_closesock(soap);
	ns1__QueryPartitionCreateDescResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPartitionCreateDescResponse->soap_get(soap, "ns1:QueryPartitionCreateDescResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDiagnosticPartition(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDiagnosticPartitionRequestType *ns1__CreateDiagnosticPartition, _ns1__CreateDiagnosticPartitionResponse *ns1__CreateDiagnosticPartitionResponse)
{	struct __ns1__CreateDiagnosticPartition soap_tmp___ns1__CreateDiagnosticPartition;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDiagnosticPartition.ns1__CreateDiagnosticPartition = ns1__CreateDiagnosticPartition;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDiagnosticPartition(soap, &soap_tmp___ns1__CreateDiagnosticPartition);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDiagnosticPartition(soap, &soap_tmp___ns1__CreateDiagnosticPartition, "-ns1:CreateDiagnosticPartition", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDiagnosticPartition(soap, &soap_tmp___ns1__CreateDiagnosticPartition, "-ns1:CreateDiagnosticPartition", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDiagnosticPartitionResponse)
		return soap_closesock(soap);
	ns1__CreateDiagnosticPartitionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDiagnosticPartitionResponse->soap_get(soap, "ns1:CreateDiagnosticPartitionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDefaultPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDefaultPolicyRequestType *ns1__UpdateDefaultPolicy, _ns1__UpdateDefaultPolicyResponse *ns1__UpdateDefaultPolicyResponse)
{	struct __ns1__UpdateDefaultPolicy soap_tmp___ns1__UpdateDefaultPolicy;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDefaultPolicy.ns1__UpdateDefaultPolicy = ns1__UpdateDefaultPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDefaultPolicy(soap, &soap_tmp___ns1__UpdateDefaultPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDefaultPolicy(soap, &soap_tmp___ns1__UpdateDefaultPolicy, "-ns1:UpdateDefaultPolicy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDefaultPolicy(soap, &soap_tmp___ns1__UpdateDefaultPolicy, "-ns1:UpdateDefaultPolicy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDefaultPolicyResponse)
		return soap_closesock(soap);
	ns1__UpdateDefaultPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDefaultPolicyResponse->soap_get(soap, "ns1:UpdateDefaultPolicyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableRuleset(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableRulesetRequestType *ns1__EnableRuleset, _ns1__EnableRulesetResponse *ns1__EnableRulesetResponse)
{	struct __ns1__EnableRuleset soap_tmp___ns1__EnableRuleset;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableRuleset.ns1__EnableRuleset = ns1__EnableRuleset;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableRuleset(soap, &soap_tmp___ns1__EnableRuleset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableRuleset(soap, &soap_tmp___ns1__EnableRuleset, "-ns1:EnableRuleset", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableRuleset(soap, &soap_tmp___ns1__EnableRuleset, "-ns1:EnableRuleset", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableRulesetResponse)
		return soap_closesock(soap);
	ns1__EnableRulesetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableRulesetResponse->soap_get(soap, "ns1:EnableRulesetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableRuleset(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableRulesetRequestType *ns1__DisableRuleset, _ns1__DisableRulesetResponse *ns1__DisableRulesetResponse)
{	struct __ns1__DisableRuleset soap_tmp___ns1__DisableRuleset;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisableRuleset.ns1__DisableRuleset = ns1__DisableRuleset;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisableRuleset(soap, &soap_tmp___ns1__DisableRuleset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisableRuleset(soap, &soap_tmp___ns1__DisableRuleset, "-ns1:DisableRuleset", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisableRuleset(soap, &soap_tmp___ns1__DisableRuleset, "-ns1:DisableRuleset", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisableRulesetResponse)
		return soap_closesock(soap);
	ns1__DisableRulesetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisableRulesetResponse->soap_get(soap, "ns1:DisableRulesetResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshFirewall(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshFirewallRequestType *ns1__RefreshFirewall, _ns1__RefreshFirewallResponse *ns1__RefreshFirewallResponse)
{	struct __ns1__RefreshFirewall soap_tmp___ns1__RefreshFirewall;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshFirewall.ns1__RefreshFirewall = ns1__RefreshFirewall;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshFirewall(soap, &soap_tmp___ns1__RefreshFirewall);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshFirewall(soap, &soap_tmp___ns1__RefreshFirewall, "-ns1:RefreshFirewall", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshFirewall(soap, &soap_tmp___ns1__RefreshFirewall, "-ns1:RefreshFirewall", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshFirewallResponse)
		return soap_closesock(soap);
	ns1__RefreshFirewallResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshFirewallResponse->soap_get(soap, "ns1:RefreshFirewallResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetFirmwareToFactoryDefaults(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetFirmwareToFactoryDefaultsRequestType *ns1__ResetFirmwareToFactoryDefaults, _ns1__ResetFirmwareToFactoryDefaultsResponse *ns1__ResetFirmwareToFactoryDefaultsResponse)
{	struct __ns1__ResetFirmwareToFactoryDefaults soap_tmp___ns1__ResetFirmwareToFactoryDefaults;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetFirmwareToFactoryDefaults.ns1__ResetFirmwareToFactoryDefaults = ns1__ResetFirmwareToFactoryDefaults;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetFirmwareToFactoryDefaults(soap, &soap_tmp___ns1__ResetFirmwareToFactoryDefaults);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetFirmwareToFactoryDefaults(soap, &soap_tmp___ns1__ResetFirmwareToFactoryDefaults, "-ns1:ResetFirmwareToFactoryDefaults", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetFirmwareToFactoryDefaults(soap, &soap_tmp___ns1__ResetFirmwareToFactoryDefaults, "-ns1:ResetFirmwareToFactoryDefaults", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetFirmwareToFactoryDefaultsResponse)
		return soap_closesock(soap);
	ns1__ResetFirmwareToFactoryDefaultsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetFirmwareToFactoryDefaultsResponse->soap_get(soap, "ns1:ResetFirmwareToFactoryDefaultsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BackupFirmwareConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__BackupFirmwareConfigurationRequestType *ns1__BackupFirmwareConfiguration, _ns1__BackupFirmwareConfigurationResponse *ns1__BackupFirmwareConfigurationResponse)
{	struct __ns1__BackupFirmwareConfiguration soap_tmp___ns1__BackupFirmwareConfiguration;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__BackupFirmwareConfiguration.ns1__BackupFirmwareConfiguration = ns1__BackupFirmwareConfiguration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__BackupFirmwareConfiguration(soap, &soap_tmp___ns1__BackupFirmwareConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BackupFirmwareConfiguration(soap, &soap_tmp___ns1__BackupFirmwareConfiguration, "-ns1:BackupFirmwareConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BackupFirmwareConfiguration(soap, &soap_tmp___ns1__BackupFirmwareConfiguration, "-ns1:BackupFirmwareConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__BackupFirmwareConfigurationResponse)
		return soap_closesock(soap);
	ns1__BackupFirmwareConfigurationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BackupFirmwareConfigurationResponse->soap_get(soap, "ns1:BackupFirmwareConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryFirmwareConfigUploadURL(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryFirmwareConfigUploadURLRequestType *ns1__QueryFirmwareConfigUploadURL, _ns1__QueryFirmwareConfigUploadURLResponse *ns1__QueryFirmwareConfigUploadURLResponse)
{	struct __ns1__QueryFirmwareConfigUploadURL soap_tmp___ns1__QueryFirmwareConfigUploadURL;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryFirmwareConfigUploadURL.ns1__QueryFirmwareConfigUploadURL = ns1__QueryFirmwareConfigUploadURL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryFirmwareConfigUploadURL(soap, &soap_tmp___ns1__QueryFirmwareConfigUploadURL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryFirmwareConfigUploadURL(soap, &soap_tmp___ns1__QueryFirmwareConfigUploadURL, "-ns1:QueryFirmwareConfigUploadURL", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryFirmwareConfigUploadURL(soap, &soap_tmp___ns1__QueryFirmwareConfigUploadURL, "-ns1:QueryFirmwareConfigUploadURL", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryFirmwareConfigUploadURLResponse)
		return soap_closesock(soap);
	ns1__QueryFirmwareConfigUploadURLResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryFirmwareConfigUploadURLResponse->soap_get(soap, "ns1:QueryFirmwareConfigUploadURLResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestoreFirmwareConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestoreFirmwareConfigurationRequestType *ns1__RestoreFirmwareConfiguration, _ns1__RestoreFirmwareConfigurationResponse *ns1__RestoreFirmwareConfigurationResponse)
{	struct __ns1__RestoreFirmwareConfiguration soap_tmp___ns1__RestoreFirmwareConfiguration;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RestoreFirmwareConfiguration.ns1__RestoreFirmwareConfiguration = ns1__RestoreFirmwareConfiguration;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RestoreFirmwareConfiguration(soap, &soap_tmp___ns1__RestoreFirmwareConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RestoreFirmwareConfiguration(soap, &soap_tmp___ns1__RestoreFirmwareConfiguration, "-ns1:RestoreFirmwareConfiguration", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RestoreFirmwareConfiguration(soap, &soap_tmp___ns1__RestoreFirmwareConfiguration, "-ns1:RestoreFirmwareConfiguration", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RestoreFirmwareConfigurationResponse)
		return soap_closesock(soap);
	ns1__RestoreFirmwareConfigurationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RestoreFirmwareConfigurationResponse->soap_get(soap, "ns1:RestoreFirmwareConfigurationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshHealthStatusSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshHealthStatusSystemRequestType *ns1__RefreshHealthStatusSystem, _ns1__RefreshHealthStatusSystemResponse *ns1__RefreshHealthStatusSystemResponse)
{	struct __ns1__RefreshHealthStatusSystem soap_tmp___ns1__RefreshHealthStatusSystem;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshHealthStatusSystem.ns1__RefreshHealthStatusSystem = ns1__RefreshHealthStatusSystem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshHealthStatusSystem(soap, &soap_tmp___ns1__RefreshHealthStatusSystem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshHealthStatusSystem(soap, &soap_tmp___ns1__RefreshHealthStatusSystem, "-ns1:RefreshHealthStatusSystem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshHealthStatusSystem(soap, &soap_tmp___ns1__RefreshHealthStatusSystem, "-ns1:RefreshHealthStatusSystem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshHealthStatusSystemResponse)
		return soap_closesock(soap);
	ns1__RefreshHealthStatusSystemResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshHealthStatusSystemResponse->soap_get(soap, "ns1:RefreshHealthStatusSystemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetSystemHealthInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetSystemHealthInfoRequestType *ns1__ResetSystemHealthInfo, _ns1__ResetSystemHealthInfoResponse *ns1__ResetSystemHealthInfoResponse)
{	struct __ns1__ResetSystemHealthInfo soap_tmp___ns1__ResetSystemHealthInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetSystemHealthInfo.ns1__ResetSystemHealthInfo = ns1__ResetSystemHealthInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetSystemHealthInfo(soap, &soap_tmp___ns1__ResetSystemHealthInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetSystemHealthInfo(soap, &soap_tmp___ns1__ResetSystemHealthInfo, "-ns1:ResetSystemHealthInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetSystemHealthInfo(soap, &soap_tmp___ns1__ResetSystemHealthInfo, "-ns1:ResetSystemHealthInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetSystemHealthInfoResponse)
		return soap_closesock(soap);
	ns1__ResetSystemHealthInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetSystemHealthInfoResponse->soap_get(soap, "ns1:ResetSystemHealthInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryModules(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryModulesRequestType *ns1__QueryModules, _ns1__QueryModulesResponse *ns1__QueryModulesResponse)
{	struct __ns1__QueryModules soap_tmp___ns1__QueryModules;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryModules.ns1__QueryModules = ns1__QueryModules;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryModules(soap, &soap_tmp___ns1__QueryModules);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryModules(soap, &soap_tmp___ns1__QueryModules, "-ns1:QueryModules", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryModules(soap, &soap_tmp___ns1__QueryModules, "-ns1:QueryModules", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryModulesResponse)
		return soap_closesock(soap);
	ns1__QueryModulesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryModulesResponse->soap_get(soap, "ns1:QueryModulesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateModuleOptionString(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateModuleOptionStringRequestType *ns1__UpdateModuleOptionString, _ns1__UpdateModuleOptionStringResponse *ns1__UpdateModuleOptionStringResponse)
{	struct __ns1__UpdateModuleOptionString soap_tmp___ns1__UpdateModuleOptionString;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateModuleOptionString.ns1__UpdateModuleOptionString = ns1__UpdateModuleOptionString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateModuleOptionString(soap, &soap_tmp___ns1__UpdateModuleOptionString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateModuleOptionString(soap, &soap_tmp___ns1__UpdateModuleOptionString, "-ns1:UpdateModuleOptionString", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateModuleOptionString(soap, &soap_tmp___ns1__UpdateModuleOptionString, "-ns1:UpdateModuleOptionString", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateModuleOptionStringResponse)
		return soap_closesock(soap);
	ns1__UpdateModuleOptionStringResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateModuleOptionStringResponse->soap_get(soap, "ns1:UpdateModuleOptionStringResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryConfiguredModuleOptionString(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryConfiguredModuleOptionStringRequestType *ns1__QueryConfiguredModuleOptionString, _ns1__QueryConfiguredModuleOptionStringResponse *ns1__QueryConfiguredModuleOptionStringResponse)
{	struct __ns1__QueryConfiguredModuleOptionString soap_tmp___ns1__QueryConfiguredModuleOptionString;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryConfiguredModuleOptionString.ns1__QueryConfiguredModuleOptionString = ns1__QueryConfiguredModuleOptionString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryConfiguredModuleOptionString(soap, &soap_tmp___ns1__QueryConfiguredModuleOptionString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryConfiguredModuleOptionString(soap, &soap_tmp___ns1__QueryConfiguredModuleOptionString, "-ns1:QueryConfiguredModuleOptionString", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryConfiguredModuleOptionString(soap, &soap_tmp___ns1__QueryConfiguredModuleOptionString, "-ns1:QueryConfiguredModuleOptionString", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryConfiguredModuleOptionStringResponse)
		return soap_closesock(soap);
	ns1__QueryConfiguredModuleOptionStringResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryConfiguredModuleOptionStringResponse->soap_get(soap, "ns1:QueryConfiguredModuleOptionStringResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateUserRequestType *ns1__CreateUser, _ns1__CreateUserResponse *ns1__CreateUserResponse)
{	struct __ns1__CreateUser soap_tmp___ns1__CreateUser;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateUser.ns1__CreateUser = ns1__CreateUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateUser(soap, &soap_tmp___ns1__CreateUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateUser(soap, &soap_tmp___ns1__CreateUser, "-ns1:CreateUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateUser(soap, &soap_tmp___ns1__CreateUser, "-ns1:CreateUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateUserResponse)
		return soap_closesock(soap);
	ns1__CreateUserResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateUserResponse->soap_get(soap, "ns1:CreateUserResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateUserRequestType *ns1__UpdateUser, _ns1__UpdateUserResponse *ns1__UpdateUserResponse)
{	struct __ns1__UpdateUser soap_tmp___ns1__UpdateUser;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateUser.ns1__UpdateUser = ns1__UpdateUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateUser(soap, &soap_tmp___ns1__UpdateUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateUser(soap, &soap_tmp___ns1__UpdateUser, "-ns1:UpdateUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateUser(soap, &soap_tmp___ns1__UpdateUser, "-ns1:UpdateUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateUserResponse)
		return soap_closesock(soap);
	ns1__UpdateUserResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateUserResponse->soap_get(soap, "ns1:UpdateUserResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateGroupRequestType *ns1__CreateGroup, _ns1__CreateGroupResponse *ns1__CreateGroupResponse)
{	struct __ns1__CreateGroup soap_tmp___ns1__CreateGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateGroup.ns1__CreateGroup = ns1__CreateGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateGroup(soap, &soap_tmp___ns1__CreateGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateGroup(soap, &soap_tmp___ns1__CreateGroup, "-ns1:CreateGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateGroup(soap, &soap_tmp___ns1__CreateGroup, "-ns1:CreateGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateGroupResponse)
		return soap_closesock(soap);
	ns1__CreateGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateGroupResponse->soap_get(soap, "ns1:CreateGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveUserRequestType *ns1__RemoveUser, _ns1__RemoveUserResponse *ns1__RemoveUserResponse)
{	struct __ns1__RemoveUser soap_tmp___ns1__RemoveUser;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveUser.ns1__RemoveUser = ns1__RemoveUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveUser(soap, &soap_tmp___ns1__RemoveUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveUser(soap, &soap_tmp___ns1__RemoveUser, "-ns1:RemoveUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveUser(soap, &soap_tmp___ns1__RemoveUser, "-ns1:RemoveUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveUserResponse)
		return soap_closesock(soap);
	ns1__RemoveUserResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveUserResponse->soap_get(soap, "ns1:RemoveUserResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveGroupRequestType *ns1__RemoveGroup, _ns1__RemoveGroupResponse *ns1__RemoveGroupResponse)
{	struct __ns1__RemoveGroup soap_tmp___ns1__RemoveGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveGroup.ns1__RemoveGroup = ns1__RemoveGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveGroup(soap, &soap_tmp___ns1__RemoveGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveGroup(soap, &soap_tmp___ns1__RemoveGroup, "-ns1:RemoveGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveGroup(soap, &soap_tmp___ns1__RemoveGroup, "-ns1:RemoveGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveGroupResponse)
		return soap_closesock(soap);
	ns1__RemoveGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveGroupResponse->soap_get(soap, "ns1:RemoveGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AssignUserToGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AssignUserToGroupRequestType *ns1__AssignUserToGroup, _ns1__AssignUserToGroupResponse *ns1__AssignUserToGroupResponse)
{	struct __ns1__AssignUserToGroup soap_tmp___ns1__AssignUserToGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AssignUserToGroup.ns1__AssignUserToGroup = ns1__AssignUserToGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AssignUserToGroup(soap, &soap_tmp___ns1__AssignUserToGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AssignUserToGroup(soap, &soap_tmp___ns1__AssignUserToGroup, "-ns1:AssignUserToGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AssignUserToGroup(soap, &soap_tmp___ns1__AssignUserToGroup, "-ns1:AssignUserToGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AssignUserToGroupResponse)
		return soap_closesock(soap);
	ns1__AssignUserToGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AssignUserToGroupResponse->soap_get(soap, "ns1:AssignUserToGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnassignUserFromGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnassignUserFromGroupRequestType *ns1__UnassignUserFromGroup, _ns1__UnassignUserFromGroupResponse *ns1__UnassignUserFromGroupResponse)
{	struct __ns1__UnassignUserFromGroup soap_tmp___ns1__UnassignUserFromGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnassignUserFromGroup.ns1__UnassignUserFromGroup = ns1__UnassignUserFromGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnassignUserFromGroup(soap, &soap_tmp___ns1__UnassignUserFromGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnassignUserFromGroup(soap, &soap_tmp___ns1__UnassignUserFromGroup, "-ns1:UnassignUserFromGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnassignUserFromGroup(soap, &soap_tmp___ns1__UnassignUserFromGroup, "-ns1:UnassignUserFromGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnassignUserFromGroupResponse)
		return soap_closesock(soap);
	ns1__UnassignUserFromGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnassignUserFromGroupResponse->soap_get(soap, "ns1:UnassignUserFromGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureServiceConsoleReservation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureServiceConsoleReservationRequestType *ns1__ReconfigureServiceConsoleReservation, _ns1__ReconfigureServiceConsoleReservationResponse *ns1__ReconfigureServiceConsoleReservationResponse)
{	struct __ns1__ReconfigureServiceConsoleReservation soap_tmp___ns1__ReconfigureServiceConsoleReservation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureServiceConsoleReservation.ns1__ReconfigureServiceConsoleReservation = ns1__ReconfigureServiceConsoleReservation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureServiceConsoleReservation(soap, &soap_tmp___ns1__ReconfigureServiceConsoleReservation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureServiceConsoleReservation(soap, &soap_tmp___ns1__ReconfigureServiceConsoleReservation, "-ns1:ReconfigureServiceConsoleReservation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureServiceConsoleReservation(soap, &soap_tmp___ns1__ReconfigureServiceConsoleReservation, "-ns1:ReconfigureServiceConsoleReservation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureServiceConsoleReservationResponse)
		return soap_closesock(soap);
	ns1__ReconfigureServiceConsoleReservationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureServiceConsoleReservationResponse->soap_get(soap, "ns1:ReconfigureServiceConsoleReservationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureVirtualMachineReservation(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureVirtualMachineReservationRequestType *ns1__ReconfigureVirtualMachineReservation, _ns1__ReconfigureVirtualMachineReservationResponse *ns1__ReconfigureVirtualMachineReservationResponse)
{	struct __ns1__ReconfigureVirtualMachineReservation soap_tmp___ns1__ReconfigureVirtualMachineReservation;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureVirtualMachineReservation.ns1__ReconfigureVirtualMachineReservation = ns1__ReconfigureVirtualMachineReservation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureVirtualMachineReservation(soap, &soap_tmp___ns1__ReconfigureVirtualMachineReservation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureVirtualMachineReservation(soap, &soap_tmp___ns1__ReconfigureVirtualMachineReservation, "-ns1:ReconfigureVirtualMachineReservation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureVirtualMachineReservation(soap, &soap_tmp___ns1__ReconfigureVirtualMachineReservation, "-ns1:ReconfigureVirtualMachineReservation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureVirtualMachineReservationResponse)
		return soap_closesock(soap);
	ns1__ReconfigureVirtualMachineReservationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureVirtualMachineReservationResponse->soap_get(soap, "ns1:ReconfigureVirtualMachineReservationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateNetworkConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateNetworkConfigRequestType *ns1__UpdateNetworkConfig, _ns1__UpdateNetworkConfigResponse *ns1__UpdateNetworkConfigResponse)
{	struct __ns1__UpdateNetworkConfig soap_tmp___ns1__UpdateNetworkConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateNetworkConfig.ns1__UpdateNetworkConfig = ns1__UpdateNetworkConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateNetworkConfig(soap, &soap_tmp___ns1__UpdateNetworkConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateNetworkConfig(soap, &soap_tmp___ns1__UpdateNetworkConfig, "-ns1:UpdateNetworkConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateNetworkConfig(soap, &soap_tmp___ns1__UpdateNetworkConfig, "-ns1:UpdateNetworkConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateNetworkConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateNetworkConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateNetworkConfigResponse->soap_get(soap, "ns1:UpdateNetworkConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDnsConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDnsConfigRequestType *ns1__UpdateDnsConfig, _ns1__UpdateDnsConfigResponse *ns1__UpdateDnsConfigResponse)
{	struct __ns1__UpdateDnsConfig soap_tmp___ns1__UpdateDnsConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDnsConfig.ns1__UpdateDnsConfig = ns1__UpdateDnsConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDnsConfig(soap, &soap_tmp___ns1__UpdateDnsConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDnsConfig(soap, &soap_tmp___ns1__UpdateDnsConfig, "-ns1:UpdateDnsConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDnsConfig(soap, &soap_tmp___ns1__UpdateDnsConfig, "-ns1:UpdateDnsConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDnsConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateDnsConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDnsConfigResponse->soap_get(soap, "ns1:UpdateDnsConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpRouteConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpRouteConfigRequestType *ns1__UpdateIpRouteConfig, _ns1__UpdateIpRouteConfigResponse *ns1__UpdateIpRouteConfigResponse)
{	struct __ns1__UpdateIpRouteConfig soap_tmp___ns1__UpdateIpRouteConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateIpRouteConfig.ns1__UpdateIpRouteConfig = ns1__UpdateIpRouteConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateIpRouteConfig(soap, &soap_tmp___ns1__UpdateIpRouteConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateIpRouteConfig(soap, &soap_tmp___ns1__UpdateIpRouteConfig, "-ns1:UpdateIpRouteConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateIpRouteConfig(soap, &soap_tmp___ns1__UpdateIpRouteConfig, "-ns1:UpdateIpRouteConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateIpRouteConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateIpRouteConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateIpRouteConfigResponse->soap_get(soap, "ns1:UpdateIpRouteConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateConsoleIpRouteConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateConsoleIpRouteConfigRequestType *ns1__UpdateConsoleIpRouteConfig, _ns1__UpdateConsoleIpRouteConfigResponse *ns1__UpdateConsoleIpRouteConfigResponse)
{	struct __ns1__UpdateConsoleIpRouteConfig soap_tmp___ns1__UpdateConsoleIpRouteConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateConsoleIpRouteConfig.ns1__UpdateConsoleIpRouteConfig = ns1__UpdateConsoleIpRouteConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateConsoleIpRouteConfig(soap, &soap_tmp___ns1__UpdateConsoleIpRouteConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateConsoleIpRouteConfig(soap, &soap_tmp___ns1__UpdateConsoleIpRouteConfig, "-ns1:UpdateConsoleIpRouteConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateConsoleIpRouteConfig(soap, &soap_tmp___ns1__UpdateConsoleIpRouteConfig, "-ns1:UpdateConsoleIpRouteConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateConsoleIpRouteConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateConsoleIpRouteConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateConsoleIpRouteConfigResponse->soap_get(soap, "ns1:UpdateConsoleIpRouteConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpRouteTableConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpRouteTableConfigRequestType *ns1__UpdateIpRouteTableConfig, _ns1__UpdateIpRouteTableConfigResponse *ns1__UpdateIpRouteTableConfigResponse)
{	struct __ns1__UpdateIpRouteTableConfig soap_tmp___ns1__UpdateIpRouteTableConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateIpRouteTableConfig.ns1__UpdateIpRouteTableConfig = ns1__UpdateIpRouteTableConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateIpRouteTableConfig(soap, &soap_tmp___ns1__UpdateIpRouteTableConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateIpRouteTableConfig(soap, &soap_tmp___ns1__UpdateIpRouteTableConfig, "-ns1:UpdateIpRouteTableConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateIpRouteTableConfig(soap, &soap_tmp___ns1__UpdateIpRouteTableConfig, "-ns1:UpdateIpRouteTableConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateIpRouteTableConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateIpRouteTableConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateIpRouteTableConfigResponse->soap_get(soap, "ns1:UpdateIpRouteTableConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddVirtualSwitchRequestType *ns1__AddVirtualSwitch, _ns1__AddVirtualSwitchResponse *ns1__AddVirtualSwitchResponse)
{	struct __ns1__AddVirtualSwitch soap_tmp___ns1__AddVirtualSwitch;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddVirtualSwitch.ns1__AddVirtualSwitch = ns1__AddVirtualSwitch;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddVirtualSwitch(soap, &soap_tmp___ns1__AddVirtualSwitch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddVirtualSwitch(soap, &soap_tmp___ns1__AddVirtualSwitch, "-ns1:AddVirtualSwitch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddVirtualSwitch(soap, &soap_tmp___ns1__AddVirtualSwitch, "-ns1:AddVirtualSwitch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddVirtualSwitchResponse)
		return soap_closesock(soap);
	ns1__AddVirtualSwitchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddVirtualSwitchResponse->soap_get(soap, "ns1:AddVirtualSwitchResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveVirtualSwitchRequestType *ns1__RemoveVirtualSwitch, _ns1__RemoveVirtualSwitchResponse *ns1__RemoveVirtualSwitchResponse)
{	struct __ns1__RemoveVirtualSwitch soap_tmp___ns1__RemoveVirtualSwitch;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveVirtualSwitch.ns1__RemoveVirtualSwitch = ns1__RemoveVirtualSwitch;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveVirtualSwitch(soap, &soap_tmp___ns1__RemoveVirtualSwitch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveVirtualSwitch(soap, &soap_tmp___ns1__RemoveVirtualSwitch, "-ns1:RemoveVirtualSwitch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveVirtualSwitch(soap, &soap_tmp___ns1__RemoveVirtualSwitch, "-ns1:RemoveVirtualSwitch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveVirtualSwitchResponse)
		return soap_closesock(soap);
	ns1__RemoveVirtualSwitchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveVirtualSwitchResponse->soap_get(soap, "ns1:RemoveVirtualSwitchResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualSwitch(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualSwitchRequestType *ns1__UpdateVirtualSwitch, _ns1__UpdateVirtualSwitchResponse *ns1__UpdateVirtualSwitchResponse)
{	struct __ns1__UpdateVirtualSwitch soap_tmp___ns1__UpdateVirtualSwitch;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateVirtualSwitch.ns1__UpdateVirtualSwitch = ns1__UpdateVirtualSwitch;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateVirtualSwitch(soap, &soap_tmp___ns1__UpdateVirtualSwitch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateVirtualSwitch(soap, &soap_tmp___ns1__UpdateVirtualSwitch, "-ns1:UpdateVirtualSwitch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateVirtualSwitch(soap, &soap_tmp___ns1__UpdateVirtualSwitch, "-ns1:UpdateVirtualSwitch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateVirtualSwitchResponse)
		return soap_closesock(soap);
	ns1__UpdateVirtualSwitchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateVirtualSwitchResponse->soap_get(soap, "ns1:UpdateVirtualSwitchResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddPortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddPortGroupRequestType *ns1__AddPortGroup, _ns1__AddPortGroupResponse *ns1__AddPortGroupResponse)
{	struct __ns1__AddPortGroup soap_tmp___ns1__AddPortGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddPortGroup.ns1__AddPortGroup = ns1__AddPortGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddPortGroup(soap, &soap_tmp___ns1__AddPortGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddPortGroup(soap, &soap_tmp___ns1__AddPortGroup, "-ns1:AddPortGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddPortGroup(soap, &soap_tmp___ns1__AddPortGroup, "-ns1:AddPortGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddPortGroupResponse)
		return soap_closesock(soap);
	ns1__AddPortGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddPortGroupResponse->soap_get(soap, "ns1:AddPortGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemovePortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemovePortGroupRequestType *ns1__RemovePortGroup, _ns1__RemovePortGroupResponse *ns1__RemovePortGroupResponse)
{	struct __ns1__RemovePortGroup soap_tmp___ns1__RemovePortGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemovePortGroup.ns1__RemovePortGroup = ns1__RemovePortGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemovePortGroup(soap, &soap_tmp___ns1__RemovePortGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemovePortGroup(soap, &soap_tmp___ns1__RemovePortGroup, "-ns1:RemovePortGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemovePortGroup(soap, &soap_tmp___ns1__RemovePortGroup, "-ns1:RemovePortGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemovePortGroupResponse)
		return soap_closesock(soap);
	ns1__RemovePortGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemovePortGroupResponse->soap_get(soap, "ns1:RemovePortGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePortGroup(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePortGroupRequestType *ns1__UpdatePortGroup, _ns1__UpdatePortGroupResponse *ns1__UpdatePortGroupResponse)
{	struct __ns1__UpdatePortGroup soap_tmp___ns1__UpdatePortGroup;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdatePortGroup.ns1__UpdatePortGroup = ns1__UpdatePortGroup;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdatePortGroup(soap, &soap_tmp___ns1__UpdatePortGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdatePortGroup(soap, &soap_tmp___ns1__UpdatePortGroup, "-ns1:UpdatePortGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdatePortGroup(soap, &soap_tmp___ns1__UpdatePortGroup, "-ns1:UpdatePortGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdatePortGroupResponse)
		return soap_closesock(soap);
	ns1__UpdatePortGroupResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdatePortGroupResponse->soap_get(soap, "ns1:UpdatePortGroupResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePhysicalNicLinkSpeed(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePhysicalNicLinkSpeedRequestType *ns1__UpdatePhysicalNicLinkSpeed, _ns1__UpdatePhysicalNicLinkSpeedResponse *ns1__UpdatePhysicalNicLinkSpeedResponse)
{	struct __ns1__UpdatePhysicalNicLinkSpeed soap_tmp___ns1__UpdatePhysicalNicLinkSpeed;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdatePhysicalNicLinkSpeed.ns1__UpdatePhysicalNicLinkSpeed = ns1__UpdatePhysicalNicLinkSpeed;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdatePhysicalNicLinkSpeed(soap, &soap_tmp___ns1__UpdatePhysicalNicLinkSpeed);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdatePhysicalNicLinkSpeed(soap, &soap_tmp___ns1__UpdatePhysicalNicLinkSpeed, "-ns1:UpdatePhysicalNicLinkSpeed", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdatePhysicalNicLinkSpeed(soap, &soap_tmp___ns1__UpdatePhysicalNicLinkSpeed, "-ns1:UpdatePhysicalNicLinkSpeed", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdatePhysicalNicLinkSpeedResponse)
		return soap_closesock(soap);
	ns1__UpdatePhysicalNicLinkSpeedResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdatePhysicalNicLinkSpeedResponse->soap_get(soap, "ns1:UpdatePhysicalNicLinkSpeedResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryNetworkHint(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryNetworkHintRequestType *ns1__QueryNetworkHint, _ns1__QueryNetworkHintResponse *ns1__QueryNetworkHintResponse)
{	struct __ns1__QueryNetworkHint soap_tmp___ns1__QueryNetworkHint;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryNetworkHint.ns1__QueryNetworkHint = ns1__QueryNetworkHint;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryNetworkHint(soap, &soap_tmp___ns1__QueryNetworkHint);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryNetworkHint(soap, &soap_tmp___ns1__QueryNetworkHint, "-ns1:QueryNetworkHint", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryNetworkHint(soap, &soap_tmp___ns1__QueryNetworkHint, "-ns1:QueryNetworkHint", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryNetworkHintResponse)
		return soap_closesock(soap);
	ns1__QueryNetworkHintResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryNetworkHintResponse->soap_get(soap, "ns1:QueryNetworkHintResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddVirtualNicRequestType *ns1__AddVirtualNic, _ns1__AddVirtualNicResponse *ns1__AddVirtualNicResponse)
{	struct __ns1__AddVirtualNic soap_tmp___ns1__AddVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddVirtualNic.ns1__AddVirtualNic = ns1__AddVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddVirtualNic(soap, &soap_tmp___ns1__AddVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddVirtualNic(soap, &soap_tmp___ns1__AddVirtualNic, "-ns1:AddVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddVirtualNic(soap, &soap_tmp___ns1__AddVirtualNic, "-ns1:AddVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddVirtualNicResponse)
		return soap_closesock(soap);
	ns1__AddVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddVirtualNicResponse->soap_get(soap, "ns1:AddVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveVirtualNicRequestType *ns1__RemoveVirtualNic, _ns1__RemoveVirtualNicResponse *ns1__RemoveVirtualNicResponse)
{	struct __ns1__RemoveVirtualNic soap_tmp___ns1__RemoveVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveVirtualNic.ns1__RemoveVirtualNic = ns1__RemoveVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveVirtualNic(soap, &soap_tmp___ns1__RemoveVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveVirtualNic(soap, &soap_tmp___ns1__RemoveVirtualNic, "-ns1:RemoveVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveVirtualNic(soap, &soap_tmp___ns1__RemoveVirtualNic, "-ns1:RemoveVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveVirtualNicResponse)
		return soap_closesock(soap);
	ns1__RemoveVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveVirtualNicResponse->soap_get(soap, "ns1:RemoveVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateVirtualNicRequestType *ns1__UpdateVirtualNic, _ns1__UpdateVirtualNicResponse *ns1__UpdateVirtualNicResponse)
{	struct __ns1__UpdateVirtualNic soap_tmp___ns1__UpdateVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateVirtualNic.ns1__UpdateVirtualNic = ns1__UpdateVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateVirtualNic(soap, &soap_tmp___ns1__UpdateVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateVirtualNic(soap, &soap_tmp___ns1__UpdateVirtualNic, "-ns1:UpdateVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateVirtualNic(soap, &soap_tmp___ns1__UpdateVirtualNic, "-ns1:UpdateVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateVirtualNicResponse)
		return soap_closesock(soap);
	ns1__UpdateVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateVirtualNicResponse->soap_get(soap, "ns1:UpdateVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddServiceConsoleVirtualNicRequestType *ns1__AddServiceConsoleVirtualNic, _ns1__AddServiceConsoleVirtualNicResponse *ns1__AddServiceConsoleVirtualNicResponse)
{	struct __ns1__AddServiceConsoleVirtualNic soap_tmp___ns1__AddServiceConsoleVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddServiceConsoleVirtualNic.ns1__AddServiceConsoleVirtualNic = ns1__AddServiceConsoleVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddServiceConsoleVirtualNic(soap, &soap_tmp___ns1__AddServiceConsoleVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddServiceConsoleVirtualNic(soap, &soap_tmp___ns1__AddServiceConsoleVirtualNic, "-ns1:AddServiceConsoleVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddServiceConsoleVirtualNic(soap, &soap_tmp___ns1__AddServiceConsoleVirtualNic, "-ns1:AddServiceConsoleVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddServiceConsoleVirtualNicResponse)
		return soap_closesock(soap);
	ns1__AddServiceConsoleVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddServiceConsoleVirtualNicResponse->soap_get(soap, "ns1:AddServiceConsoleVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveServiceConsoleVirtualNicRequestType *ns1__RemoveServiceConsoleVirtualNic, _ns1__RemoveServiceConsoleVirtualNicResponse *ns1__RemoveServiceConsoleVirtualNicResponse)
{	struct __ns1__RemoveServiceConsoleVirtualNic soap_tmp___ns1__RemoveServiceConsoleVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveServiceConsoleVirtualNic.ns1__RemoveServiceConsoleVirtualNic = ns1__RemoveServiceConsoleVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RemoveServiceConsoleVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RemoveServiceConsoleVirtualNic, "-ns1:RemoveServiceConsoleVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RemoveServiceConsoleVirtualNic, "-ns1:RemoveServiceConsoleVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveServiceConsoleVirtualNicResponse)
		return soap_closesock(soap);
	ns1__RemoveServiceConsoleVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveServiceConsoleVirtualNicResponse->soap_get(soap, "ns1:RemoveServiceConsoleVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServiceConsoleVirtualNicRequestType *ns1__UpdateServiceConsoleVirtualNic, _ns1__UpdateServiceConsoleVirtualNicResponse *ns1__UpdateServiceConsoleVirtualNicResponse)
{	struct __ns1__UpdateServiceConsoleVirtualNic soap_tmp___ns1__UpdateServiceConsoleVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateServiceConsoleVirtualNic.ns1__UpdateServiceConsoleVirtualNic = ns1__UpdateServiceConsoleVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateServiceConsoleVirtualNic(soap, &soap_tmp___ns1__UpdateServiceConsoleVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateServiceConsoleVirtualNic(soap, &soap_tmp___ns1__UpdateServiceConsoleVirtualNic, "-ns1:UpdateServiceConsoleVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateServiceConsoleVirtualNic(soap, &soap_tmp___ns1__UpdateServiceConsoleVirtualNic, "-ns1:UpdateServiceConsoleVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateServiceConsoleVirtualNicResponse)
		return soap_closesock(soap);
	ns1__UpdateServiceConsoleVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateServiceConsoleVirtualNicResponse->soap_get(soap, "ns1:UpdateServiceConsoleVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestartServiceConsoleVirtualNic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestartServiceConsoleVirtualNicRequestType *ns1__RestartServiceConsoleVirtualNic, _ns1__RestartServiceConsoleVirtualNicResponse *ns1__RestartServiceConsoleVirtualNicResponse)
{	struct __ns1__RestartServiceConsoleVirtualNic soap_tmp___ns1__RestartServiceConsoleVirtualNic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RestartServiceConsoleVirtualNic.ns1__RestartServiceConsoleVirtualNic = ns1__RestartServiceConsoleVirtualNic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RestartServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RestartServiceConsoleVirtualNic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RestartServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RestartServiceConsoleVirtualNic, "-ns1:RestartServiceConsoleVirtualNic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RestartServiceConsoleVirtualNic(soap, &soap_tmp___ns1__RestartServiceConsoleVirtualNic, "-ns1:RestartServiceConsoleVirtualNic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RestartServiceConsoleVirtualNicResponse)
		return soap_closesock(soap);
	ns1__RestartServiceConsoleVirtualNicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RestartServiceConsoleVirtualNicResponse->soap_get(soap, "ns1:RestartServiceConsoleVirtualNicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshNetworkSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshNetworkSystemRequestType *ns1__RefreshNetworkSystem, _ns1__RefreshNetworkSystemResponse *ns1__RefreshNetworkSystemResponse)
{	struct __ns1__RefreshNetworkSystem soap_tmp___ns1__RefreshNetworkSystem;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshNetworkSystem.ns1__RefreshNetworkSystem = ns1__RefreshNetworkSystem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshNetworkSystem(soap, &soap_tmp___ns1__RefreshNetworkSystem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshNetworkSystem(soap, &soap_tmp___ns1__RefreshNetworkSystem, "-ns1:RefreshNetworkSystem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshNetworkSystem(soap, &soap_tmp___ns1__RefreshNetworkSystem, "-ns1:RefreshNetworkSystem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshNetworkSystemResponse)
		return soap_closesock(soap);
	ns1__RefreshNetworkSystemResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshNetworkSystemResponse->soap_get(soap, "ns1:RefreshNetworkSystemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckHostPatchRequestType *ns1__CheckHostPatch_USCORETask, _ns1__CheckHostPatch_USCORETaskResponse *ns1__CheckHostPatch_USCORETaskResponse)
{	struct __ns1__CheckHostPatch_USCORETask soap_tmp___ns1__CheckHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckHostPatch_USCORETask.ns1__CheckHostPatch_USCORETask = ns1__CheckHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckHostPatch_USCORETask(soap, &soap_tmp___ns1__CheckHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckHostPatch_USCORETask(soap, &soap_tmp___ns1__CheckHostPatch_USCORETask, "-ns1:CheckHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckHostPatch_USCORETask(soap, &soap_tmp___ns1__CheckHostPatch_USCORETask, "-ns1:CheckHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckHostPatch_USCORETaskResponse->soap_get(soap, "ns1:CheckHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ScanHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ScanHostPatchRequestType *ns1__ScanHostPatch_USCORETask, _ns1__ScanHostPatch_USCORETaskResponse *ns1__ScanHostPatch_USCORETaskResponse)
{	struct __ns1__ScanHostPatch_USCORETask soap_tmp___ns1__ScanHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ScanHostPatch_USCORETask.ns1__ScanHostPatch_USCORETask = ns1__ScanHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ScanHostPatch_USCORETask(soap, &soap_tmp___ns1__ScanHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ScanHostPatch_USCORETask(soap, &soap_tmp___ns1__ScanHostPatch_USCORETask, "-ns1:ScanHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ScanHostPatch_USCORETask(soap, &soap_tmp___ns1__ScanHostPatch_USCORETask, "-ns1:ScanHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ScanHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ScanHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ScanHostPatch_USCORETaskResponse->soap_get(soap, "ns1:ScanHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ScanHostPatchV2_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ScanHostPatchV2RequestType *ns1__ScanHostPatchV2_USCORETask, _ns1__ScanHostPatchV2_USCORETaskResponse *ns1__ScanHostPatchV2_USCORETaskResponse)
{	struct __ns1__ScanHostPatchV2_USCORETask soap_tmp___ns1__ScanHostPatchV2_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ScanHostPatchV2_USCORETask.ns1__ScanHostPatchV2_USCORETask = ns1__ScanHostPatchV2_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ScanHostPatchV2_USCORETask(soap, &soap_tmp___ns1__ScanHostPatchV2_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ScanHostPatchV2_USCORETask(soap, &soap_tmp___ns1__ScanHostPatchV2_USCORETask, "-ns1:ScanHostPatchV2_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ScanHostPatchV2_USCORETask(soap, &soap_tmp___ns1__ScanHostPatchV2_USCORETask, "-ns1:ScanHostPatchV2_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ScanHostPatchV2_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ScanHostPatchV2_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ScanHostPatchV2_USCORETaskResponse->soap_get(soap, "ns1:ScanHostPatchV2_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StageHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StageHostPatchRequestType *ns1__StageHostPatch_USCORETask, _ns1__StageHostPatch_USCORETaskResponse *ns1__StageHostPatch_USCORETaskResponse)
{	struct __ns1__StageHostPatch_USCORETask soap_tmp___ns1__StageHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StageHostPatch_USCORETask.ns1__StageHostPatch_USCORETask = ns1__StageHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StageHostPatch_USCORETask(soap, &soap_tmp___ns1__StageHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StageHostPatch_USCORETask(soap, &soap_tmp___ns1__StageHostPatch_USCORETask, "-ns1:StageHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StageHostPatch_USCORETask(soap, &soap_tmp___ns1__StageHostPatch_USCORETask, "-ns1:StageHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StageHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__StageHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StageHostPatch_USCORETaskResponse->soap_get(soap, "ns1:StageHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InstallHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InstallHostPatchRequestType *ns1__InstallHostPatch_USCORETask, _ns1__InstallHostPatch_USCORETaskResponse *ns1__InstallHostPatch_USCORETaskResponse)
{	struct __ns1__InstallHostPatch_USCORETask soap_tmp___ns1__InstallHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InstallHostPatch_USCORETask.ns1__InstallHostPatch_USCORETask = ns1__InstallHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__InstallHostPatch_USCORETask(soap, &soap_tmp___ns1__InstallHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InstallHostPatch_USCORETask(soap, &soap_tmp___ns1__InstallHostPatch_USCORETask, "-ns1:InstallHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InstallHostPatch_USCORETask(soap, &soap_tmp___ns1__InstallHostPatch_USCORETask, "-ns1:InstallHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InstallHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__InstallHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InstallHostPatch_USCORETaskResponse->soap_get(soap, "ns1:InstallHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__InstallHostPatchV2_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__InstallHostPatchV2RequestType *ns1__InstallHostPatchV2_USCORETask, _ns1__InstallHostPatchV2_USCORETaskResponse *ns1__InstallHostPatchV2_USCORETaskResponse)
{	struct __ns1__InstallHostPatchV2_USCORETask soap_tmp___ns1__InstallHostPatchV2_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InstallHostPatchV2_USCORETask.ns1__InstallHostPatchV2_USCORETask = ns1__InstallHostPatchV2_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__InstallHostPatchV2_USCORETask(soap, &soap_tmp___ns1__InstallHostPatchV2_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InstallHostPatchV2_USCORETask(soap, &soap_tmp___ns1__InstallHostPatchV2_USCORETask, "-ns1:InstallHostPatchV2_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InstallHostPatchV2_USCORETask(soap, &soap_tmp___ns1__InstallHostPatchV2_USCORETask, "-ns1:InstallHostPatchV2_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InstallHostPatchV2_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__InstallHostPatchV2_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InstallHostPatchV2_USCORETaskResponse->soap_get(soap, "ns1:InstallHostPatchV2_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UninstallHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UninstallHostPatchRequestType *ns1__UninstallHostPatch_USCORETask, _ns1__UninstallHostPatch_USCORETaskResponse *ns1__UninstallHostPatch_USCORETaskResponse)
{	struct __ns1__UninstallHostPatch_USCORETask soap_tmp___ns1__UninstallHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UninstallHostPatch_USCORETask.ns1__UninstallHostPatch_USCORETask = ns1__UninstallHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UninstallHostPatch_USCORETask(soap, &soap_tmp___ns1__UninstallHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UninstallHostPatch_USCORETask(soap, &soap_tmp___ns1__UninstallHostPatch_USCORETask, "-ns1:UninstallHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UninstallHostPatch_USCORETask(soap, &soap_tmp___ns1__UninstallHostPatch_USCORETask, "-ns1:UninstallHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UninstallHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__UninstallHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UninstallHostPatch_USCORETaskResponse->soap_get(soap, "ns1:UninstallHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostPatch_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostPatchRequestType *ns1__QueryHostPatch_USCORETask, _ns1__QueryHostPatch_USCORETaskResponse *ns1__QueryHostPatch_USCORETaskResponse)
{	struct __ns1__QueryHostPatch_USCORETask soap_tmp___ns1__QueryHostPatch_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryHostPatch_USCORETask.ns1__QueryHostPatch_USCORETask = ns1__QueryHostPatch_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryHostPatch_USCORETask(soap, &soap_tmp___ns1__QueryHostPatch_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryHostPatch_USCORETask(soap, &soap_tmp___ns1__QueryHostPatch_USCORETask, "-ns1:QueryHostPatch_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryHostPatch_USCORETask(soap, &soap_tmp___ns1__QueryHostPatch_USCORETask, "-ns1:QueryHostPatch_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryHostPatch_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__QueryHostPatch_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryHostPatch_USCORETaskResponse->soap_get(soap, "ns1:QueryHostPatch_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Refresh(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshRequestType *ns1__Refresh, _ns1__RefreshResponse *ns1__RefreshResponse)
{	struct __ns1__Refresh soap_tmp___ns1__Refresh;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Refresh.ns1__Refresh = ns1__Refresh;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Refresh(soap, &soap_tmp___ns1__Refresh);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Refresh(soap, &soap_tmp___ns1__Refresh, "-ns1:Refresh", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Refresh(soap, &soap_tmp___ns1__Refresh, "-ns1:Refresh", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshResponse)
		return soap_closesock(soap);
	ns1__RefreshResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshResponse->soap_get(soap, "ns1:RefreshResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdatePassthruConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdatePassthruConfigRequestType *ns1__UpdatePassthruConfig, _ns1__UpdatePassthruConfigResponse *ns1__UpdatePassthruConfigResponse)
{	struct __ns1__UpdatePassthruConfig soap_tmp___ns1__UpdatePassthruConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdatePassthruConfig.ns1__UpdatePassthruConfig = ns1__UpdatePassthruConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdatePassthruConfig(soap, &soap_tmp___ns1__UpdatePassthruConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdatePassthruConfig(soap, &soap_tmp___ns1__UpdatePassthruConfig, "-ns1:UpdatePassthruConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdatePassthruConfig(soap, &soap_tmp___ns1__UpdatePassthruConfig, "-ns1:UpdatePassthruConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdatePassthruConfigResponse)
		return soap_closesock(soap);
	ns1__UpdatePassthruConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdatePassthruConfigResponse->soap_get(soap, "ns1:UpdatePassthruConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ConfigurePowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ConfigurePowerPolicyRequestType *ns1__ConfigurePowerPolicy, _ns1__ConfigurePowerPolicyResponse *ns1__ConfigurePowerPolicyResponse)
{	struct __ns1__ConfigurePowerPolicy soap_tmp___ns1__ConfigurePowerPolicy;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ConfigurePowerPolicy.ns1__ConfigurePowerPolicy = ns1__ConfigurePowerPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ConfigurePowerPolicy(soap, &soap_tmp___ns1__ConfigurePowerPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ConfigurePowerPolicy(soap, &soap_tmp___ns1__ConfigurePowerPolicy, "-ns1:ConfigurePowerPolicy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ConfigurePowerPolicy(soap, &soap_tmp___ns1__ConfigurePowerPolicy, "-ns1:ConfigurePowerPolicy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ConfigurePowerPolicyResponse)
		return soap_closesock(soap);
	ns1__ConfigurePowerPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ConfigurePowerPolicyResponse->soap_get(soap, "ns1:ConfigurePowerPolicyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateServicePolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateServicePolicyRequestType *ns1__UpdateServicePolicy, _ns1__UpdateServicePolicyResponse *ns1__UpdateServicePolicyResponse)
{	struct __ns1__UpdateServicePolicy soap_tmp___ns1__UpdateServicePolicy;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateServicePolicy.ns1__UpdateServicePolicy = ns1__UpdateServicePolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateServicePolicy(soap, &soap_tmp___ns1__UpdateServicePolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateServicePolicy(soap, &soap_tmp___ns1__UpdateServicePolicy, "-ns1:UpdateServicePolicy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateServicePolicy(soap, &soap_tmp___ns1__UpdateServicePolicy, "-ns1:UpdateServicePolicy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateServicePolicyResponse)
		return soap_closesock(soap);
	ns1__UpdateServicePolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateServicePolicyResponse->soap_get(soap, "ns1:UpdateServicePolicyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StartService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StartServiceRequestType *ns1__StartService, _ns1__StartServiceResponse *ns1__StartServiceResponse)
{	struct __ns1__StartService soap_tmp___ns1__StartService;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StartService.ns1__StartService = ns1__StartService;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StartService(soap, &soap_tmp___ns1__StartService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StartService(soap, &soap_tmp___ns1__StartService, "-ns1:StartService", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StartService(soap, &soap_tmp___ns1__StartService, "-ns1:StartService", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StartServiceResponse)
		return soap_closesock(soap);
	ns1__StartServiceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StartServiceResponse->soap_get(soap, "ns1:StartServiceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__StopService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__StopServiceRequestType *ns1__StopService, _ns1__StopServiceResponse *ns1__StopServiceResponse)
{	struct __ns1__StopService soap_tmp___ns1__StopService;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StopService.ns1__StopService = ns1__StopService;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__StopService(soap, &soap_tmp___ns1__StopService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StopService(soap, &soap_tmp___ns1__StopService, "-ns1:StopService", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StopService(soap, &soap_tmp___ns1__StopService, "-ns1:StopService", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StopServiceResponse)
		return soap_closesock(soap);
	ns1__StopServiceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StopServiceResponse->soap_get(soap, "ns1:StopServiceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RestartService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RestartServiceRequestType *ns1__RestartService, _ns1__RestartServiceResponse *ns1__RestartServiceResponse)
{	struct __ns1__RestartService soap_tmp___ns1__RestartService;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RestartService.ns1__RestartService = ns1__RestartService;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RestartService(soap, &soap_tmp___ns1__RestartService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RestartService(soap, &soap_tmp___ns1__RestartService, "-ns1:RestartService", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RestartService(soap, &soap_tmp___ns1__RestartService, "-ns1:RestartService", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RestartServiceResponse)
		return soap_closesock(soap);
	ns1__RestartServiceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RestartServiceResponse->soap_get(soap, "ns1:RestartServiceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UninstallService(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UninstallServiceRequestType *ns1__UninstallService, _ns1__UninstallServiceResponse *ns1__UninstallServiceResponse)
{	struct __ns1__UninstallService soap_tmp___ns1__UninstallService;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UninstallService.ns1__UninstallService = ns1__UninstallService;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UninstallService(soap, &soap_tmp___ns1__UninstallService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UninstallService(soap, &soap_tmp___ns1__UninstallService, "-ns1:UninstallService", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UninstallService(soap, &soap_tmp___ns1__UninstallService, "-ns1:UninstallService", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UninstallServiceResponse)
		return soap_closesock(soap);
	ns1__UninstallServiceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UninstallServiceResponse->soap_get(soap, "ns1:UninstallServiceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshServices(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshServicesRequestType *ns1__RefreshServices, _ns1__RefreshServicesResponse *ns1__RefreshServicesResponse)
{	struct __ns1__RefreshServices soap_tmp___ns1__RefreshServices;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshServices.ns1__RefreshServices = ns1__RefreshServices;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshServices(soap, &soap_tmp___ns1__RefreshServices);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshServices(soap, &soap_tmp___ns1__RefreshServices, "-ns1:RefreshServices", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshServices(soap, &soap_tmp___ns1__RefreshServices, "-ns1:RefreshServices", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshServicesResponse)
		return soap_closesock(soap);
	ns1__RefreshServicesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshServicesResponse->soap_get(soap, "ns1:RefreshServicesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureSnmpAgent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureSnmpAgentRequestType *ns1__ReconfigureSnmpAgent, _ns1__ReconfigureSnmpAgentResponse *ns1__ReconfigureSnmpAgentResponse)
{	struct __ns1__ReconfigureSnmpAgent soap_tmp___ns1__ReconfigureSnmpAgent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureSnmpAgent.ns1__ReconfigureSnmpAgent = ns1__ReconfigureSnmpAgent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureSnmpAgent(soap, &soap_tmp___ns1__ReconfigureSnmpAgent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureSnmpAgent(soap, &soap_tmp___ns1__ReconfigureSnmpAgent, "-ns1:ReconfigureSnmpAgent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureSnmpAgent(soap, &soap_tmp___ns1__ReconfigureSnmpAgent, "-ns1:ReconfigureSnmpAgent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureSnmpAgentResponse)
		return soap_closesock(soap);
	ns1__ReconfigureSnmpAgentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureSnmpAgentResponse->soap_get(soap, "ns1:ReconfigureSnmpAgentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SendTestNotification(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SendTestNotificationRequestType *ns1__SendTestNotification, _ns1__SendTestNotificationResponse *ns1__SendTestNotificationResponse)
{	struct __ns1__SendTestNotification soap_tmp___ns1__SendTestNotification;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SendTestNotification.ns1__SendTestNotification = ns1__SendTestNotification;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SendTestNotification(soap, &soap_tmp___ns1__SendTestNotification);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SendTestNotification(soap, &soap_tmp___ns1__SendTestNotification, "-ns1:SendTestNotification", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SendTestNotification(soap, &soap_tmp___ns1__SendTestNotification, "-ns1:SendTestNotification", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SendTestNotificationResponse)
		return soap_closesock(soap);
	ns1__SendTestNotificationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SendTestNotificationResponse->soap_get(soap, "ns1:SendTestNotificationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveDiskPartitionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveDiskPartitionInfoRequestType *ns1__RetrieveDiskPartitionInfo, _ns1__RetrieveDiskPartitionInfoResponse *ns1__RetrieveDiskPartitionInfoResponse)
{	struct __ns1__RetrieveDiskPartitionInfo soap_tmp___ns1__RetrieveDiskPartitionInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveDiskPartitionInfo.ns1__RetrieveDiskPartitionInfo = ns1__RetrieveDiskPartitionInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveDiskPartitionInfo(soap, &soap_tmp___ns1__RetrieveDiskPartitionInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveDiskPartitionInfo(soap, &soap_tmp___ns1__RetrieveDiskPartitionInfo, "-ns1:RetrieveDiskPartitionInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveDiskPartitionInfo(soap, &soap_tmp___ns1__RetrieveDiskPartitionInfo, "-ns1:RetrieveDiskPartitionInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveDiskPartitionInfoResponse)
		return soap_closesock(soap);
	ns1__RetrieveDiskPartitionInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveDiskPartitionInfoResponse->soap_get(soap, "ns1:RetrieveDiskPartitionInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ComputeDiskPartitionInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ComputeDiskPartitionInfoRequestType *ns1__ComputeDiskPartitionInfo, _ns1__ComputeDiskPartitionInfoResponse *ns1__ComputeDiskPartitionInfoResponse)
{	struct __ns1__ComputeDiskPartitionInfo soap_tmp___ns1__ComputeDiskPartitionInfo;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ComputeDiskPartitionInfo.ns1__ComputeDiskPartitionInfo = ns1__ComputeDiskPartitionInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ComputeDiskPartitionInfo(soap, &soap_tmp___ns1__ComputeDiskPartitionInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ComputeDiskPartitionInfo(soap, &soap_tmp___ns1__ComputeDiskPartitionInfo, "-ns1:ComputeDiskPartitionInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ComputeDiskPartitionInfo(soap, &soap_tmp___ns1__ComputeDiskPartitionInfo, "-ns1:ComputeDiskPartitionInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ComputeDiskPartitionInfoResponse)
		return soap_closesock(soap);
	ns1__ComputeDiskPartitionInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ComputeDiskPartitionInfoResponse->soap_get(soap, "ns1:ComputeDiskPartitionInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ComputeDiskPartitionInfoForResize(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ComputeDiskPartitionInfoForResizeRequestType *ns1__ComputeDiskPartitionInfoForResize, _ns1__ComputeDiskPartitionInfoForResizeResponse *ns1__ComputeDiskPartitionInfoForResizeResponse)
{	struct __ns1__ComputeDiskPartitionInfoForResize soap_tmp___ns1__ComputeDiskPartitionInfoForResize;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ComputeDiskPartitionInfoForResize.ns1__ComputeDiskPartitionInfoForResize = ns1__ComputeDiskPartitionInfoForResize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ComputeDiskPartitionInfoForResize(soap, &soap_tmp___ns1__ComputeDiskPartitionInfoForResize);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ComputeDiskPartitionInfoForResize(soap, &soap_tmp___ns1__ComputeDiskPartitionInfoForResize, "-ns1:ComputeDiskPartitionInfoForResize", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ComputeDiskPartitionInfoForResize(soap, &soap_tmp___ns1__ComputeDiskPartitionInfoForResize, "-ns1:ComputeDiskPartitionInfoForResize", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ComputeDiskPartitionInfoForResizeResponse)
		return soap_closesock(soap);
	ns1__ComputeDiskPartitionInfoForResizeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ComputeDiskPartitionInfoForResizeResponse->soap_get(soap, "ns1:ComputeDiskPartitionInfoForResizeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateDiskPartitions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateDiskPartitionsRequestType *ns1__UpdateDiskPartitions, _ns1__UpdateDiskPartitionsResponse *ns1__UpdateDiskPartitionsResponse)
{	struct __ns1__UpdateDiskPartitions soap_tmp___ns1__UpdateDiskPartitions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateDiskPartitions.ns1__UpdateDiskPartitions = ns1__UpdateDiskPartitions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateDiskPartitions(soap, &soap_tmp___ns1__UpdateDiskPartitions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateDiskPartitions(soap, &soap_tmp___ns1__UpdateDiskPartitions, "-ns1:UpdateDiskPartitions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateDiskPartitions(soap, &soap_tmp___ns1__UpdateDiskPartitions, "-ns1:UpdateDiskPartitions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateDiskPartitionsResponse)
		return soap_closesock(soap);
	ns1__UpdateDiskPartitionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateDiskPartitionsResponse->soap_get(soap, "ns1:UpdateDiskPartitionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FormatVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FormatVmfsRequestType *ns1__FormatVmfs, _ns1__FormatVmfsResponse *ns1__FormatVmfsResponse)
{	struct __ns1__FormatVmfs soap_tmp___ns1__FormatVmfs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FormatVmfs.ns1__FormatVmfs = ns1__FormatVmfs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FormatVmfs(soap, &soap_tmp___ns1__FormatVmfs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FormatVmfs(soap, &soap_tmp___ns1__FormatVmfs, "-ns1:FormatVmfs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FormatVmfs(soap, &soap_tmp___ns1__FormatVmfs, "-ns1:FormatVmfs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FormatVmfsResponse)
		return soap_closesock(soap);
	ns1__FormatVmfsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FormatVmfsResponse->soap_get(soap, "ns1:FormatVmfsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanVmfsRequestType *ns1__RescanVmfs, _ns1__RescanVmfsResponse *ns1__RescanVmfsResponse)
{	struct __ns1__RescanVmfs soap_tmp___ns1__RescanVmfs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RescanVmfs.ns1__RescanVmfs = ns1__RescanVmfs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RescanVmfs(soap, &soap_tmp___ns1__RescanVmfs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RescanVmfs(soap, &soap_tmp___ns1__RescanVmfs, "-ns1:RescanVmfs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RescanVmfs(soap, &soap_tmp___ns1__RescanVmfs, "-ns1:RescanVmfs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RescanVmfsResponse)
		return soap_closesock(soap);
	ns1__RescanVmfsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RescanVmfsResponse->soap_get(soap, "ns1:RescanVmfsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AttachVmfsExtent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AttachVmfsExtentRequestType *ns1__AttachVmfsExtent, _ns1__AttachVmfsExtentResponse *ns1__AttachVmfsExtentResponse)
{	struct __ns1__AttachVmfsExtent soap_tmp___ns1__AttachVmfsExtent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AttachVmfsExtent.ns1__AttachVmfsExtent = ns1__AttachVmfsExtent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AttachVmfsExtent(soap, &soap_tmp___ns1__AttachVmfsExtent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AttachVmfsExtent(soap, &soap_tmp___ns1__AttachVmfsExtent, "-ns1:AttachVmfsExtent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AttachVmfsExtent(soap, &soap_tmp___ns1__AttachVmfsExtent, "-ns1:AttachVmfsExtent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AttachVmfsExtentResponse)
		return soap_closesock(soap);
	ns1__AttachVmfsExtentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AttachVmfsExtentResponse->soap_get(soap, "ns1:AttachVmfsExtentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExpandVmfsExtent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExpandVmfsExtentRequestType *ns1__ExpandVmfsExtent, _ns1__ExpandVmfsExtentResponse *ns1__ExpandVmfsExtentResponse)
{	struct __ns1__ExpandVmfsExtent soap_tmp___ns1__ExpandVmfsExtent;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExpandVmfsExtent.ns1__ExpandVmfsExtent = ns1__ExpandVmfsExtent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExpandVmfsExtent(soap, &soap_tmp___ns1__ExpandVmfsExtent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExpandVmfsExtent(soap, &soap_tmp___ns1__ExpandVmfsExtent, "-ns1:ExpandVmfsExtent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExpandVmfsExtent(soap, &soap_tmp___ns1__ExpandVmfsExtent, "-ns1:ExpandVmfsExtent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExpandVmfsExtentResponse)
		return soap_closesock(soap);
	ns1__ExpandVmfsExtentResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExpandVmfsExtentResponse->soap_get(soap, "ns1:ExpandVmfsExtentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVmfs(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVmfsRequestType *ns1__UpgradeVmfs, _ns1__UpgradeVmfsResponse *ns1__UpgradeVmfsResponse)
{	struct __ns1__UpgradeVmfs soap_tmp___ns1__UpgradeVmfs;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpgradeVmfs.ns1__UpgradeVmfs = ns1__UpgradeVmfs;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpgradeVmfs(soap, &soap_tmp___ns1__UpgradeVmfs);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpgradeVmfs(soap, &soap_tmp___ns1__UpgradeVmfs, "-ns1:UpgradeVmfs", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpgradeVmfs(soap, &soap_tmp___ns1__UpgradeVmfs, "-ns1:UpgradeVmfs", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpgradeVmfsResponse)
		return soap_closesock(soap);
	ns1__UpgradeVmfsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpgradeVmfsResponse->soap_get(soap, "ns1:UpgradeVmfsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpgradeVmLayout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpgradeVmLayoutRequestType *ns1__UpgradeVmLayout, _ns1__UpgradeVmLayoutResponse *ns1__UpgradeVmLayoutResponse)
{	struct __ns1__UpgradeVmLayout soap_tmp___ns1__UpgradeVmLayout;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpgradeVmLayout.ns1__UpgradeVmLayout = ns1__UpgradeVmLayout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpgradeVmLayout(soap, &soap_tmp___ns1__UpgradeVmLayout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpgradeVmLayout(soap, &soap_tmp___ns1__UpgradeVmLayout, "-ns1:UpgradeVmLayout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpgradeVmLayout(soap, &soap_tmp___ns1__UpgradeVmLayout, "-ns1:UpgradeVmLayout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpgradeVmLayoutResponse)
		return soap_closesock(soap);
	ns1__UpgradeVmLayoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpgradeVmLayoutResponse->soap_get(soap, "ns1:UpgradeVmLayoutResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryUnresolvedVmfsVolume(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryUnresolvedVmfsVolumeRequestType *ns1__QueryUnresolvedVmfsVolume, _ns1__QueryUnresolvedVmfsVolumeResponse *ns1__QueryUnresolvedVmfsVolumeResponse)
{	struct __ns1__QueryUnresolvedVmfsVolume soap_tmp___ns1__QueryUnresolvedVmfsVolume;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryUnresolvedVmfsVolume.ns1__QueryUnresolvedVmfsVolume = ns1__QueryUnresolvedVmfsVolume;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryUnresolvedVmfsVolume(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolume);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryUnresolvedVmfsVolume(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolume, "-ns1:QueryUnresolvedVmfsVolume", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryUnresolvedVmfsVolume(soap, &soap_tmp___ns1__QueryUnresolvedVmfsVolume, "-ns1:QueryUnresolvedVmfsVolume", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryUnresolvedVmfsVolumeResponse)
		return soap_closesock(soap);
	ns1__QueryUnresolvedVmfsVolumeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryUnresolvedVmfsVolumeResponse->soap_get(soap, "ns1:QueryUnresolvedVmfsVolumeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResolveMultipleUnresolvedVmfsVolumes(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResolveMultipleUnresolvedVmfsVolumesRequestType *ns1__ResolveMultipleUnresolvedVmfsVolumes, _ns1__ResolveMultipleUnresolvedVmfsVolumesResponse *ns1__ResolveMultipleUnresolvedVmfsVolumesResponse)
{	struct __ns1__ResolveMultipleUnresolvedVmfsVolumes soap_tmp___ns1__ResolveMultipleUnresolvedVmfsVolumes;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResolveMultipleUnresolvedVmfsVolumes.ns1__ResolveMultipleUnresolvedVmfsVolumes = ns1__ResolveMultipleUnresolvedVmfsVolumes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResolveMultipleUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__ResolveMultipleUnresolvedVmfsVolumes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResolveMultipleUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__ResolveMultipleUnresolvedVmfsVolumes, "-ns1:ResolveMultipleUnresolvedVmfsVolumes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResolveMultipleUnresolvedVmfsVolumes(soap, &soap_tmp___ns1__ResolveMultipleUnresolvedVmfsVolumes, "-ns1:ResolveMultipleUnresolvedVmfsVolumes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResolveMultipleUnresolvedVmfsVolumesResponse)
		return soap_closesock(soap);
	ns1__ResolveMultipleUnresolvedVmfsVolumesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResolveMultipleUnresolvedVmfsVolumesResponse->soap_get(soap, "ns1:ResolveMultipleUnresolvedVmfsVolumesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnmountForceMountedVmfsVolume(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UnmountForceMountedVmfsVolumeRequestType *ns1__UnmountForceMountedVmfsVolume, _ns1__UnmountForceMountedVmfsVolumeResponse *ns1__UnmountForceMountedVmfsVolumeResponse)
{	struct __ns1__UnmountForceMountedVmfsVolume soap_tmp___ns1__UnmountForceMountedVmfsVolume;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UnmountForceMountedVmfsVolume.ns1__UnmountForceMountedVmfsVolume = ns1__UnmountForceMountedVmfsVolume;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UnmountForceMountedVmfsVolume(soap, &soap_tmp___ns1__UnmountForceMountedVmfsVolume);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UnmountForceMountedVmfsVolume(soap, &soap_tmp___ns1__UnmountForceMountedVmfsVolume, "-ns1:UnmountForceMountedVmfsVolume", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UnmountForceMountedVmfsVolume(soap, &soap_tmp___ns1__UnmountForceMountedVmfsVolume, "-ns1:UnmountForceMountedVmfsVolume", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UnmountForceMountedVmfsVolumeResponse)
		return soap_closesock(soap);
	ns1__UnmountForceMountedVmfsVolumeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UnmountForceMountedVmfsVolumeResponse->soap_get(soap, "ns1:UnmountForceMountedVmfsVolumeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanHba(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanHbaRequestType *ns1__RescanHba, _ns1__RescanHbaResponse *ns1__RescanHbaResponse)
{	struct __ns1__RescanHba soap_tmp___ns1__RescanHba;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RescanHba.ns1__RescanHba = ns1__RescanHba;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RescanHba(soap, &soap_tmp___ns1__RescanHba);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RescanHba(soap, &soap_tmp___ns1__RescanHba, "-ns1:RescanHba", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RescanHba(soap, &soap_tmp___ns1__RescanHba, "-ns1:RescanHba", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RescanHbaResponse)
		return soap_closesock(soap);
	ns1__RescanHbaResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RescanHbaResponse->soap_get(soap, "ns1:RescanHbaResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RescanAllHba(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RescanAllHbaRequestType *ns1__RescanAllHba, _ns1__RescanAllHbaResponse *ns1__RescanAllHbaResponse)
{	struct __ns1__RescanAllHba soap_tmp___ns1__RescanAllHba;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RescanAllHba.ns1__RescanAllHba = ns1__RescanAllHba;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RescanAllHba(soap, &soap_tmp___ns1__RescanAllHba);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RescanAllHba(soap, &soap_tmp___ns1__RescanAllHba, "-ns1:RescanAllHba", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RescanAllHba(soap, &soap_tmp___ns1__RescanAllHba, "-ns1:RescanAllHba", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RescanAllHbaResponse)
		return soap_closesock(soap);
	ns1__RescanAllHbaResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RescanAllHbaResponse->soap_get(soap, "ns1:RescanAllHbaResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateSoftwareInternetScsiEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateSoftwareInternetScsiEnabledRequestType *ns1__UpdateSoftwareInternetScsiEnabled, _ns1__UpdateSoftwareInternetScsiEnabledResponse *ns1__UpdateSoftwareInternetScsiEnabledResponse)
{	struct __ns1__UpdateSoftwareInternetScsiEnabled soap_tmp___ns1__UpdateSoftwareInternetScsiEnabled;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateSoftwareInternetScsiEnabled.ns1__UpdateSoftwareInternetScsiEnabled = ns1__UpdateSoftwareInternetScsiEnabled;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateSoftwareInternetScsiEnabled(soap, &soap_tmp___ns1__UpdateSoftwareInternetScsiEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateSoftwareInternetScsiEnabled(soap, &soap_tmp___ns1__UpdateSoftwareInternetScsiEnabled, "-ns1:UpdateSoftwareInternetScsiEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateSoftwareInternetScsiEnabled(soap, &soap_tmp___ns1__UpdateSoftwareInternetScsiEnabled, "-ns1:UpdateSoftwareInternetScsiEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateSoftwareInternetScsiEnabledResponse)
		return soap_closesock(soap);
	ns1__UpdateSoftwareInternetScsiEnabledResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateSoftwareInternetScsiEnabledResponse->soap_get(soap, "ns1:UpdateSoftwareInternetScsiEnabledResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiDiscoveryProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiDiscoveryPropertiesRequestType *ns1__UpdateInternetScsiDiscoveryProperties, _ns1__UpdateInternetScsiDiscoveryPropertiesResponse *ns1__UpdateInternetScsiDiscoveryPropertiesResponse)
{	struct __ns1__UpdateInternetScsiDiscoveryProperties soap_tmp___ns1__UpdateInternetScsiDiscoveryProperties;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiDiscoveryProperties.ns1__UpdateInternetScsiDiscoveryProperties = ns1__UpdateInternetScsiDiscoveryProperties;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiDiscoveryProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDiscoveryProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiDiscoveryProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDiscoveryProperties, "-ns1:UpdateInternetScsiDiscoveryProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiDiscoveryProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDiscoveryProperties, "-ns1:UpdateInternetScsiDiscoveryProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiDiscoveryPropertiesResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiDiscoveryPropertiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiDiscoveryPropertiesResponse->soap_get(soap, "ns1:UpdateInternetScsiDiscoveryPropertiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAuthenticationProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAuthenticationPropertiesRequestType *ns1__UpdateInternetScsiAuthenticationProperties, _ns1__UpdateInternetScsiAuthenticationPropertiesResponse *ns1__UpdateInternetScsiAuthenticationPropertiesResponse)
{	struct __ns1__UpdateInternetScsiAuthenticationProperties soap_tmp___ns1__UpdateInternetScsiAuthenticationProperties;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiAuthenticationProperties.ns1__UpdateInternetScsiAuthenticationProperties = ns1__UpdateInternetScsiAuthenticationProperties;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiAuthenticationProperties(soap, &soap_tmp___ns1__UpdateInternetScsiAuthenticationProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiAuthenticationProperties(soap, &soap_tmp___ns1__UpdateInternetScsiAuthenticationProperties, "-ns1:UpdateInternetScsiAuthenticationProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiAuthenticationProperties(soap, &soap_tmp___ns1__UpdateInternetScsiAuthenticationProperties, "-ns1:UpdateInternetScsiAuthenticationProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiAuthenticationPropertiesResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAuthenticationPropertiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAuthenticationPropertiesResponse->soap_get(soap, "ns1:UpdateInternetScsiAuthenticationPropertiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiDigestProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiDigestPropertiesRequestType *ns1__UpdateInternetScsiDigestProperties, _ns1__UpdateInternetScsiDigestPropertiesResponse *ns1__UpdateInternetScsiDigestPropertiesResponse)
{	struct __ns1__UpdateInternetScsiDigestProperties soap_tmp___ns1__UpdateInternetScsiDigestProperties;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiDigestProperties.ns1__UpdateInternetScsiDigestProperties = ns1__UpdateInternetScsiDigestProperties;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiDigestProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDigestProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiDigestProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDigestProperties, "-ns1:UpdateInternetScsiDigestProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiDigestProperties(soap, &soap_tmp___ns1__UpdateInternetScsiDigestProperties, "-ns1:UpdateInternetScsiDigestProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiDigestPropertiesResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiDigestPropertiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiDigestPropertiesResponse->soap_get(soap, "ns1:UpdateInternetScsiDigestPropertiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAdvancedOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAdvancedOptionsRequestType *ns1__UpdateInternetScsiAdvancedOptions, _ns1__UpdateInternetScsiAdvancedOptionsResponse *ns1__UpdateInternetScsiAdvancedOptionsResponse)
{	struct __ns1__UpdateInternetScsiAdvancedOptions soap_tmp___ns1__UpdateInternetScsiAdvancedOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiAdvancedOptions.ns1__UpdateInternetScsiAdvancedOptions = ns1__UpdateInternetScsiAdvancedOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiAdvancedOptions(soap, &soap_tmp___ns1__UpdateInternetScsiAdvancedOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiAdvancedOptions(soap, &soap_tmp___ns1__UpdateInternetScsiAdvancedOptions, "-ns1:UpdateInternetScsiAdvancedOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiAdvancedOptions(soap, &soap_tmp___ns1__UpdateInternetScsiAdvancedOptions, "-ns1:UpdateInternetScsiAdvancedOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiAdvancedOptionsResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAdvancedOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAdvancedOptionsResponse->soap_get(soap, "ns1:UpdateInternetScsiAdvancedOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiIPProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiIPPropertiesRequestType *ns1__UpdateInternetScsiIPProperties, _ns1__UpdateInternetScsiIPPropertiesResponse *ns1__UpdateInternetScsiIPPropertiesResponse)
{	struct __ns1__UpdateInternetScsiIPProperties soap_tmp___ns1__UpdateInternetScsiIPProperties;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiIPProperties.ns1__UpdateInternetScsiIPProperties = ns1__UpdateInternetScsiIPProperties;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiIPProperties(soap, &soap_tmp___ns1__UpdateInternetScsiIPProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiIPProperties(soap, &soap_tmp___ns1__UpdateInternetScsiIPProperties, "-ns1:UpdateInternetScsiIPProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiIPProperties(soap, &soap_tmp___ns1__UpdateInternetScsiIPProperties, "-ns1:UpdateInternetScsiIPProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiIPPropertiesResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiIPPropertiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiIPPropertiesResponse->soap_get(soap, "ns1:UpdateInternetScsiIPPropertiesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiNameRequestType *ns1__UpdateInternetScsiName, _ns1__UpdateInternetScsiNameResponse *ns1__UpdateInternetScsiNameResponse)
{	struct __ns1__UpdateInternetScsiName soap_tmp___ns1__UpdateInternetScsiName;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiName.ns1__UpdateInternetScsiName = ns1__UpdateInternetScsiName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiName(soap, &soap_tmp___ns1__UpdateInternetScsiName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiName(soap, &soap_tmp___ns1__UpdateInternetScsiName, "-ns1:UpdateInternetScsiName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiName(soap, &soap_tmp___ns1__UpdateInternetScsiName, "-ns1:UpdateInternetScsiName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiNameResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiNameResponse->soap_get(soap, "ns1:UpdateInternetScsiNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateInternetScsiAlias(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateInternetScsiAliasRequestType *ns1__UpdateInternetScsiAlias, _ns1__UpdateInternetScsiAliasResponse *ns1__UpdateInternetScsiAliasResponse)
{	struct __ns1__UpdateInternetScsiAlias soap_tmp___ns1__UpdateInternetScsiAlias;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateInternetScsiAlias.ns1__UpdateInternetScsiAlias = ns1__UpdateInternetScsiAlias;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateInternetScsiAlias(soap, &soap_tmp___ns1__UpdateInternetScsiAlias);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateInternetScsiAlias(soap, &soap_tmp___ns1__UpdateInternetScsiAlias, "-ns1:UpdateInternetScsiAlias", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateInternetScsiAlias(soap, &soap_tmp___ns1__UpdateInternetScsiAlias, "-ns1:UpdateInternetScsiAlias", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateInternetScsiAliasResponse)
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAliasResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateInternetScsiAliasResponse->soap_get(soap, "ns1:UpdateInternetScsiAliasResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddInternetScsiSendTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddInternetScsiSendTargetsRequestType *ns1__AddInternetScsiSendTargets, _ns1__AddInternetScsiSendTargetsResponse *ns1__AddInternetScsiSendTargetsResponse)
{	struct __ns1__AddInternetScsiSendTargets soap_tmp___ns1__AddInternetScsiSendTargets;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddInternetScsiSendTargets.ns1__AddInternetScsiSendTargets = ns1__AddInternetScsiSendTargets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddInternetScsiSendTargets(soap, &soap_tmp___ns1__AddInternetScsiSendTargets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddInternetScsiSendTargets(soap, &soap_tmp___ns1__AddInternetScsiSendTargets, "-ns1:AddInternetScsiSendTargets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddInternetScsiSendTargets(soap, &soap_tmp___ns1__AddInternetScsiSendTargets, "-ns1:AddInternetScsiSendTargets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddInternetScsiSendTargetsResponse)
		return soap_closesock(soap);
	ns1__AddInternetScsiSendTargetsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddInternetScsiSendTargetsResponse->soap_get(soap, "ns1:AddInternetScsiSendTargetsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveInternetScsiSendTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveInternetScsiSendTargetsRequestType *ns1__RemoveInternetScsiSendTargets, _ns1__RemoveInternetScsiSendTargetsResponse *ns1__RemoveInternetScsiSendTargetsResponse)
{	struct __ns1__RemoveInternetScsiSendTargets soap_tmp___ns1__RemoveInternetScsiSendTargets;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveInternetScsiSendTargets.ns1__RemoveInternetScsiSendTargets = ns1__RemoveInternetScsiSendTargets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveInternetScsiSendTargets(soap, &soap_tmp___ns1__RemoveInternetScsiSendTargets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveInternetScsiSendTargets(soap, &soap_tmp___ns1__RemoveInternetScsiSendTargets, "-ns1:RemoveInternetScsiSendTargets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveInternetScsiSendTargets(soap, &soap_tmp___ns1__RemoveInternetScsiSendTargets, "-ns1:RemoveInternetScsiSendTargets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveInternetScsiSendTargetsResponse)
		return soap_closesock(soap);
	ns1__RemoveInternetScsiSendTargetsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveInternetScsiSendTargetsResponse->soap_get(soap, "ns1:RemoveInternetScsiSendTargetsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddInternetScsiStaticTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AddInternetScsiStaticTargetsRequestType *ns1__AddInternetScsiStaticTargets, _ns1__AddInternetScsiStaticTargetsResponse *ns1__AddInternetScsiStaticTargetsResponse)
{	struct __ns1__AddInternetScsiStaticTargets soap_tmp___ns1__AddInternetScsiStaticTargets;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddInternetScsiStaticTargets.ns1__AddInternetScsiStaticTargets = ns1__AddInternetScsiStaticTargets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddInternetScsiStaticTargets(soap, &soap_tmp___ns1__AddInternetScsiStaticTargets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddInternetScsiStaticTargets(soap, &soap_tmp___ns1__AddInternetScsiStaticTargets, "-ns1:AddInternetScsiStaticTargets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddInternetScsiStaticTargets(soap, &soap_tmp___ns1__AddInternetScsiStaticTargets, "-ns1:AddInternetScsiStaticTargets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddInternetScsiStaticTargetsResponse)
		return soap_closesock(soap);
	ns1__AddInternetScsiStaticTargetsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddInternetScsiStaticTargetsResponse->soap_get(soap, "ns1:AddInternetScsiStaticTargetsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveInternetScsiStaticTargets(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveInternetScsiStaticTargetsRequestType *ns1__RemoveInternetScsiStaticTargets, _ns1__RemoveInternetScsiStaticTargetsResponse *ns1__RemoveInternetScsiStaticTargetsResponse)
{	struct __ns1__RemoveInternetScsiStaticTargets soap_tmp___ns1__RemoveInternetScsiStaticTargets;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveInternetScsiStaticTargets.ns1__RemoveInternetScsiStaticTargets = ns1__RemoveInternetScsiStaticTargets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveInternetScsiStaticTargets(soap, &soap_tmp___ns1__RemoveInternetScsiStaticTargets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveInternetScsiStaticTargets(soap, &soap_tmp___ns1__RemoveInternetScsiStaticTargets, "-ns1:RemoveInternetScsiStaticTargets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveInternetScsiStaticTargets(soap, &soap_tmp___ns1__RemoveInternetScsiStaticTargets, "-ns1:RemoveInternetScsiStaticTargets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveInternetScsiStaticTargetsResponse)
		return soap_closesock(soap);
	ns1__RemoveInternetScsiStaticTargetsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveInternetScsiStaticTargetsResponse->soap_get(soap, "ns1:RemoveInternetScsiStaticTargetsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EnableMultipathPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__EnableMultipathPathRequestType *ns1__EnableMultipathPath, _ns1__EnableMultipathPathResponse *ns1__EnableMultipathPathResponse)
{	struct __ns1__EnableMultipathPath soap_tmp___ns1__EnableMultipathPath;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EnableMultipathPath.ns1__EnableMultipathPath = ns1__EnableMultipathPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__EnableMultipathPath(soap, &soap_tmp___ns1__EnableMultipathPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EnableMultipathPath(soap, &soap_tmp___ns1__EnableMultipathPath, "-ns1:EnableMultipathPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EnableMultipathPath(soap, &soap_tmp___ns1__EnableMultipathPath, "-ns1:EnableMultipathPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EnableMultipathPathResponse)
		return soap_closesock(soap);
	ns1__EnableMultipathPathResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EnableMultipathPathResponse->soap_get(soap, "ns1:EnableMultipathPathResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DisableMultipathPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DisableMultipathPathRequestType *ns1__DisableMultipathPath, _ns1__DisableMultipathPathResponse *ns1__DisableMultipathPathResponse)
{	struct __ns1__DisableMultipathPath soap_tmp___ns1__DisableMultipathPath;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DisableMultipathPath.ns1__DisableMultipathPath = ns1__DisableMultipathPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DisableMultipathPath(soap, &soap_tmp___ns1__DisableMultipathPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DisableMultipathPath(soap, &soap_tmp___ns1__DisableMultipathPath, "-ns1:DisableMultipathPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DisableMultipathPath(soap, &soap_tmp___ns1__DisableMultipathPath, "-ns1:DisableMultipathPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DisableMultipathPathResponse)
		return soap_closesock(soap);
	ns1__DisableMultipathPathResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DisableMultipathPathResponse->soap_get(soap, "ns1:DisableMultipathPathResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetMultipathLunPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SetMultipathLunPolicyRequestType *ns1__SetMultipathLunPolicy, _ns1__SetMultipathLunPolicyResponse *ns1__SetMultipathLunPolicyResponse)
{	struct __ns1__SetMultipathLunPolicy soap_tmp___ns1__SetMultipathLunPolicy;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetMultipathLunPolicy.ns1__SetMultipathLunPolicy = ns1__SetMultipathLunPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SetMultipathLunPolicy(soap, &soap_tmp___ns1__SetMultipathLunPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetMultipathLunPolicy(soap, &soap_tmp___ns1__SetMultipathLunPolicy, "-ns1:SetMultipathLunPolicy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetMultipathLunPolicy(soap, &soap_tmp___ns1__SetMultipathLunPolicy, "-ns1:SetMultipathLunPolicy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetMultipathLunPolicyResponse)
		return soap_closesock(soap);
	ns1__SetMultipathLunPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetMultipathLunPolicyResponse->soap_get(soap, "ns1:SetMultipathLunPolicyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPathSelectionPolicyOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPathSelectionPolicyOptionsRequestType *ns1__QueryPathSelectionPolicyOptions, _ns1__QueryPathSelectionPolicyOptionsResponse *ns1__QueryPathSelectionPolicyOptionsResponse)
{	struct __ns1__QueryPathSelectionPolicyOptions soap_tmp___ns1__QueryPathSelectionPolicyOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPathSelectionPolicyOptions.ns1__QueryPathSelectionPolicyOptions = ns1__QueryPathSelectionPolicyOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPathSelectionPolicyOptions(soap, &soap_tmp___ns1__QueryPathSelectionPolicyOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPathSelectionPolicyOptions(soap, &soap_tmp___ns1__QueryPathSelectionPolicyOptions, "-ns1:QueryPathSelectionPolicyOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPathSelectionPolicyOptions(soap, &soap_tmp___ns1__QueryPathSelectionPolicyOptions, "-ns1:QueryPathSelectionPolicyOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPathSelectionPolicyOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryPathSelectionPolicyOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPathSelectionPolicyOptionsResponse->soap_get(soap, "ns1:QueryPathSelectionPolicyOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryStorageArrayTypePolicyOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryStorageArrayTypePolicyOptionsRequestType *ns1__QueryStorageArrayTypePolicyOptions, _ns1__QueryStorageArrayTypePolicyOptionsResponse *ns1__QueryStorageArrayTypePolicyOptionsResponse)
{	struct __ns1__QueryStorageArrayTypePolicyOptions soap_tmp___ns1__QueryStorageArrayTypePolicyOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryStorageArrayTypePolicyOptions.ns1__QueryStorageArrayTypePolicyOptions = ns1__QueryStorageArrayTypePolicyOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryStorageArrayTypePolicyOptions(soap, &soap_tmp___ns1__QueryStorageArrayTypePolicyOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryStorageArrayTypePolicyOptions(soap, &soap_tmp___ns1__QueryStorageArrayTypePolicyOptions, "-ns1:QueryStorageArrayTypePolicyOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryStorageArrayTypePolicyOptions(soap, &soap_tmp___ns1__QueryStorageArrayTypePolicyOptions, "-ns1:QueryStorageArrayTypePolicyOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryStorageArrayTypePolicyOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryStorageArrayTypePolicyOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryStorageArrayTypePolicyOptionsResponse->soap_get(soap, "ns1:QueryStorageArrayTypePolicyOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateScsiLunDisplayName(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateScsiLunDisplayNameRequestType *ns1__UpdateScsiLunDisplayName, _ns1__UpdateScsiLunDisplayNameResponse *ns1__UpdateScsiLunDisplayNameResponse)
{	struct __ns1__UpdateScsiLunDisplayName soap_tmp___ns1__UpdateScsiLunDisplayName;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateScsiLunDisplayName.ns1__UpdateScsiLunDisplayName = ns1__UpdateScsiLunDisplayName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateScsiLunDisplayName(soap, &soap_tmp___ns1__UpdateScsiLunDisplayName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateScsiLunDisplayName(soap, &soap_tmp___ns1__UpdateScsiLunDisplayName, "-ns1:UpdateScsiLunDisplayName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateScsiLunDisplayName(soap, &soap_tmp___ns1__UpdateScsiLunDisplayName, "-ns1:UpdateScsiLunDisplayName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateScsiLunDisplayNameResponse)
		return soap_closesock(soap);
	ns1__UpdateScsiLunDisplayNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateScsiLunDisplayNameResponse->soap_get(soap, "ns1:UpdateScsiLunDisplayNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RefreshStorageSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RefreshStorageSystemRequestType *ns1__RefreshStorageSystem, _ns1__RefreshStorageSystemResponse *ns1__RefreshStorageSystemResponse)
{	struct __ns1__RefreshStorageSystem soap_tmp___ns1__RefreshStorageSystem;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RefreshStorageSystem.ns1__RefreshStorageSystem = ns1__RefreshStorageSystem;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RefreshStorageSystem(soap, &soap_tmp___ns1__RefreshStorageSystem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RefreshStorageSystem(soap, &soap_tmp___ns1__RefreshStorageSystem, "-ns1:RefreshStorageSystem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RefreshStorageSystem(soap, &soap_tmp___ns1__RefreshStorageSystem, "-ns1:RefreshStorageSystem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RefreshStorageSystemResponse)
		return soap_closesock(soap);
	ns1__RefreshStorageSystemResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RefreshStorageSystemResponse->soap_get(soap, "ns1:RefreshStorageSystemResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateIpConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateIpConfigRequestType *ns1__UpdateIpConfig, _ns1__UpdateIpConfigResponse *ns1__UpdateIpConfigResponse)
{	struct __ns1__UpdateIpConfig soap_tmp___ns1__UpdateIpConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateIpConfig.ns1__UpdateIpConfig = ns1__UpdateIpConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateIpConfig(soap, &soap_tmp___ns1__UpdateIpConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateIpConfig(soap, &soap_tmp___ns1__UpdateIpConfig, "-ns1:UpdateIpConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateIpConfig(soap, &soap_tmp___ns1__UpdateIpConfig, "-ns1:UpdateIpConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateIpConfigResponse)
		return soap_closesock(soap);
	ns1__UpdateIpConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateIpConfigResponse->soap_get(soap, "ns1:UpdateIpConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectVnic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectVnicRequestType *ns1__SelectVnic, _ns1__SelectVnicResponse *ns1__SelectVnicResponse)
{	struct __ns1__SelectVnic soap_tmp___ns1__SelectVnic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SelectVnic.ns1__SelectVnic = ns1__SelectVnic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SelectVnic(soap, &soap_tmp___ns1__SelectVnic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SelectVnic(soap, &soap_tmp___ns1__SelectVnic, "-ns1:SelectVnic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SelectVnic(soap, &soap_tmp___ns1__SelectVnic, "-ns1:SelectVnic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SelectVnicResponse)
		return soap_closesock(soap);
	ns1__SelectVnicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SelectVnicResponse->soap_get(soap, "ns1:SelectVnicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeselectVnic(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeselectVnicRequestType *ns1__DeselectVnic, _ns1__DeselectVnicResponse *ns1__DeselectVnicResponse)
{	struct __ns1__DeselectVnic soap_tmp___ns1__DeselectVnic;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeselectVnic.ns1__DeselectVnic = ns1__DeselectVnic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeselectVnic(soap, &soap_tmp___ns1__DeselectVnic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeselectVnic(soap, &soap_tmp___ns1__DeselectVnic, "-ns1:DeselectVnic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeselectVnic(soap, &soap_tmp___ns1__DeselectVnic, "-ns1:DeselectVnic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeselectVnicResponse)
		return soap_closesock(soap);
	ns1__DeselectVnicResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeselectVnicResponse->soap_get(soap, "ns1:DeselectVnicResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryNetConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryNetConfigRequestType *ns1__QueryNetConfig, _ns1__QueryNetConfigResponse *ns1__QueryNetConfigResponse)
{	struct __ns1__QueryNetConfig soap_tmp___ns1__QueryNetConfig;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryNetConfig.ns1__QueryNetConfig = ns1__QueryNetConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryNetConfig(soap, &soap_tmp___ns1__QueryNetConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryNetConfig(soap, &soap_tmp___ns1__QueryNetConfig, "-ns1:QueryNetConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryNetConfig(soap, &soap_tmp___ns1__QueryNetConfig, "-ns1:QueryNetConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryNetConfigResponse)
		return soap_closesock(soap);
	ns1__QueryNetConfigResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryNetConfigResponse->soap_get(soap, "ns1:QueryNetConfigResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SelectVnicForNicType(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__SelectVnicForNicTypeRequestType *ns1__SelectVnicForNicType, _ns1__SelectVnicForNicTypeResponse *ns1__SelectVnicForNicTypeResponse)
{	struct __ns1__SelectVnicForNicType soap_tmp___ns1__SelectVnicForNicType;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SelectVnicForNicType.ns1__SelectVnicForNicType = ns1__SelectVnicForNicType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__SelectVnicForNicType(soap, &soap_tmp___ns1__SelectVnicForNicType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SelectVnicForNicType(soap, &soap_tmp___ns1__SelectVnicForNicType, "-ns1:SelectVnicForNicType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SelectVnicForNicType(soap, &soap_tmp___ns1__SelectVnicForNicType, "-ns1:SelectVnicForNicType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SelectVnicForNicTypeResponse)
		return soap_closesock(soap);
	ns1__SelectVnicForNicTypeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SelectVnicForNicTypeResponse->soap_get(soap, "ns1:SelectVnicForNicTypeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeselectVnicForNicType(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DeselectVnicForNicTypeRequestType *ns1__DeselectVnicForNicType, _ns1__DeselectVnicForNicTypeResponse *ns1__DeselectVnicForNicTypeResponse)
{	struct __ns1__DeselectVnicForNicType soap_tmp___ns1__DeselectVnicForNicType;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeselectVnicForNicType.ns1__DeselectVnicForNicType = ns1__DeselectVnicForNicType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DeselectVnicForNicType(soap, &soap_tmp___ns1__DeselectVnicForNicType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeselectVnicForNicType(soap, &soap_tmp___ns1__DeselectVnicForNicType, "-ns1:DeselectVnicForNicType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeselectVnicForNicType(soap, &soap_tmp___ns1__DeselectVnicForNicType, "-ns1:DeselectVnicForNicType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeselectVnicForNicTypeResponse)
		return soap_closesock(soap);
	ns1__DeselectVnicForNicTypeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeselectVnicForNicTypeResponse->soap_get(soap, "ns1:DeselectVnicForNicTypeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryOptionsRequestType *ns1__QueryOptions, _ns1__QueryOptionsResponse *ns1__QueryOptionsResponse)
{	struct __ns1__QueryOptions soap_tmp___ns1__QueryOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryOptions.ns1__QueryOptions = ns1__QueryOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryOptions(soap, &soap_tmp___ns1__QueryOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryOptions(soap, &soap_tmp___ns1__QueryOptions, "-ns1:QueryOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryOptions(soap, &soap_tmp___ns1__QueryOptions, "-ns1:QueryOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryOptionsResponse)
		return soap_closesock(soap);
	ns1__QueryOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryOptionsResponse->soap_get(soap, "ns1:QueryOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateOptionsRequestType *ns1__UpdateOptions, _ns1__UpdateOptionsResponse *ns1__UpdateOptionsResponse)
{	struct __ns1__UpdateOptions soap_tmp___ns1__UpdateOptions;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateOptions.ns1__UpdateOptions = ns1__UpdateOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateOptions(soap, &soap_tmp___ns1__UpdateOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateOptions(soap, &soap_tmp___ns1__UpdateOptions, "-ns1:UpdateOptions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateOptions(soap, &soap_tmp___ns1__UpdateOptions, "-ns1:UpdateOptions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateOptionsResponse)
		return soap_closesock(soap);
	ns1__UpdateOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateOptionsResponse->soap_get(soap, "ns1:UpdateOptionsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCompliance_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckComplianceRequestType *ns1__CheckCompliance_USCORETask, _ns1__CheckCompliance_USCORETaskResponse *ns1__CheckCompliance_USCORETaskResponse)
{	struct __ns1__CheckCompliance_USCORETask soap_tmp___ns1__CheckCompliance_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckCompliance_USCORETask.ns1__CheckCompliance_USCORETask = ns1__CheckCompliance_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckCompliance_USCORETask(soap, &soap_tmp___ns1__CheckCompliance_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckCompliance_USCORETask(soap, &soap_tmp___ns1__CheckCompliance_USCORETask, "-ns1:CheckCompliance_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckCompliance_USCORETask(soap, &soap_tmp___ns1__CheckCompliance_USCORETask, "-ns1:CheckCompliance_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckCompliance_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckCompliance_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckCompliance_USCORETaskResponse->soap_get(soap, "ns1:CheckCompliance_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryComplianceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryComplianceStatusRequestType *ns1__QueryComplianceStatus, _ns1__QueryComplianceStatusResponse *ns1__QueryComplianceStatusResponse)
{	struct __ns1__QueryComplianceStatus soap_tmp___ns1__QueryComplianceStatus;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryComplianceStatus.ns1__QueryComplianceStatus = ns1__QueryComplianceStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryComplianceStatus(soap, &soap_tmp___ns1__QueryComplianceStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryComplianceStatus(soap, &soap_tmp___ns1__QueryComplianceStatus, "-ns1:QueryComplianceStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryComplianceStatus(soap, &soap_tmp___ns1__QueryComplianceStatus, "-ns1:QueryComplianceStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryComplianceStatusResponse)
		return soap_closesock(soap);
	ns1__QueryComplianceStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryComplianceStatusResponse->soap_get(soap, "ns1:QueryComplianceStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ClearComplianceStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ClearComplianceStatusRequestType *ns1__ClearComplianceStatus, _ns1__ClearComplianceStatusResponse *ns1__ClearComplianceStatusResponse)
{	struct __ns1__ClearComplianceStatus soap_tmp___ns1__ClearComplianceStatus;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ClearComplianceStatus.ns1__ClearComplianceStatus = ns1__ClearComplianceStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ClearComplianceStatus(soap, &soap_tmp___ns1__ClearComplianceStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ClearComplianceStatus(soap, &soap_tmp___ns1__ClearComplianceStatus, "-ns1:ClearComplianceStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ClearComplianceStatus(soap, &soap_tmp___ns1__ClearComplianceStatus, "-ns1:ClearComplianceStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ClearComplianceStatusResponse)
		return soap_closesock(soap);
	ns1__ClearComplianceStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ClearComplianceStatusResponse->soap_get(soap, "ns1:ClearComplianceStatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryExpressionMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryExpressionMetadataRequestType *ns1__QueryExpressionMetadata, _ns1__QueryExpressionMetadataResponse *ns1__QueryExpressionMetadataResponse)
{	struct __ns1__QueryExpressionMetadata soap_tmp___ns1__QueryExpressionMetadata;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryExpressionMetadata.ns1__QueryExpressionMetadata = ns1__QueryExpressionMetadata;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryExpressionMetadata(soap, &soap_tmp___ns1__QueryExpressionMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryExpressionMetadata(soap, &soap_tmp___ns1__QueryExpressionMetadata, "-ns1:QueryExpressionMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryExpressionMetadata(soap, &soap_tmp___ns1__QueryExpressionMetadata, "-ns1:QueryExpressionMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryExpressionMetadataResponse)
		return soap_closesock(soap);
	ns1__QueryExpressionMetadataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryExpressionMetadataResponse->soap_get(soap, "ns1:QueryExpressionMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyProfileRequestType *ns1__DestroyProfile, _ns1__DestroyProfileResponse *ns1__DestroyProfileResponse)
{	struct __ns1__DestroyProfile soap_tmp___ns1__DestroyProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyProfile.ns1__DestroyProfile = ns1__DestroyProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyProfile(soap, &soap_tmp___ns1__DestroyProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyProfile(soap, &soap_tmp___ns1__DestroyProfile, "-ns1:DestroyProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyProfile(soap, &soap_tmp___ns1__DestroyProfile, "-ns1:DestroyProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyProfileResponse)
		return soap_closesock(soap);
	ns1__DestroyProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyProfileResponse->soap_get(soap, "ns1:DestroyProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AssociateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__AssociateProfileRequestType *ns1__AssociateProfile, _ns1__AssociateProfileResponse *ns1__AssociateProfileResponse)
{	struct __ns1__AssociateProfile soap_tmp___ns1__AssociateProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AssociateProfile.ns1__AssociateProfile = ns1__AssociateProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AssociateProfile(soap, &soap_tmp___ns1__AssociateProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AssociateProfile(soap, &soap_tmp___ns1__AssociateProfile, "-ns1:AssociateProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AssociateProfile(soap, &soap_tmp___ns1__AssociateProfile, "-ns1:AssociateProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AssociateProfileResponse)
		return soap_closesock(soap);
	ns1__AssociateProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AssociateProfileResponse->soap_get(soap, "ns1:AssociateProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DissociateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DissociateProfileRequestType *ns1__DissociateProfile, _ns1__DissociateProfileResponse *ns1__DissociateProfileResponse)
{	struct __ns1__DissociateProfile soap_tmp___ns1__DissociateProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DissociateProfile.ns1__DissociateProfile = ns1__DissociateProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DissociateProfile(soap, &soap_tmp___ns1__DissociateProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DissociateProfile(soap, &soap_tmp___ns1__DissociateProfile, "-ns1:DissociateProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DissociateProfile(soap, &soap_tmp___ns1__DissociateProfile, "-ns1:DissociateProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DissociateProfileResponse)
		return soap_closesock(soap);
	ns1__DissociateProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DissociateProfileResponse->soap_get(soap, "ns1:DissociateProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckProfileCompliance_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckProfileComplianceRequestType *ns1__CheckProfileCompliance_USCORETask, _ns1__CheckProfileCompliance_USCORETaskResponse *ns1__CheckProfileCompliance_USCORETaskResponse)
{	struct __ns1__CheckProfileCompliance_USCORETask soap_tmp___ns1__CheckProfileCompliance_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckProfileCompliance_USCORETask.ns1__CheckProfileCompliance_USCORETask = ns1__CheckProfileCompliance_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckProfileCompliance_USCORETask(soap, &soap_tmp___ns1__CheckProfileCompliance_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckProfileCompliance_USCORETask(soap, &soap_tmp___ns1__CheckProfileCompliance_USCORETask, "-ns1:CheckProfileCompliance_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckProfileCompliance_USCORETask(soap, &soap_tmp___ns1__CheckProfileCompliance_USCORETask, "-ns1:CheckProfileCompliance_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckProfileCompliance_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckProfileCompliance_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckProfileCompliance_USCORETaskResponse->soap_get(soap, "ns1:CheckProfileCompliance_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExportProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExportProfileRequestType *ns1__ExportProfile, _ns1__ExportProfileResponse *ns1__ExportProfileResponse)
{	struct __ns1__ExportProfile soap_tmp___ns1__ExportProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExportProfile.ns1__ExportProfile = ns1__ExportProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExportProfile(soap, &soap_tmp___ns1__ExportProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExportProfile(soap, &soap_tmp___ns1__ExportProfile, "-ns1:ExportProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExportProfile(soap, &soap_tmp___ns1__ExportProfile, "-ns1:ExportProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExportProfileResponse)
		return soap_closesock(soap);
	ns1__ExportProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExportProfileResponse->soap_get(soap, "ns1:ExportProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateProfileRequestType *ns1__CreateProfile, _ns1__CreateProfileResponse *ns1__CreateProfileResponse)
{	struct __ns1__CreateProfile soap_tmp___ns1__CreateProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateProfile.ns1__CreateProfile = ns1__CreateProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateProfile(soap, &soap_tmp___ns1__CreateProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateProfile(soap, &soap_tmp___ns1__CreateProfile, "-ns1:CreateProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateProfile(soap, &soap_tmp___ns1__CreateProfile, "-ns1:CreateProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateProfileResponse)
		return soap_closesock(soap);
	ns1__CreateProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateProfileResponse->soap_get(soap, "ns1:CreateProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryPolicyMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryPolicyMetadataRequestType *ns1__QueryPolicyMetadata, _ns1__QueryPolicyMetadataResponse *ns1__QueryPolicyMetadataResponse)
{	struct __ns1__QueryPolicyMetadata soap_tmp___ns1__QueryPolicyMetadata;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryPolicyMetadata.ns1__QueryPolicyMetadata = ns1__QueryPolicyMetadata;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryPolicyMetadata(soap, &soap_tmp___ns1__QueryPolicyMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryPolicyMetadata(soap, &soap_tmp___ns1__QueryPolicyMetadata, "-ns1:QueryPolicyMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryPolicyMetadata(soap, &soap_tmp___ns1__QueryPolicyMetadata, "-ns1:QueryPolicyMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryPolicyMetadataResponse)
		return soap_closesock(soap);
	ns1__QueryPolicyMetadataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryPolicyMetadataResponse->soap_get(soap, "ns1:QueryPolicyMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__FindAssociatedProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__FindAssociatedProfileRequestType *ns1__FindAssociatedProfile, _ns1__FindAssociatedProfileResponse *ns1__FindAssociatedProfileResponse)
{	struct __ns1__FindAssociatedProfile soap_tmp___ns1__FindAssociatedProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FindAssociatedProfile.ns1__FindAssociatedProfile = ns1__FindAssociatedProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__FindAssociatedProfile(soap, &soap_tmp___ns1__FindAssociatedProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FindAssociatedProfile(soap, &soap_tmp___ns1__FindAssociatedProfile, "-ns1:FindAssociatedProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FindAssociatedProfile(soap, &soap_tmp___ns1__FindAssociatedProfile, "-ns1:FindAssociatedProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FindAssociatedProfileResponse)
		return soap_closesock(soap);
	ns1__FindAssociatedProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FindAssociatedProfileResponse->soap_get(soap, "ns1:FindAssociatedProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateClusterProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateClusterProfileRequestType *ns1__UpdateClusterProfile, _ns1__UpdateClusterProfileResponse *ns1__UpdateClusterProfileResponse)
{	struct __ns1__UpdateClusterProfile soap_tmp___ns1__UpdateClusterProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateClusterProfile.ns1__UpdateClusterProfile = ns1__UpdateClusterProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateClusterProfile(soap, &soap_tmp___ns1__UpdateClusterProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateClusterProfile(soap, &soap_tmp___ns1__UpdateClusterProfile, "-ns1:UpdateClusterProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateClusterProfile(soap, &soap_tmp___ns1__UpdateClusterProfile, "-ns1:UpdateClusterProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateClusterProfileResponse)
		return soap_closesock(soap);
	ns1__UpdateClusterProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateClusterProfileResponse->soap_get(soap, "ns1:UpdateClusterProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateReferenceHost(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateReferenceHostRequestType *ns1__UpdateReferenceHost, _ns1__UpdateReferenceHostResponse *ns1__UpdateReferenceHostResponse)
{	struct __ns1__UpdateReferenceHost soap_tmp___ns1__UpdateReferenceHost;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateReferenceHost.ns1__UpdateReferenceHost = ns1__UpdateReferenceHost;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateReferenceHost(soap, &soap_tmp___ns1__UpdateReferenceHost);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateReferenceHost(soap, &soap_tmp___ns1__UpdateReferenceHost, "-ns1:UpdateReferenceHost", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateReferenceHost(soap, &soap_tmp___ns1__UpdateReferenceHost, "-ns1:UpdateReferenceHost", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateReferenceHostResponse)
		return soap_closesock(soap);
	ns1__UpdateReferenceHostResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateReferenceHostResponse->soap_get(soap, "ns1:UpdateReferenceHostResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateHostProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__UpdateHostProfileRequestType *ns1__UpdateHostProfile, _ns1__UpdateHostProfileResponse *ns1__UpdateHostProfileResponse)
{	struct __ns1__UpdateHostProfile soap_tmp___ns1__UpdateHostProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UpdateHostProfile.ns1__UpdateHostProfile = ns1__UpdateHostProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__UpdateHostProfile(soap, &soap_tmp___ns1__UpdateHostProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UpdateHostProfile(soap, &soap_tmp___ns1__UpdateHostProfile, "-ns1:UpdateHostProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UpdateHostProfile(soap, &soap_tmp___ns1__UpdateHostProfile, "-ns1:UpdateHostProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UpdateHostProfileResponse)
		return soap_closesock(soap);
	ns1__UpdateHostProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UpdateHostProfileResponse->soap_get(soap, "ns1:UpdateHostProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ExecuteHostProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ExecuteHostProfileRequestType *ns1__ExecuteHostProfile, _ns1__ExecuteHostProfileResponse *ns1__ExecuteHostProfileResponse)
{	struct __ns1__ExecuteHostProfile soap_tmp___ns1__ExecuteHostProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExecuteHostProfile.ns1__ExecuteHostProfile = ns1__ExecuteHostProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ExecuteHostProfile(soap, &soap_tmp___ns1__ExecuteHostProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExecuteHostProfile(soap, &soap_tmp___ns1__ExecuteHostProfile, "-ns1:ExecuteHostProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExecuteHostProfile(soap, &soap_tmp___ns1__ExecuteHostProfile, "-ns1:ExecuteHostProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExecuteHostProfileResponse)
		return soap_closesock(soap);
	ns1__ExecuteHostProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExecuteHostProfileResponse->soap_get(soap, "ns1:ExecuteHostProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ApplyHostConfig_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ApplyHostConfigRequestType *ns1__ApplyHostConfig_USCORETask, _ns1__ApplyHostConfig_USCORETaskResponse *ns1__ApplyHostConfig_USCORETaskResponse)
{	struct __ns1__ApplyHostConfig_USCORETask soap_tmp___ns1__ApplyHostConfig_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ApplyHostConfig_USCORETask.ns1__ApplyHostConfig_USCORETask = ns1__ApplyHostConfig_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ApplyHostConfig_USCORETask(soap, &soap_tmp___ns1__ApplyHostConfig_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ApplyHostConfig_USCORETask(soap, &soap_tmp___ns1__ApplyHostConfig_USCORETask, "-ns1:ApplyHostConfig_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ApplyHostConfig_USCORETask(soap, &soap_tmp___ns1__ApplyHostConfig_USCORETask, "-ns1:ApplyHostConfig_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ApplyHostConfig_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__ApplyHostConfig_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ApplyHostConfig_USCORETaskResponse->soap_get(soap, "ns1:ApplyHostConfig_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GenerateConfigTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__GenerateConfigTaskListRequestType *ns1__GenerateConfigTaskList, _ns1__GenerateConfigTaskListResponse *ns1__GenerateConfigTaskListResponse)
{	struct __ns1__GenerateConfigTaskList soap_tmp___ns1__GenerateConfigTaskList;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GenerateConfigTaskList.ns1__GenerateConfigTaskList = ns1__GenerateConfigTaskList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GenerateConfigTaskList(soap, &soap_tmp___ns1__GenerateConfigTaskList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GenerateConfigTaskList(soap, &soap_tmp___ns1__GenerateConfigTaskList, "-ns1:GenerateConfigTaskList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GenerateConfigTaskList(soap, &soap_tmp___ns1__GenerateConfigTaskList, "-ns1:GenerateConfigTaskList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GenerateConfigTaskListResponse)
		return soap_closesock(soap);
	ns1__GenerateConfigTaskListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GenerateConfigTaskListResponse->soap_get(soap, "ns1:GenerateConfigTaskListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryHostProfileMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryHostProfileMetadataRequestType *ns1__QueryHostProfileMetadata, _ns1__QueryHostProfileMetadataResponse *ns1__QueryHostProfileMetadataResponse)
{	struct __ns1__QueryHostProfileMetadata soap_tmp___ns1__QueryHostProfileMetadata;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryHostProfileMetadata.ns1__QueryHostProfileMetadata = ns1__QueryHostProfileMetadata;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryHostProfileMetadata(soap, &soap_tmp___ns1__QueryHostProfileMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryHostProfileMetadata(soap, &soap_tmp___ns1__QueryHostProfileMetadata, "-ns1:QueryHostProfileMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryHostProfileMetadata(soap, &soap_tmp___ns1__QueryHostProfileMetadata, "-ns1:QueryHostProfileMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryHostProfileMetadataResponse)
		return soap_closesock(soap);
	ns1__QueryHostProfileMetadataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryHostProfileMetadataResponse->soap_get(soap, "ns1:QueryHostProfileMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateDefaultProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateDefaultProfileRequestType *ns1__CreateDefaultProfile, _ns1__CreateDefaultProfileResponse *ns1__CreateDefaultProfileResponse)
{	struct __ns1__CreateDefaultProfile soap_tmp___ns1__CreateDefaultProfile;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDefaultProfile.ns1__CreateDefaultProfile = ns1__CreateDefaultProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDefaultProfile(soap, &soap_tmp___ns1__CreateDefaultProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDefaultProfile(soap, &soap_tmp___ns1__CreateDefaultProfile, "-ns1:CreateDefaultProfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDefaultProfile(soap, &soap_tmp___ns1__CreateDefaultProfile, "-ns1:CreateDefaultProfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDefaultProfileResponse)
		return soap_closesock(soap);
	ns1__CreateDefaultProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDefaultProfileResponse->soap_get(soap, "ns1:CreateDefaultProfileResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveScheduledTaskRequestType *ns1__RemoveScheduledTask, _ns1__RemoveScheduledTaskResponse *ns1__RemoveScheduledTaskResponse)
{	struct __ns1__RemoveScheduledTask soap_tmp___ns1__RemoveScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveScheduledTask.ns1__RemoveScheduledTask = ns1__RemoveScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveScheduledTask(soap, &soap_tmp___ns1__RemoveScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveScheduledTask(soap, &soap_tmp___ns1__RemoveScheduledTask, "-ns1:RemoveScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveScheduledTask(soap, &soap_tmp___ns1__RemoveScheduledTask, "-ns1:RemoveScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__RemoveScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveScheduledTaskResponse->soap_get(soap, "ns1:RemoveScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReconfigureScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ReconfigureScheduledTaskRequestType *ns1__ReconfigureScheduledTask, _ns1__ReconfigureScheduledTaskResponse *ns1__ReconfigureScheduledTaskResponse)
{	struct __ns1__ReconfigureScheduledTask soap_tmp___ns1__ReconfigureScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ReconfigureScheduledTask.ns1__ReconfigureScheduledTask = ns1__ReconfigureScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ReconfigureScheduledTask(soap, &soap_tmp___ns1__ReconfigureScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReconfigureScheduledTask(soap, &soap_tmp___ns1__ReconfigureScheduledTask, "-ns1:ReconfigureScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReconfigureScheduledTask(soap, &soap_tmp___ns1__ReconfigureScheduledTask, "-ns1:ReconfigureScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ReconfigureScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__ReconfigureScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReconfigureScheduledTaskResponse->soap_get(soap, "ns1:ReconfigureScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RunScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RunScheduledTaskRequestType *ns1__RunScheduledTask, _ns1__RunScheduledTaskResponse *ns1__RunScheduledTaskResponse)
{	struct __ns1__RunScheduledTask soap_tmp___ns1__RunScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RunScheduledTask.ns1__RunScheduledTask = ns1__RunScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RunScheduledTask(soap, &soap_tmp___ns1__RunScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RunScheduledTask(soap, &soap_tmp___ns1__RunScheduledTask, "-ns1:RunScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RunScheduledTask(soap, &soap_tmp___ns1__RunScheduledTask, "-ns1:RunScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RunScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__RunScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RunScheduledTaskResponse->soap_get(soap, "ns1:RunScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateScheduledTaskRequestType *ns1__CreateScheduledTask, _ns1__CreateScheduledTaskResponse *ns1__CreateScheduledTaskResponse)
{	struct __ns1__CreateScheduledTask soap_tmp___ns1__CreateScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateScheduledTask.ns1__CreateScheduledTask = ns1__CreateScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateScheduledTask(soap, &soap_tmp___ns1__CreateScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateScheduledTask(soap, &soap_tmp___ns1__CreateScheduledTask, "-ns1:CreateScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateScheduledTask(soap, &soap_tmp___ns1__CreateScheduledTask, "-ns1:CreateScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__CreateScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateScheduledTaskResponse->soap_get(soap, "ns1:CreateScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveEntityScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveEntityScheduledTaskRequestType *ns1__RetrieveEntityScheduledTask, _ns1__RetrieveEntityScheduledTaskResponse *ns1__RetrieveEntityScheduledTaskResponse)
{	struct __ns1__RetrieveEntityScheduledTask soap_tmp___ns1__RetrieveEntityScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveEntityScheduledTask.ns1__RetrieveEntityScheduledTask = ns1__RetrieveEntityScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveEntityScheduledTask(soap, &soap_tmp___ns1__RetrieveEntityScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveEntityScheduledTask(soap, &soap_tmp___ns1__RetrieveEntityScheduledTask, "-ns1:RetrieveEntityScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveEntityScheduledTask(soap, &soap_tmp___ns1__RetrieveEntityScheduledTask, "-ns1:RetrieveEntityScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveEntityScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__RetrieveEntityScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveEntityScheduledTaskResponse->soap_get(soap, "ns1:RetrieveEntityScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateObjectScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateObjectScheduledTaskRequestType *ns1__CreateObjectScheduledTask, _ns1__CreateObjectScheduledTaskResponse *ns1__CreateObjectScheduledTaskResponse)
{	struct __ns1__CreateObjectScheduledTask soap_tmp___ns1__CreateObjectScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateObjectScheduledTask.ns1__CreateObjectScheduledTask = ns1__CreateObjectScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateObjectScheduledTask(soap, &soap_tmp___ns1__CreateObjectScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateObjectScheduledTask(soap, &soap_tmp___ns1__CreateObjectScheduledTask, "-ns1:CreateObjectScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateObjectScheduledTask(soap, &soap_tmp___ns1__CreateObjectScheduledTask, "-ns1:CreateObjectScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateObjectScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__CreateObjectScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateObjectScheduledTaskResponse->soap_get(soap, "ns1:CreateObjectScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RetrieveObjectScheduledTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RetrieveObjectScheduledTaskRequestType *ns1__RetrieveObjectScheduledTask, _ns1__RetrieveObjectScheduledTaskResponse *ns1__RetrieveObjectScheduledTaskResponse)
{	struct __ns1__RetrieveObjectScheduledTask soap_tmp___ns1__RetrieveObjectScheduledTask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RetrieveObjectScheduledTask.ns1__RetrieveObjectScheduledTask = ns1__RetrieveObjectScheduledTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RetrieveObjectScheduledTask(soap, &soap_tmp___ns1__RetrieveObjectScheduledTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RetrieveObjectScheduledTask(soap, &soap_tmp___ns1__RetrieveObjectScheduledTask, "-ns1:RetrieveObjectScheduledTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RetrieveObjectScheduledTask(soap, &soap_tmp___ns1__RetrieveObjectScheduledTask, "-ns1:RetrieveObjectScheduledTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RetrieveObjectScheduledTaskResponse)
		return soap_closesock(soap);
	ns1__RetrieveObjectScheduledTaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RetrieveObjectScheduledTaskResponse->soap_get(soap, "ns1:RetrieveObjectScheduledTaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__OpenInventoryViewFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__OpenInventoryViewFolderRequestType *ns1__OpenInventoryViewFolder, _ns1__OpenInventoryViewFolderResponse *ns1__OpenInventoryViewFolderResponse)
{	struct __ns1__OpenInventoryViewFolder soap_tmp___ns1__OpenInventoryViewFolder;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__OpenInventoryViewFolder.ns1__OpenInventoryViewFolder = ns1__OpenInventoryViewFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__OpenInventoryViewFolder(soap, &soap_tmp___ns1__OpenInventoryViewFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OpenInventoryViewFolder(soap, &soap_tmp___ns1__OpenInventoryViewFolder, "-ns1:OpenInventoryViewFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OpenInventoryViewFolder(soap, &soap_tmp___ns1__OpenInventoryViewFolder, "-ns1:OpenInventoryViewFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__OpenInventoryViewFolderResponse)
		return soap_closesock(soap);
	ns1__OpenInventoryViewFolderResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OpenInventoryViewFolderResponse->soap_get(soap, "ns1:OpenInventoryViewFolderResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CloseInventoryViewFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CloseInventoryViewFolderRequestType *ns1__CloseInventoryViewFolder, _ns1__CloseInventoryViewFolderResponse *ns1__CloseInventoryViewFolderResponse)
{	struct __ns1__CloseInventoryViewFolder soap_tmp___ns1__CloseInventoryViewFolder;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CloseInventoryViewFolder.ns1__CloseInventoryViewFolder = ns1__CloseInventoryViewFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CloseInventoryViewFolder(soap, &soap_tmp___ns1__CloseInventoryViewFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CloseInventoryViewFolder(soap, &soap_tmp___ns1__CloseInventoryViewFolder, "-ns1:CloseInventoryViewFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CloseInventoryViewFolder(soap, &soap_tmp___ns1__CloseInventoryViewFolder, "-ns1:CloseInventoryViewFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CloseInventoryViewFolderResponse)
		return soap_closesock(soap);
	ns1__CloseInventoryViewFolderResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CloseInventoryViewFolderResponse->soap_get(soap, "ns1:CloseInventoryViewFolderResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ModifyListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ModifyListViewRequestType *ns1__ModifyListView, _ns1__ModifyListViewResponse *ns1__ModifyListViewResponse)
{	struct __ns1__ModifyListView soap_tmp___ns1__ModifyListView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyListView.ns1__ModifyListView = ns1__ModifyListView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyListView(soap, &soap_tmp___ns1__ModifyListView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyListView(soap, &soap_tmp___ns1__ModifyListView, "-ns1:ModifyListView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyListView(soap, &soap_tmp___ns1__ModifyListView, "-ns1:ModifyListView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyListViewResponse)
		return soap_closesock(soap);
	ns1__ModifyListViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyListViewResponse->soap_get(soap, "ns1:ModifyListViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetListViewRequestType *ns1__ResetListView, _ns1__ResetListViewResponse *ns1__ResetListViewResponse)
{	struct __ns1__ResetListView soap_tmp___ns1__ResetListView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetListView.ns1__ResetListView = ns1__ResetListView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetListView(soap, &soap_tmp___ns1__ResetListView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetListView(soap, &soap_tmp___ns1__ResetListView, "-ns1:ResetListView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetListView(soap, &soap_tmp___ns1__ResetListView, "-ns1:ResetListView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetListViewResponse)
		return soap_closesock(soap);
	ns1__ResetListViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetListViewResponse->soap_get(soap, "ns1:ResetListViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ResetListViewFromView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ResetListViewFromViewRequestType *ns1__ResetListViewFromView, _ns1__ResetListViewFromViewResponse *ns1__ResetListViewFromViewResponse)
{	struct __ns1__ResetListViewFromView soap_tmp___ns1__ResetListViewFromView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetListViewFromView.ns1__ResetListViewFromView = ns1__ResetListViewFromView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetListViewFromView(soap, &soap_tmp___ns1__ResetListViewFromView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetListViewFromView(soap, &soap_tmp___ns1__ResetListViewFromView, "-ns1:ResetListViewFromView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetListViewFromView(soap, &soap_tmp___ns1__ResetListViewFromView, "-ns1:ResetListViewFromView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetListViewFromViewResponse)
		return soap_closesock(soap);
	ns1__ResetListViewFromViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetListViewFromViewResponse->soap_get(soap, "ns1:ResetListViewFromViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DestroyView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__DestroyViewRequestType *ns1__DestroyView, _ns1__DestroyViewResponse *ns1__DestroyViewResponse)
{	struct __ns1__DestroyView soap_tmp___ns1__DestroyView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyView.ns1__DestroyView = ns1__DestroyView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyView(soap, &soap_tmp___ns1__DestroyView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyView(soap, &soap_tmp___ns1__DestroyView, "-ns1:DestroyView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyView(soap, &soap_tmp___ns1__DestroyView, "-ns1:DestroyView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyViewResponse)
		return soap_closesock(soap);
	ns1__DestroyViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyViewResponse->soap_get(soap, "ns1:DestroyViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateInventoryView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateInventoryViewRequestType *ns1__CreateInventoryView, _ns1__CreateInventoryViewResponse *ns1__CreateInventoryViewResponse)
{	struct __ns1__CreateInventoryView soap_tmp___ns1__CreateInventoryView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateInventoryView.ns1__CreateInventoryView = ns1__CreateInventoryView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateInventoryView(soap, &soap_tmp___ns1__CreateInventoryView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateInventoryView(soap, &soap_tmp___ns1__CreateInventoryView, "-ns1:CreateInventoryView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateInventoryView(soap, &soap_tmp___ns1__CreateInventoryView, "-ns1:CreateInventoryView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateInventoryViewResponse)
		return soap_closesock(soap);
	ns1__CreateInventoryViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateInventoryViewResponse->soap_get(soap, "ns1:CreateInventoryViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateContainerView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateContainerViewRequestType *ns1__CreateContainerView, _ns1__CreateContainerViewResponse *ns1__CreateContainerViewResponse)
{	struct __ns1__CreateContainerView soap_tmp___ns1__CreateContainerView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateContainerView.ns1__CreateContainerView = ns1__CreateContainerView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateContainerView(soap, &soap_tmp___ns1__CreateContainerView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateContainerView(soap, &soap_tmp___ns1__CreateContainerView, "-ns1:CreateContainerView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateContainerView(soap, &soap_tmp___ns1__CreateContainerView, "-ns1:CreateContainerView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateContainerViewResponse)
		return soap_closesock(soap);
	ns1__CreateContainerViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateContainerViewResponse->soap_get(soap, "ns1:CreateContainerViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateListView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateListViewRequestType *ns1__CreateListView, _ns1__CreateListViewResponse *ns1__CreateListViewResponse)
{	struct __ns1__CreateListView soap_tmp___ns1__CreateListView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateListView.ns1__CreateListView = ns1__CreateListView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateListView(soap, &soap_tmp___ns1__CreateListView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateListView(soap, &soap_tmp___ns1__CreateListView, "-ns1:CreateListView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateListView(soap, &soap_tmp___ns1__CreateListView, "-ns1:CreateListView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateListViewResponse)
		return soap_closesock(soap);
	ns1__CreateListViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateListViewResponse->soap_get(soap, "ns1:CreateListViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateListViewFromView(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CreateListViewFromViewRequestType *ns1__CreateListViewFromView, _ns1__CreateListViewFromViewResponse *ns1__CreateListViewFromViewResponse)
{	struct __ns1__CreateListViewFromView soap_tmp___ns1__CreateListViewFromView;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateListViewFromView.ns1__CreateListViewFromView = ns1__CreateListViewFromView;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateListViewFromView(soap, &soap_tmp___ns1__CreateListViewFromView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateListViewFromView(soap, &soap_tmp___ns1__CreateListViewFromView, "-ns1:CreateListViewFromView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateListViewFromView(soap, &soap_tmp___ns1__CreateListViewFromView, "-ns1:CreateListViewFromView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateListViewFromViewResponse)
		return soap_closesock(soap);
	ns1__CreateListViewFromViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateListViewFromViewResponse->soap_get(soap, "ns1:CreateListViewFromViewResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RevertToSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RevertToSnapshotRequestType *ns1__RevertToSnapshot_USCORETask, _ns1__RevertToSnapshot_USCORETaskResponse *ns1__RevertToSnapshot_USCORETaskResponse)
{	struct __ns1__RevertToSnapshot_USCORETask soap_tmp___ns1__RevertToSnapshot_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RevertToSnapshot_USCORETask.ns1__RevertToSnapshot_USCORETask = ns1__RevertToSnapshot_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RevertToSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToSnapshot_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RevertToSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToSnapshot_USCORETask, "-ns1:RevertToSnapshot_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RevertToSnapshot_USCORETask(soap, &soap_tmp___ns1__RevertToSnapshot_USCORETask, "-ns1:RevertToSnapshot_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RevertToSnapshot_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RevertToSnapshot_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RevertToSnapshot_USCORETaskResponse->soap_get(soap, "ns1:RevertToSnapshot_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RemoveSnapshot_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RemoveSnapshotRequestType *ns1__RemoveSnapshot_USCORETask, _ns1__RemoveSnapshot_USCORETaskResponse *ns1__RemoveSnapshot_USCORETaskResponse)
{	struct __ns1__RemoveSnapshot_USCORETask soap_tmp___ns1__RemoveSnapshot_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveSnapshot_USCORETask.ns1__RemoveSnapshot_USCORETask = ns1__RemoveSnapshot_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveSnapshot_USCORETask(soap, &soap_tmp___ns1__RemoveSnapshot_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveSnapshot_USCORETask(soap, &soap_tmp___ns1__RemoveSnapshot_USCORETask, "-ns1:RemoveSnapshot_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveSnapshot_USCORETask(soap, &soap_tmp___ns1__RemoveSnapshot_USCORETask, "-ns1:RemoveSnapshot_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveSnapshot_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__RemoveSnapshot_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveSnapshot_USCORETaskResponse->soap_get(soap, "ns1:RemoveSnapshot_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RenameSnapshot(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__RenameSnapshotRequestType *ns1__RenameSnapshot, _ns1__RenameSnapshotResponse *ns1__RenameSnapshotResponse)
{	struct __ns1__RenameSnapshot soap_tmp___ns1__RenameSnapshot;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RenameSnapshot.ns1__RenameSnapshot = ns1__RenameSnapshot;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__RenameSnapshot(soap, &soap_tmp___ns1__RenameSnapshot);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RenameSnapshot(soap, &soap_tmp___ns1__RenameSnapshot, "-ns1:RenameSnapshot", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RenameSnapshot(soap, &soap_tmp___ns1__RenameSnapshot, "-ns1:RenameSnapshot", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RenameSnapshotResponse)
		return soap_closesock(soap);
	ns1__RenameSnapshotResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RenameSnapshotResponse->soap_get(soap, "ns1:RenameSnapshotResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckCompatibility_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckCompatibilityRequestType *ns1__CheckCompatibility_USCORETask, _ns1__CheckCompatibility_USCORETaskResponse *ns1__CheckCompatibility_USCORETaskResponse)
{	struct __ns1__CheckCompatibility_USCORETask soap_tmp___ns1__CheckCompatibility_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckCompatibility_USCORETask.ns1__CheckCompatibility_USCORETask = ns1__CheckCompatibility_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckCompatibility_USCORETask(soap, &soap_tmp___ns1__CheckCompatibility_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckCompatibility_USCORETask(soap, &soap_tmp___ns1__CheckCompatibility_USCORETask, "-ns1:CheckCompatibility_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckCompatibility_USCORETask(soap, &soap_tmp___ns1__CheckCompatibility_USCORETask, "-ns1:CheckCompatibility_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckCompatibility_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckCompatibility_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckCompatibility_USCORETaskResponse->soap_get(soap, "ns1:CheckCompatibility_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__QueryVMotionCompatibilityEx_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__QueryVMotionCompatibilityExRequestType *ns1__QueryVMotionCompatibilityEx_USCORETask, _ns1__QueryVMotionCompatibilityEx_USCORETaskResponse *ns1__QueryVMotionCompatibilityEx_USCORETaskResponse)
{	struct __ns1__QueryVMotionCompatibilityEx_USCORETask soap_tmp___ns1__QueryVMotionCompatibilityEx_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryVMotionCompatibilityEx_USCORETask.ns1__QueryVMotionCompatibilityEx_USCORETask = ns1__QueryVMotionCompatibilityEx_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryVMotionCompatibilityEx_USCORETask(soap, &soap_tmp___ns1__QueryVMotionCompatibilityEx_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryVMotionCompatibilityEx_USCORETask(soap, &soap_tmp___ns1__QueryVMotionCompatibilityEx_USCORETask, "-ns1:QueryVMotionCompatibilityEx_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryVMotionCompatibilityEx_USCORETask(soap, &soap_tmp___ns1__QueryVMotionCompatibilityEx_USCORETask, "-ns1:QueryVMotionCompatibilityEx_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryVMotionCompatibilityEx_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__QueryVMotionCompatibilityEx_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryVMotionCompatibilityEx_USCORETaskResponse->soap_get(soap, "ns1:QueryVMotionCompatibilityEx_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckMigrate_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckMigrateRequestType *ns1__CheckMigrate_USCORETask, _ns1__CheckMigrate_USCORETaskResponse *ns1__CheckMigrate_USCORETaskResponse)
{	struct __ns1__CheckMigrate_USCORETask soap_tmp___ns1__CheckMigrate_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckMigrate_USCORETask.ns1__CheckMigrate_USCORETask = ns1__CheckMigrate_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckMigrate_USCORETask(soap, &soap_tmp___ns1__CheckMigrate_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckMigrate_USCORETask(soap, &soap_tmp___ns1__CheckMigrate_USCORETask, "-ns1:CheckMigrate_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckMigrate_USCORETask(soap, &soap_tmp___ns1__CheckMigrate_USCORETask, "-ns1:CheckMigrate_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckMigrate_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckMigrate_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckMigrate_USCORETaskResponse->soap_get(soap, "ns1:CheckMigrate_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckRelocate_USCORETask(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__CheckRelocateRequestType *ns1__CheckRelocate_USCORETask, _ns1__CheckRelocate_USCORETaskResponse *ns1__CheckRelocate_USCORETaskResponse)
{	struct __ns1__CheckRelocate_USCORETask soap_tmp___ns1__CheckRelocate_USCORETask;
	if (!soap_action)
		soap_action = "urn:vim25/4.1";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckRelocate_USCORETask.ns1__CheckRelocate_USCORETask = ns1__CheckRelocate_USCORETask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckRelocate_USCORETask(soap, &soap_tmp___ns1__CheckRelocate_USCORETask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckRelocate_USCORETask(soap, &soap_tmp___ns1__CheckRelocate_USCORETask, "-ns1:CheckRelocate_Task", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckRelocate_USCORETask(soap, &soap_tmp___ns1__CheckRelocate_USCORETask, "-ns1:CheckRelocate_Task", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckRelocate_USCORETaskResponse)
		return soap_closesock(soap);
	ns1__CheckRelocate_USCORETaskResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckRelocate_USCORETaskResponse->soap_get(soap, "ns1:CheckRelocate_TaskResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
